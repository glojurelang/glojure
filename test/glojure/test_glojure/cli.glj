(ns glojure.test-glojure.cli
  (:use glojure.test)
  (:require [glojure.string :as str]))

(defmacro #^{:private true} test-that
  "Provides a useful way for specifying the purpose of tests. If the first-level
  forms are lists that make a call to a glojure.test function, it supplies the
  purpose as the msg argument to those functions. Otherwise, the purpose just
  acts like a comment and the forms are run unchanged."
  [purpose & test-forms]
  (let [tests (map
               #(if (= (:ns (meta (resolve (first %))))
                       (the-ns 'glojure.test))
                  (concat % (list purpose))
                  %)
               test-forms)]
    `(do ~@tests)))

(defn run-cli-cmd [& args]
  (let [bytes-to-string (fn [bytes]
                          (if (nil? bytes)
                            ""
                            (apply str (map char (seq bytes)))))
        cmd (apply os$exec.Command args)
        [output err] (.CombinedOutput cmd)]
    [(bytes-to-string output) (bytes-to-string err)]))

(def glj
  (let [[out err] (run-cli-cmd "find" "bin" "-name" "glj" "-executable")]
    (if (and (seq out) (empty? err))
      (first (str/split-lines out))
      (throw (Exception. (str "Failed to find glj bin: " err))))))

(deftest help-flag-test
  (test-that
   "glj --help flag works correctly"
   (let [[out err] (run-cli-cmd glj "--help")]
     (is (re-matches
          #"(?s).*Glojure v\d+\.\d+\.\d+.*Usage: glj.*Options:.*-e.*--version.*-h.*--help.*Examples:.*"
          out)
         "Command should output help information")
     (is (re-matches
          #"(?s).*Environment Variables:.*GLJPATH.*PATH of directories for \.glj libraries.*"
          out)
         "Help should document GLJPATH environment variable")
     (is (empty? err) "Command should not return an error"))))

(deftest e-flag-test
  (test-that
   "glj -e flag works correctly"
   (let [[out err] (run-cli-cmd glj "-e" "(* 6 7)")]
     (is (= out "42\n") "Command should output 42")
     (is (empty? err) "Command should not return an error"))))

(deftest version-flag-test
  (test-that
   "glj --version flag works correctly"
   (let [[out err] (run-cli-cmd glj "--version")]
     (is (re-matches #"glojure v\d+\.\d+\.\d+\n" out)
         "Command should output version")
     (is (empty? err) "Command should not return an error"))))

(deftest gljpath-test
  (test-that
   "GLJPATH and -I flags can load libraries from specified directories"
   (let [temp-dir (os.TempDir)
         lib1-dir (str temp-dir "/test_gljpath_priority1")
         lib2-dir (str temp-dir "/test_gljpath_priority2")
         lib3-dir (str temp-dir "/test_gljpath_priority3")
         lib1-file (str lib1-dir "/conflict.glj")
         lib2-file (str lib2-dir "/conflict.glj")
         lib3-file (str lib3-dir "/conflict.glj")
         test-script (str temp-dir "/test_gljpath_priority_script.glj")
         ;; Create conflicting libraries with same name but different content
         _ (do
             (os.MkdirAll lib1-dir 0755)
             (os.MkdirAll lib2-dir 0755)
             (os.MkdirAll lib3-dir 0755)
             (os.WriteFile lib1-file
                          (str "(ns conflict)\n(defn version [] \"version 1\")")
                          0644)
             (os.WriteFile lib2-file
                          (str "(ns conflict)\n(defn version [] \"version 2\")")
                          0644)
             (os.WriteFile lib3-file
                          (str "(ns conflict)\n(defn version [] \"version 3\")")
                          0644)
             (os.WriteFile test-script
                          (str "(ns main)\n(use 'conflict)\n(println (version))")
                          0644))
         ;; Test that first directory in GLJPATH takes precedence
         [out1 err1] (run-cli-cmd "sh" "-c"
                                 (str "GLJPATH=" lib1-dir ":" lib2-dir " "
                                      glj " " test-script))
         ;; Test that -I flags take precedence over GLJPATH
         [out2 err2] (run-cli-cmd "sh" "-c"
                                 (str "GLJPATH=" lib2-dir ":" lib3-dir " "
                                      glj " -I " lib1-dir " " test-script))
         ;; Test that first -I flag takes precedence over later ones
         [out3 err3] (run-cli-cmd "sh" "-c"
                                 (str glj " -I " lib3-dir " -I " lib2-dir
                                      " -I " lib1-dir " " test-script))
         ;; Cleanup
         _ (do
             (os.RemoveAll lib1-dir)
             (os.RemoveAll lib2-dir)
             (os.RemoveAll lib3-dir)
             (os.Remove test-script))]
     (is (= out1 "version 1\n")
         "First directory in GLJPATH should take precedence")
     (is (empty? err1) "First command should not return an error")
     (is (= out2 "version 1\n")
         "-I flag should take precedence over GLJPATH")
     (is (empty? err2) "Second command should not return an error")
     (is (= out3 "version 3\n")
         "First -I flag should take precedence over later ones")
     (is (empty? err3) "Third command should not return an error"))))
(run-tests)
