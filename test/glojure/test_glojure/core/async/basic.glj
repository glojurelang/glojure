(ns glojure.test-glojure.core.async.basic
  (:use glojure.test)
  (:require [glojure.core.async :as a]))

(defn- chan-with
  [val]
  (let [c (a/chan 1)]
    (a/>! c val)
    c))

(defn- closed-chan
  []
  (let [c (a/chan)]
    (a/close! c)
    c))

(deftest simple-go
  (is (= 42 (a/<! (a/go 42)))))

;; FIX offer and poll... they aren't as dumb as you thought

(deftest offer!
  (is (true? (a/offer! (a/chan 1) 42)) "offer! should return true if accepted")
  (is (nil? (a/offer! (a/chan) 42)) "offer! should return nil if blocked"))

(deftest poll!
  (is (= 42 (a/poll! (chan-with 42))) "poll! should return val if available")
  (is (nil? (a/poll! (closed-chan))) "poll! should return nil if channel is closed")
  (is (nil? (a/poll! (a/chan))) "poll! should return nil if blocked"))

(deftest alts!
  (let [c (a/chan 1)
        _ (a/>! c 42)
        [v ch] (a/alts! [c])]
    (is (= 42 v))
    (is (= c ch)))
  (let [rc (a/chan)
        wc (a/chan 1)
        [v ch] (a/alts! [rc [wc 42]])]
    (is (= true v))
    (is (= wc ch)))
  (let [rc (a/chan)
        [v ch] (a/alts! [rc] :default 42)]))

(deftest alt!
  (let [wc (a/chan 1)
        [rc1 rc2 rc3] (repeatedly 3 #(a/chan))
        val 42
        res (a/alt!
              [rc1 rc2] ([v ch] [:read v ch])
              rc3 ([v] v)
              [[wc val]] :wrote
              :default :none-ready)]
    (is (= :wrote res)))
  (let [ch (a/chan 2)
        _ (a/>! ch :init)
        val 42
        err (try
              (a/alt!
                ch :read
                [[ch val]] :wrote)
              nil
              (catch go/any x
                x))]
    (is (not (nil? err)) "duplicate ports should throw")))

(run-tests)
