// Code generated by glojure codegen. DO NOT EDIT.

package uuid

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	runtime "github.com/glojurelang/glojure/pkg/runtime"
	reflect "reflect"
)

func init() {
	runtime.RegisterNSLoader("clojure/uuid", LoadNS)
}

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}

func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

func checkArityGTE(args []any, min int) {
	if len(args) < min {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "clojure.uuid"
func LoadNS() {
	// Check if already AOT-loaded
	if ns := lang.FindNamespace(lang.NewSymbol("clojure.uuid")); ns != nil {
		if meta := ns.Meta(); meta != nil {
			if aotLoaded := meta.ValAt(lang.NewKeyword("aot-loaded")); aotLoaded != nil {
				return // Already loaded, skip reinitialization
			}
		}
	}
	sym_clojure_DOT_core := lang.NewSymbol("clojure.core")
	sym_clojure_DOT_uuid := lang.NewSymbol("clojure.uuid")
	sym_default_DASH_uuid_DASH_reader := lang.NewSymbol("default-uuid-reader")
	sym_form := lang.NewSymbol("form")
	sym_string_QMARK_ := lang.NewSymbol("string?")
	kw_arglists := lang.NewKeyword("arglists")
	kw_column := lang.NewKeyword("column")
	kw_end_DASH_column := lang.NewKeyword("end-column")
	kw_end_DASH_line := lang.NewKeyword("end-line")
	kw_file := lang.NewKeyword("file")
	kw_line := lang.NewKeyword("line")
	kw_name := lang.NewKeyword("name")
	kw_ns := lang.NewKeyword("ns")
	kw_private := lang.NewKeyword("private")
	kw_rettag := lang.NewKeyword("rettag")
	// var clojure.core/string?
	var_clojure_DOT_core_string_QMARK_ := lang.InternVarName(sym_clojure_DOT_core, sym_string_QMARK_)
	// var clojure.uuid/default-uuid-reader
	var_clojure_DOT_uuid_default_DASH_uuid_DASH_reader := lang.InternVarName(sym_clojure_DOT_uuid, sym_default_DASH_uuid_DASH_reader)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	// reference reflect to avoid unused import error
	_ = reflect.TypeOf
	ns := lang.FindOrCreateNamespace(sym_clojure_DOT_uuid)
	_ = ns
	// default-uuid-reader
	{
		tmp0 := sym_default_DASH_uuid_DASH_reader.WithMeta(lang.NewMap(kw_arglists, lang.NewList(lang.NewVector(sym_form)), kw_file, "clojure/uuid.glj", kw_ns, lang.FindOrCreateNamespace(sym_clojure_DOT_uuid), kw_name, sym_default_DASH_uuid_DASH_reader, kw_end_DASH_column, int(26), kw_column, int(8), kw_line, int(11), kw_end_DASH_line, int(11), kw_private, true)).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			tmp4 := checkDerefVar(var_clojure_DOT_core_string_QMARK_)
			tmp5 := lang.Apply(tmp4, []any{v2})
			if lang.IsTruthy(tmp5) {
				tmp6 := lang.Apply(nil, []any{v2})
				tmp3 = tmp6
			} else {
				tmp7 := lang.Apply(lang.NewIllegalArgumentError, []any{"#uuid data reader expected string"})
				panic(tmp7)
			}
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_clojure_DOT_uuid_default_DASH_uuid_DASH_reader = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_clojure_DOT_uuid_default_DASH_uuid_DASH_reader.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}

	// Mark namespace as AOT-loaded
	if ns := lang.FindNamespace(lang.NewSymbol("clojure.uuid")); ns != nil {
		// Set metadata directly
		meta := ns.Meta()
		if meta == nil {
			meta = lang.NewMap()
		}
		ns.ResetMeta(meta.Assoc(lang.NewKeyword("aot-loaded"), true).(lang.IPersistentMap))
	}
}
