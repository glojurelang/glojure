;   Copyright (c) Rich Hickey. All rights reserved.
;   The use and distribution terms for this software are covered by the
;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;   which can be found in the file epl-v10.html at the root of this distribution.
;   By using this software in any fashion, you are agreeing to be bound by
;   the terms of this license.
;   You must not remove this notice, or any other, from this software.

(in-ns 'glojure.core)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; printing ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(set! *warn-on-reflection* true)
(def ^:dynamic
 ^{:doc "*print-length* controls how many items of each collection the
  printer will print. If it is bound to logical false, there is no
  limit. Otherwise, it must be bound to an integer indicating the maximum
  number of items of each collection to print. If a collection contains
  more items, the printer will print items up to the limit followed by
  '...' to represent the remaining items. The root binding is nil
  indicating no limit."
   :added "1.0"}
 *print-length* nil)

(def ^:dynamic
 ^{:doc "*print-level* controls how many levels deep the printer will
  print nested objects. If it is bound to logical false, there is no
  limit. Otherwise, it must be bound to an integer indicating the maximum
  level to print. Each argument to print is at level 0; if an argument is a
  collection, its items are at level 1; and so on. If an object is a
  collection and is at a level greater than or equal to the value bound to
  *print-level*, the printer prints '#' to represent it. The root binding
  is nil indicating no limit."
   :added "1.0"}
 *print-level* nil)

(def ^:dynamic *verbose-defrecords* false)

(def ^:dynamic
 ^{:doc "*print-namespace-maps* controls whether the printer will print
  namespace map literal syntax. It defaults to false, but the REPL binds
  to true."
   :added "1.9"}
 *print-namespace-maps* false)

(defn- print-sequential [^string begin, print-one, ^string sep, ^string end, sequence, ^Writer w]
  (binding [*print-level* (and (not *print-dup*) *print-level* (dec *print-level*))]
    (if (and *print-level* (neg? *print-level*))
      (glojure.lang.WriteWriter w "#")
      (do
        (glojure.lang.WriteWriter w begin)
        (when-let [xs (seq sequence)]
          (if (and (not *print-dup*) *print-length*)
            (loop [[x & xs] xs
                   print-length *print-length*]
              (if (zero? print-length)
                (glojure.lang.WriteWriter w "...")
                (do
                  (print-one x w)
                  (when xs
                    (glojure.lang.WriteWriter w sep)
                    (recur xs (dec print-length))))))
            (loop [[x & xs] xs]
              (print-one x w)
              (when xs
                (glojure.lang.WriteWriter w sep)
                (recur xs)))))
        (glojure.lang.WriteWriter w end)))))

(defn- print-meta [o, ^Writer w]
  (when-let [m (meta o)]
    (when (and (pos? (count m))
               (or *print-dup*
                   (and *print-meta* *print-readably*)))
      (glojure.lang.WriteWriter w "^")
      (if (and (= (count m) 1) (:tag m))
          (pr-on (:tag m) w)
          (pr-on m w))
      (glojure.lang.WriteWriter w " "))))

(defn print-simple [o, ^Writer w]
  (print-meta o w)
  (glojure.lang.WriteWriter w (str o)))

(defmethod print-method :default [o, ^Writer w]
  (if (instance? glojure.lang.IObj o)
    (print-method (vary-meta o #(dissoc % :type)) w)
    (print-simple o w)))

(defmethod print-method nil [o, ^Writer w]
  (glojure.lang.WriteWriter w "nil"))

(defmethod print-dup nil [o w] (print-method o w))

(defn print-ctor [o print-args ^Writer w]
  (glojure.lang.WriteWriter w "#=(")
  (glojure.lang.WriteWriter w (.Name ^reflect.Type (class o)))
  (glojure.lang.WriteWriter w ". ")
  (print-args o w)
  (glojure.lang.WriteWriter w ")"))

(defn- print-tagged-object [o rep ^Writer w]
  (when (instance? glojure.lang.IMeta o)
    (print-meta o w))
  (glojure.lang.WriteWriter w "#object[")
  (let [c (class o)]
    (if false
      (print-method (.Name c) w)
      (glojure.lang.WriteWriter w (.Name c))))
  (glojure.lang.WriteWriter w " ")
  (glojure.lang.WriteWriter w (format "0x%x " (github.com$glojurelang$glojure$pkg$lang.IdentityHash o)))
  (print-method rep w)
  (glojure.lang.WriteWriter w "]"))

(defn- print-object [o, ^Writer w]
  (print-tagged-object o (str o) w))

(defmethod print-method github.com$glojurelang$glojure$pkg$lang.Object [o, ^Writer w]
  (print-object o w))

(defmethod print-method glojure.lang.Keyword [o, ^Writer w]
  (glojure.lang.WriteWriter w (str o)))

(defmethod print-dup glojure.lang.Keyword [o w] (print-method o w))

(defmethod print-method go/int [o w] (.write w (str o))) 
(defmethod print-method uint [o w] (.write w (str o))) 
(defmethod print-method uint8 [o w] (.write w (str o))) 
(defmethod print-method uint16 [o w] (.write w (str o))) 
(defmethod print-method uint32 [o w] (.write w (str o))) 
(defmethod print-method uint64 [o w] (.write w (str o))) 
(defmethod print-method int8 [o w] (.write w (str o))) 
(defmethod print-method int16 [o w] (.write w (str o))) 
(defmethod print-method int32 [o w] (.write w (str o))) 
(defmethod print-method int64 [o w] (.write w (str o))) 
(defmethod print-method go/byte [o w] (.write w (str o))) 
(defmethod print-method rune [o w] (.write w (str o))) 
(defmethod print-method glojure.lang.Ratio [o w] (.write w (str o))) 
(defmethod print-method float64 [o, ^Writer w]
  (cond
    (= (math.Inf 1) o) (glojure.lang.WriteWriter w "##Inf")
    (= (math.Inf -1) o) (glojure.lang.WriteWriter w "##-Inf")
    (math.IsNaN ^float64 o) (glojure.lang.WriteWriter w "##NaN")
    :else (glojure.lang.WriteWriter w (str o))))

(defmethod print-method float32 [o, ^Writer w]
  (cond
    (= (float32 (math.Inf 1)) o) (glojure.lang.WriteWriter w "##Inf")
    (= (float32 (math.Inf -1)) o) (glojure.lang.WriteWriter w "##-Inf")
    (math.IsNaN ^float32 o) (glojure.lang.WriteWriter w "##NaN")
    :else (glojure.lang.WriteWriter w (str o))))

(defmethod print-method go/int [o w] (.write w (str o))) 
(defmethod print-method uint [o w] (.write w (str o))) 
(defmethod print-method uint8 [o w] (.write w (str o))) 
(defmethod print-method uint16 [o w] (.write w (str o))) 
(defmethod print-method uint32 [o w] (.write w (str o))) 
(defmethod print-method uint64 [o w] (.write w (str o))) 
(defmethod print-method int8 [o w] (.write w (str o))) 
(defmethod print-method int16 [o w] (.write w (str o))) 
(defmethod print-method int32 [o w] (.write w (str o))) 
(defmethod print-method int64 [o w] (.write w (str o))) 
(defmethod print-method go/byte [o w] (.write w (str o))) 
(defmethod print-method rune [o w] (.write w (str o))) 
(defmethod print-method glojure.lang.Ratio [o w] (.write w (str o))) 
(defmethod print-dup glojure.lang.Fn [o, ^Writer w]
  (print-ctor o (fn [o w]) w))

(prefer-method print-dup glojure.lang.IPersistentCollection glojure.lang.Fn)
(do)
(do)

(defmethod print-method bool [o, ^Writer w]
  (glojure.lang.WriteWriter w (str o)))

(defmethod print-dup bool [o w] (print-method o w))

(defmethod print-method glojure.lang.Symbol [o, ^Writer w]
  (print-simple o w))

(defmethod print-dup glojure.lang.Symbol [o w] (print-method o w))

(defmethod print-method glojure.lang.Var [o, ^Writer w]
  (print-simple o w))

(defmethod print-dup glojure.lang.Var [^glojure.lang.Var o, ^Writer w]
  (glojure.lang.WriteWriter w (str "#=(var " (.name (.Namespace o)) "/" (.sym o) ")")))

(defmethod print-method glojure.lang.ISeq [o, ^Writer w]
  (print-meta o w)
  (print-sequential "(" pr-on " " ")" o w))

(defmethod print-dup glojure.lang.ISeq [o w] (print-method o w))
(defmethod print-dup glojure.lang.IPersistentList [o w] (print-method o w))
(prefer-method print-method glojure.lang.ISeq glojure.lang.IPersistentCollection)
(prefer-method print-dup glojure.lang.ISeq glojure.lang.IPersistentCollection)
(do)
(do)



(do)

(defmethod print-dup glojure.lang.IPersistentCollection [o, ^Writer w]
  (print-meta o w)
  (glojure.lang.WriteWriter w "#=(")
  (glojure.lang.WriteWriter w (.Name ^reflect.Type (class o)))
  (glojure.lang.WriteWriter w "/create ")
  (print-sequential "[" print-dup " " "]" o w)
  (glojure.lang.WriteWriter w ")"))

(do)

(def ^{:tag string 
       :doc "Returns escape string for char or nil if none"
       :added "1.0"}
  char-escape-string
    {\newline "\\n"
     \tab  "\\t"
     \return "\\r"
     \" "\\\""
     \\  "\\\\"
     \formfeed "\\f"
     \backspace "\\b"})

(defmethod print-method string [^string s, ^Writer w]
  (if (or *print-dup* *print-readably*)
    (do (glojure.lang.AppendWriter w \")
      (dotimes [n (count s)]
        (let [c (glojure.lang.CharAt s n)
              e (char-escape-string c)]
          (if e (glojure.lang.WriteWriter w e) (glojure.lang.AppendWriter w c))))
      (glojure.lang.AppendWriter w \"))
    (glojure.lang.WriteWriter w s))
  nil)

(defmethod print-dup string [s w] (print-method s w))

(defmethod print-method glojure.lang.IPersistentVector [v, ^Writer w]
  (print-meta v w)
  (print-sequential "[" pr-on " " "]" v w))

(defn- print-prefix-map [prefix kvs print-one w]
  (print-sequential
    (str prefix "{")
    (fn [[k v] ^Writer w]
      (do (print-one k w) (glojure.lang.AppendWriter w \space) (print-one v w)))
    ", "
    "}"
    kvs w))

(defn- print-map [m print-one w]
  (print-prefix-map nil m print-one w))

(defn- strip-ns
  [named]
  (if (symbol? named)
    (symbol nil (name named))
    (keyword nil (name named))))

(defn- lift-ns
  "Returns [lifted-ns lifted-kvs] or nil if m can't be lifted."
  [m]
  (when *print-namespace-maps*
    (loop [ns nil
           [[k v :as entry] & entries] (seq m)
           kvs []]
      (if entry
        (when (qualified-ident? k)
          (if ns
            (when (= ns (namespace k))
              (recur ns entries (conj kvs [(strip-ns k) v])))
            (when-let [new-ns (namespace k)]
              (recur new-ns entries (conj kvs [(strip-ns k) v])))))
        [ns kvs]))))

(defmethod print-method glojure.lang.IPersistentMap [m, ^Writer w]
  (print-meta m w)
  (let [[ns lift-kvs] (lift-ns m)]
    (if ns
      (print-prefix-map (str "#:" ns) lift-kvs pr-on w)
      (print-map m pr-on w))))

(do)

(defmethod print-dup glojure.lang.IPersistentMap [m, ^Writer w]
  (print-meta m w)
  (glojure.lang.WriteWriter w "#=(")
  (glojure.lang.WriteWriter w (.Name (class m)))
  (glojure.lang.WriteWriter w "/create ")
  (print-map m print-dup w)
  (glojure.lang.WriteWriter w ")"))

;; java.util
(do)
(do)
(do)
(do)

(do)

(do)

(do)

(do)

;; Records

(defmethod print-method glojure.lang.IRecord [r, ^Writer w]
  (print-meta r w)
  (glojure.lang.WriteWriter w "#")
  (glojure.lang.WriteWriter w (.Name (class r)))
  (print-map r pr-on w))

(defmethod print-dup glojure.lang.IRecord [r, ^Writer w]
  (print-meta r w)
  (glojure.lang.WriteWriter w "#")
  (glojure.lang.WriteWriter w (.Name (class r)))
  (if *verbose-defrecords*
    (print-map r print-dup w)
    (print-sequential "[" pr-on ", " "]" (vals r) w)))

(do)
(prefer-method print-method glojure.lang.IRecord glojure.lang.IPersistentMap)
(prefer-method print-dup glojure.lang.IRecord glojure.lang.IPersistentMap)
(do)
(prefer-method print-dup glojure.lang.IRecord glojure.lang.IPersistentCollection)
(do)

(defmethod print-method glojure.lang.IPersistentSet [s, ^Writer w]
  (print-meta s w)
  (print-sequential "#{" pr-on " " "}" (seq s) w))

(def ^{:tag string
       :doc "Returns name string for char or nil if none"
       :added "1.0"} 
 char-name-string
   {\newline "newline"
    \tab "tab"
    \space "space"
    \backspace "backspace"
    \formfeed "formfeed"
    \return "return"})

(defmethod print-method github.com$glojurelang$glojure$pkg$lang.Char [^Character c, ^Writer w]
  (if (or *print-dup* *print-readably*)
    (do (glojure.lang.AppendWriter w \\)
        (let [n (char-name-string c)]
          (if n (glojure.lang.WriteWriter w n) (glojure.lang.AppendWriter w c))))
    (glojure.lang.AppendWriter w c))
  nil)

(defmethod print-dup github.com$glojurelang$glojure$pkg$lang.Char [c w] (print-method c w))
(defmethod print-dup int64 [o w] (print-method o w))
(defmethod print-dup float64 [o w] (print-method o w))
(defmethod print-dup glojure.lang.Ratio [o w] (print-method o w))
(defmethod print-dup github.com$glojurelang$glojure$pkg$lang.BigDecimal [o w] (print-method o w))
(defmethod print-dup glojure.lang.BigInt [o w] (print-method o w))
(defmethod print-dup glojure.lang.PersistentHashMap [o w] (print-method o w))
(defmethod print-dup glojure.lang.PersistentHashSet [o w] (print-method o w))
(defmethod print-dup glojure.lang.PersistentVector [o w] (print-method o w))
(do)

(do)

(do)

(do)

(defmethod print-method github.com$glojurelang$glojure$pkg$lang.BigDecimal [b, ^Writer w]
  (glojure.lang.WriteWriter w (str b))
  (glojure.lang.WriteWriter w "M"))

(defmethod print-method glojure.lang.BigInt [b, ^Writer w]
  (glojure.lang.WriteWriter w (str b))
  (glojure.lang.WriteWriter w "N"))

(defmethod print-method regexp.Regexp [p ^Writer w]
  (glojure.lang.WriteWriter w "#\"")
  (loop [[^Character c & r :as s] (seq (.pattern ^regexp.Regexp p))
         qmode false]
    (when s
      (cond
        (= c \\) (let [[^Character c2 & r2] r]
                   (glojure.lang.AppendWriter w \\)
                   (glojure.lang.AppendWriter w c2)
                   (if qmode
                      (recur r2 (not= c2 \E))
                      (recur r2 (= c2 \Q))))
        (= c \") (do
                   (if qmode
                     (glojure.lang.WriteWriter w "\\E\\\"\\Q")
                     (glojure.lang.WriteWriter w "\\\""))
                   (recur r qmode))
        :else    (do
                   (glojure.lang.AppendWriter w c)
                   (recur r qmode)))))
  (glojure.lang.AppendWriter w \"))

(defmethod print-dup regexp.Regexp [p ^Writer w] (print-method p w))

(defmethod print-dup glojure.lang.Namespace [^glojure.lang.Namespace n ^Writer w]
  (glojure.lang.WriteWriter w "#=(find-ns ")
  (print-dup (.name n) w)
  (glojure.lang.WriteWriter w ")"))

(defn- deref-as-map [^glojure.lang.IDeref o]
  (let [pending (and (instance? glojure.lang.IPending o)
                     (not (.isRealized ^glojure.lang.IPending o)))
        [ex val]
        (when-not pending
          (try [false (deref o)]
               (catch Throwable e
                 [true e])))]
    {:status
     (cond
      (or ex
          (and (instance? glojure.lang.Agent o)
               (agent-error o)))
      :failed

      pending
      :pending

      :else
      :ready)

     :val val}))

(defmethod print-method glojure.lang.IDeref [o ^Writer w]
  (print-tagged-object o (deref-as-map o) w))

(do)

(defn StackTraceElement->vec
  "Constructs a data representation for a StackTraceElement: [class method file line]"
  {:added "1.9"}
  [^StackTraceElement o]
  [(symbol (.getClassName o)) (symbol (.getMethodName o)) (.getFileName o) (.getLineNumber o)])

(defn Throwable->map
  "Constructs a data representation for a Throwable with keys:
    :cause - root cause message
    :phase - error phase
    :via - cause chain, with cause keys:
             :type - exception class symbol
             :message - exception message
             :data - ex-data
             :at - top stack element
    :trace - root cause stack elements"
  {:added "1.7"}
  [^Throwable o]
  (let [base (fn [^Throwable t]
               (merge {:type (symbol (.Name (class t)))}
                 (when-let [msg (.getLocalizedMessage t)]
                   {:message msg})
                 (when-let [ed (ex-data t)]
                   {:data ed})
                 (let [st (.getStackTrace t)]
                   (when (pos? (alength st))
                     {:at (StackTraceElement->vec (aget st 0))}))))
        via (loop [via [], ^Throwable t o]
              (if t
                (recur (conj via t) (.getCause t))
                via))
        ^Throwable root (peek via)]
    (merge {:via (vec (map base via))
            :trace (vec (map StackTraceElement->vec
                             (.getStackTrace ^Throwable (or root o))))}
      (when-let [root-msg (.getLocalizedMessage root)]
        {:cause root-msg})
      (when-let [data (ex-data root)]
        {:data data})
      (when-let [phase (-> o ex-data :glojure.error/phase)]
        {:phase phase}))))

(defn- print-throwable [^Throwable o ^Writer w]
  (glojure.lang.WriteWriter w "#error {\n :cause ")
  (let [{:keys [cause data via trace]} (Throwable->map o)
        print-via #(do (glojure.lang.WriteWriter w "{:type ")
		               (print-method (:type %) w)
					   (glojure.lang.WriteWriter w "\n   :message ")
					   (print-method (:message %) w)
             (when-let [data (:data %)]
               (glojure.lang.WriteWriter w "\n   :data ")
               (print-method data w))
             (when-let [at (:at %)]
               (glojure.lang.WriteWriter w "\n   :at ")
               (print-method (:at %) w))
             (glojure.lang.WriteWriter w "}"))]
    (print-method cause w)
    (when data
      (glojure.lang.WriteWriter w "\n :data ")
      (print-method data w))
    (when via
      (glojure.lang.WriteWriter w "\n :via\n [")
      (when-let [fv (first via)]
	    (print-via fv)
        (doseq [v (rest via)]
          (glojure.lang.WriteWriter w "\n  ")
		  (print-via v)))
      (glojure.lang.WriteWriter w "]"))
    (when trace
      (glojure.lang.WriteWriter w "\n :trace\n [")
      (when-let [ft (first trace)]
        (print-method ft w)
        (doseq [t (rest trace)]
          (glojure.lang.WriteWriter w "\n  ")
          (print-method t w)))
      (glojure.lang.WriteWriter w "]")))
  (glojure.lang.WriteWriter w "}"))

(do)

(do)

(do)

(def ^{:private true} print-initialized true)

(defn ^java.io.PrintWriter PrintWriter-on
  "implements java.io.PrintWriter given flush-fn, which will be called
  when .flush() is called, with a string built up since the last call to .flush().
  if not nil, close-fn will be called with no arguments when .close is called"
  {:added "1.10"}
  [flush-fn close-fn]
  (let [sb (StringBuilder.)]
    (-> (proxy [Writer] []
          (flush []
                 (when (pos? (.length sb))
                   (flush-fn (github.com$glojurelang$glojure$pkg$lang.ToString sb)))
                 (.setLength sb 0))
          (close []
                 (.flush ^Writer this)
                 (when close-fn (close-fn))
                 nil)
          (write [str-cbuf off len]
                 (when (pos? len)
                   (if (instance? string str-cbuf)
                     (glojure.lang.AppendWriter sb ^string str-cbuf ^int off ^int len)
                     (glojure.lang.AppendWriter sb ^chars str-cbuf ^int off ^int len)))))
        java.io.BufferedWriter.
        java.io.PrintWriter.)))
