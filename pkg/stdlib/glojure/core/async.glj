(ns glojure.core.async
  "Facilities for async programming and communication.

  go blocks are dispatched on goroutines, and channels map to Go
  channels.

  Channels have a few key differences from their Clojure and
  ClojureScript counterparts:

  1. Glojure channels do not silently accept sends when closed. They throw (panic).

  2. Custom buffer policies are not supported. Only unbuffered or
  fixed-buffer channels are implemented (by mapping directly to Go
  channels.)")

(alias 'core 'glojure.core)

(defn chan
  "Creates a channel with an optional buffer, an optional transducer
  (like (map f), (filter p) etc or a composition thereof), and an
  optional exception-handler.  If buf-or-n is a number, will create
  and use a fixed buffer of that size. If a transducer is supplied a
  buffer must be specified. ex-handler must be a fn of one argument -
  if an exception occurs during transformation it will be called with
  the Throwable as an argument, and any non-nil return value will be
  placed in the channel."
  ([] (chan nil))
  ([buf-or-n] (chan buf-or-n nil))
  ([buf-or-n xform] (chan buf-or-n xform nil))
  ([buf-or-n xform ex-handler]
   (when xform (assert buf-or-n "buffer must be supplied when transducer is"))
   (when xform (throw (fmt.Errorf "xform and ex-handler not yet supported"))) ;; TODO
   (go/make (go/chan-of go/any) (or buf-or-n 0))))

(defn <!
  "takes a val from port. Will return nil if closed. Will park if
  nothing is available."
  [port]
  (let [[val _] (go/recv port)]
    val))

(def <!! <!)

(defn >!
  "puts a val into port. nil values are not allowed. Will park if no buffer space is available.
  Returns true, or throws if port is already closed."
  [port val]
  (go/send port val)
  true)

(def >!! >!)

(defn close!
  "Closes a channel. The channel will no longer accept any puts (they
  will be ignored). Data in the channel remains available for taking,
  until exhausted, after which takes will return nil. If there are any
  pending takes, they will be dispatched with nil. Closing a closed
  channel will throw an exception.

  Logically closing happens after all puts have been
  delivered. Therefore, any blocked or parked puts will remain
  blocked/parked until a taker releases them."

  [chan]
  (go/close chan))

(defmacro go
  "Asynchronously executes the body, returning immediately to the
  calling thread. Additionally, any visible calls to <!, >! and alt!/alts!
  channel operations within the body will block (if necessary) by
  'parking' the calling thread rather than tying up an OS thread (or
  the only JS thread when in ClojureScript). Upon completion of the
  operation, the body will be resumed.

  Unlike in Clojure or ClojureScript, go blocks may (either directly
  or indirectly) perform operations that may block indefinitely, as go
  blocks are run on goroutines, which relinquish the thread of control
  when parked.

  Returns a channel which will receive the result of the body when
  completed"
  [& body]
  ;; TODO: handle transferring dynamic bindings to the new frame
  `(let [c# (chan 1)
         f# (fn []
              (let [res# (do ~@body)]
                (>! c# res#)))]
     (go/go (f#))
     ((go/<-chan-of go/any) c#)))

(defn timeout
  "Returns a channel that will close after msecs"
  [^go/int64 msecs]
  (let [ret (chan)
        after (time.After (* msecs (go/int64 time.Millisecond)))]
    (go (do (<! after)
            (close! ret)))
    ret))

(defn- default-case
  []
  (let [def (new reflect.SelectCase)]
    (set! (.Dir def) reflect.SelectDefault)
    def))

(defn- port-case
  "Returns a *reflect.SelectCase for the given channel operation."
  [port-or-put]
  (let [wport (when (vector? port-or-put) (port-or-put 0))
        port (or wport port-or-put)
        val (when wport (reflect.ValueOf (port-or-put 1)))
        select-case (new reflect.SelectCase)]
    (set! (.Chan select-case) (reflect.ValueOf port))
    (set! (.Dir select-case) (if wport reflect.SelectSend reflect.SelectRecv))
    (if wport (set! (.Send select-case) val))
    select-case))

(defn- try-put
  "Returns true if val was sent on the port, false if sending would
  block"
  [port val]
  (let [sc (port-case [port val])
        def (default-case)
        [chosen val ok] (reflect.Select (map go/deref [sc def]))]
    (= 0 chosen)))

(defn- try-take
  "Returns [val true] if val was received from the port, [nil false] if the channel was closed,
  and nil if receiving would block."
  [port]
  (let [sc (new reflect.SelectCase)
        _ (do
            (set! (.Dir sc) reflect.SelectRecv)
            (set! (.Chan sc) (reflect.ValueOf port)))
        def (new reflect.SelectCase)
        _ (do
            (set! (.Dir def) reflect.SelectDefault))
        [chosen val ok] (reflect.Select (map go/deref [sc def]))]
    (cond (= 1 chosen) nil
          ok [(.Interface val) true]
          :else [nil false])))

(defn offer!
  "Puts a val into port if it's possible to do so immediately.
   nil values are not allowed. Never blocks. Returns true if offer succeeds."
  [port val]
  (let [ret (try-put port val)]
    (if ret ret)))

(defn poll!
  "Takes a val from port if it's possible to do so immediately.
   Never blocks. Returns value if successful, nil otherwise."
  [port]
  (let [res (try-take port)
        [val ok] res]
    (when ok val)))

(defn- check-unique-ports!
  [ports]
  (let [chans (map #(if (vector? %) (% 0) %) ports)
        s (set chans)]
    (when (not= (count s) (count ports))
      (throw (fmt.Errorf "duplicate ports found in alt(s)! operation")))))

(defn- do-alts
  "returns derefable [val port] if immediate, nil if enqueued"
  [ports opts]
  (assert (pos? (count ports)) "alts must have at least one channel operation")
  (check-unique-ports! ports)
  (let [ports (vec ports) ;; ensure vector for indexed nth
        n (count ports)
        priority (:priority opts) ;; TODO: implement priority
        selects (map port-case ports)
        selects (if (contains? opts :default)
                  (conj (vec selects) (default-case))
                  selects)
        def (default-case)
        [chosen-idx val ok] (reflect.Select (map go/deref selects))
        chosen (get ports chosen-idx)]
    (cond
      (vector? chosen) [true (chosen 0)]
      (= n chosen-idx) [(:default opts) :default]
      :else [(when ok (.Interface val)) chosen])))

(defn alts!
  "Completes at most one of several channel operations. Must ports is a
  vector of channel endpoints, which can be either a channel to take
  from or a vector of [channel-to-put-to val-to-put], in any
  combination.  Takes will be made as if by <!, and puts will be made
  as if by >!. Unless the :priority option is true, if more than one
  port operation is ready a non-deterministic choice will be made. If
  no operation is ready and a :default value is
  supplied, [default-val :default] will be returned, otherwise alts!
  will park until the first operation to become ready
  completes. Returns [val port] of the completed operation, where val
  is the value taken for takes, and true for puts.

  opts are passed as :key val ... Supported options:

  :default val - the value to use if none of the operations are immediately ready
  :priority true - (default nil) when true, the operations will be tried in order.

  Note: there is no guarantee that the port exps or val exprs will be
  used, nor in what order should they be, so they should not be
  depended upon for side effects."

  [ports & {:as opts}]
  (do-alts ports opts))

(def alts!! alts!)

(defn do-alt [alts clauses]
  (assert (even? (count clauses)) "unbalanced clauses")
  (let [clauses (core/partition 2 clauses)
        opt? #(keyword? (first %))
        opts (filter opt? clauses)
        clauses (remove opt? clauses)
        [clauses bindings]
        (core/reduce
         (fn [[clauses bindings] [ports expr]]
           (let [ports (if (vector? ports) ports [ports])
                 [ports bindings]
                 (core/reduce
                  (fn [[ports bindings] port]
                    (if (vector? port)
                      (let [[port val] port
                            gp (gensym)
                            gv (gensym)]
                        [(conj ports [gp gv]) (conj bindings [gp port] [gv val])])
                      (let [gp (gensym)]
                        [(conj ports gp) (conj bindings [gp port])])))
                  [[] bindings] ports)]
             [(conj clauses [ports expr]) bindings]))
         [[] []] clauses)
        gch (gensym "ch")
        gret (gensym "ret")]
    `(let [~@(mapcat identity bindings)
           [val# ~gch :as ~gret] (~alts [~@(apply concat (core/map first clauses))] ~@(apply concat opts))]
       (cond
        ~@(mapcat (fn [[ports expr]]
                    [`(or ~@(core/map (fn [port]
                                   `(= ~gch ~(if (vector? port) (first port) port)))
                                 ports))
                     (if (and (seq? expr) (vector? (first expr)))
                       `(let [~(first expr) ~gret] ~@(rest expr))
                       expr)])
                  clauses)
        (= ~gch :default) val#))))

(defmacro alt!
  "Makes a single choice between one of several channel operations,
  as if by alts!, returning the value of the result expr corresponding
  to the operation completed.

  Each clause takes the form of:

  channel-op[s] result-expr

  where channel-ops is one of:

  take-port - a single port to take
  [take-port | [put-port put-val] ...] - a vector of ports as per alts!
  :default | :priority - an option for alts!

  and result-expr is either a list beginning with a vector, whereupon that
  vector will be treated as a binding for the [val port] return of the
  operation, else any other expression.

  (alt!
    [c t] ([val ch] (foo ch val))
    x ([v] v)
    [[out val]] :wrote
    :default 42)

  Each option may appear at most once. The choice and parking
  characteristics are those of alts!."

  [& clauses]
  (do-alt `alts! clauses))

(def alt!! alt!)

;;;;;;;;;;;;;;;;;;;; ops ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmacro go-loop
  "Like (go (loop ...))"
  [bindings & body]
  `(go (loop ~bindings ~@body)))

(defn pipe
  "Takes elements from the from channel and supplies them to the to
  channel. By default, the to channel will be closed when the from
  channel closes, but can be determined by the close?  parameter. Will
  stop consuming the from channel if the to channel closes"
  ([from to] (pipe from to true))
  ([from to close?]
     (go-loop []
      (let [v (<! from)]
        (if (nil? v)
          (when close? (close! to))
          (when (>! to v)
            (recur)))))
     to))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TODO
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; admix
;; buffer
;; dropping-buffer
;; into
;; map
;; merge
;; mix
;; mult
;; onto-chan
;; onto-chan!
;; onto-chan!!
;; pipeline
;; pipeline-async
;; pipeline-blocking
;; promise-chan
;; pub
;; put!
;; reduce
;; sliding-buffer
;; solo-mode
;; split
;; sub
;; take
;; take!
;; tap
;; thread
;; thread-call
;; timeout
;; to-chan
;; to-chan!
;; to-chan!!
;; toggle
;; transduce
;; unblocking-buffer?
;; unmix
;; unmix-all
;; unsub
;; unsub-all
;; untap
;; untap-all
