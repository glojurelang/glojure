// Code generated by glojure codegen. DO NOT EDIT.

package const_string

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

// LoadNS initializes the namespace "codegen.test.const-string"
func LoadNS() {
	checkDerefMacro := func(v *lang.Var) {
		if v.IsMacro() {
			panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
		}
	}
	_ = checkDerefMacro
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.const-string"))
	_ = ns
	// const-string
	{
		tmp0 := lang.NewSymbol("const-string").WithMeta(lang.NewMap(lang.NewKeyword("hello"), true, lang.NewKeyword("file"), "codegen/test/const_string.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.const-string")))).(*lang.Symbol)
		tmp1 := ns.InternWithValue(tmp0, "Hello, World!", true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
