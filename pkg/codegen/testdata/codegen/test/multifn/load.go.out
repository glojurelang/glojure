// Code generated by glojure codegen. DO NOT EDIT.

package multifn

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	reflect "reflect"
)

// LoadNS initializes the namespace "codegen.test.multifn"
func LoadNS() {
	checkDerefMacro := func(v *lang.Var) {
		if v.IsMacro() {
			panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
		}
	}
	_ = checkDerefMacro
	// var codegen.test.multifn/add
	codegen_DOT_test_DOT_multifn_add := lang.InternVarName(lang.NewSymbol("codegen.test.multifn"), lang.NewSymbol("add"))
	// var glojure.core/+
	glojure_DOT_core__PLUS_ := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("+"))
	// var glojure.core/str
	glojure_DOT_core_str := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("str"))
	// var glojure.core/type
	glojure_DOT_core_type := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("type"))
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.multifn"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), "int64: 7 float64: 8.0 default: 3 4", lang.NewKeyword("file"), "codegen/test/multifn.glj", lang.NewKeyword("line"), int(8), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(8), lang.NewKeyword("end-column"), int(68), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.multifn")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			checkDerefMacro(glojure_DOT_core_str)
			tmp3 := glojure_DOT_core_str.Get()
			checkDerefMacro(codegen_DOT_test_DOT_multifn_add)
			tmp4 := codegen_DOT_test_DOT_multifn_add.Get()
			tmp5 := lang.Apply(tmp4, []any{int64(3), int64(4)})
			checkDerefMacro(codegen_DOT_test_DOT_multifn_add)
			tmp6 := codegen_DOT_test_DOT_multifn_add.Get()
			tmp7 := lang.Apply(tmp6, []any{float64(3.5), float64(4.5)})
			checkDerefMacro(codegen_DOT_test_DOT_multifn_add)
			tmp8 := codegen_DOT_test_DOT_multifn_add.Get()
			tmp9 := lang.Apply(tmp8, []any{"3", "4"})
			tmp10 := lang.Apply(tmp3, []any{tmp5, " ", tmp7, " ", tmp9})
			return tmp10
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// add
	{
		tmp0 := lang.NewSymbol("add").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/multifn.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("doc"), "a multimethod for addition", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.multifn")))).(*lang.Symbol)
		var tmp3 lang.FnFunc
		tmp3 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 2 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v4 := args[0]
			_ = v4
			v5 := args[1]
			_ = v5
			checkDerefMacro(glojure_DOT_core_type)
			tmp6 := glojure_DOT_core_type.Get()
			tmp7 := lang.Apply(tmp6, []any{v4})
			return tmp7
		})
		tmp3 = tmp3.WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/multifn.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(44), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(62))).(lang.FnFunc)
		tmp2 := lang.NewMultiFn("add", tmp3, lang.NewKeyword("default"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")).FindInternedVar(lang.NewSymbol("global-hierarchy")))
		tmp4 := reflect.TypeOf(int64(0))
		var tmp5 lang.FnFunc
		tmp5 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 2 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v6 := args[0]
			_ = v6
			v7 := args[1]
			_ = v7
			checkDerefMacro(glojure_DOT_core_str)
			tmp8 := glojure_DOT_core_str.Get()
			checkDerefMacro(glojure_DOT_core__PLUS_)
			tmp9 := glojure_DOT_core__PLUS_.Get()
			tmp10 := lang.Apply(tmp9, []any{v6, v7})
			tmp11 := lang.Apply(tmp8, []any{"int64: ", tmp10})
			return tmp11
		})
		tmp2.AddMethod(tmp4, tmp5)
		tmp6 := reflect.TypeOf(float64(0))
		var tmp7 lang.FnFunc
		tmp7 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 2 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v8 := args[0]
			_ = v8
			v9 := args[1]
			_ = v9
			checkDerefMacro(glojure_DOT_core_str)
			tmp10 := glojure_DOT_core_str.Get()
			checkDerefMacro(glojure_DOT_core__PLUS_)
			tmp11 := glojure_DOT_core__PLUS_.Get()
			tmp12 := lang.Apply(tmp11, []any{v8, v9})
			tmp13 := lang.Apply(tmp10, []any{"float64: ", tmp12})
			return tmp13
		})
		tmp2.AddMethod(tmp6, tmp7)
		var tmp8 lang.FnFunc
		tmp8 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 2 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v9 := args[0]
			_ = v9
			v10 := args[1]
			_ = v10
			checkDerefMacro(glojure_DOT_core_str)
			tmp11 := glojure_DOT_core_str.Get()
			tmp12 := lang.Apply(tmp11, []any{"default: ", v9, " ", v10})
			return tmp12
		})
		tmp2.AddMethod(lang.NewKeyword("default"), tmp8)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
