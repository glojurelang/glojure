// Code generated by glojure codegen. DO NOT EDIT.

package generated

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	reflect "reflect"
)

func init() {
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.multifn"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), "int64: 7 float64: 8.0 default: 3 4", lang.NewKeyword("file"), "codegen/test/multifn.glj", lang.NewKeyword("line"), int(8), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(8), lang.NewKeyword("end-column"), int(68), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.multifn")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			tmp3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp4 := tmp3.FindInternedVar(lang.NewSymbol("str"))
			if tmp4.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp4)))
			}
			tmp5 := tmp4.Get()
			tmp6 := lang.FindNamespace(lang.NewSymbol("codegen.test.multifn"))
			tmp7 := tmp6.FindInternedVar(lang.NewSymbol("add"))
			if tmp7.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp7)))
			}
			tmp8 := tmp7.Get()
			tmp9 := lang.Apply(tmp8, []any{int64(3), int64(4)})
			tmp10 := lang.FindNamespace(lang.NewSymbol("codegen.test.multifn"))
			tmp11 := tmp10.FindInternedVar(lang.NewSymbol("add"))
			if tmp11.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp11)))
			}
			tmp12 := tmp11.Get()
			tmp13 := lang.Apply(tmp12, []any{float64(3.5), float64(4.5)})
			tmp14 := lang.FindNamespace(lang.NewSymbol("codegen.test.multifn"))
			tmp15 := tmp14.FindInternedVar(lang.NewSymbol("add"))
			if tmp15.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp15)))
			}
			tmp16 := tmp15.Get()
			tmp17 := lang.Apply(tmp16, []any{"3", "4"})
			tmp18 := lang.Apply(tmp5, []any{tmp9, " ", tmp13, " ", tmp17})
			return tmp18
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// add
	{
		tmp0 := lang.NewSymbol("add").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/multifn.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("doc"), "a multimethod for addition", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.multifn")))).(*lang.Symbol)
		var tmp3 lang.FnFunc
		tmp3 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 2 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v4 := args[0]
			_ = v4
			v5 := args[1]
			_ = v5
			tmp6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp7 := tmp6.FindInternedVar(lang.NewSymbol("type"))
			if tmp7.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp7)))
			}
			tmp8 := tmp7.Get()
			tmp9 := lang.Apply(tmp8, []any{v4})
			return tmp9
		})
		tmp3 = tmp3.WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/multifn.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(44), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(62))).(lang.FnFunc)
		tmp2 := lang.NewMultiFn("add", tmp3, lang.NewKeyword("default"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")).FindInternedVar(lang.NewSymbol("global-hierarchy")))
		tmp4 := reflect.TypeOf(int64(0))
		var tmp5 lang.FnFunc
		tmp5 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 2 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v6 := args[0]
			_ = v6
			v7 := args[1]
			_ = v7
			tmp8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp9 := tmp8.FindInternedVar(lang.NewSymbol("str"))
			if tmp9.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp9)))
			}
			tmp10 := tmp9.Get()
			tmp11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp12 := tmp11.FindInternedVar(lang.NewSymbol("+"))
			if tmp12.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp12)))
			}
			tmp13 := tmp12.Get()
			tmp14 := lang.Apply(tmp13, []any{v6, v7})
			tmp15 := lang.Apply(tmp10, []any{"int64: ", tmp14})
			return tmp15
		})
		tmp2.AddMethod(tmp4, tmp5)
		tmp6 := reflect.TypeOf(float64(0))
		var tmp7 lang.FnFunc
		tmp7 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 2 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v8 := args[0]
			_ = v8
			v9 := args[1]
			_ = v9
			tmp10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp11 := tmp10.FindInternedVar(lang.NewSymbol("str"))
			if tmp11.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp11)))
			}
			tmp12 := tmp11.Get()
			tmp13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp14 := tmp13.FindInternedVar(lang.NewSymbol("+"))
			if tmp14.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp14)))
			}
			tmp15 := tmp14.Get()
			tmp16 := lang.Apply(tmp15, []any{v8, v9})
			tmp17 := lang.Apply(tmp12, []any{"float64: ", tmp16})
			return tmp17
		})
		tmp2.AddMethod(tmp6, tmp7)
		var tmp8 lang.FnFunc
		tmp8 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 2 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v9 := args[0]
			_ = v9
			v10 := args[1]
			_ = v10
			tmp11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp12 := tmp11.FindInternedVar(lang.NewSymbol("str"))
			if tmp12.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp12)))
			}
			tmp13 := tmp12.Get()
			tmp14 := lang.Apply(tmp13, []any{"default: ", v9, " ", v10})
			return tmp14
		})
		tmp2.AddMethod(lang.NewKeyword("default"), tmp8)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
