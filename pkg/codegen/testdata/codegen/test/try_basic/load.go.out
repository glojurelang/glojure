// Code generated by glojure codegen. DO NOT EDIT.

package try_basic

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

// LoadNS initializes the namespace "codegen.test.try-basic"
func LoadNS() {
	checkDerefMacro := func(v *lang.Var) {
		if v.IsMacro() {
			panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
		}
	}
	_ = checkDerefMacro
	// var codegen.test.try-basic/basic-try
	codegen_DOT_test_DOT_try_basic_basic_try := lang.InternVarName(lang.NewSymbol("codegen.test.try-basic"), lang.NewSymbol("basic-try"))
	// var codegen.test.try-basic/nested-try
	codegen_DOT_test_DOT_try_basic_nested_try := lang.InternVarName(lang.NewSymbol("codegen.test.try-basic"), lang.NewSymbol("nested-try"))
	// var codegen.test.try-basic/try-catch-finally
	codegen_DOT_test_DOT_try_basic_try_catch_finally := lang.InternVarName(lang.NewSymbol("codegen.test.try-basic"), lang.NewSymbol("try-catch-finally"))
	// var codegen.test.try-basic/try-finally-only
	codegen_DOT_test_DOT_try_basic_try_finally_only := lang.InternVarName(lang.NewSymbol("codegen.test.try-basic"), lang.NewSymbol("try-finally-only"))
	// var codegen.test.try-basic/try-no-catch
	codegen_DOT_test_DOT_try_basic_try_no_catch := lang.InternVarName(lang.NewSymbol("codegen.test.try-basic"), lang.NewSymbol("try-no-catch"))
	// var codegen.test.try-basic/try-with-throw
	codegen_DOT_test_DOT_try_basic_try_with_throw := lang.InternVarName(lang.NewSymbol("codegen.test.try-basic"), lang.NewSymbol("try-with-throw"))
	// var glojure.core/=
	glojure_DOT_core__EQ_ := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("="))
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), "all tests passed", lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(43), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(43), lang.NewKeyword("end-column"), int(50), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			checkDerefMacro(glojure_DOT_core__EQ_)
			tmp4 := glojure_DOT_core__EQ_.Get()
			checkDerefMacro(codegen_DOT_test_DOT_try_basic_basic_try)
			tmp5 := codegen_DOT_test_DOT_try_basic_basic_try.Get()
			tmp6 := lang.Apply(tmp5, nil)
			tmp7 := lang.Apply(tmp4, []any{tmp6, "success"})
			if lang.IsTruthy(tmp7) {
			} else {
				panic("basic-try failed")
			}
			_ = tmp3
			var tmp8 any
			checkDerefMacro(glojure_DOT_core__EQ_)
			tmp9 := glojure_DOT_core__EQ_.Get()
			checkDerefMacro(codegen_DOT_test_DOT_try_basic_try_with_throw)
			tmp10 := codegen_DOT_test_DOT_try_basic_try_with_throw.Get()
			tmp11 := lang.Apply(tmp10, nil)
			tmp12 := lang.Apply(tmp9, []any{tmp11, "caught exception"})
			if lang.IsTruthy(tmp12) {
			} else {
				panic("try-with-throw failed")
			}
			_ = tmp8
			var tmp13 any
			checkDerefMacro(glojure_DOT_core__EQ_)
			tmp14 := glojure_DOT_core__EQ_.Get()
			checkDerefMacro(codegen_DOT_test_DOT_try_basic_try_no_catch)
			tmp15 := codegen_DOT_test_DOT_try_basic_try_no_catch.Get()
			tmp16 := lang.Apply(tmp15, nil)
			tmp17 := lang.Apply(tmp14, []any{tmp16, "just body"})
			if lang.IsTruthy(tmp17) {
			} else {
				panic("try-no-catch failed")
			}
			_ = tmp13
			var tmp18 any
			checkDerefMacro(glojure_DOT_core__EQ_)
			tmp19 := glojure_DOT_core__EQ_.Get()
			checkDerefMacro(codegen_DOT_test_DOT_try_basic_try_finally_only)
			tmp20 := codegen_DOT_test_DOT_try_basic_try_finally_only.Get()
			tmp21 := lang.Apply(tmp20, nil)
			tmp22 := lang.Apply(tmp19, []any{tmp21, "body"})
			if lang.IsTruthy(tmp22) {
			} else {
				panic("try-finally-only failed")
			}
			_ = tmp18
			var tmp23 any
			checkDerefMacro(glojure_DOT_core__EQ_)
			tmp24 := glojure_DOT_core__EQ_.Get()
			checkDerefMacro(codegen_DOT_test_DOT_try_basic_try_catch_finally)
			tmp25 := codegen_DOT_test_DOT_try_basic_try_catch_finally.Get()
			tmp26 := lang.Apply(tmp25, nil)
			tmp27 := lang.Apply(tmp24, []any{tmp26, "caught"})
			if lang.IsTruthy(tmp27) {
			} else {
				panic("try-catch-finally failed")
			}
			_ = tmp23
			var tmp28 any
			checkDerefMacro(glojure_DOT_core__EQ_)
			tmp29 := glojure_DOT_core__EQ_.Get()
			checkDerefMacro(codegen_DOT_test_DOT_try_basic_nested_try)
			tmp30 := codegen_DOT_test_DOT_try_basic_nested_try.Get()
			tmp31 := lang.Apply(tmp30, nil)
			tmp32 := lang.Apply(tmp29, []any{tmp31, "inner caught"})
			if lang.IsTruthy(tmp32) {
			} else {
				panic("nested-try failed")
			}
			_ = tmp28
			return "all tests passed"
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// basic-try
	{
		tmp0 := lang.NewSymbol("basic-try").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = "caught"
						} else {
							panic(r)
						}
					}
				}()
				tmp3 = "success"
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// nested-try
	{
		tmp0 := lang.NewSymbol("nested-try").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(34), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(34), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = "outer caught"
						} else {
							panic(r)
						}
					}
				}()
				var tmp4 any
				func() {
					defer func() {
						if r := recover(); r != nil {
							if lang.CatchMatches(r, lang.Builtins["any"]) {
								v5 := r
								_ = v5
								tmp4 = "inner caught"
							} else {
								panic(r)
							}
						}
					}()
					panic("inner")
				}()
				tmp3 = tmp4
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// try-catch-finally
	{
		tmp0 := lang.NewSymbol("try-catch-finally").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(26), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(26), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
				}()
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = "caught"
						} else {
							panic(r)
						}
					}
				}()
				panic("error")
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// try-finally-only
	{
		tmp0 := lang.NewSymbol("try-finally-only").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(20), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
				}()
				tmp3 = "body"
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// try-no-catch
	{
		tmp0 := lang.NewSymbol("try-no-catch").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(16), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				tmp3 = "just body"
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// try-with-throw
	{
		tmp0 := lang.NewSymbol("try-with-throw").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(9), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = "caught exception"
						} else {
							panic(r)
						}
					}
				}()
				panic("test error")
				tmp3 = "not reached"
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
