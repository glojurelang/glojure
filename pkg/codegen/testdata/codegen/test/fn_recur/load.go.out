// Code generated by glojure codegen. DO NOT EDIT.

package fn_recur

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

// LoadNS initializes the namespace "codegen.test.fn-recur"
func LoadNS() {
	checkDerefMacro := func(v *lang.Var) {
		if v.IsMacro() {
			panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
		}
	}
	_ = checkDerefMacro
	// var codegen.test.fn-recur/fib
	codegen_DOT_test_DOT_fn_recur_fib := lang.InternVarName(lang.NewSymbol("codegen.test.fn-recur"), lang.NewSymbol("fib"))
	// var glojure.core/=
	glojure_DOT_core__EQ_ := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("="))
	// var glojure.core/+
	glojure_DOT_core__PLUS_ := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("+"))
	// var glojure.core/inc
	glojure_DOT_core_inc := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("inc"))
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-recur"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), int64(55), lang.NewKeyword("file"), "codegen/test/fn_recur.glj", lang.NewKeyword("line"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(12), lang.NewKeyword("end-column"), int(34), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-recur")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			checkDerefMacro(codegen_DOT_test_DOT_fn_recur_fib)
			tmp3 := codegen_DOT_test_DOT_fn_recur_fib.Get()
			tmp4 := lang.Apply(tmp3, []any{int64(10)})
			return tmp4
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// fib
	{
		tmp0 := lang.NewSymbol("fib").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/fn_recur.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Calculates the nth Fibonacci number using iteration with recur.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-recur")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 1 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v3 := args[0]
			_ = v3
			var tmp4 any
			{ // let
				// let binding "fib-helper"
				var tmp5 lang.FnFunc
				{ // function fib-helper
					var v6 lang.FnFunc
					tmp5 = lang.NewFnFunc(func(args ...any) any {
						if len(args) != 3 {
							panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
						}
						v7 := args[0]
						_ = v7
						v8 := args[1]
						_ = v8
						v9 := args[2]
						_ = v9
					recur_loop_1612:
						var tmp10 any
						checkDerefMacro(glojure_DOT_core__EQ_)
						tmp11 := glojure_DOT_core__EQ_.Get()
						tmp12 := lang.Apply(tmp11, []any{v9, v3})
						if lang.IsTruthy(tmp12) {
							tmp10 = v7
						} else {
							var tmp13 any = v8
							checkDerefMacro(glojure_DOT_core__PLUS_)
							tmp15 := glojure_DOT_core__PLUS_.Get()
							tmp16 := lang.Apply(tmp15, []any{v7, v8})
							var tmp14 any = tmp16
							checkDerefMacro(glojure_DOT_core_inc)
							tmp18 := glojure_DOT_core_inc.Get()
							tmp19 := lang.Apply(tmp18, []any{v9})
							var tmp17 any = tmp19
							v7 = tmp13
							v8 = tmp14
							v9 = tmp17
							goto recur_loop_1612
						}
						return tmp10
					})
					v6 = tmp5
					_ = v6
				}
				tmp6 := lang.NewMap(lang.NewKeyword("file"), "codegen/test/fn_recur.glj", lang.NewKeyword("line"), int(6), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(9), lang.NewKeyword("end-column"), int(50))
				tmp7, err := lang.WithMeta(tmp5, tmp6.(lang.IPersistentMap))
				if err != nil {
					panic(err)
				}
				var v8 any = tmp7
				_ = v8
				tmp9 := lang.Apply(v8, []any{int64(0), int64(1), int64(0)})
				tmp4 = tmp9
			} // end let
			return tmp4
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
