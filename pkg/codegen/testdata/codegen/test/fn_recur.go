// Code generated by glojure codegen. DO NOT EDIT.

package generated

import (
	fmt "fmt"
	"github.com/glojurelang/glojure/pkg/lang"
)

func init() {
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-recur"))
	_ = ns
	// -main
	{
		v0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), int64(55), lang.NewKeyword("file"), "codegen/test/fn_recur.glj", lang.NewKeyword("line"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(12), lang.NewKeyword("end-column"), int(34), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-recur")))).(*lang.Symbol)
		v2 := lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v3 := lang.FindNamespace(lang.NewSymbol("codegen.test.fn-recur"))
			v4 := v3.FindInternedVar(lang.NewSymbol("fib"))
			if v4.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v4)))
			}
			v5 := v4.Get()
			v6 := lang.Apply(v5, []any{int64(10)})
			return v6
		})
		v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		v1 := ns.InternWithValue(v0, v2, true)
		if v0.Meta() != nil {
			v1.SetMeta(v0.Meta().(lang.IPersistentMap))
		}
	}
	// fib
	{
		v0 := lang.NewSymbol("fib").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/fn_recur.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Calculates the nth Fibonacci number using iteration with recur.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-recur")))).(*lang.Symbol)
		v2 := lang.NewFnFunc(func(args ...any) any {
			if len(args) != 1 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v3 := args[0]
			v5 := lang.NewFnFunc(func(args ...any) any {
				if len(args) != 3 {
					panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
				}
				v6 := args[0]
				v7 := args[1]
				v8 := args[2]
			recur_loop_1620:
				var v9 any
				v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
				v11 := v10.FindInternedVar(lang.NewSymbol("="))
				if v11.IsMacro() {
					panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
				}
				v12 := v11.Get()
				v13 := lang.Apply(v12, []any{v8, v3})
				if lang.IsTruthy(v13) {
					v9 = v6
				} else {
					var v14 any = v7
					v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
					v17 := v16.FindInternedVar(lang.NewSymbol("+"))
					if v17.IsMacro() {
						panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
					}
					v18 := v17.Get()
					v19 := lang.Apply(v18, []any{v6, v7})
					var v15 any = v19
					v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
					v22 := v21.FindInternedVar(lang.NewSymbol("inc"))
					if v22.IsMacro() {
						panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
					}
					v23 := v22.Get()
					v24 := lang.Apply(v23, []any{v8})
					var v20 any = v24
					v6 = v14
					v7 = v15
					v8 = v20
					goto recur_loop_1620
				}
				return v9
			})
			v6 := lang.NewMap(lang.NewKeyword("file"), "codegen/test/fn_recur.glj", lang.NewKeyword("line"), int(6), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(9), lang.NewKeyword("end-column"), int(50))
			v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			var v4 any = v7
			_ = v4
			v9 := lang.Apply(v5, []any{int64(0), int64(1), int64(0)})
			return v9
		})
		v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		v1 := ns.InternWithValue(v0, v2, true)
		if v0.Meta() != nil {
			v1.SetMeta(v0.Meta().(lang.IPersistentMap))
		}
	}
}
