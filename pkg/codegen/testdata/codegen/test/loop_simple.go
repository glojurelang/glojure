// Code generated by glojure codegen. DO NOT EDIT.

package generated

import (
	"fmt"
	"github.com/glojurelang/glojure/pkg/lang"
)

func init() {
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.loop-simple"))
	_ = ns
	// simple-loop
	{
		v0 := lang.NewSymbol("simple-loop").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/loop_simple.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()))).(*lang.Symbol)
		ns.InternWithValue(v0, func() interface{} {
			v1 := lang.IFnFunc(func(args ...interface{}) interface{} {
				if len(args) != 0 {
					panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
				}
				return nil
			})
			// Note: metadata on functions is not yet supported in generated code
			// Original metadata: lang.NewMap(lang.NewKeyword("rettag"), nil)
			return v1
		}(), true)
	}
}
