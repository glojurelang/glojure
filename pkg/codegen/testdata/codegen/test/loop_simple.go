// Code generated by glojure codegen. DO NOT EDIT.

package generated

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

func init() {
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.loop-simple"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), int64(10), lang.NewKeyword("file"), "codegen/test/loop_simple.glj", lang.NewKeyword("line"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(10), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.loop-simple")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			tmp3 := lang.FindNamespace(lang.NewSymbol("codegen.test.loop-simple"))
			tmp4 := tmp3.FindInternedVar(lang.NewSymbol("simple-loop"))
			if tmp4.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp4)))
			}
			tmp5 := tmp4.Get()
			tmp6 := lang.Apply(tmp5, nil)
			return tmp6
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// simple-loop
	{
		tmp0 := lang.NewSymbol("simple-loop").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/loop_simple.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.loop-simple")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			{ // let
				// let binding "i"
				var v4 any = int64(0)
				_ = v4
				for {
					var tmp5 any
					tmp6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
					tmp7 := tmp6.FindInternedVar(lang.NewSymbol("<"))
					if tmp7.IsMacro() {
						panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp7)))
					}
					tmp8 := tmp7.Get()
					tmp9 := lang.Apply(tmp8, []any{v4, int64(10)})
					if lang.IsTruthy(tmp9) {
						tmp11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
						tmp12 := tmp11.FindInternedVar(lang.NewSymbol("inc"))
						if tmp12.IsMacro() {
							panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp12)))
						}
						tmp13 := tmp12.Get()
						tmp14 := lang.Apply(tmp13, []any{v4})
						var tmp10 any = tmp14
						v4 = tmp10
						continue
					} else {
						tmp5 = v4
					}
					tmp3 = tmp5
					break
				}
			} // end let
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
