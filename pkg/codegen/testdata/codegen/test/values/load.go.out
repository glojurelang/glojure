// Code generated by glojure codegen. DO NOT EDIT.

package values

import (
	hex2 "encoding/hex"
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	big3 "math/big"
	reflect "reflect"
)

// LoadNS initializes the namespace "codegen.test.values"
func LoadNS() {
	checkDerefMacro := func(v *lang.Var) {
		if v.IsMacro() {
			panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
		}
	}
	_ = checkDerefMacro
	// var codegen.test.values/big-decimal
	codegen_DOT_test_DOT_values_big_decimal := lang.InternVarName(lang.NewSymbol("codegen.test.values"), lang.NewSymbol("big-decimal"))
	// var codegen.test.values/big-decimal-type
	codegen_DOT_test_DOT_values_big_decimal_type := lang.InternVarName(lang.NewSymbol("codegen.test.values"), lang.NewSymbol("big-decimal-type"))
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.values"))
	_ = ns
	// -main
	{
		tmp1 := lang.NewBigDecimalFromBigFloat((func() *big3.Float {
			var z big3.Float
			b, _ := hex2.DecodeString("010a0000004000000004a000000000000000")
			if err := z.GobDecode(b); err != nil {
				panic(err)
			}
			return &z
		})())
		tmp2 := reflect.TypeOf((*lang.BigDecimal)(nil))
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), lang.NewVector(tmp1, tmp2), lang.NewKeyword("file"), "codegen/test/values.glj", lang.NewKeyword("line"), int(6), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(6), lang.NewKeyword("end-column"), int(56), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.values")))).(*lang.Symbol)
		var tmp4 lang.FnFunc
		tmp4 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			checkDerefMacro(codegen_DOT_test_DOT_values_big_decimal)
			tmp5 := codegen_DOT_test_DOT_values_big_decimal.Get()
			checkDerefMacro(codegen_DOT_test_DOT_values_big_decimal_type)
			tmp6 := codegen_DOT_test_DOT_values_big_decimal_type.Get()
			tmp7 := lang.NewVector(tmp5, tmp6)
			tmp8 := lang.NewMap(lang.NewKeyword("file"), "codegen/test/values.glj", lang.NewKeyword("line"), int(7), lang.NewKeyword("column"), int(3), lang.NewKeyword("end-line"), int(7), lang.NewKeyword("end-column"), int(32))
			tmp9, err := lang.WithMeta(tmp7, tmp8.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			return tmp9
		})
		tmp4 = tmp4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp3 := ns.InternWithValue(tmp0, tmp4, true)
		if tmp0.Meta() != nil {
			tmp3.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// big-decimal
	{
		tmp0 := lang.NewSymbol("big-decimal").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/values.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.values")))).(*lang.Symbol)
		tmp2 := lang.NewBigDecimalFromBigFloat((func() *big3.Float {
			var z big3.Float
			b, _ := hex2.DecodeString("010a0000004000000004a000000000000000")
			if err := z.GobDecode(b); err != nil {
				panic(err)
			}
			return &z
		})())
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// big-decimal-type
	{
		tmp0 := lang.NewSymbol("big-decimal-type").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/values.glj", lang.NewKeyword("line"), int(4), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(4), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.values")))).(*lang.Symbol)
		tmp2 := reflect.TypeOf((*lang.BigDecimal)(nil))
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
