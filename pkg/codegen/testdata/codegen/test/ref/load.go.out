// Code generated by glojure codegen. DO NOT EDIT.

package ref

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

// LoadNS initializes the namespace "codegen.test.ref"
func LoadNS() {
	checkDerefMacro := func(v *lang.Var) {
		if v.IsMacro() {
			panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
		}
	}
	_ = checkDerefMacro
	// var codegen.test.ref/test-ref
	codegen_DOT_test_DOT_ref_test_ref := lang.InternVarName(lang.NewSymbol("codegen.test.ref"), lang.NewSymbol("test-ref"))
	// var glojure.core/deref
	glojure_DOT_core_deref := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("deref"))
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.ref"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), lang.CreatePersistentTreeSet(lang.NewSliceSeq([]any{int64(1), int64(2), int64(3)})), lang.NewKeyword("file"), "codegen/test/ref.glj", lang.NewKeyword("line"), int(8), lang.NewKeyword("column"), int(3), lang.NewKeyword("end-line"), int(9), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.ref")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			checkDerefMacro(glojure_DOT_core_deref)
			tmp3 := glojure_DOT_core_deref.Get()
			checkDerefMacro(codegen_DOT_test_DOT_ref_test_ref)
			tmp4 := codegen_DOT_test_DOT_ref_test_ref.Get()
			tmp5 := lang.Apply(tmp3, []any{tmp4})
			return tmp5
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-ref
	{
		tmp0 := lang.NewSymbol("test-ref").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/ref.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("doc"), "A reference to a set.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.ref")))).(*lang.Symbol)
		tmp2 := lang.NewRef(lang.CreatePersistentTreeSet(lang.NewSliceSeq([]any{int64(1), int64(2), int64(3)})))
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
