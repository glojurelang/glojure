// Code generated by glojure codegen. DO NOT EDIT.

package generated

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

func init() {
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), "advanced tests passed", lang.NewKeyword("file"), "codegen/test/try_advanced.glj", lang.NewKeyword("line"), int(30), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(30), lang.NewKeyword("end-column"), int(55), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			tmp4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp5 := tmp4.FindInternedVar(lang.NewSymbol("="))
			if tmp5.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp5)))
			}
			tmp6 := tmp5.Get()
			tmp7 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-advanced"))
			tmp8 := tmp7.FindInternedVar(lang.NewSymbol("try-custom-value"))
			if tmp8.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp8)))
			}
			tmp9 := tmp8.Get()
			tmp10 := lang.Apply(tmp9, nil)
			tmp11 := lang.Apply(tmp6, []any{tmp10, "custom error"})
			if lang.IsTruthy(tmp11) {
			} else {
				panic("try-custom-value failed")
			}
			_ = tmp3
			var tmp12 any
			tmp13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp14 := tmp13.FindInternedVar(lang.NewSymbol("="))
			if tmp14.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp14)))
			}
			tmp15 := tmp14.Get()
			tmp16 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-advanced"))
			tmp17 := tmp16.FindInternedVar(lang.NewSymbol("catch-binding-scope"))
			if tmp17.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp17)))
			}
			tmp18 := tmp17.Get()
			tmp19 := lang.Apply(tmp18, nil)
			tmp20 := lang.Apply(tmp15, []any{tmp19, "test"})
			if lang.IsTruthy(tmp20) {
			} else {
				panic("catch-binding-scope failed")
			}
			_ = tmp12
			var tmp21 any
			tmp22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp23 := tmp22.FindInternedVar(lang.NewSymbol("="))
			if tmp23.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp23)))
			}
			tmp24 := tmp23.Get()
			tmp25 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-advanced"))
			tmp26 := tmp25.FindInternedVar(lang.NewSymbol("catch-binding-scope-2"))
			if tmp26.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp26)))
			}
			tmp27 := tmp26.Get()
			tmp28 := lang.Apply(tmp27, nil)
			tmp29 := lang.Apply(tmp24, []any{tmp28, "outer"})
			if lang.IsTruthy(tmp29) {
			} else {
				panic("catch-binding-scope-2 failed")
			}
			_ = tmp21
			var tmp30 any
			tmp31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp32 := tmp31.FindInternedVar(lang.NewSymbol("="))
			if tmp32.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp32)))
			}
			tmp33 := tmp32.Get()
			tmp34 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-advanced"))
			tmp35 := tmp34.FindInternedVar(lang.NewSymbol("finally-with-return"))
			if tmp35.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp35)))
			}
			tmp36 := tmp35.Get()
			tmp37 := lang.Apply(tmp36, nil)
			tmp38 := lang.Apply(tmp33, []any{tmp37, int64(42)})
			if lang.IsTruthy(tmp38) {
			} else {
				panic("finally-with-return failed")
			}
			_ = tmp30
			return "advanced tests passed"
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// catch-binding-scope
	{
		tmp0 := lang.NewSymbol("catch-binding-scope").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_advanced.glj", lang.NewKeyword("line"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(9), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			{ // let
				// let binding "e"
				var v4 any = "outer"
				_ = v4
				var tmp5 any
				func() {
					defer func() {
						if r := recover(); r != nil {
							if lang.CatchMatches(r, lang.Builtins["any"]) {
								v6 := r
								_ = v6
								tmp5 = v6
							} else {
								panic(r)
							}
						}
					}()
					panic("test")
				}()
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// catch-binding-scope-2
	{
		tmp0 := lang.NewSymbol("catch-binding-scope-2").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_advanced.glj", lang.NewKeyword("line"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(16), lang.NewKeyword("end-column"), int(27), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			{ // let
				// let binding "e"
				var v4 any = "outer"
				_ = v4
				var tmp5 any
				func() {
					defer func() {
						if r := recover(); r != nil {
							if lang.CatchMatches(r, lang.Builtins["any"]) {
								v6 := r
								_ = v6
								tmp5 = v6
							} else {
								panic(r)
							}
						}
					}()
					panic("test")
				}()
				_ = tmp5
				tmp3 = v4
			} // end let
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// finally-with-return
	{
		tmp0 := lang.NewSymbol("finally-with-return").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_advanced.glj", lang.NewKeyword("line"), int(24), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(24), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
					_ = int64(100)
				}()
				tmp3 = int64(42)
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// try-custom-value
	{
		tmp0 := lang.NewSymbol("try-custom-value").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_advanced.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = v4
						} else {
							panic(r)
						}
					}
				}()
				panic("custom error")
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
