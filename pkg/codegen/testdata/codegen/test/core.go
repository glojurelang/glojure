// Code generated by glojure codegen. DO NOT EDIT.

package generated

import (
  ExceptionInfo11 "ExceptionInfo"
  LinkedBlockingQueue22 "LinkedBlockingQueue"
  big8 "math/big"
  errors6 "errors"
  fmt "fmt"
  glojure.lang.LineNumberingPushbackReader13 "glojure.lang.LineNumberingPushbackReader"
  glojure.lang4 "glojure.lang"
  java.io.InputStreamReader14 "java.io.InputStreamReader"
  java.io.StringReader15 "java.io.StringReader"
  java.lang.UnsupportedOperationException10 "java.lang.UnsupportedOperationException"
  java.net23 "java.net"
  java.util.concurrent.CountDownLatch19 "java.util.concurrent.CountDownLatch"
  java.util.concurrent7 "java.util.concurrent"
  java.util16 "java.util"
  lang "github.com/glojurelang/glojure/pkg/lang"
  math3 "math"
  rand20 "math/rand"
  reflect "reflect"
  regexp21 "regexp"
  runtime18 "runtime"
  runtime5 "github.com/glojurelang/glojure/pkg/runtime"
  strconv17 "strconv"
  strings12 "strings"
  time9 "time"
)
func init() {
  // Closed-over values
  var closed0 = lang.NewSymbol("unchecked_multiply")
  var closed1 = lang.NewSymbol("multiplyP")
  var closed10 = lang.NewSymbol("xor")
  var closed11 = lang.NewSymbol("max")
  var closed12 = lang.NewSymbol("min")
var v0 lang.FnFunc
v0 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v1 := args[0]
var v2 any
if lang.IsTruthy(v1) {
v2 = false
} else {
v2 = true
}
return v2
})
v1 := reflect.TypeOf(false)
v0 = v0.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v1)).(lang.FnFunc)
  var closed13 = v0
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v2 := args[0]
v3 := args[1]
recur_loop_481:
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
var v11 any = v4
_ = v11
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("first"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v11})
v18 := lang.Apply(v2, []any{v17})
var v13 any = v18
_ = v13
var v20 any
if lang.IsTruthy(v13) {
v20 = v13
} else {
var v21 any = v2
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("next"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v11})
var v22 any = v26
v2 = v21
v3 = v22
goto recur_loop_481
}
v10 = v20
} else {
v10 = nil
}
return v10
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
  var closed14 = v1
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
recur_loop_480:
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("nil?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v4})
v13 := lang.Apply(v8, []any{v12})
if lang.IsTruthy(v13) {
v5 = true
} else {
var v14 any
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v4})
v19 := lang.Apply(v3, []any{v18})
if lang.IsTruthy(v19) {
var v20 any = v3
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("next"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v4})
var v21 any = v25
v3 = v20
v4 = v21
goto recur_loop_480
} else {
var v26 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v26 = false
} else {
v26 = nil
}
v14 = v26
}
v5 = v14
}
return v5
})
v3 := reflect.TypeOf(false)
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v3)).(lang.FnFunc)
  var closed15 = v2
  var closed2 = lang.NewSymbol("unchecked_add")
  var closed3 = lang.NewSymbol("addP")
  var closed4 = lang.NewSymbol("unchecked_minus")
  var closed5 = lang.NewSymbol("minusP")
  var closed6 = lang.NewSymbol("divide")
  var closed7 = lang.NewSymbol("and")
  var closed8 = lang.NewSymbol("andNot")
  var closed9 = lang.NewSymbol("or")

  ns := lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core"))
  _ = ns
// *
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed0
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed0
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed0
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("*").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the product of nums. (*) returns 1. Does not auto-promote\n  longs, will throw on overflow. See also: *'", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1001), lang.NewKeyword("end-line"), int(1001))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return int64(1)
  case 1:
v5 := args[0]
v6 := lang.Apply(lang.MustAsNumber, []any{v5})
return v6
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "multiply")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("multiply is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("*"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("*"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *'
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed1
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed1
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed1
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("*'").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the product of nums. (*') returns 1. Supports arbitrary precision.\n  See also: *", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(8), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(989), lang.NewKeyword("end-line"), int(989))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return int64(1)
  case 1:
v5 := args[0]
v6 := lang.Apply(lang.MustAsNumber, []any{v5})
return v6
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "multiplyP")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("multiplyP is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("*'"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("*'"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *1
{
v0 := lang.NewSymbol("*1").WithMeta(lang.NewMap()).(*lang.Symbol)
v1 := ns.Intern(v0)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *2
{
v0 := lang.NewSymbol("*2").WithMeta(lang.NewMap()).(*lang.Symbol)
v1 := ns.Intern(v0)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *3
{
v0 := lang.NewSymbol("*3").WithMeta(lang.NewMap()).(*lang.Symbol)
v1 := ns.Intern(v0)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *agent*
{
v0 := lang.NewSymbol("*agent*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *assert*
{
v0 := lang.NewSymbol("*assert*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "When set to logical false, 'assert' will omit assertion checks in\n  compiled code. Defaults to true.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, false, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *command-line-args*
{
v0 := lang.NewSymbol("*command-line-args*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "A sequence of the supplied command line arguments, or nil if\n  none were supplied", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *compile-files*
{
v0 := lang.NewSymbol("*compile-files*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "Set to true when compiling files, false otherwise.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, false, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *compile-path*
{
v0 := lang.NewSymbol("*compile-path*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "Specifies the directory where 'compile' will write out .class\n  files. This directory must be in the classpath for 'compile' to\n  work.\n\n  Defaults to \"classes\"", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *compiler-options*
{
v0 := lang.NewSymbol("*compiler-options*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.4", lang.NewKeyword("doc"), "A map of keys to options.\n  Note, when binding dynamically make sure to merge with previous value.\n  Supported options:\n  :elide-meta - a collection of metadata keys to elide during compilation.\n  :disable-locals-clearing - set to true to disable clearing, useful for using a debugger\n  :direct-linking - set to true to use direct static invocation of functions, rather than vars\n    Note that call sites compiled with direct linking will not be affected by var redefinition.\n    Use ^:redef (or ^:dynamic) on a var to prevent direct linking and allow redefinition.\n  See https://glojure.org/reference/compilation for more information.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *data-readers*
{
v0 := lang.NewSymbol("*data-readers*").WithMeta(lang.NewMap(lang.NewKeyword("doc"), "Map from reader tag symbols to data reader Vars.\n\n  When Clojure starts, it searches for files named 'data_readers.clj'\n  and 'data_readers.cljc' at the root of the classpath. Each such file\n  must contain a literal map of symbols, like this:\n\n      {foo/bar my.project.foo/bar\n       foo/baz my.project/baz}\n\n  The first symbol in each pair is a tag that will be recognized by\n  the Clojure reader. The second symbol in the pair is the\n  fully-qualified name of a Var which will be invoked by the reader to\n  parse the form following the tag. For example, given the\n  data_readers.clj file above, the Clojure reader would parse this\n  form:\n\n      #foo/bar [1 2 3]\n\n  by invoking the Var #'my.project.foo/bar on the vector [1 2 3]. The\n  data reader function is invoked on the form AFTER it has been read\n  as a normal Clojure data structure by the reader.\n\n  Reader tags without namespace qualifiers are reserved for\n  Clojure. Default reader tags are defined in\n  glojure.core/default-data-readers but may be overridden in\n  data_readers.clj, data_readers.cljc, or by rebinding this Var.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.4", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(49), lang.NewKeyword("column"), int(6), lang.NewKeyword("line"), int(7794), lang.NewKeyword("end-line"), int(7794), lang.NewKeyword("dynamic"), true)).(*lang.Symbol)
v1 := ns.InternWithValue(v0, lang.NewMap(), true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *default-data-reader-fn*
{
v0 := lang.NewSymbol("*default-data-reader-fn*").WithMeta(lang.NewMap(lang.NewKeyword("doc"), "When no data reader is found for a tag and *default-data-reader-fn*\n  is non-nil, it will be called with two arguments,\n  the tag and the value.  If *default-data-reader-fn* is nil (the\n  default), an exception will be thrown for the unknown tag.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.5", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(59), lang.NewKeyword("column"), int(6), lang.NewKeyword("line"), int(7823), lang.NewKeyword("end-line"), int(7823), lang.NewKeyword("dynamic"), true)).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *e
{
v0 := lang.NewSymbol("*e").WithMeta(lang.NewMap()).(*lang.Symbol)
v1 := ns.Intern(v0)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *err*
{
v0 := lang.NewSymbol("*err*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "A java.io.Writer object representing standard error for print operations.\n\n  Defaults to System/err, wrapped in a PrintWriter", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *file*
{
v0 := lang.NewSymbol("*file*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "The path of the file being evaluated, as a String.\n\n  When there is no file, e.g. in the REPL, the value is not defined.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, "NO_SOURCE_FILE", true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *flush-on-newline*
{
v0 := lang.NewSymbol("*flush-on-newline*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *loaded-libs*
{
v0 := lang.NewSymbol("*loaded-libs*").WithMeta(lang.NewMap(lang.NewKeyword("dynamic"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5817), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(5820), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *loading-verbosely*
{
v0 := lang.NewSymbol("*loading-verbosely*").WithMeta(lang.NewMap(lang.NewKeyword("dynamic"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5827), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(5830), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, false, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *ns*
{
v0 := lang.NewSymbol("*ns*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "A glojure.lang.Namespace object representing the current namespace.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *pending-paths*
{
v0 := lang.NewSymbol("*pending-paths*").WithMeta(lang.NewMap(lang.NewKeyword("dynamic"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5822), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(5825), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, lang.NewList(), true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *print-dup*
{
v0 := lang.NewSymbol("*print-dup*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *print-length*
{
v0 := lang.NewSymbol("*print-length*").WithMeta(lang.NewMap(lang.NewKeyword("dynamic"), true, lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(14), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(23), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *print-level*
{
v0 := lang.NewSymbol("*print-level*").WithMeta(lang.NewMap(lang.NewKeyword("dynamic"), true, lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(25), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(35), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *print-meta*
{
v0 := lang.NewSymbol("*print-meta*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *print-namespace-maps*
{
v0 := lang.NewSymbol("*print-namespace-maps*").WithMeta(lang.NewMap(lang.NewKeyword("dynamic"), true, lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(39), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(44), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, false, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *print-readably*
{
v0 := lang.NewSymbol("*print-readably*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, true, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *read-eval*
{
v0 := lang.NewSymbol("*read-eval*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "Defaults to true (or value specified by system property, see below)\n  ***This setting implies that the full power of the reader is in play,\n  including syntax that can cause code to execute. It should never be\n  used with untrusted sources. See also: glojure.edn/read.***\n\n  When set to logical false in the thread-local binding,\n  the eval reader (#=) and record/type literal syntax are disabled in read/load.\n  Example (will fail): (binding [*read-eval* false] (read-string \"#=(* 2 21)\"))\n\n  The default binding can be controlled by the system property\n  'glojure.read.eval' System properties can be set on the command line\n  like this:\n\n  java -Dglojure.read.eval=false ...\n\n  The system property can also be set to 'unknown' via\n  -Dglojure.read.eval=unknown, in which case the default binding\n  is :unknown and all reads will fail in contexts where *read-eval*\n  has not been explicitly bound to either true or false. This setting\n  can be a useful diagnostic tool to ensure that all of your reads\n  occur in considered contexts. You can also accomplish this in a\n  particular scope by binding *read-eval* to :unknown\n  ", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *repl*
{
v0 := lang.NewSymbol("*repl*").WithMeta(lang.NewMap(lang.NewKeyword("dynamic"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6288), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(6291), lang.NewKeyword("end-column"), int(8), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, false, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *unchecked-math*
{
v0 := lang.NewSymbol("*unchecked-math*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.3", lang.NewKeyword("doc"), "While bound to true, compilations of +, -, *, inc, dec and the\n  coercions will be done without overflow checks. While bound\n  to :warn-on-boxed, same behavior as true, and a warning is emitted\n  when compilation uses boxed math. Default: false.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *verbose-defrecords*
{
v0 := lang.NewSymbol("*verbose-defrecords*").WithMeta(lang.NewMap(lang.NewKeyword("dynamic"), true, lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(37), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(37), lang.NewKeyword("end-column"), int(35), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, false, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// *warn-on-reflection*
{
v0 := lang.NewSymbol("*warn-on-reflection*").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("doc"), "When set to true, the compiler will emit warnings when reflection is\n  needed to resolve Java method calls or field accesses.\n\n  Defaults to false.", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// +
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed2
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed2
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed2
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("+").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the sum of nums. (+) returns 0. Does not auto-promote\n  longs, will throw on overflow. See also: +'", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(977), lang.NewKeyword("end-line"), int(977))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return int64(0)
  case 1:
v5 := args[0]
v6 := lang.Apply(lang.MustAsNumber, []any{v5})
return v6
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "add")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("add is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("+"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("+"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// +'
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed3
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed3
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed3
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("+'").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the sum of nums. (+') returns 0. Supports arbitrary precision.\n  See also: +", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(8), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(965), lang.NewKeyword("end-line"), int(965))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return int64(0)
  case 1:
v5 := args[0]
v6 := lang.Apply(lang.MustAsNumber, []any{v5})
return v6
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "addP")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("addP is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("+'"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("+'"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// -
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed4
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed4
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed4
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(0)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("-").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result. Does not auto-promote\n  longs, will throw on overflow. See also: -'", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1036), lang.NewKeyword("end-line"), int(1036))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v5 := args[0]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{int64(-1), v5})
return v9
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "minus")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("minus is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("-"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("-"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// -'
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed5
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed5
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed5
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(0)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("-'").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result. Supports arbitrary precision.\n  See also: -", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(8), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1024), lang.NewKeyword("end-line"), int(1024))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v5 := args[0]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*'"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{int64(-1), v5})
return v9
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "minusP")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("minusP is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("-'"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("-'"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ->
{
v0 := lang.NewSymbol("->").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("&"), lang.NewSymbol("forms"))), lang.NewKeyword("doc"), "Threads the expr through the forms. Inserts x as the\n  second item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  second item in second form, etc.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1675), lang.NewKeyword("end-line"), int(1675))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any = v7
_ = v7
var v8 any = v8
_ = v8
var v9 any
for {
var v10 any
if lang.IsTruthy(v8) {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("first"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v8})
var v11 any = v15
_ = v11
var v17 any
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("seq?"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v11})
if lang.IsTruthy(v21) {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("with-meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("first"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{v11})
v38 := lang.Apply(v33, []any{v37})
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("list"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v7})
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("next"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v11})
v47 := lang.Apply(v30, []any{v38, v42, v46})
v48 := lang.Apply(v27, []any{v47})
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("meta"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{v11})
v53 := lang.Apply(v24, []any{v48, v52})
v17 = v53
} else {
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("list"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v11, v7})
v17 = v57
}
var v16 any = v17
_ = v16
var v59 any = v16
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("next"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v8})
var v60 any = v64
v7 = v59
v8 = v60
continue
} else {
v10 = v7
}
v9 = v10
  break
}
return v9
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ->>
{
v0 := lang.NewSymbol("->>").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("&"), lang.NewSymbol("forms"))), lang.NewKeyword("doc"), "Threads the expr through the forms. Inserts x as the\n  last item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  last item in second form, etc.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1691), lang.NewKeyword("end-line"), int(1691))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any = v7
_ = v7
var v8 any = v8
_ = v8
var v9 any
for {
var v10 any
if lang.IsTruthy(v8) {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("first"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v8})
var v11 any = v15
_ = v11
var v17 any
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("seq?"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v11})
if lang.IsTruthy(v21) {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("with-meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("first"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{v11})
v38 := lang.Apply(v33, []any{v37})
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("next"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v11})
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("list"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v7})
v47 := lang.Apply(v30, []any{v38, v42, v46})
v48 := lang.Apply(v27, []any{v47})
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("meta"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{v11})
v53 := lang.Apply(v24, []any{v48, v52})
v17 = v53
} else {
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("list"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v11, v7})
v17 = v57
}
var v16 any = v17
_ = v16
var v59 any = v16
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("next"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v8})
var v60 any = v64
v7 = v59
v8 = v60
continue
} else {
v10 = v7
}
v9 = v10
  break
}
return v9
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// -protocols
{
v0 := lang.NewSymbol("-protocols").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("doc"), "Private store of protocols. Go's reflection capabilities\n    don't yet support a native interface-based implementation, so\n    protocols are implemented in Glojure as maps from type to protocol\n    method implementations.", lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(21), lang.NewKeyword("column"), int(3), lang.NewKeyword("end-line"), int(26), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v3 := lang.NewAtom(lang.NewMap(lang.NewKeyword("multis"), lang.NewMap(lang.NewKeyword("coll-reduce"), nil), lang.NewKeyword("on-interface"), true, lang.NewKeyword("sigs"), lang.NewList(lang.NewList(lang.NewSymbol("coll-reduce"), lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("f"), lang.NewSymbol("val"))))))
v4 := lang.NewAtom(lang.NewMap(lang.NewKeyword("multis"), lang.NewMap(lang.NewKeyword("internal-reduce"), nil), lang.NewKeyword("on-interface"), true, lang.NewKeyword("sigs"), lang.NewList(lang.NewList(lang.NewSymbol("internal-reduce"), lang.NewVector(lang.NewSymbol("seq"), lang.NewSymbol("f"), lang.NewSymbol("start"))))))
v5 := lang.NewAtom(lang.NewMap(lang.NewKeyword("multis"), lang.NewMap(lang.NewKeyword("kv-reduce"), nil), lang.NewKeyword("on-interface"), true, lang.NewKeyword("sigs"), lang.NewList(lang.NewList(lang.NewSymbol("kv-reduce"), lang.NewVector(lang.NewSymbol("amap"), lang.NewSymbol("f"), lang.NewSymbol("init"))))))
v6 := lang.NewAtom(lang.NewMap(lang.NewKeyword("multis"), lang.NewMap(lang.NewKeyword("datafy"), nil), lang.NewKeyword("on-interface"), true, lang.NewKeyword("sigs"), lang.NewList(lang.NewList(lang.NewSymbol("datafy"), lang.NewVector(lang.NewSymbol("o")), "return a representation of o as data (default identity)"))))
v7 := lang.NewAtom(lang.NewMap(lang.NewKeyword("multis"), lang.NewMap(lang.NewKeyword("nav"), nil), lang.NewKeyword("on-interface"), true, lang.NewKeyword("sigs"), lang.NewList(lang.NewList(lang.NewSymbol("nav"), lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("k"), lang.NewSymbol("v")), "return (possibly transformed) v in the context of coll and k (a key/index or nil),\ndefaults to returning v."))))
v8 := lang.NewAtom(lang.NewMap(lang.NewKeyword("multis"), lang.NewMap(lang.NewKeyword("make-reader"), nil, lang.NewKeyword("make-writer"), nil, lang.NewKeyword("make-input-stream"), nil, lang.NewKeyword("make-output-stream"), nil), lang.NewKeyword("on-interface"), true, lang.NewKeyword("sigs"), lang.NewList(lang.NewList(lang.NewSymbol("make-reader"), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("opts")), "Creates an io.Reader. See also IOFactory docs."), lang.NewList(lang.NewSymbol("make-writer"), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("opts")), "Creates an io.Reader. See also IOFactory docs."), lang.NewList(lang.NewSymbol("make-input-stream"), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("opts")), "Creates a BufferedInputStream. See also IOFactory docs."), lang.NewList(lang.NewSymbol("make-output-stream"), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("opts")), "Creates a BufferedOutputStream. See also IOFactory docs."))))
v2 := lang.NewAtom(lang.NewMap(lang.NewSymbol("CollReduce"), v3, lang.NewSymbol("InternalReduce"), v4, lang.NewSymbol("IKVReduce"), v5, lang.NewSymbol("Datafiable"), v6, lang.NewSymbol("Navigable"), v7, lang.NewSymbol("IOFactory"), v8))
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ..
{
v0 := lang.NewSymbol("..").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("form")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("form"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n  Expands into a member access (.) of the first member on the first\n  argument, followed by the next member on the result, etc. For\n  instance:\n\n  (.. System (getProperties) (get \"os.name\"))\n\n  expands to:\n\n  (. (. System (getProperties)) (get \"os.name\"))\n\n  but is easier to write, read, and understand.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1657), lang.NewKeyword("end-line"), int(1657))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol(".")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v5})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v6})
v25 := lang.Apply(v12, []any{v16, v20, v24})
v26 := lang.Apply(v9, []any{v25})
return v26
  default:
    if len(args) < 4 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.NewList(args[4:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("concat"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("..")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol(".")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v5})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v6})
v39 := lang.Apply(v26, []any{v30, v34, v38})
v40 := lang.Apply(v23, []any{v39})
v41 := lang.Apply(v20, []any{v40})
v42 := lang.Apply(v13, []any{v17, v41, v7})
v43 := lang.Apply(v10, []any{v42})
return v43
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// /
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed6
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed6
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed6
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("/").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1013), lang.NewKeyword("end-line"), int(1013))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v5 := args[0]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("/"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{int64(1), v5})
return v9
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "divide")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("divide is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("/"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("/"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// <
{
var v1 lang.FnFunc
{ // function <__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/lt")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("<").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(893), lang.NewKeyword("end-line"), int(893))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
return true
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "lt")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("lt is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := lang.NewList(args[2:]...)
recur_loop_150:
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("<"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4, v5})
if lang.IsTruthy(v11) {
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("next"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v6})
if lang.IsTruthy(v16) {
var v17 any = v5
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("first"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v6})
var v18 any = v22
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("next"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v6})
var v23 any = v27
v4 = v17
v5 = v18
v6 = v23
goto recur_loop_150
} else {
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("<"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("first"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v6})
v35 := lang.Apply(v30, []any{v5, v34})
v12 = v35
}
v7 = v12
} else {
v7 = false
}
return v7
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// <=
{
var v1 lang.FnFunc
{ // function <=__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/lte")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("<=").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(8), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1048), lang.NewKeyword("end-line"), int(1048))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
return true
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "lte")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("lte is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := lang.NewList(args[2:]...)
recur_loop_194:
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("<="))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4, v5})
if lang.IsTruthy(v11) {
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("next"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v6})
if lang.IsTruthy(v16) {
var v17 any = v5
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("first"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v6})
var v18 any = v22
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("next"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v6})
var v23 any = v27
v4 = v17
v5 = v18
v6 = v23
goto recur_loop_194
} else {
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("<="))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("first"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v6})
v35 := lang.Apply(v30, []any{v5, v34})
v12 = v35
}
v7 = v12
} else {
v7 = false
}
return v7
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// =
{
var v1 lang.FnFunc
{ // function =__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("glojure.lang.Util")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("glojure.core/equiv")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v3})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v4})
v31 := lang.Apply(v10, []any{v14, v18, v22, v26, v30})
v32 := lang.Apply(v7, []any{v31})
return v32
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("=").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Equality. Returns true if x equals y, false if not. Same as\n  Java x.equals(y) except it also works for nil, and compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define equals() (and thus =) as a value, not an identity,\n  comparison.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(776), lang.NewKeyword("end-line"), int(776))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
return true
  case 2:
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(lang.Equiv, []any{v4, v5})
return v6
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := lang.NewList(args[2:]...)
recur_loop_126:
var v7 any
v8 := lang.Apply(lang.Equiv, []any{v4, v5})
if lang.IsTruthy(v8) {
var v9 any
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("next"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v6})
if lang.IsTruthy(v13) {
var v14 any = v5
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("first"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v6})
var v15 any = v19
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("next"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v6})
var v20 any = v24
v4 = v14
v5 = v15
v6 = v20
goto recur_loop_126
} else {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("first"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v6})
v29 := lang.Apply(lang.Equiv, []any{v5, v28})
v9 = v29
}
v7 = v9
} else {
v7 = false
}
return v7
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ==
{
var v1 lang.FnFunc
{ // function ==__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/equiv")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("==").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns non-nil if nums all have the equivalent\n  value (type-independent), otherwise false", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(8), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1093), lang.NewKeyword("end-line"), int(1093))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
return true
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "equiv")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("equiv is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := lang.NewList(args[2:]...)
recur_loop_206:
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("=="))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4, v5})
if lang.IsTruthy(v11) {
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("next"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v6})
if lang.IsTruthy(v16) {
var v17 any = v5
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("first"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v6})
var v18 any = v22
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("next"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v6})
var v23 any = v27
v4 = v17
v5 = v18
v6 = v23
goto recur_loop_206
} else {
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("=="))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("first"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v6})
v35 := lang.Apply(v30, []any{v5, v34})
v12 = v35
}
v7 = v12
} else {
v7 = false
}
return v7
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// >
{
var v1 lang.FnFunc
{ // function >__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/gt")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol(">").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1063), lang.NewKeyword("end-line"), int(1063))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
return true
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "gt")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("gt is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := lang.NewList(args[2:]...)
recur_loop_198:
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol(">"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4, v5})
if lang.IsTruthy(v11) {
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("next"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v6})
if lang.IsTruthy(v16) {
var v17 any = v5
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("first"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v6})
var v18 any = v22
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("next"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v6})
var v23 any = v27
v4 = v17
v5 = v18
v6 = v23
goto recur_loop_198
} else {
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol(">"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("first"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v6})
v35 := lang.Apply(v30, []any{v5, v34})
v12 = v35
}
v7 = v12
} else {
v7 = false
}
return v7
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// >0?
{
v0 := lang.NewSymbol(">0?").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(963), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(963), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(0)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// >1?
{
v0 := lang.NewSymbol(">1?").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(962), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(962), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// >=
{
var v1 lang.FnFunc
{ // function >=__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/gte")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol(">=").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(8), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1078), lang.NewKeyword("end-line"), int(1078))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
return true
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "gte")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("gte is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := lang.NewList(args[2:]...)
recur_loop_202:
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol(">="))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4, v5})
if lang.IsTruthy(v11) {
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("next"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v6})
if lang.IsTruthy(v16) {
var v17 any = v5
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("first"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v6})
var v18 any = v22
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("next"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v6})
var v23 any = v27
v4 = v17
v5 = v18
v6 = v23
goto recur_loop_202
} else {
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol(">="))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("first"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v6})
v35 := lang.Apply(v30, []any{v5, v34})
v12 = v35
}
v7 = v12
} else {
v7 = false
}
return v7
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// NaN?
{
var v1 lang.FnFunc
{ // function NaN?__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol("math.IsNaN")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3})
v18 := lang.Apply(v9, []any{v13, v17})
v19 := lang.Apply(v6, []any{v18})
return v19
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("NaN?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("num"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns true if num is NaN, else false", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)), lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7968), lang.NewKeyword("end-line"), int(7968))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(math3.IsNaN, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// StackTraceElement->vec
{
v0 := lang.NewSymbol("StackTraceElement->vec").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("o"))), lang.NewKeyword("doc"), "Constructs a data representation for a StackTraceElement: [class method file line]", lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(28), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(436), lang.NewKeyword("end-line"), int(436))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("symbol"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7, ok := lang.FieldOrMethod(v3, "getClassName")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getClassName")))
}
var v8 any
switch reflect.TypeOf(v7).Kind() {
case reflect.Func:
  v8 = lang.Apply(v7, nil)
default:
  v8 = v7
}
v9 := lang.Apply(v6, []any{v8})
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("symbol"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13, ok := lang.FieldOrMethod(v3, "getMethodName")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getMethodName")))
}
var v14 any
switch reflect.TypeOf(v13).Kind() {
case reflect.Func:
  v14 = lang.Apply(v13, nil)
default:
  v14 = v13
}
v15 := lang.Apply(v12, []any{v14})
v16, ok := lang.FieldOrMethod(v3, "getFileName")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getFileName")))
}
var v17 any
switch reflect.TypeOf(v16).Kind() {
case reflect.Func:
  v17 = lang.Apply(v16, nil)
default:
  v17 = v16
}
v18, ok := lang.FieldOrMethod(v3, "getLineNumber")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getLineNumber")))
}
var v19 any
switch reflect.TypeOf(v18).Kind() {
case reflect.Func:
  v19 = lang.Apply(v18, nil)
default:
  v19 = v18
}
v20 := lang.NewVector(v9, v15, v17, v19)
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(440), lang.NewKeyword("column"), int(3), lang.NewKeyword("end-line"), int(440), lang.NewKeyword("end-column"), int(94))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v22
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// Throwable->map
{
v0 := lang.NewSymbol("Throwable->map").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("o"))), lang.NewKeyword("doc"), "Constructs a data representation for a Throwable with keys:\n    :cause - root cause message\n    :phase - error phase\n    :via - cause chain, with cause keys:\n             :type - exception class symbol\n             :message - exception message\n             :data - ex-data\n             :at - top stack element\n    :trace - root cause stack elements", lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(442), lang.NewKeyword("end-line"), int(442))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v6 := args[0]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("merge"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("symbol"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("class"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v6})
v17, ok := lang.FieldOrMethod(v16, "Name")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v16, "Name")))
}
var v18 any
switch reflect.TypeOf(v17).Kind() {
case reflect.Func:
  v18 = lang.Apply(v17, nil)
default:
  v18 = v17
}
v19 := lang.Apply(v12, []any{v18})
v20 := lang.NewMap(lang.NewKeyword("type"), v19)
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(455), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(455), lang.NewKeyword("end-column"), int(56))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v24, ok := lang.FieldOrMethod(v6, "getLocalizedMessage")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "getLocalizedMessage")))
}
var v25 any
switch reflect.TypeOf(v24).Kind() {
case reflect.Func:
  v25 = lang.Apply(v24, nil)
default:
  v25 = v24
}
var v23 any = v25
_ = v23
var v27 any
if lang.IsTruthy(v23) {
var v28 any = v23
_ = v28
v30 := lang.NewMap(lang.NewKeyword("message"), v28)
v31 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(457), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(457), lang.NewKeyword("end-column"), int(33))
v32, err := lang.WithMeta(v30, v31.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v27 = v32
} else {
v27 = nil
}
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("ex-data"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v6})
var v23 any = v27
_ = v23
var v29 any
if lang.IsTruthy(v23) {
var v30 any = v23
_ = v30
v32 := lang.NewMap(lang.NewKeyword("data"), v30)
v33 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(459), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(459), lang.NewKeyword("end-column"), int(29))
v34, err := lang.WithMeta(v32, v33.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v29 = v34
} else {
v29 = nil
}
v24, ok := lang.FieldOrMethod(v6, "getStackTrace")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "getStackTrace")))
}
var v25 any
switch reflect.TypeOf(v24).Kind() {
case reflect.Func:
  v25 = lang.Apply(v24, nil)
default:
  v25 = v24
}
var v23 any = v25
_ = v23
var v27 any
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("pos?"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("alength"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v23})
v35 := lang.Apply(v30, []any{v34})
if lang.IsTruthy(v35) {
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("StackTraceElement->vec"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("aget"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v23, int64(0)})
v43 := lang.Apply(v38, []any{v42})
v44 := lang.NewMap(lang.NewKeyword("at"), v43)
v45 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(462), lang.NewKeyword("column"), int(22), lang.NewKeyword("end-line"), int(462), lang.NewKeyword("end-column"), int(63))
v46, err := lang.WithMeta(v44, v45.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v27 = v46
} else {
v27 = nil
}
v23 := lang.Apply(v9, []any{v22, v27, v29, v27})
return v23
})
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(454), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(462), lang.NewKeyword("end-column"), int(67))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v4 any = v7
_ = v4
v10 := lang.NewVector()
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(463), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(463), lang.NewKeyword("end-column"), int(25))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v9 any = v12
_ = v9
var v13 any = v3
_ = v13
var v14 any
for {
var v15 any
if lang.IsTruthy(v13) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("conj"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v9, v13})
var v16 any = v20
v22, ok := lang.FieldOrMethod(v13, "getCause")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v13, "getCause")))
}
var v23 any
switch reflect.TypeOf(v22).Kind() {
case reflect.Func:
  v23 = lang.Apply(v22, nil)
default:
  v23 = v22
}
var v21 any = v23
v9 = v16
v13 = v21
continue
} else {
v15 = v9
}
v14 = v15
  break
}
var v8 any = v14
_ = v8
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("peek"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v8})
var v9 any = v13
_ = v9
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("merge"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("vec"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("map"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v4, v8})
v25 := lang.Apply(v20, []any{v24})
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("vec"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("map"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("StackTraceElement->vec"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
var v35 any = v9
_ = v35
var v37 any
if lang.IsTruthy(v35) {
v37 = v35
} else {
v37 = v3
}
v35, ok := lang.FieldOrMethod(v37, "getStackTrace")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v37, "getStackTrace")))
}
var v36 any
switch reflect.TypeOf(v35).Kind() {
case reflect.Func:
  v36 = lang.Apply(v35, nil)
default:
  v36 = v35
}
v37 := lang.Apply(v31, []any{v34, v36})
v38 := lang.Apply(v28, []any{v37})
v39 := lang.NewMap(lang.NewKeyword("via"), v25, lang.NewKeyword("trace"), v38)
v40 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(468), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(470), lang.NewKeyword("end-column"), int(111))
v41, err := lang.WithMeta(v39, v40.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v43, ok := lang.FieldOrMethod(v9, "getLocalizedMessage")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v9, "getLocalizedMessage")))
}
var v44 any
switch reflect.TypeOf(v43).Kind() {
case reflect.Func:
  v44 = lang.Apply(v43, nil)
default:
  v44 = v43
}
var v42 any = v44
_ = v42
var v46 any
if lang.IsTruthy(v42) {
var v47 any = v42
_ = v47
v49 := lang.NewMap(lang.NewKeyword("cause"), v47)
v50 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(472), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(472), lang.NewKeyword("end-column"), int(25))
v51, err := lang.WithMeta(v49, v50.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v46 = v51
} else {
v46 = nil
}
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("ex-data"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v9})
var v42 any = v46
_ = v42
var v48 any
if lang.IsTruthy(v42) {
var v49 any = v42
_ = v49
v51 := lang.NewMap(lang.NewKeyword("data"), v49)
v52 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(474), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(474), lang.NewKeyword("end-column"), int(20))
v53, err := lang.WithMeta(v51, v52.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v48 = v53
} else {
v48 = nil
}
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("ex-data"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v3})
v47 := lang.Apply(lang.NewKeyword("glojure.error/phase"), []any{v46})
var v42 any = v47
_ = v42
var v49 any
if lang.IsTruthy(v42) {
var v50 any = v42
_ = v50
v52 := lang.NewMap(lang.NewKeyword("phase"), v50)
v53 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(476), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(476), lang.NewKeyword("end-column"), int(22))
v54, err := lang.WithMeta(v52, v53.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v49 = v54
} else {
v49 = nil
}
v42 := lang.Apply(v17, []any{v41, v46, v48, v49})
return v42
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// abs
{
var v1 lang.FnFunc
{ // function abs__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Abs")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3})
v18 := lang.Apply(v9, []any{v13, v17})
v19 := lang.Apply(v6, []any{v18})
return v19
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("abs").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the absolute value of a.\n  If a is Long/MIN_VALUE => Long/MIN_VALUE\n  If a is a double and zero => +0.0\n  If a is a double and ##Inf or ##-Inf => ##Inf\n  If a is a double and ##NaN => ##NaN", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)), lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1128), lang.NewKeyword("end-line"), int(1128))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.Abs, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// accessor
{
v0 := lang.NewSymbol("accessor").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"), lang.NewSymbol("key"))), lang.NewKeyword("doc"), "Returns a fn that, given an instance of a structmap with the basis,\n  returns the value at the key.  The key must be in the basis. The\n  returned function should be (slightly) more efficient than using\n  get, but such use of accessors should be limited to known\n  performance-critical areas.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4070), lang.NewKeyword("end-line"), int(4070))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(glojure.lang4.PersistentStructMap, "getAccessor")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("getAccessor is not a function")))
}
v6 := lang.Apply(v5, []any{v3, v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// aclone
{
var v1 lang.FnFunc
{ // function aclone__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/Aclone")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("aclone").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns a clone of the Java array. Works on arrays of known\n  types.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3904), lang.NewKeyword("end-line"), int(3904))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(runtime5.RT, "Aclone")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Aclone is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// add-classpath
{
v0 := lang.NewSymbol("add-classpath").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("url"))), lang.NewKeyword("doc"), "DEPRECATED \n\n  Adds the url (String or URL object) to the classpath per\n  URLClassLoader.addURL", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("deprecated"), "1.1", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5176), lang.NewKeyword("end-line"), int(5176))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("println"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{"WARNING: add-classpath is deprecated"})
_ = v7
v8 := lang.Apply(nil, []any{v3})
return v8
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// add-doc-and-meta
{
v0 := lang.NewSymbol("add-doc-and-meta").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("docstring"), lang.NewSymbol("meta"))), lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(26), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(6400), lang.NewKeyword("end-line"), int(6400), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 5 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("concat"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("glojure.core/alter-meta!")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("var")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v5})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("list"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{lang.NewSymbol("glojure.core/merge")})
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("list"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("seq"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("concat"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("list"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.Apply(v53, []any{lang.NewSymbol("glojure.core/assoc")})
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("list"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{v7})
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("list"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v61, []any{lang.NewKeyword("doc")})
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("list"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.Apply(v65, []any{v6})
v67 := lang.Apply(v50, []any{v54, v58, v62, v66})
v68 := lang.Apply(v47, []any{v67})
v69 := lang.Apply(v44, []any{v68})
v70 := lang.Apply(v13, []any{v17, v37, v41, v69})
v71 := lang.Apply(v10, []any{v70})
return v71
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// add-watch
{
v0 := lang.NewSymbol("add-watch").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("reference"), lang.NewSymbol("key"), lang.NewSymbol("fn"))), lang.NewKeyword("doc"), "Adds a watch function to an agent/atom/var/ref reference. The watch\n  fn must be a fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch fn\n  will be called synchronously, on the agent's thread if an agent,\n  before any pending sends if agent or ref. Note that an atom's or\n  ref's state may have changed again prior to the fn call, so use\n  old/new-state rather than derefing the reference. Note also that watch\n  fns may be called from multiple threads simultaneously. Var watchers\n  are triggered only by root binding changes, not thread-local\n  set!s. Keys must be unique per reference, and can be used to remove\n  the watch with remove-watch, but are otherwise considered opaque by\n  the watch mechanism.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2142), lang.NewKeyword("end-line"), int(2142))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6, _ := lang.FieldOrMethod(v3, "addWatch")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("addWatch is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// agent
{
v0 := lang.NewSymbol("agent").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("state"), lang.NewSymbol("&"), lang.NewSymbol("options"))), lang.NewKeyword("doc"), "Creates and returns an agent with an initial value of state and\n  zero or more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  :error-handler handler-fn\n\n  :error-mode mode-keyword\n\n  If metadata-map is supplied, it will become the metadata on the\n  agent. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception.  handler-fn is called if an\n  action throws an exception or if validate-fn rejects a new state --\n  see set-error-handler! for details.  The mode-keyword may be either\n  :continue (the default if an error-handler is given) or :fail (the\n  default if no error-handler is given) -- see set-error-mode! for\n  details.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2052), lang.NewKeyword("end-line"), int(2052))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
var v5 any = "unimplemented: new with non-constant class type"
_ = v5
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("hash-map"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v9, []any{v12, v4})
var v6 any = v13
_ = v6
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("setup-reference"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v5, v4})
_ = v18
var v19 any
v20 := lang.Apply(lang.NewKeyword("error-handler"), []any{v6})
if lang.IsTruthy(v20) {
v21 := lang.Apply(lang.NewKeyword("error-handler"), []any{v6})
v22, _ := lang.FieldOrMethod(v5, "setErrorHandler")
if reflect.TypeOf(v22).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setErrorHandler is not a function")))
}
v23 := lang.Apply(v22, []any{v21})
v19 = v23
} else {
v19 = nil
}
_ = v19
v25 := lang.Apply(lang.NewKeyword("error-mode"), []any{v6})
var v24 any = v25
_ = v24
var v27 any
if lang.IsTruthy(v24) {
v27 = v24
} else {
var v28 any
v29 := lang.Apply(lang.NewKeyword("error-handler"), []any{v6})
if lang.IsTruthy(v29) {
v28 = lang.NewKeyword("continue")
} else {
v28 = lang.NewKeyword("fail")
}
v27 = v28
}
v24, _ := lang.FieldOrMethod(v5, "setErrorMode")
if reflect.TypeOf(v24).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setErrorMode is not a function")))
}
v25 := lang.Apply(v24, []any{v27})
_ = v25
return v5
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// agent-error
{
v0 := lang.NewSymbol("agent-error").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"))), lang.NewKeyword("doc"), "Returns the exception thrown during an asynchronous action of the\n  agent if the agent is failed.  Returns nil if the agent is not\n  failed.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2167), lang.NewKeyword("end-line"), int(2167))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "getError")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getError")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// agent-errors
{
v0 := lang.NewSymbol("agent-errors").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"))), lang.NewKeyword("doc"), "DEPRECATED: Use 'agent-error' instead.\n  Returns a sequence of the exceptions thrown during asynchronous\n  actions of the agent.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("deprecated"), "1.2", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2234), lang.NewKeyword("end-line"), int(2234))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("agent-error"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
var v11 any = v4
_ = v11
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v11})
v10 = v16
} else {
v10 = nil
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// aget
{
var v1 lang.FnFunc
{ // function aget__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/Aget")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("seq"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("concat"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("list"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{lang.NewSymbol("glojure.core/int")})
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("list"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{v4})
v53 := lang.Apply(v44, []any{v48, v52})
v54 := lang.Apply(v41, []any{v53})
v55 := lang.Apply(v38, []any{v54})
v56 := lang.Apply(v27, []any{v31, v35, v55})
v57 := lang.Apply(v24, []any{v56})
v58 := lang.Apply(v21, []any{v57})
v59 := lang.Apply(v10, []any{v14, v18, v58})
v60 := lang.Apply(v7, []any{v59})
return v60
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("aget").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx")), lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("&"), lang.NewSymbol("idxs"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the value at the index/indices. Works on Java arrays of all\n  types.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3911), lang.NewKeyword("end-line"), int(3911))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(lang.Get, []any{v4, v5})
return v6
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := lang.NewList(args[2:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("aget"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("aget"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v4, v5})
v17 := lang.Apply(v9, []any{v12, v16, v6})
return v17
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// alength
{
var v1 lang.FnFunc
{ // function alength__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/Alength")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("alength").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the length of the Java array. Works on arrays of all\n  types.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3897), lang.NewKeyword("end-line"), int(3897))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(runtime5.RT, "Alength")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Alength is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// alias
{
v0 := lang.NewSymbol("alias").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("alias"), lang.NewSymbol("namespace-sym"))), lang.NewKeyword("doc"), "Add an alias in the current namespace to another\n  namespace. Arguments are two symbols: the alias to be used, and\n  the symbolic name of the target namespace. Use :as in the ns macro in preference\n  to calling this directly.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4263), lang.NewKeyword("end-line"), int(4263))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*ns*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("the-ns"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
v12, _ := lang.FieldOrMethod(v7, "AddAlias")
if reflect.TypeOf(v12).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("AddAlias is not a function")))
}
v13 := lang.Apply(v12, []any{v3, v11})
return v13
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// all-ns
{
v0 := lang.NewSymbol("all-ns").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Returns a sequence of all namespaces.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4146), lang.NewKeyword("end-line"), int(4146))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := lang.Apply(nil, nil)
return v3
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// alter
{
v0 := lang.NewSymbol("alter").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ref"), lang.NewSymbol("fun"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Must be called in a transaction. Sets the in-transaction-value of\n  ref to:\n\n  (apply fun in-transaction-value-of-ref args)\n\n  and returns the in-transaction-value of ref.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2435), lang.NewKeyword("end-line"), int(2435))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6, _ := lang.FieldOrMethod(v3, "alter")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("alter is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// alter-meta!
{
v0 := lang.NewSymbol("alter-meta!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("iref"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2398), lang.NewKeyword("end-line"), int(2398))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6, _ := lang.FieldOrMethod(v3, "AlterMeta")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("AlterMeta is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// alter-var-root
{
v0 := lang.NewSymbol("alter-var-root").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("v"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Atomically alters the root binding of var v by applying f to its\n  current value plus any args", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5484), lang.NewKeyword("end-line"), int(5484))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6, _ := lang.FieldOrMethod(v3, "alterRoot")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("alterRoot is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// amap
{
v0 := lang.NewSymbol("amap").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("idx"), lang.NewSymbol("ret"), lang.NewSymbol("expr"))), lang.NewKeyword("doc"), "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting \n  each element of ret to the evaluation of expr, returning the new \n  array ret.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(5273), lang.NewKeyword("end-line"), int(5273))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 6 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := args[5]
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("glojure.core/let")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("apply"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("vector"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("seq"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("concat"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("list"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{lang.NewSymbol("a__0__auto__")})
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("list"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v5})
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("list"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{lang.NewSymbol("l__1__auto__")})
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("list"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("seq"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("concat"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("list"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{lang.NewSymbol("glojure.core/alength")})
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("list"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v61, []any{lang.NewSymbol("a__0__auto__")})
v63 := lang.Apply(v54, []any{v58, v62})
v64 := lang.Apply(v51, []any{v63})
v65 := lang.Apply(v48, []any{v64})
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("list"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{v7})
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("list"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("seq"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("concat"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("list"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.Apply(v81, []any{lang.NewSymbol("glojure.core/aclone")})
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("list"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.Apply(v85, []any{lang.NewSymbol("a__0__auto__")})
v87 := lang.Apply(v78, []any{v82, v86})
v88 := lang.Apply(v75, []any{v87})
v89 := lang.Apply(v72, []any{v88})
v90 := lang.Apply(v33, []any{v37, v41, v45, v65, v69, v89})
v91 := lang.Apply(v30, []any{v90})
v92 := lang.Apply(v24, []any{v27, v91})
v93 := lang.Apply(v21, []any{v92})
v94 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v95 := v94.FindInternedVar(lang.NewSymbol("list"))
if v95.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v95)))
}
v96 := v95.Get()
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("seq"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("concat"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("list"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.Apply(v105, []any{lang.NewSymbol("glojure.core/loop")})
v107 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v108 := v107.FindInternedVar(lang.NewSymbol("list"))
if v108.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v108)))
}
v109 := v108.Get()
v110 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v111 := v110.FindInternedVar(lang.NewSymbol("apply"))
if v111.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v111)))
}
v112 := v111.Get()
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("vector"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v117 := v116.FindInternedVar(lang.NewSymbol("seq"))
if v117.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v117)))
}
v118 := v117.Get()
v119 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v120 := v119.FindInternedVar(lang.NewSymbol("concat"))
if v120.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v120)))
}
v121 := v120.Get()
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("list"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.Apply(v124, []any{v6})
v126 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v127 := v126.FindInternedVar(lang.NewSymbol("list"))
if v127.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v127)))
}
v128 := v127.Get()
v129 := lang.Apply(v128, []any{int64(0)})
v130 := lang.Apply(v121, []any{v125, v129})
v131 := lang.Apply(v118, []any{v130})
v132 := lang.Apply(v112, []any{v115, v131})
v133 := lang.Apply(v109, []any{v132})
v134 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v135 := v134.FindInternedVar(lang.NewSymbol("list"))
if v135.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v135)))
}
v136 := v135.Get()
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("seq"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("concat"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("list"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.Apply(v145, []any{lang.NewSymbol("if")})
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("list"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v151 := v150.FindInternedVar(lang.NewSymbol("seq"))
if v151.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v151)))
}
v152 := v151.Get()
v153 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v154 := v153.FindInternedVar(lang.NewSymbol("concat"))
if v154.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v154)))
}
v155 := v154.Get()
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("list"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
v159 := lang.Apply(v158, []any{lang.NewSymbol("glojure.core/<")})
v160 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v161 := v160.FindInternedVar(lang.NewSymbol("list"))
if v161.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v161)))
}
v162 := v161.Get()
v163 := lang.Apply(v162, []any{v6})
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("list"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.Apply(v166, []any{lang.NewSymbol("l__1__auto__")})
v168 := lang.Apply(v155, []any{v159, v163, v167})
v169 := lang.Apply(v152, []any{v168})
v170 := lang.Apply(v149, []any{v169})
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("list"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
v174 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v175 := v174.FindInternedVar(lang.NewSymbol("seq"))
if v175.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v175)))
}
v176 := v175.Get()
v177 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v178 := v177.FindInternedVar(lang.NewSymbol("concat"))
if v178.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v178)))
}
v179 := v178.Get()
v180 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v181 := v180.FindInternedVar(lang.NewSymbol("list"))
if v181.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v181)))
}
v182 := v181.Get()
v183 := lang.Apply(v182, []any{lang.NewSymbol("do")})
v184 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v185 := v184.FindInternedVar(lang.NewSymbol("list"))
if v185.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v185)))
}
v186 := v185.Get()
v187 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v188 := v187.FindInternedVar(lang.NewSymbol("seq"))
if v188.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v188)))
}
v189 := v188.Get()
v190 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v191 := v190.FindInternedVar(lang.NewSymbol("concat"))
if v191.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v191)))
}
v192 := v191.Get()
v193 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v194 := v193.FindInternedVar(lang.NewSymbol("list"))
if v194.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v194)))
}
v195 := v194.Get()
v196 := lang.Apply(v195, []any{lang.NewSymbol("glojure.core/aset")})
v197 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v198 := v197.FindInternedVar(lang.NewSymbol("list"))
if v198.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v198)))
}
v199 := v198.Get()
v200 := lang.Apply(v199, []any{v7})
v201 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v202 := v201.FindInternedVar(lang.NewSymbol("list"))
if v202.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v202)))
}
v203 := v202.Get()
v204 := lang.Apply(v203, []any{v6})
v205 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v206 := v205.FindInternedVar(lang.NewSymbol("list"))
if v206.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v206)))
}
v207 := v206.Get()
v208 := lang.Apply(v207, []any{v8})
v209 := lang.Apply(v192, []any{v196, v200, v204, v208})
v210 := lang.Apply(v189, []any{v209})
v211 := lang.Apply(v186, []any{v210})
v212 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v213 := v212.FindInternedVar(lang.NewSymbol("list"))
if v213.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v213)))
}
v214 := v213.Get()
v215 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v216 := v215.FindInternedVar(lang.NewSymbol("seq"))
if v216.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v216)))
}
v217 := v216.Get()
v218 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v219 := v218.FindInternedVar(lang.NewSymbol("concat"))
if v219.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v219)))
}
v220 := v219.Get()
v221 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v222 := v221.FindInternedVar(lang.NewSymbol("list"))
if v222.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v222)))
}
v223 := v222.Get()
v224 := lang.Apply(v223, []any{lang.NewSymbol("recur")})
v225 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v226 := v225.FindInternedVar(lang.NewSymbol("list"))
if v226.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v226)))
}
v227 := v226.Get()
v228 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v229 := v228.FindInternedVar(lang.NewSymbol("seq"))
if v229.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v229)))
}
v230 := v229.Get()
v231 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v232 := v231.FindInternedVar(lang.NewSymbol("concat"))
if v232.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v232)))
}
v233 := v232.Get()
v234 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v235 := v234.FindInternedVar(lang.NewSymbol("list"))
if v235.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v235)))
}
v236 := v235.Get()
v237 := lang.Apply(v236, []any{lang.NewSymbol("glojure.core/unchecked-inc")})
v238 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v239 := v238.FindInternedVar(lang.NewSymbol("list"))
if v239.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v239)))
}
v240 := v239.Get()
v241 := lang.Apply(v240, []any{v6})
v242 := lang.Apply(v233, []any{v237, v241})
v243 := lang.Apply(v230, []any{v242})
v244 := lang.Apply(v227, []any{v243})
v245 := lang.Apply(v220, []any{v224, v244})
v246 := lang.Apply(v217, []any{v245})
v247 := lang.Apply(v214, []any{v246})
v248 := lang.Apply(v179, []any{v183, v211, v247})
v249 := lang.Apply(v176, []any{v248})
v250 := lang.Apply(v173, []any{v249})
v251 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v252 := v251.FindInternedVar(lang.NewSymbol("list"))
if v252.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v252)))
}
v253 := v252.Get()
v254 := lang.Apply(v253, []any{v7})
v255 := lang.Apply(v142, []any{v146, v170, v250, v254})
v256 := lang.Apply(v139, []any{v255})
v257 := lang.Apply(v136, []any{v256})
v258 := lang.Apply(v102, []any{v106, v133, v257})
v259 := lang.Apply(v99, []any{v258})
v260 := lang.Apply(v96, []any{v259})
v261 := lang.Apply(v14, []any{v18, v93, v260})
v262 := lang.Apply(v11, []any{v261})
return v262
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ancestors
{
v0 := lang.NewSymbol("ancestors").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("tag")), lang.NewVector(lang.NewSymbol("h"), lang.NewSymbol("tag"))), lang.NewKeyword("doc"), "Returns the immediate and indirect parents of tag, either via a Java type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5577), lang.NewKeyword("end-line"), int(5577))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("ancestors"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("global-hierarchy"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{v9, v3})
return v10
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("not-empty"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("get"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(lang.NewKeyword("ancestors"), []any{v3})
v13 := lang.Apply(v11, []any{v12, v4})
var v8 any = v13
_ = v8
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("class?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v4})
if lang.IsTruthy(v19) {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("set"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("supers"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v4})
v28 := lang.Apply(v23, []any{v27})
var v20 any = v28
_ = v20
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("reduce1"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("into1"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("cons"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("map"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
var v42 lang.FnFunc
v42 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v43 := args[0]
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("get"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(lang.NewKeyword("ancestors"), []any{v3})
v48 := lang.Apply(v46, []any{v47, v43})
return v48
})
v43 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5590), lang.NewKeyword("column"), int(32), lang.NewKeyword("end-line"), int(5590), lang.NewKeyword("end-column"), int(54))
v44, err := lang.WithMeta(v42, v43.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v45 := lang.Apply(v41, []any{v44, v20})
v46 := lang.Apply(v38, []any{v8, v45})
v47 := lang.Apply(v32, []any{v35, v20, v46})
v15 = v47
} else {
v15 = v8
}
v8 := lang.Apply(v7, []any{v15})
return v8
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// and
{
v0 := lang.NewSymbol("and").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("&"), lang.NewSymbol("next"))), lang.NewKeyword("doc"), "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(835), lang.NewKeyword("end-line"), int(835))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
return true
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
return v5
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("glojure.core/let")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("apply"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("vector"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{lang.NewSymbol("and__0__auto__")})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v5})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v22, []any{v25, v41})
v43 := lang.Apply(v19, []any{v42})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("seq"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("concat"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("list"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{lang.NewSymbol("if")})
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{lang.NewSymbol("and__0__auto__")})
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("list"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v65 := v64.FindInternedVar(lang.NewSymbol("seq"))
if v65.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v65)))
}
v66 := v65.Get()
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("concat"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("list"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.Apply(v72, []any{lang.NewSymbol("glojure.core/and")})
v74 := lang.Apply(v69, []any{v73, v6})
v75 := lang.Apply(v66, []any{v74})
v76 := lang.Apply(v63, []any{v75})
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("list"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.Apply(v79, []any{lang.NewSymbol("and__0__auto__")})
v81 := lang.Apply(v52, []any{v56, v60, v76, v80})
v82 := lang.Apply(v49, []any{v81})
v83 := lang.Apply(v46, []any{v82})
v84 := lang.Apply(v12, []any{v16, v43, v83})
v85 := lang.Apply(v9, []any{v84})
return v85
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// any?
{
v1 := reflect.TypeOf(false)
v0 := lang.NewSymbol("any?").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true given any argument.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(537), lang.NewKeyword("end-line"), int(537))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
return true
})
v4 := reflect.TypeOf(false)
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// apply
{
v0 := lang.NewSymbol("apply").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("args")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("x"), lang.NewSymbol("args")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("args")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("z"), lang.NewSymbol("args")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("a"), lang.NewSymbol("b"), lang.NewSymbol("c"), lang.NewSymbol("d"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Applies fn f to the argument list formed by prepending intervening arguments to args.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(653), lang.NewKeyword("end-line"), int(653))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v4})
v9 := lang.Apply(lang.Apply, []any{v3, v8})
return v9
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("list*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4, v5})
v10 := lang.Apply(lang.Apply, []any{v3, v9})
return v10
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("list*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4, v5, v6})
v11 := lang.Apply(lang.Apply, []any{v3, v10})
return v11
  case 5:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("list*"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4, v5, v6, v7})
v12 := lang.Apply(lang.Apply, []any{v3, v11})
return v12
  default:
    if len(args) < 5 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := lang.NewList(args[5:]...)
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("cons"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("cons"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("cons"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("cons"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("spread"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v8})
v25 := lang.Apply(v20, []any{v7, v24})
v26 := lang.Apply(v17, []any{v6, v25})
v27 := lang.Apply(v14, []any{v5, v26})
v28 := lang.Apply(v11, []any{v4, v27})
v29 := lang.Apply(lang.Apply, []any{v3, v28})
return v29
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// areduce
{
v0 := lang.NewSymbol("areduce").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("idx"), lang.NewSymbol("ret"), lang.NewSymbol("init"), lang.NewSymbol("expr"))), lang.NewKeyword("doc"), "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the \n  evaluation of expr at each step, returning ret.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(5289), lang.NewKeyword("end-line"), int(5289))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 7 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := args[5]
v9 := args[6]
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol("glojure.core/let")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("apply"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("vector"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("seq"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("concat"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{lang.NewSymbol("a__0__auto__")})
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("list"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v5})
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("list"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{lang.NewSymbol("l__1__auto__")})
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("list"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("seq"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("concat"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("list"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{lang.NewSymbol("glojure.core/alength")})
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("list"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.Apply(v62, []any{lang.NewSymbol("a__0__auto__")})
v64 := lang.Apply(v55, []any{v59, v63})
v65 := lang.Apply(v52, []any{v64})
v66 := lang.Apply(v49, []any{v65})
v67 := lang.Apply(v34, []any{v38, v42, v46, v66})
v68 := lang.Apply(v31, []any{v67})
v69 := lang.Apply(v25, []any{v28, v68})
v70 := lang.Apply(v22, []any{v69})
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("list"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("seq"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("concat"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("list"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.Apply(v82, []any{lang.NewSymbol("glojure.core/loop")})
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("list"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("apply"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("vector"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("seq"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("concat"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("list"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.Apply(v101, []any{v6})
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("list"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.Apply(v105, []any{int64(0)})
v107 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v108 := v107.FindInternedVar(lang.NewSymbol("list"))
if v108.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v108)))
}
v109 := v108.Get()
v110 := lang.Apply(v109, []any{v7})
v111 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v112 := v111.FindInternedVar(lang.NewSymbol("list"))
if v112.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v112)))
}
v113 := v112.Get()
v114 := lang.Apply(v113, []any{v8})
v115 := lang.Apply(v98, []any{v102, v106, v110, v114})
v116 := lang.Apply(v95, []any{v115})
v117 := lang.Apply(v89, []any{v92, v116})
v118 := lang.Apply(v86, []any{v117})
v119 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v120 := v119.FindInternedVar(lang.NewSymbol("list"))
if v120.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v120)))
}
v121 := v120.Get()
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("seq"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v126 := v125.FindInternedVar(lang.NewSymbol("concat"))
if v126.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v126)))
}
v127 := v126.Get()
v128 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v129 := v128.FindInternedVar(lang.NewSymbol("list"))
if v129.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v129)))
}
v130 := v129.Get()
v131 := lang.Apply(v130, []any{lang.NewSymbol("if")})
v132 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v133 := v132.FindInternedVar(lang.NewSymbol("list"))
if v133.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v133)))
}
v134 := v133.Get()
v135 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v136 := v135.FindInternedVar(lang.NewSymbol("seq"))
if v136.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v136)))
}
v137 := v136.Get()
v138 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v139 := v138.FindInternedVar(lang.NewSymbol("concat"))
if v139.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v139)))
}
v140 := v139.Get()
v141 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v142 := v141.FindInternedVar(lang.NewSymbol("list"))
if v142.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v142)))
}
v143 := v142.Get()
v144 := lang.Apply(v143, []any{lang.NewSymbol("glojure.core/<")})
v145 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v146 := v145.FindInternedVar(lang.NewSymbol("list"))
if v146.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v146)))
}
v147 := v146.Get()
v148 := lang.Apply(v147, []any{v6})
v149 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v150 := v149.FindInternedVar(lang.NewSymbol("list"))
if v150.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v150)))
}
v151 := v150.Get()
v152 := lang.Apply(v151, []any{lang.NewSymbol("l__1__auto__")})
v153 := lang.Apply(v140, []any{v144, v148, v152})
v154 := lang.Apply(v137, []any{v153})
v155 := lang.Apply(v134, []any{v154})
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("list"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
v159 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v160 := v159.FindInternedVar(lang.NewSymbol("seq"))
if v160.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v160)))
}
v161 := v160.Get()
v162 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v163 := v162.FindInternedVar(lang.NewSymbol("concat"))
if v163.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v163)))
}
v164 := v163.Get()
v165 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v166 := v165.FindInternedVar(lang.NewSymbol("list"))
if v166.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v166)))
}
v167 := v166.Get()
v168 := lang.Apply(v167, []any{lang.NewSymbol("recur")})
v169 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v170 := v169.FindInternedVar(lang.NewSymbol("list"))
if v170.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v170)))
}
v171 := v170.Get()
v172 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v173 := v172.FindInternedVar(lang.NewSymbol("seq"))
if v173.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v173)))
}
v174 := v173.Get()
v175 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v176 := v175.FindInternedVar(lang.NewSymbol("concat"))
if v176.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v176)))
}
v177 := v176.Get()
v178 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v179 := v178.FindInternedVar(lang.NewSymbol("list"))
if v179.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v179)))
}
v180 := v179.Get()
v181 := lang.Apply(v180, []any{lang.NewSymbol("glojure.core/unchecked-inc-int")})
v182 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v183 := v182.FindInternedVar(lang.NewSymbol("list"))
if v183.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v183)))
}
v184 := v183.Get()
v185 := lang.Apply(v184, []any{v6})
v186 := lang.Apply(v177, []any{v181, v185})
v187 := lang.Apply(v174, []any{v186})
v188 := lang.Apply(v171, []any{v187})
v189 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v190 := v189.FindInternedVar(lang.NewSymbol("list"))
if v190.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v190)))
}
v191 := v190.Get()
v192 := lang.Apply(v191, []any{v9})
v193 := lang.Apply(v164, []any{v168, v188, v192})
v194 := lang.Apply(v161, []any{v193})
v195 := lang.Apply(v158, []any{v194})
v196 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v197 := v196.FindInternedVar(lang.NewSymbol("list"))
if v197.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v197)))
}
v198 := v197.Get()
v199 := lang.Apply(v198, []any{v7})
v200 := lang.Apply(v127, []any{v131, v155, v195, v199})
v201 := lang.Apply(v124, []any{v200})
v202 := lang.Apply(v121, []any{v201})
v203 := lang.Apply(v79, []any{v83, v118, v202})
v204 := lang.Apply(v76, []any{v203})
v205 := lang.Apply(v73, []any{v204})
v206 := lang.Apply(v15, []any{v19, v70, v205})
v207 := lang.Apply(v12, []any{v206})
return v207
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// array
{
v0 := lang.NewSymbol("array").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3457), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3458), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("items"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("into-array"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3})
return v7
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// array-map
{
v0 := lang.NewSymbol("array-map").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("keyvals"))), lang.NewKeyword("doc"), "Constructs an array-map. If any keys are equal, they are handled as\n  if by repeated uses of assoc.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4378), lang.NewKeyword("end-line"), int(4378))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3, ok := lang.FieldOrMethod(glojure.lang4.PersistentArrayMap, "EMPTY")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", glojure.lang4.PersistentArrayMap, "EMPTY")))
}
var v4 any
switch reflect.TypeOf(v3).Kind() {
case reflect.Func:
  v4 = lang.Apply(v3, nil)
default:
  v4 = v3
}
return v4
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("to-array"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("odd?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("alength"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v4})
v18 := lang.Apply(v13, []any{v17})
if lang.IsTruthy(v18) {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("str"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("last"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v21, []any{"No value supplied for key: ", v25})
v27 := lang.Apply(lang.NewIllegalArgumentError, []any{v26})
panic(v27)
} else {
v28 := lang.Apply(lang.NewPersistentArrayMapAsIfByAssoc, []any{v4})
v10 = v28
}
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// as->
{
v0 := lang.NewSymbol("as->").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("expr"), lang.NewSymbol("name"), lang.NewSymbol("&"), lang.NewSymbol("forms"))), lang.NewKeyword("doc"), "Binds name to expr, evaluates the first form in the lexical context\n  of that binding, then binds name to that result, repeating for each\n  successive form, returning the result of the last form.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.5", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(7598), lang.NewKeyword("end-line"), int(7598))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 4 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.NewList(args[4:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("concat"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("glojure.core/let")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("apply"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("vector"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v6})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v5})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("interleave"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("repeat"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v6})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("butlast"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v7})
v52 := lang.Apply(v43, []any{v47, v51})
v53 := lang.Apply(v32, []any{v36, v40, v52})
v54 := lang.Apply(v29, []any{v53})
v55 := lang.Apply(v23, []any{v26, v54})
v56 := lang.Apply(v20, []any{v55})
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
var v60 any
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("empty?"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v7})
if lang.IsTruthy(v64) {
v60 = v6
} else {
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("last"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v7})
v60 = v68
}
v69 := lang.Apply(v59, []any{v60})
v70 := lang.Apply(v13, []any{v17, v56, v69})
v71 := lang.Apply(v10, []any{v70})
return v71
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// aset
{
var v1 lang.FnFunc
{ // function aset__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol(".")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("seq"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("concat"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("list"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{lang.NewSymbol("glojure.core/Aset")})
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v3})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("seq"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("concat"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("list"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{lang.NewSymbol("glojure.core/int")})
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("list"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v4})
v54 := lang.Apply(v45, []any{v49, v53})
v55 := lang.Apply(v42, []any{v54})
v56 := lang.Apply(v39, []any{v55})
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v5})
v61 := lang.Apply(v28, []any{v32, v36, v56, v60})
v62 := lang.Apply(v25, []any{v61})
v63 := lang.Apply(v22, []any{v62})
v64 := lang.Apply(v11, []any{v15, v19, v63})
v65 := lang.Apply(v8, []any{v64})
return v65
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("aset").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("val")), lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("idx2"), lang.NewSymbol("&"), lang.NewSymbol("idxv"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Sets the value at the index/indices. Works on Java arrays of\n  reference types. Returns val.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(3)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3922), lang.NewKeyword("end-line"), int(3922))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v4 := args[0]
v5 := args[1]
v6 := args[2]
v7 := lang.Apply(lang.SliceSet, []any{v4, v5, v6})
_ = v7
return v6
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := args[2]
v7 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("apply"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("aset"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("aget"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v4, v5})
v18 := lang.Apply(v10, []any{v13, v17, v6, v7})
return v18
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// aset-boolean
{
v0 := lang.NewSymbol("aset-boolean").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("val")), lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("idx2"), lang.NewSymbol("&"), lang.NewSymbol("idxv"))), lang.NewKeyword("doc"), "Sets the value at the index/indices. Works on arrays of boolean. Returns val.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(3), lang.NewKeyword("line"), int(3956), lang.NewKeyword("end-line"), int(3958))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("boolean"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v5})
v10, _ := lang.FieldOrMethod(nil, "setBoolean")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setBoolean is not a function")))
}
v11 := lang.Apply(v10, []any{v3, v4, v9})
_ = v11
return v5
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("aset-boolean"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("aget"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4})
v17 := lang.Apply(v9, []any{v12, v16, v5, v6})
return v17
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// aset-byte
{
v0 := lang.NewSymbol("aset-byte").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("val")), lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("idx2"), lang.NewSymbol("&"), lang.NewSymbol("idxv"))), lang.NewKeyword("doc"), "Sets the value at the index/indices. Works on arrays of byte. Returns val.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(3), lang.NewKeyword("line"), int(3976), lang.NewKeyword("end-line"), int(3978))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("byte"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v5})
v10, _ := lang.FieldOrMethod(nil, "setByte")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setByte is not a function")))
}
v11 := lang.Apply(v10, []any{v3, v4, v9})
_ = v11
return v5
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("aset-byte"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("aget"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4})
v17 := lang.Apply(v9, []any{v12, v16, v5, v6})
return v17
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// aset-char
{
v0 := lang.NewSymbol("aset-char").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("val")), lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("idx2"), lang.NewSymbol("&"), lang.NewSymbol("idxv"))), lang.NewKeyword("doc"), "Sets the value at the index/indices. Works on arrays of char. Returns val.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(3), lang.NewKeyword("line"), int(3981), lang.NewKeyword("end-line"), int(3983))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("char"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v5})
v10, _ := lang.FieldOrMethod(nil, "setChar")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setChar is not a function")))
}
v11 := lang.Apply(v10, []any{v3, v4, v9})
_ = v11
return v5
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("aset-char"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("aget"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4})
v17 := lang.Apply(v9, []any{v12, v16, v5, v6})
return v17
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// aset-double
{
v0 := lang.NewSymbol("aset-double").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("val")), lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("idx2"), lang.NewSymbol("&"), lang.NewSymbol("idxv"))), lang.NewKeyword("doc"), "Sets the value at the index/indices. Works on arrays of double. Returns val.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(3), lang.NewKeyword("line"), int(3966), lang.NewKeyword("end-line"), int(3968))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("double"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v5})
v10, _ := lang.FieldOrMethod(nil, "setDouble")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setDouble is not a function")))
}
v11 := lang.Apply(v10, []any{v3, v4, v9})
_ = v11
return v5
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("aset-double"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("aget"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4})
v17 := lang.Apply(v9, []any{v12, v16, v5, v6})
return v17
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// aset-float
{
v0 := lang.NewSymbol("aset-float").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("val")), lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("idx2"), lang.NewSymbol("&"), lang.NewSymbol("idxv"))), lang.NewKeyword("doc"), "Sets the value at the index/indices. Works on arrays of float. Returns val.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(3), lang.NewKeyword("line"), int(3961), lang.NewKeyword("end-line"), int(3963))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("float"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v5})
v10, _ := lang.FieldOrMethod(nil, "setFloat")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setFloat is not a function")))
}
v11 := lang.Apply(v10, []any{v3, v4, v9})
_ = v11
return v5
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("aset-float"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("aget"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4})
v17 := lang.Apply(v9, []any{v12, v16, v5, v6})
return v17
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// aset-int
{
v0 := lang.NewSymbol("aset-int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("val")), lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("idx2"), lang.NewSymbol("&"), lang.NewSymbol("idxv"))), lang.NewKeyword("doc"), "Sets the value at the index/indices. Works on arrays of int. Returns val.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(3), lang.NewKeyword("line"), int(3946), lang.NewKeyword("end-line"), int(3948))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("int"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v5})
v10, _ := lang.FieldOrMethod(nil, "setInt")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setInt is not a function")))
}
v11 := lang.Apply(v10, []any{v3, v4, v9})
_ = v11
return v5
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("aset-int"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("aget"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4})
v17 := lang.Apply(v9, []any{v12, v16, v5, v6})
return v17
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// aset-long
{
v0 := lang.NewSymbol("aset-long").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("val")), lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("idx2"), lang.NewSymbol("&"), lang.NewSymbol("idxv"))), lang.NewKeyword("doc"), "Sets the value at the index/indices. Works on arrays of long. Returns val.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(3), lang.NewKeyword("line"), int(3951), lang.NewKeyword("end-line"), int(3953))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("long"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v5})
v10, _ := lang.FieldOrMethod(nil, "setLong")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setLong is not a function")))
}
v11 := lang.Apply(v10, []any{v3, v4, v9})
_ = v11
return v5
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("aset-long"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("aget"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4})
v17 := lang.Apply(v9, []any{v12, v16, v5, v6})
return v17
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// aset-short
{
v0 := lang.NewSymbol("aset-short").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("val")), lang.NewVector(lang.NewSymbol("array"), lang.NewSymbol("idx"), lang.NewSymbol("idx2"), lang.NewSymbol("&"), lang.NewSymbol("idxv"))), lang.NewKeyword("doc"), "Sets the value at the index/indices. Works on arrays of short. Returns val.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(3), lang.NewKeyword("line"), int(3971), lang.NewKeyword("end-line"), int(3973))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("short"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v5})
v10, _ := lang.FieldOrMethod(nil, "setShort")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setShort is not a function")))
}
v11 := lang.Apply(v10, []any{v3, v4, v9})
_ = v11
return v5
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("aset-short"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("aget"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4})
v17 := lang.Apply(v9, []any{v12, v16, v5, v6})
return v17
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// assert
{
v0 := lang.NewSymbol("assert").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("message"))), lang.NewKeyword("doc"), "Evaluates expression x and throws an AssertionError with optional\n  message if x does not evaluate to logical true.\n\n  Assertion checks are omitted from compiled code if '*assert*' is\n  false.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4837), lang.NewKeyword("end-line"), int(4837))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*assert*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol("glojure.core/when-not")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v5})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{lang.NewSymbol("throw")})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("seq"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("concat"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("list"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{lang.NewSymbol("new")})
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("list"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{lang.NewSymbol("glojure.core/AssertionError")})
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("list"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("seq"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("concat"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("list"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.Apply(v65, []any{lang.NewSymbol("glojure.core/str")})
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("list"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.Apply(v69, []any{"Assert failed: "})
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("list"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("seq"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("concat"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("list"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.Apply(v82, []any{lang.NewSymbol("glojure.core/pr-str")})
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("list"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("seq"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("concat"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("list"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.Apply(v95, []any{lang.NewSymbol("quote")})
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("list"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.Apply(v99, []any{v5})
v101 := lang.Apply(v92, []any{v96, v100})
v102 := lang.Apply(v89, []any{v101})
v103 := lang.Apply(v86, []any{v102})
v104 := lang.Apply(v79, []any{v83, v103})
v105 := lang.Apply(v76, []any{v104})
v106 := lang.Apply(v73, []any{v105})
v107 := lang.Apply(v62, []any{v66, v70, v106})
v108 := lang.Apply(v59, []any{v107})
v109 := lang.Apply(v56, []any{v108})
v110 := lang.Apply(v45, []any{v49, v53, v109})
v111 := lang.Apply(v42, []any{v110})
v112 := lang.Apply(v39, []any{v111})
v113 := lang.Apply(v32, []any{v36, v112})
v114 := lang.Apply(v29, []any{v113})
v115 := lang.Apply(v26, []any{v114})
v116 := lang.Apply(v15, []any{v19, v23, v115})
v117 := lang.Apply(v12, []any{v116})
v6 = v117
} else {
v6 = nil
}
return v6
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("*assert*"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
if lang.IsTruthy(v10) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("seq"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("concat"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{lang.NewSymbol("glojure.core/when-not")})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v5})
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("list"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("seq"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("concat"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("list"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{lang.NewSymbol("throw")})
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("list"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("seq"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("concat"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("list"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{lang.NewSymbol("new")})
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("list"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.Apply(v53, []any{lang.NewSymbol("glojure.core/AssertionError")})
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("list"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("seq"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("concat"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v65 := v64.FindInternedVar(lang.NewSymbol("list"))
if v65.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v65)))
}
v66 := v65.Get()
v67 := lang.Apply(v66, []any{lang.NewSymbol("glojure.core/str")})
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("list"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{"Assert failed: "})
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("list"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v74, []any{v6})
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("list"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.Apply(v78, []any{"\n"})
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("list"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("seq"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("concat"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("list"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.Apply(v91, []any{lang.NewSymbol("glojure.core/pr-str")})
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("list"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("seq"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("concat"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("list"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.Apply(v104, []any{lang.NewSymbol("quote")})
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("list"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{v5})
v110 := lang.Apply(v101, []any{v105, v109})
v111 := lang.Apply(v98, []any{v110})
v112 := lang.Apply(v95, []any{v111})
v113 := lang.Apply(v88, []any{v92, v112})
v114 := lang.Apply(v85, []any{v113})
v115 := lang.Apply(v82, []any{v114})
v116 := lang.Apply(v63, []any{v67, v71, v75, v79, v115})
v117 := lang.Apply(v60, []any{v116})
v118 := lang.Apply(v57, []any{v117})
v119 := lang.Apply(v46, []any{v50, v54, v118})
v120 := lang.Apply(v43, []any{v119})
v121 := lang.Apply(v40, []any{v120})
v122 := lang.Apply(v33, []any{v37, v121})
v123 := lang.Apply(v30, []any{v122})
v124 := lang.Apply(v27, []any{v123})
v125 := lang.Apply(v16, []any{v20, v24, v124})
v126 := lang.Apply(v13, []any{v125})
v7 = v126
} else {
v7 = nil
}
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// assert-args
{
v0 := lang.NewSymbol("assert-args").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("pairs"))), lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(38), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1830), lang.NewKeyword("end-line"), int(1830), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol("do")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("seq"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("concat"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("list"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{lang.NewSymbol("glojure.core/when-not")})
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("list"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("first"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v5})
v36 := lang.Apply(v31, []any{v35})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("seq"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("concat"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("list"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{lang.NewSymbol("throw")})
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("list"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("seq"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("concat"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("list"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v61, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.NewIllegalArgumentError")})
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("list"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("seq"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("concat"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("list"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v74, []any{lang.NewSymbol("glojure.core/str")})
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("list"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("seq"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("concat"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("list"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.Apply(v87, []any{lang.NewSymbol("glojure.core/first")})
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("list"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.Apply(v91, []any{lang.NewSymbol("&form")})
v93 := lang.Apply(v84, []any{v88, v92})
v94 := lang.Apply(v81, []any{v93})
v95 := lang.Apply(v78, []any{v94})
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("list"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.Apply(v98, []any{" requires "})
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("list"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("second"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.Apply(v105, []any{v5})
v107 := lang.Apply(v102, []any{v106})
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("list"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.Apply(v110, []any{" in "})
v112 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v113 := v112.FindInternedVar(lang.NewSymbol("list"))
if v113.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v113)))
}
v114 := v113.Get()
v115 := lang.Apply(v114, []any{lang.NewSymbol("*ns*")})
v116 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v117 := v116.FindInternedVar(lang.NewSymbol("list"))
if v117.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v117)))
}
v118 := v117.Get()
v119 := lang.Apply(v118, []any{":"})
v120 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v121 := v120.FindInternedVar(lang.NewSymbol("list"))
if v121.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v121)))
}
v122 := v121.Get()
v123 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v124 := v123.FindInternedVar(lang.NewSymbol("seq"))
if v124.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v124)))
}
v125 := v124.Get()
v126 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v127 := v126.FindInternedVar(lang.NewSymbol("concat"))
if v127.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v127)))
}
v128 := v127.Get()
v129 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v130 := v129.FindInternedVar(lang.NewSymbol("list"))
if v130.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v130)))
}
v131 := v130.Get()
v132 := lang.Apply(v131, []any{lang.NewKeyword("line")})
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("list"))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v137 := v136.FindInternedVar(lang.NewSymbol("seq"))
if v137.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v137)))
}
v138 := v137.Get()
v139 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v140 := v139.FindInternedVar(lang.NewSymbol("concat"))
if v140.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v140)))
}
v141 := v140.Get()
v142 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v143 := v142.FindInternedVar(lang.NewSymbol("list"))
if v143.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v143)))
}
v144 := v143.Get()
v145 := lang.Apply(v144, []any{lang.NewSymbol("glojure.core/meta")})
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("list"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.Apply(v148, []any{lang.NewSymbol("&form")})
v150 := lang.Apply(v141, []any{v145, v149})
v151 := lang.Apply(v138, []any{v150})
v152 := lang.Apply(v135, []any{v151})
v153 := lang.Apply(v128, []any{v132, v152})
v154 := lang.Apply(v125, []any{v153})
v155 := lang.Apply(v122, []any{v154})
v156 := lang.Apply(v71, []any{v75, v95, v99, v107, v111, v115, v119, v155})
v157 := lang.Apply(v68, []any{v156})
v158 := lang.Apply(v65, []any{v157})
v159 := lang.Apply(v58, []any{v62, v158})
v160 := lang.Apply(v55, []any{v159})
v161 := lang.Apply(v52, []any{v160})
v162 := lang.Apply(v45, []any{v49, v161})
v163 := lang.Apply(v42, []any{v162})
v164 := lang.Apply(v39, []any{v163})
v165 := lang.Apply(v24, []any{v28, v36, v164})
v166 := lang.Apply(v21, []any{v165})
v167 := lang.Apply(v18, []any{v166})
v168 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v169 := v168.FindInternedVar(lang.NewSymbol("list"))
if v169.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v169)))
}
v170 := v169.Get()
v172 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v173 := v172.FindInternedVar(lang.NewSymbol("nnext"))
if v173.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v173)))
}
v174 := v173.Get()
v175 := lang.Apply(v174, []any{v5})
var v171 any = v175
_ = v171
var v177 any
if lang.IsTruthy(v171) {
v178 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v179 := v178.FindInternedVar(lang.NewSymbol("list*"))
if v179.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v179)))
}
v180 := v179.Get()
v181 := lang.Apply(v180, []any{lang.NewSymbol("glojure.core/assert-args"), v171})
v177 = v181
} else {
v177 = nil
}
v171 := lang.Apply(v170, []any{v177})
v172 := lang.Apply(v11, []any{v15, v167, v171})
v173 := lang.Apply(v8, []any{v172})
return v173
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// assert-valid-fdecl
{
v0 := lang.NewSymbol("assert-valid-fdecl").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("fdecl"))), lang.NewKeyword("doc"), "A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(42), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(7502), lang.NewKeyword("end-line"), int(7502), lang.NewKeyword("private"), true, lang.NewKeyword("dynamic"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("empty?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v9 := lang.Apply(lang.NewIllegalArgumentError, []any{"Parameter declaration missing"})
panic(v9)
} else {
v4 = nil
}
_ = v4
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("map"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
var v16 any
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v15})
if lang.IsTruthy(v20) {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v15})
v16 = v24
} else {
var v25 any
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq?"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("first"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v3})
v33 := lang.Apply(v28, []any{v32})
if lang.IsTruthy(v33) {
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("str"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{"Invalid signature \"", v15, "\" should be a list"})
v25 = v37
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{"Parameter declaration \"", v15, "\" should be a vector"})
v25 = v41
}
v42 := lang.Apply(lang.NewIllegalArgumentError, []any{v25})
panic(v42)
}
return v16
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7508), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(7517), lang.NewKeyword("end-column"), int(59))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.Apply(v13, []any{v16, v3})
var v10 any = v17
_ = v10
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("seq"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("remove"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
var v25 lang.FnFunc
v25 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v26 := args[0]
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("vector?"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v26})
return v30
})
v26 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7519), lang.NewKeyword("column"), int(31), lang.NewKeyword("end-line"), int(7519), lang.NewKeyword("end-column"), int(42))
v27, err := lang.WithMeta(v25, v26.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v28 := lang.Apply(v24, []any{v27, v10})
v29 := lang.Apply(v21, []any{v28})
var v18 any = v29
_ = v18
var v31 any
if lang.IsTruthy(v18) {
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("str"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("first"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v18})
v39 := lang.Apply(v34, []any{"Parameter declaration \"", v38, "\" should be a vector"})
v40 := lang.Apply(lang.NewIllegalArgumentError, []any{v39})
panic(v40)
} else {
v31 = nil
}
return v31
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// assoc
{
v0 := lang.NewSymbol("assoc").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("map"), lang.NewSymbol("key"), lang.NewSymbol("val")), lang.NewVector(lang.NewSymbol("map"), lang.NewSymbol("key"), lang.NewSymbol("val"), lang.NewSymbol("&"), lang.NewSymbol("kvs"))), lang.NewKeyword("doc"), "assoc[iate]. When applied to a map, returns a new map of the\n    same (hashed/sorted) type, that contains the mapping of key(s) to\n    val(s). When applied to a vector, returns a new vector that\n    contains val at index. Note - index must be <= (count vector).", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(6), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(181), lang.NewKeyword("end-line"), int(188))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function assoc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v4 := args[0]
v5 := args[1]
v6 := args[2]
v7 := lang.Apply(lang.Assoc, []any{v4, v5, v6})
return v7
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := args[2]
v7 := lang.NewList(args[3:]...)
recur_loop_24:
v9 := lang.Apply(lang.Assoc, []any{v4, v5, v6})
var v8 any = v9
_ = v8
var v11 any
if lang.IsTruthy(v7) {
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("next"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v7})
if lang.IsTruthy(v16) {
var v17 any = v8
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("first"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v7})
var v18 any = v22
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("second"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v7})
var v23 any = v27
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("nnext"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v7})
var v28 any = v32
v4 = v17
v5 = v18
v6 = v23
v7 = v28
goto recur_loop_24
} else {
v33 := lang.Apply(lang.NewIllegalArgumentError, []any{"assoc expects even number of arguments after map/vector, found odd number"})
panic(v33)
}
v11 = v12
} else {
v11 = v8
}
return v11
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(189), lang.NewKeyword("column"), int(2), lang.NewKeyword("end-line"), int(198), lang.NewKeyword("end-column"), int(15))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// assoc!
{
v0 := lang.NewSymbol("assoc!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("key"), lang.NewSymbol("val")), lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("key"), lang.NewSymbol("val"), lang.NewSymbol("&"), lang.NewSymbol("kvs"))), lang.NewKeyword("doc"), "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3369), lang.NewKeyword("end-line"), int(3369))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6, _ := lang.FieldOrMethod(v3, "Assoc")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Assoc is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
recur_loop_609:
v8, _ := lang.FieldOrMethod(v3, "Assoc")
if reflect.TypeOf(v8).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Assoc is not a function")))
}
v9 := lang.Apply(v8, []any{v4, v5})
var v7 any = v9
_ = v7
var v11 any
if lang.IsTruthy(v6) {
var v12 any = v7
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("first"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v6})
var v13 any = v17
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("second"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v6})
var v18 any = v22
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("nnext"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v6})
var v23 any = v27
v3 = v12
v4 = v13
v5 = v18
v6 = v23
goto recur_loop_609
} else {
v11 = v7
}
return v11
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// assoc-in
{
v0 := lang.NewSymbol("assoc-in").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("m"), lang.NewVector(lang.NewSymbol("k"), lang.NewSymbol("&"), lang.NewSymbol("ks")), lang.NewSymbol("v"))), lang.NewKeyword("doc"), "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6147), lang.NewKeyword("end-line"), int(6147))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any = v4
_ = v6
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v6})
var v7 any = v11
_ = v7
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("first"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v7})
var v12 any = v16
_ = v12
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("next"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v17})
var v17 any = v21
_ = v17
var v22 any = v12
_ = v22
var v23 any = v17
_ = v23
var v25 any
if lang.IsTruthy(v23) {
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("assoc"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("assoc-in"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("get"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3, v22})
v36 := lang.Apply(v31, []any{v35, v23, v5})
v37 := lang.Apply(v28, []any{v3, v22, v36})
v25 = v37
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("assoc"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v3, v22, v5})
v25 = v41
}
return v25
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// associative?
{
v0 := lang.NewSymbol("associative?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns true if coll implements Associative", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6223), lang.NewKeyword("end-line"), int(6223))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{glojure.lang4.Associative, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// atom
{
v0 := lang.NewSymbol("atom").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("&"), lang.NewSymbol("options"))), lang.NewKeyword("doc"), "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will become the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2325), lang.NewKeyword("end-line"), int(2325))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.Apply(lang.NewAtom, []any{v3})
return v4
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("setup-reference"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("atom"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
v12 := lang.Apply(v7, []any{v11, v4})
return v12
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// await
{
v0 := lang.NewSymbol("await").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("agents"))), lang.NewKeyword("doc"), "Blocks the current thread (indefinitely!) until all actions\n  dispatched thus far, from this thread or agent, to the agent(s) have\n  occurred.  Will block on failed agents.  Will never return if\n  a failed agent is restarted with :clear-actions true or shutdown-agents was called.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3267), lang.NewKeyword("end-line"), int(3267))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
var v4 any
v5 := lang.Apply(nil, nil)
if lang.IsTruthy(v5) {
panic("unimplemented: new with non-constant class type")
} else {
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*agent*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v10 := lang.Apply(errors6.New, []any{"Can't await in agent action"})
panic(v10)
} else {
v6 = nil
}
_ = v6
var v11 any = "unimplemented: new with non-constant class type"
_ = v11
var v13 lang.FnFunc
v13 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v14 := args[0]
v15, _ := lang.FieldOrMethod(v11, "countDown")
if reflect.TypeOf(v15).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("countDown is not a function")))
}
v16 := lang.Apply(v15, []any{})
_ = v16
return v14
})
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3279), lang.NewKeyword("column"), int(22), lang.NewKeyword("end-line"), int(3279), lang.NewKeyword("end-column"), int(61))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v12 any = v15
_ = v12
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("seq"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v3})
var v17 any = v21
_ = v17
var v22 any = nil
_ = v22
var v23 any = int64(0)
_ = v23
var v24 any = int64(0)
_ = v24
var v25 any
for {
var v26 any
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("<"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v24, v23})
if lang.IsTruthy(v30) {
v32, _ := lang.FieldOrMethod(v22, "nth")
if reflect.TypeOf(v32).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v33 := lang.Apply(v32, []any{v24})
var v31 any = v33
_ = v31
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("send"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v31, v12})
_ = v38
var v39 any = v17
var v40 any = v22
var v41 any = v23
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v24})
var v42 any = v46
v17 = v39
v22 = v40
v23 = v41
v24 = v42
continue
} else {
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("seq"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v17})
var v31 any = v35
_ = v31
var v37 any
if lang.IsTruthy(v31) {
var v38 any = v31
_ = v38
var v40 any
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v38})
if lang.IsTruthy(v44) {
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("chunk-first"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v38})
var v45 any = v49
_ = v45
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v38})
var v51 any = v55
var v56 any = v45
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("int"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("count"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v45})
v65 := lang.Apply(v60, []any{v64})
var v57 any = v65
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("int"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.Apply(v69, []any{int64(0)})
var v66 any = v70
v17 = v51
v22 = v56
v23 = v57
v24 = v66
continue
} else {
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("first"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v38})
var v45 any = v49
_ = v45
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("send"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.Apply(v53, []any{v45, v12})
_ = v54
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("next"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{v38})
var v55 any = v59
var v60 any = nil
var v61 any = int64(0)
var v62 any = int64(0)
v17 = v55
v22 = v60
v23 = v61
v24 = v62
continue
}
v37 = v40
} else {
v37 = nil
}
v26 = v37
}
v25 = v26
  break
}
_ = v25
v17, _ := lang.FieldOrMethod(v11, "await")
if reflect.TypeOf(v17).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("await is not a function")))
}
v18 := lang.Apply(v17, []any{})
v4 = v18
}
return v4
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// await-for
{
v0 := lang.NewSymbol("await-for").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("timeout-ms"), lang.NewSymbol("&"), lang.NewSymbol("agents"))), lang.NewKeyword("doc"), "Blocks the current thread until all actions dispatched thus\n  far (from this thread or agent) to the agents have occurred, or the\n  timeout (in milliseconds) has elapsed. Returns logical false if\n  returning due to timeout, logical true otherwise.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3289), lang.NewKeyword("end-line"), int(3289))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
var v5 any
v6 := lang.Apply(nil, nil)
if lang.IsTruthy(v6) {
panic("unimplemented: new with non-constant class type")
} else {
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("*agent*"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
if lang.IsTruthy(v10) {
v11 := lang.Apply(errors6.New, []any{"Can't await in agent action"})
panic(v11)
} else {
v7 = nil
}
_ = v7
var v12 any = "unimplemented: new with non-constant class type"
_ = v12
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16, _ := lang.FieldOrMethod(v12, "countDown")
if reflect.TypeOf(v16).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("countDown is not a function")))
}
v17 := lang.Apply(v16, []any{})
_ = v17
return v15
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3301), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(3301), lang.NewKeyword("end-column"), int(62))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v13 any = v16
_ = v13
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("seq"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v4})
var v18 any = v22
_ = v18
var v23 any = nil
_ = v23
var v24 any = int64(0)
_ = v24
var v25 any = int64(0)
_ = v25
var v26 any
for {
var v27 any
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("<"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v25, v24})
if lang.IsTruthy(v31) {
v33, _ := lang.FieldOrMethod(v23, "nth")
if reflect.TypeOf(v33).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v34 := lang.Apply(v33, []any{v25})
var v32 any = v34
_ = v32
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("send"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v32, v13})
_ = v39
var v40 any = v18
var v41 any = v23
var v42 any = v24
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v25})
var v43 any = v47
v18 = v40
v23 = v41
v24 = v42
v25 = v43
continue
} else {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("seq"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v18})
var v32 any = v36
_ = v32
var v38 any
if lang.IsTruthy(v32) {
var v39 any = v32
_ = v39
var v41 any
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v39})
if lang.IsTruthy(v45) {
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("chunk-first"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v39})
var v46 any = v50
_ = v46
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{v39})
var v52 any = v56
var v57 any = v46
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("int"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("count"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{v46})
v66 := lang.Apply(v61, []any{v65})
var v58 any = v66
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("int"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{int64(0)})
var v67 any = v71
v18 = v52
v23 = v57
v24 = v58
v25 = v67
continue
} else {
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("first"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v39})
var v46 any = v50
_ = v46
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("send"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v46, v13})
_ = v55
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("next"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v39})
var v56 any = v60
var v61 any = nil
var v62 any = int64(0)
var v63 any = int64(0)
v18 = v56
v23 = v61
v24 = v62
v25 = v63
continue
}
v38 = v41
} else {
v38 = nil
}
v27 = v38
}
v26 = v27
  break
}
_ = v26
v18, ok := lang.FieldOrMethod(java.util.concurrent7.TimeUnit, "MILLISECONDS")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", java.util.concurrent7.TimeUnit, "MILLISECONDS")))
}
var v19 any
switch reflect.TypeOf(v18).Kind() {
case reflect.Func:
  v19 = lang.Apply(v18, nil)
default:
  v19 = v18
}
v20, _ := lang.FieldOrMethod(v12, "await")
if reflect.TypeOf(v20).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("await is not a function")))
}
v21 := lang.Apply(v20, []any{v3, v19})
v5 = v21
}
return v5
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// await1
{
v0 := lang.NewSymbol("await1").WithMeta(lang.NewMap(lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3284), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3284), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("pos?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8, ok := lang.FieldOrMethod(v3, "getQueueCount")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getQueueCount")))
}
var v9 any
switch reflect.TypeOf(v8).Kind() {
case reflect.Func:
  v9 = lang.Apply(v8, nil)
default:
  v9 = v8
}
v10 := lang.Apply(v7, []any{v9})
if lang.IsTruthy(v10) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("await"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3})
v4 = v14
} else {
v4 = nil
}
_ = v4
return v3
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bases
{
v0 := lang.NewSymbol("bases").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("c"))), lang.NewKeyword("doc"), "Returns the immediate superclass and direct interfaces of c, if any", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5522), lang.NewKeyword("end-line"), int(5522))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
if lang.IsTruthy(v3) {
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{nil})
var v5 any = v9
_ = v5
var v10 any = nil
_ = v10
var v12 any
if lang.IsTruthy(v10) {
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("cons"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v10, v5})
v12 = v16
} else {
v12 = v5
}
v4 = v12
} else {
v4 = nil
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bigdec
{
v1 := reflect.TypeOf((*lang.BigDecimal)(nil))
v0 := lang.NewSymbol("bigdec").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Coerce to BigDecimal", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3648), lang.NewKeyword("end-line"), int(3648))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("decimal?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
v5 = v4
} else {
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("float?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v4})
if lang.IsTruthy(v14) {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("double"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v4})
v19 := lang.Apply(lang.NewBigDecimalFromFloat64, []any{v18})
v10 = v19
} else {
var v20 any
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("ratio?"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v4})
if lang.IsTruthy(v24) {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("/"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(lang.NewBigDecimalFromRatio, []any{v4})
v29, ok := lang.FieldOrMethod(v4, "denominator")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "denominator")))
}
var v30 any
switch reflect.TypeOf(v29).Kind() {
case reflect.Func:
  v30 = lang.Apply(v29, nil)
default:
  v30 = v29
}
v31 := lang.Apply(v27, []any{v28, v30})
v20 = v31
} else {
var v32 any
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("instance?"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{lang.*BigInt, v4})
if lang.IsTruthy(v36) {
v37, ok := lang.FieldOrMethod(v4, "toBigDecimal")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "toBigDecimal")))
}
var v38 any
switch reflect.TypeOf(v37).Kind() {
case reflect.Func:
  v38 = lang.Apply(v37, nil)
default:
  v38 = v37
}
v32 = v38
} else {
var v39 any
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("instance?"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{big8.*Int, v4})
if lang.IsTruthy(v43) {
v44 := lang.Apply(lang.NewBigDecimal, []any{v4})
v39 = v44
} else {
var v45 any
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("number?"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v4})
if lang.IsTruthy(v49) {
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("long"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v4})
v54 := lang.Apply(lang.NewBigDecimalFromInt64, []any{v53})
v45 = v54
} else {
var v55 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v56 := lang.Apply(lang.NewBigDecimal, []any{v4})
v55 = v56
} else {
v55 = nil
}
v45 = v55
}
v39 = v45
}
v32 = v39
}
v20 = v32
}
v10 = v20
}
v5 = v10
}
return v5
})
v4 := reflect.TypeOf((*lang.BigDecimal)(nil))
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bigint
{
v1 := reflect.TypeOf((*lang.BigInt)(nil))
v0 := lang.NewSymbol("bigint").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Coerce to BigInt", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3620), lang.NewKeyword("end-line"), int(3620))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("instance?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{lang.*BigInt, v4})
if lang.IsTruthy(v9) {
v5 = v4
} else {
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("instance?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{big8.*Int, v4})
if lang.IsTruthy(v14) {
v15 := lang.Apply(lang.NewBigIntFromGoBigInt, []any{v4})
v10 = v15
} else {
var v16 any
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("decimal?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v4})
if lang.IsTruthy(v20) {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("bigint"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24, ok := lang.FieldOrMethod(v4, "toBigInteger")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "toBigInteger")))
}
var v25 any
switch reflect.TypeOf(v24).Kind() {
case reflect.Func:
  v25 = lang.Apply(v24, nil)
default:
  v25 = v24
}
v26 := lang.Apply(v23, []any{v25})
v16 = v26
} else {
var v27 any
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("float?"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v4})
if lang.IsTruthy(v31) {
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("bigint"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("double"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v4})
v39 := lang.Apply(lang.NewBigDecimalFromFloat64, []any{v38})
v40 := lang.Apply(v34, []any{v39})
v27 = v40
} else {
var v41 any
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("ratio?"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v4})
if lang.IsTruthy(v45) {
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("bigint"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49, ok := lang.FieldOrMethod(v4, "bigIntegerValue")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "bigIntegerValue")))
}
var v50 any
switch reflect.TypeOf(v49).Kind() {
case reflect.Func:
  v50 = lang.Apply(v49, nil)
default:
  v50 = v49
}
v51 := lang.Apply(v48, []any{v50})
v41 = v51
} else {
var v52 any
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("number?"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{v4})
if lang.IsTruthy(v56) {
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("long"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v4})
v61 := lang.Apply(lang.NewBigIntFromInt64, []any{v60})
v52 = v61
} else {
var v62 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("bigint"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.Apply(lang.NewBigInt, []any{v4})
v67 := lang.Apply(v65, []any{v66})
v62 = v67
} else {
v62 = nil
}
v52 = v62
}
v41 = v52
}
v27 = v41
}
v16 = v27
}
v10 = v16
}
v5 = v10
}
return v5
})
v4 := reflect.TypeOf((*lang.BigInt)(nil))
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// biginteger
{
v1 := reflect.TypeOf((*big8.Int)(nil))
v0 := lang.NewSymbol("biginteger").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Coerce to BigInteger", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3634), lang.NewKeyword("end-line"), int(3634))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("instance?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{big8.*Int, v4})
if lang.IsTruthy(v9) {
v5 = v4
} else {
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("instance?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.*BigInt, v4})
if lang.IsTruthy(v14) {
v15, ok := lang.FieldOrMethod(v4, "toBigInteger")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "toBigInteger")))
}
var v16 any
switch reflect.TypeOf(v15).Kind() {
case reflect.Func:
  v16 = lang.Apply(v15, nil)
default:
  v16 = v15
}
v10 = v16
} else {
var v17 any
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("decimal?"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v4})
if lang.IsTruthy(v21) {
v22, ok := lang.FieldOrMethod(v4, "toBigInteger")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "toBigInteger")))
}
var v23 any
switch reflect.TypeOf(v22).Kind() {
case reflect.Func:
  v23 = lang.Apply(v22, nil)
default:
  v23 = v22
}
v17 = v23
} else {
var v24 any
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("float?"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v4})
if lang.IsTruthy(v28) {
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("double"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v4})
v33 := lang.Apply(lang.NewBigDecimalFromFloat64, []any{v32})
v34, ok := lang.FieldOrMethod(v33, "toBigInteger")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v33, "toBigInteger")))
}
var v35 any
switch reflect.TypeOf(v34).Kind() {
case reflect.Func:
  v35 = lang.Apply(v34, nil)
default:
  v35 = v34
}
v24 = v35
} else {
var v36 any
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("ratio?"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v4})
if lang.IsTruthy(v40) {
v41, ok := lang.FieldOrMethod(v4, "bigIntegerValue")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "bigIntegerValue")))
}
var v42 any
switch reflect.TypeOf(v41).Kind() {
case reflect.Func:
  v42 = lang.Apply(v41, nil)
default:
  v42 = v41
}
v36 = v42
} else {
var v43 any
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("number?"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v4})
if lang.IsTruthy(v47) {
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("long"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v4})
v52 := lang.Apply(big8.NewInt, []any{v51})
v43 = v52
} else {
var v53 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v54 := lang.Apply(lang.NewBigInt, []any{v4})
v53 = v54
} else {
v53 = nil
}
v43 = v53
}
v36 = v43
}
v24 = v36
}
v17 = v24
}
v10 = v17
}
v5 = v10
}
return v5
})
v4 := reflect.TypeOf((*big8.Int)(nil))
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// binding
{
v0 := lang.NewSymbol("binding").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1945), lang.NewKeyword("end-line"), int(1945))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("vector?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
if lang.IsTruthy(v11) {
v7 = nil
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("str"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("*ns*"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(lang.NewKeyword("line"), []any{v25})
v27 := lang.Apply(v14, []any{v18, " requires ", "a vector for its binding", " in ", v21, ":", v26})
v28 := lang.Apply(lang.NewIllegalArgumentError, []any{v27})
panic(v28)
}
_ = v7
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("even?"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v37 := lang.Apply(v32, []any{v36})
if lang.IsTruthy(v37) {
v29 = nil
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("first"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("*ns*"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("meta"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(lang.NewKeyword("line"), []any{v51})
v53 := lang.Apply(v40, []any{v44, " requires ", "an even number of forms in binding vector", " in ", v47, ":", v52})
v54 := lang.Apply(lang.NewIllegalArgumentError, []any{v53})
panic(v54)
}
_ = v29
_ = nil
var v56 lang.FnFunc
v56 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v57 := args[0]
v59 := lang.NewVector()
v60 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(1959), lang.NewKeyword("column"), int(30), lang.NewKeyword("end-line"), int(1959), lang.NewKeyword("end-column"), int(31))
v61, err := lang.WithMeta(v59, v60.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v58 any = v61
_ = v58
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("seq"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.Apply(v65, []any{v57})
var v62 any = v66
_ = v62
var v67 any
for {
var v68 any
if lang.IsTruthy(v62) {
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("conj"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("conj"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("seq"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("concat"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("list"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, []any{lang.NewSymbol("var")})
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("list"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("first"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.Apply(v91, []any{v62})
v93 := lang.Apply(v88, []any{v92})
v94 := lang.Apply(v81, []any{v85, v93})
v95 := lang.Apply(v78, []any{v94})
v96 := lang.Apply(v75, []any{v58, v95})
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("second"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.Apply(v99, []any{v62})
v101 := lang.Apply(v72, []any{v96, v100})
var v69 any = v101
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("next"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("next"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{v62})
v110 := lang.Apply(v105, []any{v109})
var v102 any = v110
v58 = v69
v62 = v102
continue
} else {
v111 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v112 := v111.FindInternedVar(lang.NewSymbol("seq"))
if v112.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v112)))
}
v113 := v112.Get()
v114 := lang.Apply(v113, []any{v58})
v68 = v114
}
v67 = v68
  break
}
return v67
})
v57 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(1958), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(1963), lang.NewKeyword("end-column"), int(34))
v58, err := lang.WithMeta(v56, v57.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v55 any = v58
_ = v55
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("seq"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("concat"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("list"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{lang.NewSymbol("glojure.core/let")})
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("list"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("apply"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("vector"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("seq"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("concat"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, nil)
v86 := lang.Apply(v81, []any{v85})
v87 := lang.Apply(v75, []any{v78, v86})
v88 := lang.Apply(v72, []any{v87})
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("list"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("seq"))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v96 := v95.FindInternedVar(lang.NewSymbol("concat"))
if v96.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v96)))
}
v97 := v96.Get()
v98 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v99 := v98.FindInternedVar(lang.NewSymbol("list"))
if v99.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v99)))
}
v100 := v99.Get()
v101 := lang.Apply(v100, []any{lang.NewSymbol("glojure.core/push-thread-bindings")})
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("list"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("seq"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("concat"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v112 := v111.FindInternedVar(lang.NewSymbol("list"))
if v112.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v112)))
}
v113 := v112.Get()
v114 := lang.Apply(v113, []any{lang.NewSymbol("glojure.core/hash-map")})
v115 := lang.Apply(v55, []any{v5})
v116 := lang.Apply(v110, []any{v114, v115})
v117 := lang.Apply(v107, []any{v116})
v118 := lang.Apply(v104, []any{v117})
v119 := lang.Apply(v97, []any{v101, v118})
v120 := lang.Apply(v94, []any{v119})
v121 := lang.Apply(v91, []any{v120})
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("list"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v126 := v125.FindInternedVar(lang.NewSymbol("seq"))
if v126.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v126)))
}
v127 := v126.Get()
v128 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v129 := v128.FindInternedVar(lang.NewSymbol("concat"))
if v129.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v129)))
}
v130 := v129.Get()
v131 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v132 := v131.FindInternedVar(lang.NewSymbol("list"))
if v132.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v132)))
}
v133 := v132.Get()
v134 := lang.Apply(v133, []any{lang.NewSymbol("try")})
v135 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v136 := v135.FindInternedVar(lang.NewSymbol("list"))
if v136.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v136)))
}
v137 := v136.Get()
v138 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v139 := v138.FindInternedVar(lang.NewSymbol("seq"))
if v139.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v139)))
}
v140 := v139.Get()
v141 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v142 := v141.FindInternedVar(lang.NewSymbol("concat"))
if v142.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v142)))
}
v143 := v142.Get()
v144 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v145 := v144.FindInternedVar(lang.NewSymbol("list"))
if v145.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v145)))
}
v146 := v145.Get()
v147 := lang.Apply(v146, []any{lang.NewSymbol("finally")})
v148 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v149 := v148.FindInternedVar(lang.NewSymbol("list"))
if v149.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v149)))
}
v150 := v149.Get()
v151 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v152 := v151.FindInternedVar(lang.NewSymbol("seq"))
if v152.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v152)))
}
v153 := v152.Get()
v154 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v155 := v154.FindInternedVar(lang.NewSymbol("concat"))
if v155.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v155)))
}
v156 := v155.Get()
v157 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v158 := v157.FindInternedVar(lang.NewSymbol("list"))
if v158.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v158)))
}
v159 := v158.Get()
v160 := lang.Apply(v159, []any{lang.NewSymbol("glojure.core/pop-thread-bindings")})
v161 := lang.Apply(v156, []any{v160})
v162 := lang.Apply(v153, []any{v161})
v163 := lang.Apply(v150, []any{v162})
v164 := lang.Apply(v143, []any{v147, v163})
v165 := lang.Apply(v140, []any{v164})
v166 := lang.Apply(v137, []any{v165})
v167 := lang.Apply(v130, []any{v134, v6, v166})
v168 := lang.Apply(v127, []any{v167})
v169 := lang.Apply(v124, []any{v168})
v170 := lang.Apply(v65, []any{v69, v88, v121, v169})
v171 := lang.Apply(v62, []any{v170})
return v171
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// binding-conveyor-fn
{
v0 := lang.NewSymbol("binding-conveyor-fn").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"))), lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2020), lang.NewKeyword("end-line"), int(2020), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.Apply(lang.CloneThreadBindingFrame, nil)
var v4 any = v5
_ = v4
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v8 := lang.Apply(lang.ResetThreadBindingFrame, []any{v4})
_ = v8
v9 := lang.Apply(v3, nil)
return v9
  case 1:
v8 := args[0]
v9 := lang.Apply(lang.ResetThreadBindingFrame, []any{v4})
_ = v9
v10 := lang.Apply(v3, []any{v8})
return v10
  case 2:
v8 := args[0]
v9 := args[1]
v10 := lang.Apply(lang.ResetThreadBindingFrame, []any{v4})
_ = v10
v11 := lang.Apply(v3, []any{v8, v9})
return v11
  case 3:
v8 := args[0]
v9 := args[1]
v10 := args[2]
v11 := lang.Apply(lang.ResetThreadBindingFrame, []any{v4})
_ = v11
v12 := lang.Apply(v3, []any{v8, v9, v10})
return v12
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v8 := args[0]
v9 := args[1]
v10 := args[2]
v11 := lang.NewList(args[3:]...)
v12 := lang.Apply(lang.ResetThreadBindingFrame, []any{v4})
_ = v12
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("apply"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v8, v9, v10, v11})
return v16
  }
})
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2025), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(2040), lang.NewKeyword("end-column"), int(31))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bit-and
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed7
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed7
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed7
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("bit-and").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Bitwise and", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1298), lang.NewKeyword("end-line"), int(1298))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "and")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("and is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("bit-and"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("bit-and"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bit-and-not
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed8
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed8
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed8
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("bit-and-not").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Bitwise and with complement", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1325), lang.NewKeyword("end-line"), int(1325))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "andNot")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("andNot is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("bit-and-not"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("bit-and-not"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bit-clear
{
v0 := lang.NewSymbol("bit-clear").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Clear bit at index n", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1336), lang.NewKeyword("end-line"), int(1336))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(lang.Numbers, "clearBit")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("clearBit is not a function")))
}
v6 := lang.Apply(v5, []any{v3, v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bit-flip
{
v0 := lang.NewSymbol("bit-flip").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Flip bit at index n", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1348), lang.NewKeyword("end-line"), int(1348))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(lang.Numbers, "flipBit")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("flipBit is not a function")))
}
v6 := lang.Apply(v5, []any{v3, v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bit-not
{
var v1 lang.FnFunc
{ // function bit-not__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/not")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("bit-not").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Bitwise complement", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1291), lang.NewKeyword("end-line"), int(1291))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "not")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("not is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bit-or
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed9
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed9
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed9
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("bit-or").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Bitwise or", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1307), lang.NewKeyword("end-line"), int(1307))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "or")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("or is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("bit-or"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("bit-or"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bit-set
{
v0 := lang.NewSymbol("bit-set").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Set bit at index n", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1342), lang.NewKeyword("end-line"), int(1342))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(lang.Numbers, "setBit")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setBit is not a function")))
}
v6 := lang.Apply(v5, []any{v3, v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bit-shift-left
{
var v1 lang.FnFunc
{ // function bit-shift-left__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/shiftLeft")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("bit-shift-left").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("n"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Bitwise shift left", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1361), lang.NewKeyword("end-line"), int(1361))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "shiftLeft")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("shiftLeft is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bit-shift-right
{
var v1 lang.FnFunc
{ // function bit-shift-right__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/shiftRight")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("bit-shift-right").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("n"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Bitwise shift right", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1367), lang.NewKeyword("end-line"), int(1367))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "shiftRight")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("shiftRight is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bit-test
{
v0 := lang.NewSymbol("bit-test").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Test bit at index n", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1354), lang.NewKeyword("end-line"), int(1354))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(lang.Numbers, "testBit")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("testBit is not a function")))
}
v6 := lang.Apply(v5, []any{v3, v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bit-xor
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed10
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed10
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed10
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("bit-xor").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Bitwise exclusive or", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1316), lang.NewKeyword("end-line"), int(1316))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "xor")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("xor is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("bit-xor"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("bit-xor"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// boolean
{
var v1 lang.FnFunc
{ // function boolean__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/BooleanCast")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("boolean").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to boolean", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1601), lang.NewKeyword("end-line"), int(1601))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(runtime5.RT, "BooleanCast")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("BooleanCast is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// boolean-array
{
var v1 lang.FnFunc
{ // function boolean-array__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/booleanArray")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("glojure.core/unquote-splicing")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{lang.NewSymbol("glojure.core/args")})
v39 := lang.Apply(v30, []any{v34, v38})
v40 := lang.Apply(v27, []any{v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v21, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
  }
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("boolean-array").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("size-or-seq")), lang.NewVector(lang.NewSymbol("size"), lang.NewSymbol("init-val-or-seq"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Creates an array of booleans", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)int64(2)), lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5309), lang.NewKeyword("end-line"), int(5309))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "booleanArray")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("booleanArray is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "booleanArrayInit")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("booleanArrayInit is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// boolean?
{
v0 := lang.NewSymbol("boolean?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a Boolean", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(518), lang.NewKeyword("end-line"), int(518))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.Builtins["bool"], v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// booleans
{
var v1 lang.FnFunc
{ // function booleans
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/booleans")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v9, []any{v13, v17, v21, v25})
v27 := lang.Apply(v6, []any{v26})
return v27
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("booleans").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("xs"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Casts to boolean[]", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(12), lang.NewKeyword("line"), int(5372), lang.NewKeyword("end-line"), int(5372))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "booleans")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("booleans is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bound-fn
{
v0 := lang.NewSymbol("bound-fn").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("fntail"))), lang.NewKeyword("doc"), "Returns a function defined by the given fntail, which will install the\n  same bindings in effect as in the thread at the time bound-fn was called.\n  This may be used to define a helper function which runs on a different\n  thread, but needs the same bindings in place.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(2004), lang.NewKeyword("end-line"), int(2004))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol("glojure.core/bound-fn*")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("seq"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("concat"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("list"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{lang.NewSymbol("glojure.core/fn")})
v29 := lang.Apply(v24, []any{v28, v5})
v30 := lang.Apply(v21, []any{v29})
v31 := lang.Apply(v18, []any{v30})
v32 := lang.Apply(v11, []any{v15, v31})
v33 := lang.Apply(v8, []any{v32})
return v33
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bound-fn*
{
v0 := lang.NewSymbol("bound-fn*").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"))), lang.NewKeyword("doc"), "Returns a function, which will install the same bindings in effect as in\n  the thread at the time bound-fn* was called and then call f with any given\n  arguments. This may be used to define a helper function which runs on a\n  different thread, but needs the same bindings in place.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1992), lang.NewKeyword("end-line"), int(1992))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("get-thread-bindings"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, nil)
var v4 any = v8
_ = v4
var v10 lang.FnFunc
v10 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v11 := lang.NewList(args[0:]...)
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("apply"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("with-bindings*"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v14, []any{v17, v4, v3, v11})
return v18
  }
})
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2001), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(2002), lang.NewKeyword("end-column"), int(45))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v12
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bound?
{
v0 := lang.NewSymbol("bound?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("vars"))), lang.NewKeyword("doc"), "Returns true if all of the vars provided as arguments have any bound value, root or thread-local.\n   Implies that deref'ing the provided vars will succeed. Returns true if no vars are provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5491), lang.NewKeyword("end-line"), int(5491))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("every?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := args[0]
v9, ok := lang.FieldOrMethod(v8, "isBound")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v8, "isBound")))
}
var v10 any
switch reflect.TypeOf(v9).Kind() {
case reflect.Func:
  v10 = lang.Apply(v9, nil)
default:
  v10 = v9
}
return v10
})
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5497), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(5497), lang.NewKeyword("end-column"), int(69))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v10 := lang.Apply(v6, []any{v9, v3})
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bounded-count
{
v0 := lang.NewSymbol("bounded-count").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "If coll is counted? returns its count, else will count at most the first n\n  elements of coll using its seq", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7410), lang.NewKeyword("end-line"), int(7410))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("counted?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("count"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v4})
v5 = v13
} else {
var v14 any = int64(0)
_ = v14
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("seq"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v4})
var v15 any = v19
_ = v15
var v20 any
for {
var v21 any
var v22 any = v15
_ = v22
var v24 any
if lang.IsTruthy(v22) {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("<"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v14, v3})
v24 = v28
} else {
v24 = v22
}
if lang.IsTruthy(v24) {
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("inc"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v14})
var v22 any = v26
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("next"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v15})
var v27 any = v31
v14 = v22
v15 = v27
continue
} else {
v21 = v14
}
v20 = v21
  break
}
v5 = v20
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// butlast
{
v0 := lang.NewSymbol("butlast").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Return a seq of all but the last item in coll, in linear time", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(8), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(272), lang.NewKeyword("end-line"), int(276))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function butlast
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v6 := lang.NewVector()
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(277), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(277), lang.NewKeyword("end-column"), int(24))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v5 any = v8
_ = v5
var v9 any = v9
_ = v9
var v10 any
for {
var v11 any
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("next"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v9})
if lang.IsTruthy(v15) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("conj"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("first"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v9})
v24 := lang.Apply(v19, []any{v5, v23})
var v16 any = v24
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("next"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v9})
var v25 any = v29
v5 = v16
v9 = v25
continue
} else {
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("seq"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v5})
v11 = v33
}
v10 = v11
  break
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(276), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(280), lang.NewKeyword("end-column"), int(27))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// byte
{
var v1 lang.FnFunc
{ // function byte__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
var v30 any
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
if lang.IsTruthy(v33) {
v30 = lang.NewSymbol("uncheckedByteCast")
} else {
v30 = lang.NewSymbol("byteCast")
}
v34 := lang.Apply(v29, []any{v30})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v3})
v39 := lang.Apply(v26, []any{v34, v38})
v40 := lang.Apply(v23, []any{v39})
v41 := lang.Apply(v20, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("byte").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to byte", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3505), lang.NewKeyword("end-line"), int(3505))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.ByteCast, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// byte-array
{
var v1 lang.FnFunc
{ // function byte-array__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/byteArray")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("glojure.core/unquote-splicing")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{lang.NewSymbol("glojure.core/args")})
v39 := lang.Apply(v30, []any{v34, v38})
v40 := lang.Apply(v27, []any{v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v21, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
  }
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("byte-array").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("size-or-seq")), lang.NewVector(lang.NewSymbol("size"), lang.NewSymbol("init-val-or-seq"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Creates an array of bytes", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)int64(2)), lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5317), lang.NewKeyword("end-line"), int(5317))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "byteArray")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("byteArray is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "byteArrayInit")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("byteArrayInit is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bytes
{
var v1 lang.FnFunc
{ // function bytes
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/bytes")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v9, []any{v13, v17, v21, v25})
v27 := lang.Apply(v6, []any{v26})
return v27
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("bytes").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("xs"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Casts to bytes[]", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(12), lang.NewKeyword("line"), int(5377), lang.NewKeyword("end-line"), int(5377))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "bytes")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("bytes is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// bytes?
{
v0 := lang.NewSymbol("bytes?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a byte array", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5412), lang.NewKeyword("end-line"), int(5412))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("nil?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v4 = false
} else {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("="))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("class"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3})
v16, ok := lang.FieldOrMethod(v15, "getComponentType")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v15, "getComponentType")))
}
var v17 any
switch reflect.TypeOf(v16).Kind() {
case reflect.Func:
  v17 = lang.Apply(v16, nil)
default:
  v17 = v16
}
v18 := lang.Apply(v11, []any{v17, nil})
v4 = v18
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// case
{
v0 := lang.NewSymbol("case").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("e"), lang.NewSymbol("&"), lang.NewSymbol("clauses"))), lang.NewKeyword("doc"), "Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an IllegalArgumentException is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (Clojure) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(6712), lang.NewKeyword("end-line"), int(6712))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("with-meta"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("gensym"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, nil)
v15 := lang.NewMap(lang.NewKeyword("tag"), lang.Object)
v16 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6738), lang.NewKeyword("column"), int(32), lang.NewKeyword("end-line"), int(6738), lang.NewKeyword("end-column"), int(84))
v17, err := lang.WithMeta(v15, v16.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v18 := lang.Apply(v10, []any{v14, v17})
var v7 any = v18
_ = v7
var v20 any
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("odd?"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("count"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v6})
v28 := lang.Apply(v23, []any{v27})
if lang.IsTruthy(v28) {
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("last"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v6})
v20 = v32
} else {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("seq"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("concat"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("list"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{lang.NewSymbol("throw")})
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("list"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("seq"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("concat"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("list"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.NewIllegalArgumentError")})
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("list"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("seq"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("concat"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("list"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{lang.NewSymbol("glojure.core/str")})
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("list"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{"No matching clause: "})
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("list"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.Apply(v75, []any{v7})
v77 := lang.Apply(v64, []any{v68, v72, v76})
v78 := lang.Apply(v61, []any{v77})
v79 := lang.Apply(v58, []any{v78})
v80 := lang.Apply(v51, []any{v55, v79})
v81 := lang.Apply(v48, []any{v80})
v82 := lang.Apply(v45, []any{v81})
v83 := lang.Apply(v38, []any{v42, v82})
v84 := lang.Apply(v35, []any{v83})
v20 = v84
}
var v19 any = v20
_ = v19
var v86 any
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol(">"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("count"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.Apply(v92, []any{v6})
v94 := lang.Apply(v89, []any{int64(2), v93})
if lang.IsTruthy(v94) {
v95 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v96 := v95.FindInternedVar(lang.NewSymbol("seq"))
if v96.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v96)))
}
v97 := v96.Get()
v98 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v99 := v98.FindInternedVar(lang.NewSymbol("concat"))
if v99.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v99)))
}
v100 := v99.Get()
v101 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v102 := v101.FindInternedVar(lang.NewSymbol("list"))
if v102.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v102)))
}
v103 := v102.Get()
v104 := lang.Apply(v103, []any{lang.NewSymbol("glojure.core/let")})
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("list"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("apply"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v112 := v111.FindInternedVar(lang.NewSymbol("vector"))
if v112.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v112)))
}
v113 := v112.Get()
v114 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v115 := v114.FindInternedVar(lang.NewSymbol("seq"))
if v115.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v115)))
}
v116 := v115.Get()
v117 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v118 := v117.FindInternedVar(lang.NewSymbol("concat"))
if v118.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v118)))
}
v119 := v118.Get()
v120 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v121 := v120.FindInternedVar(lang.NewSymbol("list"))
if v121.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v121)))
}
v122 := v121.Get()
v123 := lang.Apply(v122, []any{v7})
v124 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v125 := v124.FindInternedVar(lang.NewSymbol("list"))
if v125.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v125)))
}
v126 := v125.Get()
v127 := lang.Apply(v126, []any{v5})
v128 := lang.Apply(v119, []any{v123, v127})
v129 := lang.Apply(v116, []any{v128})
v130 := lang.Apply(v110, []any{v113, v129})
v131 := lang.Apply(v107, []any{v130})
v132 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v133 := v132.FindInternedVar(lang.NewSymbol("list"))
if v133.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v133)))
}
v134 := v133.Get()
v135 := lang.Apply(v134, []any{v19})
v136 := lang.Apply(v100, []any{v104, v131, v135})
v137 := lang.Apply(v97, []any{v136})
v86 = v137
} else {
v139 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v140 := v139.FindInternedVar(lang.NewSymbol("partition"))
if v140.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v140)))
}
v141 := v140.Get()
v142 := lang.Apply(v141, []any{int64(2), v6})
var v138 any = v142
_ = v138
var v144 lang.FnFunc
{ // function assoc-test
v144 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v146 := args[0]
v147 := args[1]
v148 := args[2]
var v149 any
v150 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v151 := v150.FindInternedVar(lang.NewSymbol("contains?"))
if v151.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v151)))
}
v152 := v151.Get()
v153 := lang.Apply(v152, []any{v146, v147})
if lang.IsTruthy(v153) {
v154 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v155 := v154.FindInternedVar(lang.NewSymbol("str"))
if v155.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v155)))
}
v156 := v155.Get()
v157 := lang.Apply(v156, []any{"Duplicate case test constant: ", v147})
v158 := lang.Apply(lang.NewIllegalArgumentError, []any{v157})
panic(v158)
} else {
v159 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v160 := v159.FindInternedVar(lang.NewSymbol("assoc"))
if v160.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v160)))
}
v161 := v160.Get()
v162 := lang.Apply(v161, []any{v146, v147, v148})
v149 = v162
}
return v149
})
v145 := v144
_ = v145
}
v145 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6745), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(6748), lang.NewKeyword("end-column"), int(48))
v146, err := lang.WithMeta(v144, v145.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v143 any = v146
_ = v143
v148 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v149 := v148.FindInternedVar(lang.NewSymbol("reduce1"))
if v149.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v149)))
}
v150 := v149.Get()
var v151 lang.FnFunc
v151 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v152 := args[0]
v153 := args[1]
var v154 any = v153
_ = v154
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("nth"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
v159 := lang.Apply(v158, []any{v154, int64(0), nil})
var v155 any = v159
_ = v155
v161 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v162 := v161.FindInternedVar(lang.NewSymbol("nth"))
if v162.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v162)))
}
v163 := v162.Get()
v164 := lang.Apply(v163, []any{v154, int64(1), nil})
var v160 any = v164
_ = v160
var v166 any
v167 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v168 := v167.FindInternedVar(lang.NewSymbol("seq?"))
if v168.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v168)))
}
v169 := v168.Get()
v170 := lang.Apply(v169, []any{v155})
if lang.IsTruthy(v170) {
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("reduce1"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
var v174 lang.FnFunc
v174 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v175 := args[0]
v176 := args[1]
v177 := lang.Apply(v143, []any{v175, v176, v160})
return v177
})
v175 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6752), lang.NewKeyword("column"), int(37), lang.NewKeyword("end-line"), int(6752), lang.NewKeyword("end-column"), int(60))
v176, err := lang.WithMeta(v174, v175.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v177 := lang.Apply(v173, []any{v176, v152, v155})
v166 = v177
} else {
v178 := lang.Apply(v143, []any{v152, v155, v160})
v166 = v178
}
return v166
})
v152 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6750), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(6753), lang.NewKeyword("end-column"), int(53))
v153, err := lang.WithMeta(v151, v152.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v154 := lang.NewMap()
v155 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6754), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(6754), lang.NewKeyword("end-column"), int(25))
v156, err := lang.WithMeta(v154, v155.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v157 := lang.Apply(v150, []any{v153, v156, v147})
var v147 any = v157
_ = v147
v159 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v160 := v159.FindInternedVar(lang.NewSymbol("keys"))
if v160.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v160)))
}
v161 := v160.Get()
v162 := lang.Apply(v161, []any{v147})
var v158 any = v162
_ = v158
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("vals"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.Apply(v166, []any{v147})
var v163 any = v167
_ = v163
var v169 any
v170 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v171 := v170.FindInternedVar(lang.NewSymbol("every?"))
if v171.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v171)))
}
v172 := v171.Get()
var v173 lang.FnFunc
v173 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v174 := args[0]
v176 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v177 := v176.FindInternedVar(lang.NewSymbol("integer?"))
if v177.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v177)))
}
v178 := v177.Get()
v179 := lang.Apply(v178, []any{v174})
var v175 any = v179
_ = v175
var v181 any
if lang.IsTruthy(v175) {
v182 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v183 := v182.FindInternedVar(lang.NewSymbol("<="))
if v183.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v183)))
}
v184 := v183.Get()
v185 := lang.Apply(v184, []any{math3.MinInt, v174, math3.MaxInt})
v181 = v185
} else {
v181 = v175
}
return v181
})
v174 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6758), lang.NewKeyword("column"), int(28), lang.NewKeyword("end-line"), int(6758), lang.NewKeyword("end-column"), int(77))
v175, err := lang.WithMeta(v173, v174.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v176 := lang.Apply(v172, []any{v175, v158})
if lang.IsTruthy(v176) {
v169 = lang.NewKeyword("ints")
} else {
var v177 any
v178 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v179 := v178.FindInternedVar(lang.NewSymbol("every?"))
if v179.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v179)))
}
v180 := v179.Get()
v181 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v182 := v181.FindInternedVar(lang.NewSymbol("keyword?"))
if v182.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v182)))
}
v183 := v182.Get()
v184 := lang.Apply(v180, []any{v183, v158})
if lang.IsTruthy(v184) {
v177 = lang.NewKeyword("identity")
} else {
var v185 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v185 = lang.NewKeyword("hashes")
} else {
v185 = nil
}
v177 = v185
}
v169 = v177
}
var v168 any = v169
_ = v168
v188 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v189 := v188.FindInternedVar(lang.NewSymbol("="))
if v189.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v189)))
}
v190 := v189.Get()
var v187 any = v190
_ = v187
var v191 any = v168
_ = v191
var v193 any
v194 := lang.Apply(v187, []any{lang.NewKeyword("ints"), v191})
if lang.IsTruthy(v194) {
v196 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v197 := v196.FindInternedVar(lang.NewSymbol("prep-ints"))
if v197.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v197)))
}
v198 := v197.Get()
v199 := lang.Apply(v198, []any{v158, v163})
var v195 any = v199
_ = v195
v201 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v202 := v201.FindInternedVar(lang.NewSymbol("nth"))
if v202.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v202)))
}
v203 := v202.Get()
v204 := lang.Apply(v203, []any{v195, int64(0), nil})
var v200 any = v204
_ = v200
v206 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v207 := v206.FindInternedVar(lang.NewSymbol("nth"))
if v207.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v207)))
}
v208 := v207.Get()
v209 := lang.Apply(v208, []any{v195, int64(1), nil})
var v205 any = v209
_ = v205
v211 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v212 := v211.FindInternedVar(lang.NewSymbol("nth"))
if v212.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v212)))
}
v213 := v212.Get()
v214 := lang.Apply(v213, []any{v195, int64(2), nil})
var v210 any = v214
_ = v210
v216 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v217 := v216.FindInternedVar(lang.NewSymbol("nth"))
if v217.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v217)))
}
v218 := v217.Get()
v219 := lang.Apply(v218, []any{v195, int64(3), nil})
var v215 any = v219
_ = v215
v221 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v222 := v221.FindInternedVar(lang.NewSymbol("seq"))
if v222.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v222)))
}
v223 := v222.Get()
v224 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v225 := v224.FindInternedVar(lang.NewSymbol("concat"))
if v225.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v225)))
}
v226 := v225.Get()
v227 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v228 := v227.FindInternedVar(lang.NewSymbol("list"))
if v228.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v228)))
}
v229 := v228.Get()
v230 := lang.Apply(v229, []any{lang.NewSymbol("glojure.core/let")})
v231 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v232 := v231.FindInternedVar(lang.NewSymbol("list"))
if v232.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v232)))
}
v233 := v232.Get()
v234 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v235 := v234.FindInternedVar(lang.NewSymbol("apply"))
if v235.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v235)))
}
v236 := v235.Get()
v237 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v238 := v237.FindInternedVar(lang.NewSymbol("vector"))
if v238.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v238)))
}
v239 := v238.Get()
v240 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v241 := v240.FindInternedVar(lang.NewSymbol("seq"))
if v241.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v241)))
}
v242 := v241.Get()
v243 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v244 := v243.FindInternedVar(lang.NewSymbol("concat"))
if v244.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v244)))
}
v245 := v244.Get()
v246 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v247 := v246.FindInternedVar(lang.NewSymbol("list"))
if v247.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v247)))
}
v248 := v247.Get()
v249 := lang.Apply(v248, []any{v7})
v250 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v251 := v250.FindInternedVar(lang.NewSymbol("list"))
if v251.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v251)))
}
v252 := v251.Get()
v253 := lang.Apply(v252, []any{v5})
v254 := lang.Apply(v245, []any{v249, v253})
v255 := lang.Apply(v242, []any{v254})
v256 := lang.Apply(v236, []any{v239, v255})
v257 := lang.Apply(v233, []any{v256})
v258 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v259 := v258.FindInternedVar(lang.NewSymbol("list"))
if v259.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v259)))
}
v260 := v259.Get()
v261 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v262 := v261.FindInternedVar(lang.NewSymbol("seq"))
if v262.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v262)))
}
v263 := v262.Get()
v264 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v265 := v264.FindInternedVar(lang.NewSymbol("concat"))
if v265.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v265)))
}
v266 := v265.Get()
v267 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v268 := v267.FindInternedVar(lang.NewSymbol("list"))
if v268.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v268)))
}
v269 := v268.Get()
v270 := lang.Apply(v269, []any{lang.NewSymbol("case*")})
v271 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v272 := v271.FindInternedVar(lang.NewSymbol("list"))
if v272.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v272)))
}
v273 := v272.Get()
v274 := lang.Apply(v273, []any{v7})
v275 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v276 := v275.FindInternedVar(lang.NewSymbol("list"))
if v276.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v276)))
}
v277 := v276.Get()
v278 := lang.Apply(v277, []any{v200})
v279 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v280 := v279.FindInternedVar(lang.NewSymbol("list"))
if v280.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v280)))
}
v281 := v280.Get()
v282 := lang.Apply(v281, []any{v205})
v283 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v284 := v283.FindInternedVar(lang.NewSymbol("list"))
if v284.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v284)))
}
v285 := v284.Get()
v286 := lang.Apply(v285, []any{v19})
v287 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v288 := v287.FindInternedVar(lang.NewSymbol("list"))
if v288.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v288)))
}
v289 := v288.Get()
v290 := lang.Apply(v289, []any{v210})
v291 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v292 := v291.FindInternedVar(lang.NewSymbol("list"))
if v292.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v292)))
}
v293 := v292.Get()
v294 := lang.Apply(v293, []any{v215})
v295 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v296 := v295.FindInternedVar(lang.NewSymbol("list"))
if v296.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v296)))
}
v297 := v296.Get()
v298 := lang.Apply(v297, []any{lang.NewKeyword("int")})
v299 := lang.Apply(v266, []any{v270, v274, v278, v282, v286, v290, v294, v298})
v300 := lang.Apply(v263, []any{v299})
v301 := lang.Apply(v260, []any{v300})
v302 := lang.Apply(v226, []any{v230, v257, v301})
v303 := lang.Apply(v223, []any{v302})
v193 = v303
} else {
var v195 any
v196 := lang.Apply(v187, []any{lang.NewKeyword("hashes"), v191})
if lang.IsTruthy(v196) {
v198 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v199 := v198.FindInternedVar(lang.NewSymbol("prep-hashes"))
if v199.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v199)))
}
v200 := v199.Get()
v201 := lang.Apply(v200, []any{v7, v19, v158, v163})
var v197 any = v201
_ = v197
v203 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v204 := v203.FindInternedVar(lang.NewSymbol("nth"))
if v204.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v204)))
}
v205 := v204.Get()
v206 := lang.Apply(v205, []any{v197, int64(0), nil})
var v202 any = v206
_ = v202
v208 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v209 := v208.FindInternedVar(lang.NewSymbol("nth"))
if v209.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v209)))
}
v210 := v209.Get()
v211 := lang.Apply(v210, []any{v197, int64(1), nil})
var v207 any = v211
_ = v207
v213 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v214 := v213.FindInternedVar(lang.NewSymbol("nth"))
if v214.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v214)))
}
v215 := v214.Get()
v216 := lang.Apply(v215, []any{v197, int64(2), nil})
var v212 any = v216
_ = v212
v218 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v219 := v218.FindInternedVar(lang.NewSymbol("nth"))
if v219.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v219)))
}
v220 := v219.Get()
v221 := lang.Apply(v220, []any{v197, int64(3), nil})
var v217 any = v221
_ = v217
v223 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v224 := v223.FindInternedVar(lang.NewSymbol("nth"))
if v224.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v224)))
}
v225 := v224.Get()
v226 := lang.Apply(v225, []any{v197, int64(4), nil})
var v222 any = v226
_ = v222
v228 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v229 := v228.FindInternedVar(lang.NewSymbol("seq"))
if v229.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v229)))
}
v230 := v229.Get()
v231 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v232 := v231.FindInternedVar(lang.NewSymbol("concat"))
if v232.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v232)))
}
v233 := v232.Get()
v234 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v235 := v234.FindInternedVar(lang.NewSymbol("list"))
if v235.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v235)))
}
v236 := v235.Get()
v237 := lang.Apply(v236, []any{lang.NewSymbol("glojure.core/let")})
v238 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v239 := v238.FindInternedVar(lang.NewSymbol("list"))
if v239.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v239)))
}
v240 := v239.Get()
v241 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v242 := v241.FindInternedVar(lang.NewSymbol("apply"))
if v242.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v242)))
}
v243 := v242.Get()
v244 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v245 := v244.FindInternedVar(lang.NewSymbol("vector"))
if v245.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v245)))
}
v246 := v245.Get()
v247 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v248 := v247.FindInternedVar(lang.NewSymbol("seq"))
if v248.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v248)))
}
v249 := v248.Get()
v250 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v251 := v250.FindInternedVar(lang.NewSymbol("concat"))
if v251.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v251)))
}
v252 := v251.Get()
v253 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v254 := v253.FindInternedVar(lang.NewSymbol("list"))
if v254.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v254)))
}
v255 := v254.Get()
v256 := lang.Apply(v255, []any{v7})
v257 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v258 := v257.FindInternedVar(lang.NewSymbol("list"))
if v258.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v258)))
}
v259 := v258.Get()
v260 := lang.Apply(v259, []any{v5})
v261 := lang.Apply(v252, []any{v256, v260})
v262 := lang.Apply(v249, []any{v261})
v263 := lang.Apply(v243, []any{v246, v262})
v264 := lang.Apply(v240, []any{v263})
v265 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v266 := v265.FindInternedVar(lang.NewSymbol("list"))
if v266.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v266)))
}
v267 := v266.Get()
v268 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v269 := v268.FindInternedVar(lang.NewSymbol("seq"))
if v269.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v269)))
}
v270 := v269.Get()
v271 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v272 := v271.FindInternedVar(lang.NewSymbol("concat"))
if v272.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v272)))
}
v273 := v272.Get()
v274 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v275 := v274.FindInternedVar(lang.NewSymbol("list"))
if v275.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v275)))
}
v276 := v275.Get()
v277 := lang.Apply(v276, []any{lang.NewSymbol("case*")})
v278 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v279 := v278.FindInternedVar(lang.NewSymbol("list"))
if v279.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v279)))
}
v280 := v279.Get()
v281 := lang.Apply(v280, []any{v7})
v282 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v283 := v282.FindInternedVar(lang.NewSymbol("list"))
if v283.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v283)))
}
v284 := v283.Get()
v285 := lang.Apply(v284, []any{v202})
v286 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v287 := v286.FindInternedVar(lang.NewSymbol("list"))
if v287.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v287)))
}
v288 := v287.Get()
v289 := lang.Apply(v288, []any{v207})
v290 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v291 := v290.FindInternedVar(lang.NewSymbol("list"))
if v291.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v291)))
}
v292 := v291.Get()
v293 := lang.Apply(v292, []any{v19})
v294 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v295 := v294.FindInternedVar(lang.NewSymbol("list"))
if v295.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v295)))
}
v296 := v295.Get()
v297 := lang.Apply(v296, []any{v212})
v298 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v299 := v298.FindInternedVar(lang.NewSymbol("list"))
if v299.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v299)))
}
v300 := v299.Get()
v301 := lang.Apply(v300, []any{v217})
v302 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v303 := v302.FindInternedVar(lang.NewSymbol("list"))
if v303.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v303)))
}
v304 := v303.Get()
v305 := lang.Apply(v304, []any{lang.NewKeyword("hash-equiv")})
v306 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v307 := v306.FindInternedVar(lang.NewSymbol("list"))
if v307.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v307)))
}
v308 := v307.Get()
v309 := lang.Apply(v308, []any{v222})
v310 := lang.Apply(v273, []any{v277, v281, v285, v289, v293, v297, v301, v305, v309})
v311 := lang.Apply(v270, []any{v310})
v312 := lang.Apply(v267, []any{v311})
v313 := lang.Apply(v233, []any{v237, v264, v312})
v314 := lang.Apply(v230, []any{v313})
v195 = v314
} else {
var v197 any
v198 := lang.Apply(v187, []any{lang.NewKeyword("identity"), v191})
if lang.IsTruthy(v198) {
v200 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v201 := v200.FindInternedVar(lang.NewSymbol("prep-hashes"))
if v201.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v201)))
}
v202 := v201.Get()
v203 := lang.Apply(v202, []any{v7, v19, v158, v163})
var v199 any = v203
_ = v199
v205 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v206 := v205.FindInternedVar(lang.NewSymbol("nth"))
if v206.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v206)))
}
v207 := v206.Get()
v208 := lang.Apply(v207, []any{v199, int64(0), nil})
var v204 any = v208
_ = v204
v210 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v211 := v210.FindInternedVar(lang.NewSymbol("nth"))
if v211.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v211)))
}
v212 := v211.Get()
v213 := lang.Apply(v212, []any{v199, int64(1), nil})
var v209 any = v213
_ = v209
v215 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v216 := v215.FindInternedVar(lang.NewSymbol("nth"))
if v216.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v216)))
}
v217 := v216.Get()
v218 := lang.Apply(v217, []any{v199, int64(2), nil})
var v214 any = v218
_ = v214
v220 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v221 := v220.FindInternedVar(lang.NewSymbol("nth"))
if v221.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v221)))
}
v222 := v221.Get()
v223 := lang.Apply(v222, []any{v199, int64(3), nil})
var v219 any = v223
_ = v219
v225 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v226 := v225.FindInternedVar(lang.NewSymbol("nth"))
if v226.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v226)))
}
v227 := v226.Get()
v228 := lang.Apply(v227, []any{v199, int64(4), nil})
var v224 any = v228
_ = v224
v230 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v231 := v230.FindInternedVar(lang.NewSymbol("seq"))
if v231.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v231)))
}
v232 := v231.Get()
v233 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v234 := v233.FindInternedVar(lang.NewSymbol("concat"))
if v234.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v234)))
}
v235 := v234.Get()
v236 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v237 := v236.FindInternedVar(lang.NewSymbol("list"))
if v237.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v237)))
}
v238 := v237.Get()
v239 := lang.Apply(v238, []any{lang.NewSymbol("glojure.core/let")})
v240 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v241 := v240.FindInternedVar(lang.NewSymbol("list"))
if v241.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v241)))
}
v242 := v241.Get()
v243 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v244 := v243.FindInternedVar(lang.NewSymbol("apply"))
if v244.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v244)))
}
v245 := v244.Get()
v246 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v247 := v246.FindInternedVar(lang.NewSymbol("vector"))
if v247.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v247)))
}
v248 := v247.Get()
v249 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v250 := v249.FindInternedVar(lang.NewSymbol("seq"))
if v250.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v250)))
}
v251 := v250.Get()
v252 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v253 := v252.FindInternedVar(lang.NewSymbol("concat"))
if v253.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v253)))
}
v254 := v253.Get()
v255 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v256 := v255.FindInternedVar(lang.NewSymbol("list"))
if v256.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v256)))
}
v257 := v256.Get()
v258 := lang.Apply(v257, []any{v7})
v259 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v260 := v259.FindInternedVar(lang.NewSymbol("list"))
if v260.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v260)))
}
v261 := v260.Get()
v262 := lang.Apply(v261, []any{v5})
v263 := lang.Apply(v254, []any{v258, v262})
v264 := lang.Apply(v251, []any{v263})
v265 := lang.Apply(v245, []any{v248, v264})
v266 := lang.Apply(v242, []any{v265})
v267 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v268 := v267.FindInternedVar(lang.NewSymbol("list"))
if v268.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v268)))
}
v269 := v268.Get()
v270 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v271 := v270.FindInternedVar(lang.NewSymbol("seq"))
if v271.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v271)))
}
v272 := v271.Get()
v273 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v274 := v273.FindInternedVar(lang.NewSymbol("concat"))
if v274.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v274)))
}
v275 := v274.Get()
v276 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v277 := v276.FindInternedVar(lang.NewSymbol("list"))
if v277.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v277)))
}
v278 := v277.Get()
v279 := lang.Apply(v278, []any{lang.NewSymbol("case*")})
v280 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v281 := v280.FindInternedVar(lang.NewSymbol("list"))
if v281.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v281)))
}
v282 := v281.Get()
v283 := lang.Apply(v282, []any{v7})
v284 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v285 := v284.FindInternedVar(lang.NewSymbol("list"))
if v285.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v285)))
}
v286 := v285.Get()
v287 := lang.Apply(v286, []any{v204})
v288 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v289 := v288.FindInternedVar(lang.NewSymbol("list"))
if v289.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v289)))
}
v290 := v289.Get()
v291 := lang.Apply(v290, []any{v209})
v292 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v293 := v292.FindInternedVar(lang.NewSymbol("list"))
if v293.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v293)))
}
v294 := v293.Get()
v295 := lang.Apply(v294, []any{v19})
v296 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v297 := v296.FindInternedVar(lang.NewSymbol("list"))
if v297.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v297)))
}
v298 := v297.Get()
v299 := lang.Apply(v298, []any{v214})
v300 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v301 := v300.FindInternedVar(lang.NewSymbol("list"))
if v301.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v301)))
}
v302 := v301.Get()
v303 := lang.Apply(v302, []any{v219})
v304 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v305 := v304.FindInternedVar(lang.NewSymbol("list"))
if v305.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v305)))
}
v306 := v305.Get()
v307 := lang.Apply(v306, []any{lang.NewKeyword("hash-identity")})
v308 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v309 := v308.FindInternedVar(lang.NewSymbol("list"))
if v309.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v309)))
}
v310 := v309.Get()
v311 := lang.Apply(v310, []any{v224})
v312 := lang.Apply(v275, []any{v279, v283, v287, v291, v295, v299, v303, v307, v311})
v313 := lang.Apply(v272, []any{v312})
v314 := lang.Apply(v269, []any{v313})
v315 := lang.Apply(v235, []any{v239, v266, v314})
v316 := lang.Apply(v232, []any{v315})
v197 = v316
} else {
v199 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v200 := v199.FindInternedVar(lang.NewSymbol("str"))
if v200.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v200)))
}
v201 := v200.Get()
v202 := lang.Apply(v201, []any{"No matching clause: ", v191})
v203 := lang.Apply(lang.NewIllegalArgumentError, []any{v202})
panic(v203)
}
v195 = v197
}
v193 = v195
}
v86 = v193
}
return v86
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// case-map
{
v0 := lang.NewSymbol("case-map").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("case-f"), lang.NewSymbol("test-f"), lang.NewSymbol("tests"), lang.NewSymbol("thens"))), lang.NewKeyword("doc"), "Transforms a sequence of test constants and a corresponding sequence of then\n  expressions into a sorted map to be consumed by case*. The form of the map\n  entries are {(case-f test) [(test-f test) then]}.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(6614), lang.NewKeyword("end-line"), int(6614), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 4 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("into1"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("sorted-map"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, nil)
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("zipmap"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("map"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v3, v5})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("map"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("vector"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("map"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v4, v5})
v31 := lang.Apply(v23, []any{v26, v30, v6})
v32 := lang.Apply(v16, []any{v20, v31})
v33 := lang.Apply(v9, []any{v13, v32})
return v33
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// cast
{
v0 := lang.NewSymbol("cast").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("c"), lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Throws a ClassCastException if x is not a c, else returns x.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(345), lang.NewKeyword("end-line"), int(345))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "cast")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("cast is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// cat
{
v0 := lang.NewSymbol("cat").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("rf"))), lang.NewKeyword("doc"), "A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7645), lang.NewKeyword("end-line"), int(7645))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("preserving-reduced"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 lang.FnFunc
v10 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v11 := lang.Apply(v3, nil)
return v11
  case 1:
v11 := args[0]
v12 := lang.Apply(v3, []any{v11})
return v12
  case 2:
v11 := args[0]
v12 := args[1]
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("reduce"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v4, v11, v12})
return v16
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7651), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(7655), lang.NewKeyword("end-column"), int(36))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v12
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// char
{
var v1 lang.FnFunc
{ // function char__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
var v30 any
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
if lang.IsTruthy(v33) {
v30 = lang.NewSymbol("uncheckedCharCast")
} else {
v30 = lang.NewSymbol("charCast")
}
v34 := lang.Apply(v29, []any{v30})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v3})
v39 := lang.Apply(v26, []any{v34, v38})
v40 := lang.Apply(v23, []any{v39})
v41 := lang.Apply(v20, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("char").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to char", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3511), lang.NewKeyword("end-line"), int(3511))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(runtime5.RT, "CharCast")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("CharCast is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// char-array
{
var v1 lang.FnFunc
{ // function char-array__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/charArray")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("glojure.core/unquote-splicing")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{lang.NewSymbol("glojure.core/args")})
v39 := lang.Apply(v30, []any{v34, v38})
v40 := lang.Apply(v27, []any{v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v21, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
  }
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("char-array").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("size-or-seq")), lang.NewVector(lang.NewSymbol("size"), lang.NewSymbol("init-val-or-seq"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Creates an array of chars", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)int64(2)), lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5325), lang.NewKeyword("end-line"), int(5325))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "charArray")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("charArray is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "charArrayInit")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("charArrayInit is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// char-escape-string
{
v1 := reflect.TypeOf("")
v0 := lang.NewSymbol("char-escape-string").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("doc"), "Returns escape string for char or nil if none", lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(6), lang.NewKeyword("line"), int(214), lang.NewKeyword("end-line"), int(217))).(*lang.Symbol)
v2 := ns.InternWithValue(v0, lang.NewMap(lang.NewChar(10), "\\n", lang.NewChar(9), "\\t", lang.NewChar(13), "\\r", lang.NewChar(34), "\\\"", lang.NewChar(92), "\\\\", lang.NewChar(12), "\\f", lang.NewChar(8), "\\b"), true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// char-name-string
{
v1 := reflect.TypeOf("")
v0 := lang.NewSymbol("char-name-string").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("doc"), "Returns name string for char or nil if none", lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(6), lang.NewKeyword("line"), int(335), lang.NewKeyword("end-line"), int(338))).(*lang.Symbol)
v2 := ns.InternWithValue(v0, lang.NewMap(lang.NewChar(10), "newline", lang.NewChar(9), "tab", lang.NewChar(32), "space", lang.NewChar(8), "backspace", lang.NewChar(12), "formfeed", lang.NewChar(13), "return"), true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// char?
{
v0 := lang.NewSymbol("char?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a Character", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(6), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(153), lang.NewKeyword("end-line"), int(157))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function char?
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.Char, v4})
return v8
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(157), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(157), lang.NewKeyword("end-column"), int(89))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// chars
{
var v1 lang.FnFunc
{ // function chars
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/chars")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v9, []any{v13, v17, v21, v25})
v27 := lang.Apply(v6, []any{v26})
return v27
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("chars").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("xs"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Casts to chars[]", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(12), lang.NewKeyword("line"), int(5382), lang.NewKeyword("end-line"), int(5382))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "chars")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("chars is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// check-cyclic-dependency
{
v0 := lang.NewSymbol("check-cyclic-dependency").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("path"))), lang.NewKeyword("doc"), "Detects and rejects non-trivial cyclic load dependencies. The\n  exception message shows the dependency chain with the cycle\n  highlighted. Ignores the trivial case of a file attempting to load\n  itself because that can occur when a gen-class'd class loads its\n  implementation.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(30), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(5974), lang.NewKeyword("end-line"), int(5974), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("some"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.CreatePersistentTreeSet(v3)
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5981), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(5981), lang.NewKeyword("end-column"), int(21))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("rest"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("*pending-paths*"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v13, []any{v16})
v18 := lang.Apply(v7, []any{v10, v17})
if lang.IsTruthy(v18) {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("map"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
var v23 lang.FnFunc
v23 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v24 := args[0]
var v25 any
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("="))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v24, v3})
if lang.IsTruthy(v29) {
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("str"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{"[ ", v24, " ]"})
v25 = v33
} else {
v25 = v24
}
return v25
})
v24 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5982), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(5982), lang.NewKeyword("end-column"), int(59))
v25, err := lang.WithMeta(v23, v24.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("cons"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("*pending-paths*"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v28, []any{v3, v31})
v33 := lang.Apply(v22, []any{v25, v32})
var v19 any = v33
_ = v19
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("apply"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("interpose"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{"->", v19})
v45 := lang.Apply(v37, []any{v40, v44})
var v34 any = v45
_ = v34
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("throw-if"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{true, "Cyclic load dependency: %s", v34})
v4 = v50
} else {
v4 = nil
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// check-valid-options
{
v0 := lang.NewSymbol("check-valid-options").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("options"), lang.NewSymbol("&"), lang.NewSymbol("valid-keys"))), lang.NewKeyword("doc"), "Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(35), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1709), lang.NewKeyword("end-line"), int(1709), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("apply"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("disj"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("apply"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("hash-set"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("keys"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v3})
v25 := lang.Apply(v17, []any{v20, v24})
v26 := lang.Apply(v11, []any{v14, v25, v4})
v27 := lang.Apply(v8, []any{v26})
if lang.IsTruthy(v27) {
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("apply"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("str"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("first"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{v4})
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("map"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
var v41 lang.FnFunc
v41 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v42 := args[0]
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("str"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{", ", v42})
return v46
})
v42 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(1718), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(1718), lang.NewKeyword("end-column"), int(28))
v43, err := lang.WithMeta(v41, v42.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("rest"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v4})
v48 := lang.Apply(v40, []any{v43, v47})
v49 := lang.Apply(v30, []any{v33, "Only these options are valid: ", v37, v48})
v50 := lang.Apply(lang.NewIllegalArgumentError, []any{v49})
panic(v50)
} else {
v5 = nil
}
return v5
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// chunk
{
v0 := lang.NewSymbol("chunk").WithMeta(lang.NewMap(lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(691), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(691), lang.NewKeyword("end-column"), int(41), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("b"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "chunk")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "chunk")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// chunk-append
{
v0 := lang.NewSymbol("chunk-append").WithMeta(lang.NewMap(lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(688), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(688), lang.NewKeyword("end-column"), int(27), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("b"), lang.NewSymbol("x"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "add")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("add is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// chunk-buffer
{
v0 := lang.NewSymbol("chunk-buffer").WithMeta(lang.NewMap(lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(685), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(685), lang.NewKeyword("end-column"), int(53), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("capacity"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(lang.NewChunkBuffer, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// chunk-cons
{
v0 := lang.NewSymbol("chunk-cons").WithMeta(lang.NewMap(lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(703), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(703), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("chunk"), lang.NewSymbol("rest"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.Apply(lang.Count, []any{v3})
v7 := lang.Apply(lang.IsZero, []any{v6})
if lang.IsTruthy(v7) {
v5 = v4
} else {
v8 := lang.Apply(lang.NewChunkedCons, []any{v3, v4})
v5 = v8
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// chunk-first
{
v0 := lang.NewSymbol("chunk-first").WithMeta(lang.NewMap(lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(694), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(694), lang.NewKeyword("end-column"), int(48), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "chunkedFirst")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "chunkedFirst")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// chunk-next
{
v0 := lang.NewSymbol("chunk-next").WithMeta(lang.NewMap(lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(700), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(700), lang.NewKeyword("end-column"), int(71), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "chunkedNext")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "chunkedNext")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// chunk-rest
{
v0 := lang.NewSymbol("chunk-rest").WithMeta(lang.NewMap(lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(697), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(697), lang.NewKeyword("end-column"), int(71), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "chunkedMore")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "chunkedMore")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// chunked-seq?
{
v0 := lang.NewSymbol("chunked-seq?").WithMeta(lang.NewMap(lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(708), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(708), lang.NewKeyword("end-column"), int(27), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.IChunkedSeq, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// class
{
v0 := lang.NewSymbol("class").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns the Class of x", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3461), lang.NewKeyword("end-line"), int(3461))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("nil?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v4 = v3
} else {
v9 := lang.Apply(lang.TypeOf, []any{v3})
v4 = v9
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// class?
{
v0 := lang.NewSymbol("class?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x is an instance of Class", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5465), lang.NewKeyword("end-line"), int(5465))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{reflect.Type, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// clear-agent-errors
{
v0 := lang.NewSymbol("clear-agent-errors").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"))), lang.NewKeyword("doc"), "DEPRECATED: Use 'restart-agent' instead.\n  Clears any exceptions thrown during asynchronous actions of the\n  agent, allowing subsequent actions to occur.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("deprecated"), "1.2", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(24), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2244), lang.NewKeyword("end-line"), int(2244))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("restart-agent"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7, ok := lang.FieldOrMethod(v3, "Deref")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "Deref")))
}
var v8 any
switch reflect.TypeOf(v7).Kind() {
case reflect.Func:
  v8 = lang.Apply(v7, nil)
default:
  v8 = v7
}
v9 := lang.Apply(v6, []any{v3, v8})
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// coll?
{
v0 := lang.NewSymbol("coll?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x implements IPersistentCollection", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6192), lang.NewKeyword("end-line"), int(6192))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.IPersistentCollection, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// comment
{
v0 := lang.NewSymbol("comment").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Ignores body, yields nil", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4733), lang.NewKeyword("end-line"), int(4733))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
return nil
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// commute
{
v0 := lang.NewSymbol("commute").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ref"), lang.NewSymbol("fun"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Must be called in a transaction. Sets the in-transaction-value of\n  ref to:\n\n  (apply fun in-transaction-value-of-ref args)\n\n  and returns the in-transaction-value of ref.\n\n  At the commit point of the transaction, sets the value of ref to be:\n\n  (apply fun most-recently-committed-value-of-ref args)\n\n  Thus fun should be commutative, or, failing that, you must accept\n  last-one-in-wins behavior.  commute allows for more concurrency than\n  ref-set.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2414), lang.NewKeyword("end-line"), int(2414))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6, _ := lang.FieldOrMethod(v3, "Commute")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Commute is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// comp
{
v0 := lang.NewSymbol("comp").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("g")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("g"), lang.NewSymbol("&"), lang.NewSymbol("fs"))), lang.NewKeyword("doc"), "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2549), lang.NewKeyword("end-line"), int(2549))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v4 := v3.FindInternedVar(lang.NewSymbol("identity"))
if v4.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v4)))
}
v5 := v4.Get()
return v5
  case 1:
v3 := args[0]
return v3
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v6 := lang.Apply(v4, nil)
v7 := lang.Apply(v3, []any{v6})
return v7
  case 1:
v6 := args[0]
v7 := lang.Apply(v4, []any{v6})
v8 := lang.Apply(v3, []any{v7})
return v8
  case 2:
v6 := args[0]
v7 := args[1]
v8 := lang.Apply(v4, []any{v6, v7})
v9 := lang.Apply(v3, []any{v8})
return v9
  case 3:
v6 := args[0]
v7 := args[1]
v8 := args[2]
v9 := lang.Apply(v4, []any{v6, v7, v8})
v10 := lang.Apply(v3, []any{v9})
return v10
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v6 := args[0]
v7 := args[1]
v8 := args[2]
v9 := lang.NewList(args[3:]...)
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("apply"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v4, v6, v7, v8, v9})
v14 := lang.Apply(v3, []any{v13})
return v14
  }
})
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2559), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(2564), lang.NewKeyword("end-column"), int(49))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v7
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("reduce1"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("comp"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list*"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3, v4, v5})
v16 := lang.Apply(v8, []any{v11, v15})
return v16
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// comparator
{
v0 := lang.NewSymbol("comparator").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred"))), lang.NewKeyword("doc"), "Returns an implementation of java.util.Comparator based upon pred.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3077), lang.NewKeyword("end-line"), int(3077))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v6 := args[1]
var v7 any
v8 := lang.Apply(v3, []any{v5, v6})
if lang.IsTruthy(v8) {
v7 = int64(-1)
} else {
var v9 any
v10 := lang.Apply(v3, []any{v6, v5})
if lang.IsTruthy(v10) {
v9 = int64(1)
} else {
var v11 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v11 = int64(0)
} else {
v11 = nil
}
v9 = v11
}
v7 = v9
}
return v7
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3082), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(3083), lang.NewKeyword("end-column"), int(48))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// compare
{
var v1 lang.FnFunc
{ // function compare__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("glojure.lang.Util")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("glojure.core/compare")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v3})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v4})
v31 := lang.Apply(v10, []any{v14, v18, v22, v26, v30})
v32 := lang.Apply(v7, []any{v31})
return v32
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("compare").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Same as Java x.compareTo(y) except it also works for nil, and\n  compares numbers and collections in a type-independent manner. x\n  must implement Comparable", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(824), lang.NewKeyword("end-line"), int(824))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(lang.Compare, []any{v4, v5})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// compare-and-set!
{
v0 := lang.NewSymbol("compare-and-set!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("atom"), lang.NewSymbol("oldval"), lang.NewSymbol("newval"))), lang.NewKeyword("doc"), "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2360), lang.NewKeyword("end-line"), int(2360))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6, _ := lang.FieldOrMethod(v3, "compareAndSet")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("compareAndSet is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// compile
{
v0 := lang.NewSymbol("compile").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("lib"))), lang.NewKeyword("doc"), "Compiles the namespace named by the symbol lib into a set of\n  classfiles. The source for the lib must be in a proper\n  classpath-relative directory. The output files will go into the\n  directory specified by *compile-path*, and that directory too must\n  be in the classpath.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6114), lang.NewKeyword("end-line"), int(6114))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("hash-map"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*compile-files*"))
v12 := lang.Apply(v10, []any{v11, true})
v13 := lang.Apply(v7, []any{v12})
_ = v13
var v14 any
func() {
defer func() {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, nil)
}()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("load-one"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v3, true, true})
v14 = v22
}()
_ = v14
return v3
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// complement
{
v0 := lang.NewSymbol("complement").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"))), lang.NewKeyword("doc"), "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1428), lang.NewKeyword("end-line"), int(1428))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("not"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v3, nil)
v9 := lang.Apply(v7, []any{v8})
return v9
  case 1:
v5 := args[0]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("not"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v3, []any{v5})
v10 := lang.Apply(v8, []any{v9})
return v10
  case 2:
v5 := args[0]
v6 := args[1]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("not"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v3, []any{v5, v6})
v11 := lang.Apply(v9, []any{v10})
return v11
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("not"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("apply"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3, v5, v6, v7})
v15 := lang.Apply(v10, []any{v14})
return v15
  }
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(1434), lang.NewKeyword("column"), int(3), lang.NewKeyword("end-line"), int(1438), lang.NewKeyword("end-column"), int(40))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// completing
{
v0 := lang.NewSymbol("completing").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("cf"))), lang.NewKeyword("doc"), "Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6893), lang.NewKeyword("end-line"), int(6893))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("completing"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("identity"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{v3, v9})
return v10
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v6 := lang.Apply(v3, nil)
return v6
  case 1:
v6 := args[0]
v7 := lang.Apply(v4, []any{v6})
return v7
  case 2:
v6 := args[0]
v7 := args[1]
v8 := lang.Apply(v3, []any{v6, v7})
return v8
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6900), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(6903), lang.NewKeyword("end-column"), int(23))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// concat
{
v0 := lang.NewSymbol("concat").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("zs"))), lang.NewKeyword("doc"), "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(711), lang.NewKeyword("end-line"), int(711))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
return nil
})
v4 := lang.Apply(lang.NewLazySeq, []any{v3})
return v4
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
return v3
})
v5 := lang.Apply(lang.NewLazySeq, []any{v4})
return v5
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
var v13 any
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v6})
if lang.IsTruthy(v17) {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("chunk-cons"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("chunk-first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v6})
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v6})
v32 := lang.Apply(v27, []any{v31, v4})
v33 := lang.Apply(v20, []any{v24, v32})
v13 = v33
} else {
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("cons"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("first"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v6})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("concat"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("rest"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v6})
v48 := lang.Apply(v43, []any{v47, v4})
v49 := lang.Apply(v36, []any{v40, v48})
v13 = v49
}
v12 = v13
} else {
v12 = v4
}
return v12
})
v6 := lang.Apply(lang.NewLazySeq, []any{v5})
return v6
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
var v7 lang.FnFunc
{ // function cat
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := args[0]
v10 := args[1]
var v11 lang.FnFunc
v11 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("seq"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v12})
var v12 any = v16
_ = v12
var v18 any
if lang.IsTruthy(v12) {
var v19 any
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v12})
if lang.IsTruthy(v23) {
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("chunk-cons"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("chunk-first"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v12})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v12})
v35 := lang.Apply(v8, []any{v34, v10})
v36 := lang.Apply(v26, []any{v30, v35})
v19 = v36
} else {
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("cons"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("first"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v12})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("rest"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v12})
v48 := lang.Apply(v8, []any{v47, v10})
v49 := lang.Apply(v39, []any{v43, v48})
v19 = v49
}
v18 = v19
} else {
var v50 any
if lang.IsTruthy(v10) {
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("first"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.Apply(v53, []any{v10})
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("next"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{v10})
v59 := lang.Apply(v8, []any{v54, v58})
v50 = v59
} else {
v50 = nil
}
v18 = v50
}
return v18
})
v12 := lang.Apply(lang.NewLazySeq, []any{v11})
return v12
})
v8 := v7
_ = v8
}
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(726), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(735), lang.NewKeyword("end-column"), int(56))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v6 any = v9
_ = v6
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("concat"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3, v4})
v15 := lang.Apply(v6, []any{v14, v5})
return v15
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// cond
{
v0 := lang.NewSymbol("cond").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("clauses"))), lang.NewKeyword("doc"), "Takes a set of test/expr pairs. It evaluates each test one at a\n  time.  If a test returns logical true, cond evaluates and returns\n  the value of the corresponding expr and doesn't evaluate any of the\n  other tests or exprs. (cond) returns nil.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(569), lang.NewKeyword("end-line"), int(569))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
var v6 any
if lang.IsTruthy(v5) {
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("list"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("first"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v5})
var v14 any
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("next"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v5})
if lang.IsTruthy(v18) {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("second"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v5})
v14 = v22
} else {
v23 := lang.Apply(lang.NewIllegalArgumentError, []any{"cond requires an even number of forms"})
panic(v23)
}
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("cons"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("next"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("next"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v5})
v34 := lang.Apply(v29, []any{v33})
v35 := lang.Apply(v26, []any{lang.NewSymbol("glojure.core/cond"), v34})
v36 := lang.Apply(v9, []any{lang.NewSymbol("if"), v13, v14, v35})
v6 = v36
} else {
v6 = nil
}
return v6
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// cond->
{
v0 := lang.NewSymbol("cond->").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("expr"), lang.NewSymbol("&"), lang.NewSymbol("clauses"))), lang.NewKeyword("doc"), "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n  through each form for which the corresponding test\n  expression is true. Note that, unlike cond branching, cond-> threading does\n  not short circuit after the first true test expression.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.5", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(7564), lang.NewKeyword("end-line"), int(7564))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
_ = nil
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("gensym"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, nil)
var v7 any = v11
_ = v7
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("map"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
var v16 lang.FnFunc
v16 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v17 := args[0]
var v18 any = v17
_ = v18
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("nth"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v18, int64(0), nil})
var v19 any = v23
_ = v19
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("nth"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v18, int64(1), nil})
var v24 any = v28
_ = v24
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("seq"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("concat"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{lang.NewSymbol("if")})
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v19})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("seq"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("concat"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("list"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{lang.NewSymbol("glojure.core/->")})
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v7})
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("list"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v24})
v65 := lang.Apply(v52, []any{v56, v60, v64})
v66 := lang.Apply(v49, []any{v65})
v67 := lang.Apply(v46, []any{v66})
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("list"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{v7})
v72 := lang.Apply(v35, []any{v39, v43, v67, v71})
v73 := lang.Apply(v32, []any{v72})
return v73
})
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7573), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(7573), lang.NewKeyword("end-column"), int(66))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("partition"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{int64(2), v6})
v23 := lang.Apply(v15, []any{v18, v22})
var v12 any = v23
_ = v12
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("glojure.core/let")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("apply"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("vector"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("seq"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("concat"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("list"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v7})
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("list"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v5})
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("interleave"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("repeat"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v7})
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("butlast"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v12})
v69 := lang.Apply(v60, []any{v64, v68})
v70 := lang.Apply(v49, []any{v53, v57, v69})
v71 := lang.Apply(v46, []any{v70})
v72 := lang.Apply(v40, []any{v43, v71})
v73 := lang.Apply(v37, []any{v72})
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("list"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
var v77 any
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("empty?"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.Apply(v80, []any{v12})
if lang.IsTruthy(v81) {
v77 = v7
} else {
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("last"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, []any{v12})
v77 = v85
}
v86 := lang.Apply(v76, []any{v77})
v87 := lang.Apply(v30, []any{v34, v73, v86})
v88 := lang.Apply(v27, []any{v87})
return v88
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// cond->>
{
v0 := lang.NewSymbol("cond->>").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("expr"), lang.NewSymbol("&"), lang.NewSymbol("clauses"))), lang.NewKeyword("doc"), "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n  through each form for which the corresponding test expression\n  is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n  after the first true test expression.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.5", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(7581), lang.NewKeyword("end-line"), int(7581))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
_ = nil
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("gensym"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, nil)
var v7 any = v11
_ = v7
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("map"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
var v16 lang.FnFunc
v16 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v17 := args[0]
var v18 any = v17
_ = v18
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("nth"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v18, int64(0), nil})
var v19 any = v23
_ = v19
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("nth"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v18, int64(1), nil})
var v24 any = v28
_ = v24
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("seq"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("concat"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{lang.NewSymbol("if")})
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v19})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("seq"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("concat"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("list"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{lang.NewSymbol("glojure.core/->>")})
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v7})
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("list"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v24})
v65 := lang.Apply(v52, []any{v56, v60, v64})
v66 := lang.Apply(v49, []any{v65})
v67 := lang.Apply(v46, []any{v66})
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("list"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{v7})
v72 := lang.Apply(v35, []any{v39, v43, v67, v71})
v73 := lang.Apply(v32, []any{v72})
return v73
})
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7590), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(7590), lang.NewKeyword("end-column"), int(67))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("partition"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{int64(2), v6})
v23 := lang.Apply(v15, []any{v18, v22})
var v12 any = v23
_ = v12
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("glojure.core/let")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("apply"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("vector"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("seq"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("concat"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("list"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v7})
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("list"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v5})
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("interleave"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("repeat"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v7})
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("butlast"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v12})
v69 := lang.Apply(v60, []any{v64, v68})
v70 := lang.Apply(v49, []any{v53, v57, v69})
v71 := lang.Apply(v46, []any{v70})
v72 := lang.Apply(v40, []any{v43, v71})
v73 := lang.Apply(v37, []any{v72})
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("list"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
var v77 any
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("empty?"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.Apply(v80, []any{v12})
if lang.IsTruthy(v81) {
v77 = v7
} else {
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("last"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, []any{v12})
v77 = v85
}
v86 := lang.Apply(v76, []any{v77})
v87 := lang.Apply(v30, []any{v34, v73, v86})
v88 := lang.Apply(v27, []any{v87})
return v88
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// condp
{
v0 := lang.NewSymbol("condp").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("expr"), lang.NewSymbol("&"), lang.NewSymbol("clauses"))), lang.NewKeyword("doc"), "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(6353), lang.NewKeyword("end-line"), int(6353))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 4 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.NewList(args[4:]...)
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("gensym"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{"pred__"})
var v8 any = v12
_ = v8
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("gensym"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{"expr__"})
var v13 any = v17
_ = v13
var v19 lang.FnFunc
{ // function emit
v19 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v21 := args[0]
v22 := args[1]
v23 := args[2]
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("split-at"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
var v28 any
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("="))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("second"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v23})
v36 := lang.Apply(v31, []any{lang.NewKeyword(">>"), v35})
if lang.IsTruthy(v36) {
v28 = int64(3)
} else {
v28 = int64(2)
}
v37 := lang.Apply(v27, []any{v28, v23})
var v24 any = v37
_ = v24
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("nth"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v24, int64(0), nil})
var v38 any = v42
_ = v38
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("nth"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v38, int64(0), nil})
var v43 any = v47
_ = v43
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("nth"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{v38, int64(1), nil})
var v48 any = v52
_ = v48
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("nth"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v38, int64(2), nil})
var v53 any = v57
_ = v53
var v58 any = v38
_ = v58
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("nth"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.Apply(v62, []any{v24, int64(1), nil})
var v59 any = v63
_ = v59
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("count"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v58})
var v64 any = v68
_ = v64
var v70 any
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("="))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{int64(0), v64})
if lang.IsTruthy(v74) {
v75 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v76 := v75.FindInternedVar(lang.NewSymbol("seq"))
if v76.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v76)))
}
v77 := v76.Get()
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("concat"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("list"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.Apply(v83, []any{lang.NewSymbol("throw")})
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("list"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v89 := v88.FindInternedVar(lang.NewSymbol("seq"))
if v89.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v89)))
}
v90 := v89.Get()
v91 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v92 := v91.FindInternedVar(lang.NewSymbol("concat"))
if v92.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v92)))
}
v93 := v92.Get()
v94 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v95 := v94.FindInternedVar(lang.NewSymbol("list"))
if v95.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v95)))
}
v96 := v95.Get()
v97 := lang.Apply(v96, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.NewIllegalArgumentError")})
v98 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v99 := v98.FindInternedVar(lang.NewSymbol("list"))
if v99.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v99)))
}
v100 := v99.Get()
v101 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v102 := v101.FindInternedVar(lang.NewSymbol("seq"))
if v102.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v102)))
}
v103 := v102.Get()
v104 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v105 := v104.FindInternedVar(lang.NewSymbol("concat"))
if v105.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v105)))
}
v106 := v105.Get()
v107 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v108 := v107.FindInternedVar(lang.NewSymbol("list"))
if v108.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v108)))
}
v109 := v108.Get()
v110 := lang.Apply(v109, []any{lang.NewSymbol("glojure.core/str")})
v111 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v112 := v111.FindInternedVar(lang.NewSymbol("list"))
if v112.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v112)))
}
v113 := v112.Get()
v114 := lang.Apply(v113, []any{"No matching clause: "})
v115 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v116 := v115.FindInternedVar(lang.NewSymbol("list"))
if v116.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v116)))
}
v117 := v116.Get()
v118 := lang.Apply(v117, []any{v22})
v119 := lang.Apply(v106, []any{v110, v114, v118})
v120 := lang.Apply(v103, []any{v119})
v121 := lang.Apply(v100, []any{v120})
v122 := lang.Apply(v93, []any{v97, v121})
v123 := lang.Apply(v90, []any{v122})
v124 := lang.Apply(v87, []any{v123})
v125 := lang.Apply(v80, []any{v84, v124})
v126 := lang.Apply(v77, []any{v125})
v70 = v126
} else {
var v127 any
v128 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v129 := v128.FindInternedVar(lang.NewSymbol("="))
if v129.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v129)))
}
v130 := v129.Get()
v131 := lang.Apply(v130, []any{int64(1), v64})
if lang.IsTruthy(v131) {
v127 = v43
} else {
var v132 any
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("="))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.Apply(v135, []any{int64(2), v64})
if lang.IsTruthy(v136) {
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("seq"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("concat"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("list"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.Apply(v145, []any{lang.NewSymbol("if")})
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("list"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v151 := v150.FindInternedVar(lang.NewSymbol("seq"))
if v151.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v151)))
}
v152 := v151.Get()
v153 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v154 := v153.FindInternedVar(lang.NewSymbol("concat"))
if v154.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v154)))
}
v155 := v154.Get()
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("list"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
v159 := lang.Apply(v158, []any{v21})
v160 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v161 := v160.FindInternedVar(lang.NewSymbol("list"))
if v161.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v161)))
}
v162 := v161.Get()
v163 := lang.Apply(v162, []any{v43})
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("list"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.Apply(v166, []any{v22})
v168 := lang.Apply(v155, []any{v159, v163, v167})
v169 := lang.Apply(v152, []any{v168})
v170 := lang.Apply(v149, []any{v169})
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("list"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
v174 := lang.Apply(v173, []any{v48})
v175 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v176 := v175.FindInternedVar(lang.NewSymbol("list"))
if v176.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v176)))
}
v177 := v176.Get()
v178 := lang.Apply(v20, []any{v21, v22, v59})
v179 := lang.Apply(v177, []any{v178})
v180 := lang.Apply(v142, []any{v146, v170, v174, v179})
v181 := lang.Apply(v139, []any{v180})
v132 = v181
} else {
var v182 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v183 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v184 := v183.FindInternedVar(lang.NewSymbol("seq"))
if v184.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v184)))
}
v185 := v184.Get()
v186 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v187 := v186.FindInternedVar(lang.NewSymbol("concat"))
if v187.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v187)))
}
v188 := v187.Get()
v189 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v190 := v189.FindInternedVar(lang.NewSymbol("list"))
if v190.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v190)))
}
v191 := v190.Get()
v192 := lang.Apply(v191, []any{lang.NewSymbol("glojure.core/if-let")})
v193 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v194 := v193.FindInternedVar(lang.NewSymbol("list"))
if v194.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v194)))
}
v195 := v194.Get()
v196 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v197 := v196.FindInternedVar(lang.NewSymbol("apply"))
if v197.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v197)))
}
v198 := v197.Get()
v199 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v200 := v199.FindInternedVar(lang.NewSymbol("vector"))
if v200.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v200)))
}
v201 := v200.Get()
v202 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v203 := v202.FindInternedVar(lang.NewSymbol("seq"))
if v203.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v203)))
}
v204 := v203.Get()
v205 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v206 := v205.FindInternedVar(lang.NewSymbol("concat"))
if v206.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v206)))
}
v207 := v206.Get()
v208 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v209 := v208.FindInternedVar(lang.NewSymbol("list"))
if v209.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v209)))
}
v210 := v209.Get()
v211 := lang.Apply(v210, []any{lang.NewSymbol("p__0__auto__")})
v212 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v213 := v212.FindInternedVar(lang.NewSymbol("list"))
if v213.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v213)))
}
v214 := v213.Get()
v215 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v216 := v215.FindInternedVar(lang.NewSymbol("seq"))
if v216.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v216)))
}
v217 := v216.Get()
v218 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v219 := v218.FindInternedVar(lang.NewSymbol("concat"))
if v219.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v219)))
}
v220 := v219.Get()
v221 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v222 := v221.FindInternedVar(lang.NewSymbol("list"))
if v222.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v222)))
}
v223 := v222.Get()
v224 := lang.Apply(v223, []any{v21})
v225 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v226 := v225.FindInternedVar(lang.NewSymbol("list"))
if v226.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v226)))
}
v227 := v226.Get()
v228 := lang.Apply(v227, []any{v43})
v229 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v230 := v229.FindInternedVar(lang.NewSymbol("list"))
if v230.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v230)))
}
v231 := v230.Get()
v232 := lang.Apply(v231, []any{v22})
v233 := lang.Apply(v220, []any{v224, v228, v232})
v234 := lang.Apply(v217, []any{v233})
v235 := lang.Apply(v214, []any{v234})
v236 := lang.Apply(v207, []any{v211, v235})
v237 := lang.Apply(v204, []any{v236})
v238 := lang.Apply(v198, []any{v201, v237})
v239 := lang.Apply(v195, []any{v238})
v240 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v241 := v240.FindInternedVar(lang.NewSymbol("list"))
if v241.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v241)))
}
v242 := v241.Get()
v243 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v244 := v243.FindInternedVar(lang.NewSymbol("seq"))
if v244.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v244)))
}
v245 := v244.Get()
v246 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v247 := v246.FindInternedVar(lang.NewSymbol("concat"))
if v247.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v247)))
}
v248 := v247.Get()
v249 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v250 := v249.FindInternedVar(lang.NewSymbol("list"))
if v250.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v250)))
}
v251 := v250.Get()
v252 := lang.Apply(v251, []any{v53})
v253 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v254 := v253.FindInternedVar(lang.NewSymbol("list"))
if v254.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v254)))
}
v255 := v254.Get()
v256 := lang.Apply(v255, []any{lang.NewSymbol("p__0__auto__")})
v257 := lang.Apply(v248, []any{v252, v256})
v258 := lang.Apply(v245, []any{v257})
v259 := lang.Apply(v242, []any{v258})
v260 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v261 := v260.FindInternedVar(lang.NewSymbol("list"))
if v261.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v261)))
}
v262 := v261.Get()
v263 := lang.Apply(v20, []any{v21, v22, v59})
v264 := lang.Apply(v262, []any{v263})
v265 := lang.Apply(v188, []any{v192, v239, v259, v264})
v266 := lang.Apply(v185, []any{v265})
v182 = v266
} else {
v182 = nil
}
v132 = v182
}
v127 = v132
}
v70 = v127
}
return v70
})
v20 := v19
_ = v20
}
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6377), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(6389), lang.NewKeyword("end-column"), int(53))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v18 any = v21
_ = v18
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("seq"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("concat"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("list"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{lang.NewSymbol("glojure.core/let")})
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("apply"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("vector"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("seq"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("concat"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v8})
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("list"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v5})
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("list"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{v13})
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("list"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.Apply(v62, []any{v6})
v64 := lang.Apply(v47, []any{v51, v55, v59, v63})
v65 := lang.Apply(v44, []any{v64})
v66 := lang.Apply(v38, []any{v41, v65})
v67 := lang.Apply(v35, []any{v66})
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("list"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v18, []any{v8, v13, v7})
v72 := lang.Apply(v70, []any{v71})
v73 := lang.Apply(v28, []any{v32, v67, v72})
v74 := lang.Apply(v25, []any{v73})
return v74
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// conj
{
v0 := lang.NewSymbol("conj").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("x"), lang.NewSymbol("&"), lang.NewSymbol("xs"))), lang.NewKeyword("doc"), "conj[oin]. Returns a new collection with the xs\n    'added'. (conj nil item) returns (item).\n    (conj coll) returns coll. (conj) returns [].\n    The 'addition' may happen at different 'places' depending\n    on the concrete type.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(5), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(73), lang.NewKeyword("end-line"), int(81))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function conj
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v4 := lang.NewVector()
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(82), lang.NewKeyword("column"), int(13), lang.NewKeyword("end-line"), int(82), lang.NewKeyword("end-column"), int(14))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 1:
v4 := args[0]
return v4
  case 2:
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(lang.Conj, []any{v4, v5})
return v6
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := lang.NewList(args[2:]...)
recur_loop_10:
var v7 any
if lang.IsTruthy(v6) {
v9 := lang.Apply(lang.Conj, []any{v4, v5})
var v8 any = v9
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("first"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v6})
var v10 any = v14
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("next"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v6})
var v15 any = v19
v4 = v8
v5 = v10
v6 = v15
goto recur_loop_10
} else {
v20 := lang.Apply(lang.Conj, []any{v4, v5})
v7 = v20
}
return v7
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(81), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(88), lang.NewKeyword("end-column"), int(67))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// conj!
{
v0 := lang.NewSymbol("conj!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3359), lang.NewKeyword("end-line"), int(3359))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v4 := v3.FindInternedVar(lang.NewSymbol("transient"))
if v4.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v4)))
}
v5 := v4.Get()
v6 := lang.NewVector()
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3364), lang.NewKeyword("column"), int(18), lang.NewKeyword("end-line"), int(3364), lang.NewKeyword("end-column"), int(19))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v9 := lang.Apply(v5, []any{v8})
return v9
  case 1:
v3 := args[0]
return v3
  case 2:
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "Conj")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Conj is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// cons
{
v0 := lang.NewSymbol("cons").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("seq"))), lang.NewKeyword("doc"), "Returns a new seq where x is the first element and seq is\n    the rest.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(5), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(21), lang.NewKeyword("end-line"), int(27))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function cons
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(lang.NewCons, []any{v4, v5})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(27), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(27), lang.NewKeyword("end-column"), int(89))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// constantly
{
v0 := lang.NewSymbol("constantly").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns a function that takes any number of arguments and returns x.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1440), lang.NewKeyword("end-line"), int(1440))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := lang.NewList(args[0:]...)
return v3
  }
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(1444), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(1444), lang.NewKeyword("end-column"), int(21))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// contains?
{
v0 := lang.NewSymbol("contains?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("key"))), lang.NewKeyword("doc"), "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and Java arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1479), lang.NewKeyword("end-line"), int(1479))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(runtime5.RT, "Contains")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Contains is not a function")))
}
v6 := lang.Apply(v5, []any{v3, v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// count
{
var v1 lang.FnFunc
{ // function count__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/Count")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("count").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Java Collections and Maps", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(867), lang.NewKeyword("end-line"), int(867))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.Count, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// counted?
{
v0 := lang.NewSymbol("counted?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns true if coll implements count in constant time", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6241), lang.NewKeyword("end-line"), int(6241))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.Counted, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// create-ns
{
v0 := lang.NewSymbol("create-ns").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("sym"))), lang.NewKeyword("doc"), "Create a new namespace named by the symbol if one doesn't already\n  exist, returns it or the already-existing namespace of the same\n  name.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4131), lang.NewKeyword("end-line"), int(4131))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(nil, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// create-struct
{
v0 := lang.NewSymbol("create-struct").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("keys"))), lang.NewKeyword("doc"), "Returns a structure basis object.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4037), lang.NewKeyword("end-line"), int(4037))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.Apply(lang.CreatePersistentStructMapSlotMap, []any{v3})
return v4
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// cycle
{
v0 := lang.NewSymbol("cycle").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2977), lang.NewKeyword("end-line"), int(2977))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3})
v8 := lang.Apply(lang.NewCycle, []any{v7})
return v8
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// data-reader-urls
{
v0 := lang.NewSymbol("data-reader-urls").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7830), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(7830), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
return lang.NewList()
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// data-reader-var
{
v0 := lang.NewSymbol("data-reader-var").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7832), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(7832), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("sym"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("intern"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("create-ns"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("symbol"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("namespace"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3})
v17 := lang.Apply(v12, []any{v16})
v18 := lang.Apply(v9, []any{v17})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("symbol"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("name"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v21, []any{v25})
v27 := lang.Apply(v6, []any{v18, v26})
return v27
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// dec
{
var v1 lang.FnFunc
{ // function dec__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
var v30 any
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
if lang.IsTruthy(v33) {
v30 = lang.NewSymbol("unchecked_dec")
} else {
v30 = lang.NewSymbol("dec")
}
v34 := lang.Apply(v29, []any{v30})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v3})
v39 := lang.Apply(v26, []any{v34, v38})
v40 := lang.Apply(v23, []any{v39})
v41 := lang.Apply(v20, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("dec").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns a number one less than num. Does not auto-promote\n  longs, will throw on overflow. See also: dec'", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1147), lang.NewKeyword("end-line"), int(1147))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "dec")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("dec is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// dec'
{
var v1 lang.FnFunc
{ // function dec'__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/decP")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("dec'").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns a number one less than num. Supports arbitrary precision.\n  See also: dec", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1140), lang.NewKeyword("end-line"), int(1140))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "decP")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("decP is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// decimal?
{
v0 := lang.NewSymbol("decimal?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Returns true if n is a BigDecimal", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3599), lang.NewKeyword("end-line"), int(3599))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.*BigDecimal, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// declare
{
v0 := lang.NewSymbol("declare").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("names"))), lang.NewKeyword("doc"), "defs the supplied var names with no bindings, useful for making forward declarations.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(2768), lang.NewKeyword("end-line"), int(2768))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol("do")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("map"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
var v19 lang.FnFunc
v19 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v20 := args[0]
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("vary-meta"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("assoc"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v26, []any{v20, v29, lang.NewKeyword("declared"), true})
v31 := lang.Apply(v23, []any{lang.NewSymbol("def"), v30})
return v31
})
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2771), lang.NewKeyword("column"), int(25), lang.NewKeyword("end-line"), int(2771), lang.NewKeyword("end-column"), int(71))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v22 := lang.Apply(v18, []any{v21, v5})
v23 := lang.Apply(v11, []any{v15, v22})
v24 := lang.Apply(v8, []any{v23})
return v24
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// dedupe
{
v0 := lang.NewSymbol("dedupe").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7681), lang.NewKeyword("end-line"), int(7681))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("volatile!"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{lang.NewKeyword("glojure.core/none")})
var v5 any = v9
_ = v5
var v11 lang.FnFunc
v11 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v12 := lang.Apply(v4, nil)
return v12
  case 1:
v12 := args[0]
v13 := lang.Apply(v4, []any{v12})
return v13
  case 2:
v12 := args[0]
v13 := args[1]
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("deref"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v5})
var v14 any = v18
_ = v14
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("vreset!"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v5, v13})
_ = v23
var v24 any
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("="))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v14, v13})
if lang.IsTruthy(v28) {
v24 = v12
} else {
v29 := lang.Apply(v4, []any{v12, v13})
v24 = v29
}
return v24
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v12 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7688), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(7696), lang.NewKeyword("end-column"), int(37))
v13, err := lang.WithMeta(v11, v12.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v13
})
v4 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7686), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(7696), lang.NewKeyword("end-column"), int(39))
v5, err := lang.WithMeta(v3, v4.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v5
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("sequence"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("dedupe"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, nil)
v11 := lang.Apply(v6, []any{v10, v3})
return v11
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// def-aset
{
v0 := lang.NewSymbol("def-aset").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("method"), lang.NewSymbol("coerce"))), lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(3), lang.NewKeyword("line"), int(3935), lang.NewKeyword("end-line"), int(3936), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 5 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("concat"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("glojure.core/defn")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v5})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("apply"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("hash-map"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("seq"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("concat"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{lang.NewKeyword("arglists")})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("seq"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("concat"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("list"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{lang.NewSymbol("quote")})
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("list"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("seq"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("concat"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("list"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("apply"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("vector"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("seq"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v76 := v75.FindInternedVar(lang.NewSymbol("concat"))
if v76.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v76)))
}
v77 := v76.Get()
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("list"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.Apply(v80, []any{lang.NewSymbol("array")})
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("list"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, []any{lang.NewSymbol("idx")})
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("list"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.Apply(v88, []any{lang.NewSymbol("val")})
v90 := lang.Apply(v77, []any{v81, v85, v89})
v91 := lang.Apply(v74, []any{v90})
v92 := lang.Apply(v68, []any{v71, v91})
v93 := lang.Apply(v65, []any{v92})
v94 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v95 := v94.FindInternedVar(lang.NewSymbol("list"))
if v95.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v95)))
}
v96 := v95.Get()
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("apply"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("vector"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("seq"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("concat"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v110 := v109.FindInternedVar(lang.NewSymbol("list"))
if v110.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v110)))
}
v111 := v110.Get()
v112 := lang.Apply(v111, []any{lang.NewSymbol("array")})
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("list"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.Apply(v115, []any{lang.NewSymbol("idx")})
v117 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v118 := v117.FindInternedVar(lang.NewSymbol("list"))
if v118.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v118)))
}
v119 := v118.Get()
v120 := lang.Apply(v119, []any{lang.NewSymbol("idx2")})
v121 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v122 := v121.FindInternedVar(lang.NewSymbol("list"))
if v122.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v122)))
}
v123 := v122.Get()
v124 := lang.Apply(v123, []any{lang.NewSymbol("&")})
v125 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v126 := v125.FindInternedVar(lang.NewSymbol("list"))
if v126.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v126)))
}
v127 := v126.Get()
v128 := lang.Apply(v127, []any{lang.NewSymbol("idxv")})
v129 := lang.Apply(v108, []any{v112, v116, v120, v124, v128})
v130 := lang.Apply(v105, []any{v129})
v131 := lang.Apply(v99, []any{v102, v130})
v132 := lang.Apply(v96, []any{v131})
v133 := lang.Apply(v62, []any{v93, v132})
v134 := lang.Apply(v59, []any{v133})
v135 := lang.Apply(v56, []any{v134})
v136 := lang.Apply(v49, []any{v53, v135})
v137 := lang.Apply(v46, []any{v136})
v138 := lang.Apply(v43, []any{v137})
v139 := lang.Apply(v36, []any{v40, v138})
v140 := lang.Apply(v33, []any{v139})
v141 := lang.Apply(v27, []any{v30, v140})
v142 := lang.Apply(v24, []any{v141})
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("list"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("seq"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v150 := v149.FindInternedVar(lang.NewSymbol("concat"))
if v150.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v150)))
}
v151 := v150.Get()
v152 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v153 := v152.FindInternedVar(lang.NewSymbol("list"))
if v153.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v153)))
}
v154 := v153.Get()
v155 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v156 := v155.FindInternedVar(lang.NewSymbol("apply"))
if v156.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v156)))
}
v157 := v156.Get()
v158 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v159 := v158.FindInternedVar(lang.NewSymbol("vector"))
if v159.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v159)))
}
v160 := v159.Get()
v161 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v162 := v161.FindInternedVar(lang.NewSymbol("seq"))
if v162.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v162)))
}
v163 := v162.Get()
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("concat"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v168 := v167.FindInternedVar(lang.NewSymbol("list"))
if v168.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v168)))
}
v169 := v168.Get()
v170 := lang.Apply(v169, []any{lang.NewSymbol("array__0__auto__")})
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("list"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
v174 := lang.Apply(v173, []any{lang.NewSymbol("idx__1__auto__")})
v175 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v176 := v175.FindInternedVar(lang.NewSymbol("list"))
if v176.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v176)))
}
v177 := v176.Get()
v178 := lang.Apply(v177, []any{lang.NewSymbol("val__2__auto__")})
v179 := lang.Apply(v166, []any{v170, v174, v178})
v180 := lang.Apply(v163, []any{v179})
v181 := lang.Apply(v157, []any{v160, v180})
v182 := lang.Apply(v154, []any{v181})
v183 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v184 := v183.FindInternedVar(lang.NewSymbol("list"))
if v184.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v184)))
}
v185 := v184.Get()
v186 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v187 := v186.FindInternedVar(lang.NewSymbol("seq"))
if v187.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v187)))
}
v188 := v187.Get()
v189 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v190 := v189.FindInternedVar(lang.NewSymbol("concat"))
if v190.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v190)))
}
v191 := v190.Get()
v192 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v193 := v192.FindInternedVar(lang.NewSymbol("list"))
if v193.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v193)))
}
v194 := v193.Get()
v195 := lang.Apply(v194, []any{lang.NewSymbol(".")})
v196 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v197 := v196.FindInternedVar(lang.NewSymbol("list"))
if v197.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v197)))
}
v198 := v197.Get()
v199 := lang.Apply(v198, []any{lang.NewSymbol("glojure.core/Array")})
v200 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v201 := v200.FindInternedVar(lang.NewSymbol("list"))
if v201.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v201)))
}
v202 := v201.Get()
v203 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v204 := v203.FindInternedVar(lang.NewSymbol("seq"))
if v204.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v204)))
}
v205 := v204.Get()
v206 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v207 := v206.FindInternedVar(lang.NewSymbol("concat"))
if v207.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v207)))
}
v208 := v207.Get()
v209 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v210 := v209.FindInternedVar(lang.NewSymbol("list"))
if v210.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v210)))
}
v211 := v210.Get()
v212 := lang.Apply(v211, []any{v6})
v213 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v214 := v213.FindInternedVar(lang.NewSymbol("list"))
if v214.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v214)))
}
v215 := v214.Get()
v216 := lang.Apply(v215, []any{lang.NewSymbol("array__0__auto__")})
v217 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v218 := v217.FindInternedVar(lang.NewSymbol("list"))
if v218.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v218)))
}
v219 := v218.Get()
v220 := lang.Apply(v219, []any{lang.NewSymbol("idx__1__auto__")})
v221 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v222 := v221.FindInternedVar(lang.NewSymbol("list"))
if v222.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v222)))
}
v223 := v222.Get()
v224 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v225 := v224.FindInternedVar(lang.NewSymbol("seq"))
if v225.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v225)))
}
v226 := v225.Get()
v227 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v228 := v227.FindInternedVar(lang.NewSymbol("concat"))
if v228.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v228)))
}
v229 := v228.Get()
v230 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v231 := v230.FindInternedVar(lang.NewSymbol("list"))
if v231.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v231)))
}
v232 := v231.Get()
v233 := lang.Apply(v232, []any{v7})
v234 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v235 := v234.FindInternedVar(lang.NewSymbol("list"))
if v235.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v235)))
}
v236 := v235.Get()
v237 := lang.Apply(v236, []any{lang.NewSymbol("val__2__auto__")})
v238 := lang.Apply(v229, []any{v233, v237})
v239 := lang.Apply(v226, []any{v238})
v240 := lang.Apply(v223, []any{v239})
v241 := lang.Apply(v208, []any{v212, v216, v220, v240})
v242 := lang.Apply(v205, []any{v241})
v243 := lang.Apply(v202, []any{v242})
v244 := lang.Apply(v191, []any{v195, v199, v243})
v245 := lang.Apply(v188, []any{v244})
v246 := lang.Apply(v185, []any{v245})
v247 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v248 := v247.FindInternedVar(lang.NewSymbol("list"))
if v248.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v248)))
}
v249 := v248.Get()
v250 := lang.Apply(v249, []any{lang.NewSymbol("val__2__auto__")})
v251 := lang.Apply(v151, []any{v182, v246, v250})
v252 := lang.Apply(v148, []any{v251})
v253 := lang.Apply(v145, []any{v252})
v254 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v255 := v254.FindInternedVar(lang.NewSymbol("list"))
if v255.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v255)))
}
v256 := v255.Get()
v257 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v258 := v257.FindInternedVar(lang.NewSymbol("seq"))
if v258.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v258)))
}
v259 := v258.Get()
v260 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v261 := v260.FindInternedVar(lang.NewSymbol("concat"))
if v261.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v261)))
}
v262 := v261.Get()
v263 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v264 := v263.FindInternedVar(lang.NewSymbol("list"))
if v264.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v264)))
}
v265 := v264.Get()
v266 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v267 := v266.FindInternedVar(lang.NewSymbol("apply"))
if v267.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v267)))
}
v268 := v267.Get()
v269 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v270 := v269.FindInternedVar(lang.NewSymbol("vector"))
if v270.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v270)))
}
v271 := v270.Get()
v272 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v273 := v272.FindInternedVar(lang.NewSymbol("seq"))
if v273.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v273)))
}
v274 := v273.Get()
v275 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v276 := v275.FindInternedVar(lang.NewSymbol("concat"))
if v276.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v276)))
}
v277 := v276.Get()
v278 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v279 := v278.FindInternedVar(lang.NewSymbol("list"))
if v279.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v279)))
}
v280 := v279.Get()
v281 := lang.Apply(v280, []any{lang.NewSymbol("array__0__auto__")})
v282 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v283 := v282.FindInternedVar(lang.NewSymbol("list"))
if v283.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v283)))
}
v284 := v283.Get()
v285 := lang.Apply(v284, []any{lang.NewSymbol("idx__1__auto__")})
v286 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v287 := v286.FindInternedVar(lang.NewSymbol("list"))
if v287.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v287)))
}
v288 := v287.Get()
v289 := lang.Apply(v288, []any{lang.NewSymbol("idx2__3__auto__")})
v290 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v291 := v290.FindInternedVar(lang.NewSymbol("list"))
if v291.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v291)))
}
v292 := v291.Get()
v293 := lang.Apply(v292, []any{lang.NewSymbol("&")})
v294 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v295 := v294.FindInternedVar(lang.NewSymbol("list"))
if v295.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v295)))
}
v296 := v295.Get()
v297 := lang.Apply(v296, []any{lang.NewSymbol("idxv__4__auto__")})
v298 := lang.Apply(v277, []any{v281, v285, v289, v293, v297})
v299 := lang.Apply(v274, []any{v298})
v300 := lang.Apply(v268, []any{v271, v299})
v301 := lang.Apply(v265, []any{v300})
v302 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v303 := v302.FindInternedVar(lang.NewSymbol("list"))
if v303.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v303)))
}
v304 := v303.Get()
v305 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v306 := v305.FindInternedVar(lang.NewSymbol("seq"))
if v306.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v306)))
}
v307 := v306.Get()
v308 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v309 := v308.FindInternedVar(lang.NewSymbol("concat"))
if v309.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v309)))
}
v310 := v309.Get()
v311 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v312 := v311.FindInternedVar(lang.NewSymbol("list"))
if v312.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v312)))
}
v313 := v312.Get()
v314 := lang.Apply(v313, []any{lang.NewSymbol("glojure.core/apply")})
v315 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v316 := v315.FindInternedVar(lang.NewSymbol("list"))
if v316.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v316)))
}
v317 := v316.Get()
v318 := lang.Apply(v317, []any{v5})
v319 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v320 := v319.FindInternedVar(lang.NewSymbol("list"))
if v320.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v320)))
}
v321 := v320.Get()
v322 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v323 := v322.FindInternedVar(lang.NewSymbol("seq"))
if v323.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v323)))
}
v324 := v323.Get()
v325 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v326 := v325.FindInternedVar(lang.NewSymbol("concat"))
if v326.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v326)))
}
v327 := v326.Get()
v328 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v329 := v328.FindInternedVar(lang.NewSymbol("list"))
if v329.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v329)))
}
v330 := v329.Get()
v331 := lang.Apply(v330, []any{lang.NewSymbol("glojure.core/aget")})
v332 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v333 := v332.FindInternedVar(lang.NewSymbol("list"))
if v333.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v333)))
}
v334 := v333.Get()
v335 := lang.Apply(v334, []any{lang.NewSymbol("array__0__auto__")})
v336 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v337 := v336.FindInternedVar(lang.NewSymbol("list"))
if v337.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v337)))
}
v338 := v337.Get()
v339 := lang.Apply(v338, []any{lang.NewSymbol("idx__1__auto__")})
v340 := lang.Apply(v327, []any{v331, v335, v339})
v341 := lang.Apply(v324, []any{v340})
v342 := lang.Apply(v321, []any{v341})
v343 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v344 := v343.FindInternedVar(lang.NewSymbol("list"))
if v344.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v344)))
}
v345 := v344.Get()
v346 := lang.Apply(v345, []any{lang.NewSymbol("idx2__3__auto__")})
v347 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v348 := v347.FindInternedVar(lang.NewSymbol("list"))
if v348.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v348)))
}
v349 := v348.Get()
v350 := lang.Apply(v349, []any{lang.NewSymbol("idxv__4__auto__")})
v351 := lang.Apply(v310, []any{v314, v318, v342, v346, v350})
v352 := lang.Apply(v307, []any{v351})
v353 := lang.Apply(v304, []any{v352})
v354 := lang.Apply(v262, []any{v301, v353})
v355 := lang.Apply(v259, []any{v354})
v356 := lang.Apply(v256, []any{v355})
v357 := lang.Apply(v13, []any{v17, v21, v142, v253, v356})
v358 := lang.Apply(v10, []any{v357})
return v358
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// definline
{
v0 := lang.NewSymbol("definline").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("&"), lang.NewSymbol("decl"))), lang.NewKeyword("doc"), "Experimental - like defmacro, except defines a named function whose\n  body is the expansion, calls to which may be expanded inline as if\n  it were a macro. Cannot be used with variadic (&) args.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(5253), lang.NewKeyword("end-line"), int(5253))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("split-with"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("comp"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("not"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("vector?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v13, []any{v16, v19})
v21 := lang.Apply(v10, []any{v20, v6})
var v7 any = v21
_ = v7
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("nth"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v7, int64(0), nil})
var v22 any = v26
_ = v22
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("nth"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v7, int64(1), nil})
var v27 any = v31
_ = v27
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("nth"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v27, int64(0), nil})
var v32 any = v36
_ = v32
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("nth"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v27, int64(1), nil})
var v37 any = v41
_ = v37
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("seq"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("concat"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("list"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{lang.NewSymbol("do")})
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("list"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("seq"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("concat"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("list"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{lang.NewSymbol("glojure.core/defn")})
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("list"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{v5})
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("list"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.Apply(v72, []any{v32})
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("list"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("apply"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("eval"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("list"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.Apply(v85, []any{lang.NewSymbol("glojure.core/fn"), v32, v37})
v87 := lang.Apply(v82, []any{v86})
v88 := lang.Apply(v79, []any{v87, v32})
v89 := lang.Apply(v76, []any{v88})
v90 := lang.Apply(v61, []any{v65, v69, v22, v73, v89})
v91 := lang.Apply(v58, []any{v90})
v92 := lang.Apply(v55, []any{v91})
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("list"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("seq"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("concat"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("list"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.Apply(v104, []any{lang.NewSymbol("glojure.core/alter-meta!")})
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("list"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v110 := v109.FindInternedVar(lang.NewSymbol("seq"))
if v110.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v110)))
}
v111 := v110.Get()
v112 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v113 := v112.FindInternedVar(lang.NewSymbol("concat"))
if v113.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v113)))
}
v114 := v113.Get()
v115 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v116 := v115.FindInternedVar(lang.NewSymbol("list"))
if v116.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v116)))
}
v117 := v116.Get()
v118 := lang.Apply(v117, []any{lang.NewSymbol("var")})
v119 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v120 := v119.FindInternedVar(lang.NewSymbol("list"))
if v120.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v120)))
}
v121 := v120.Get()
v122 := lang.Apply(v121, []any{v5})
v123 := lang.Apply(v114, []any{v118, v122})
v124 := lang.Apply(v111, []any{v123})
v125 := lang.Apply(v108, []any{v124})
v126 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v127 := v126.FindInternedVar(lang.NewSymbol("list"))
if v127.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v127)))
}
v128 := v127.Get()
v129 := lang.Apply(v128, []any{lang.NewSymbol("glojure.core/assoc")})
v130 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v131 := v130.FindInternedVar(lang.NewSymbol("list"))
if v131.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v131)))
}
v132 := v131.Get()
v133 := lang.Apply(v132, []any{lang.NewKeyword("inline")})
v134 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v135 := v134.FindInternedVar(lang.NewSymbol("list"))
if v135.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v135)))
}
v136 := v135.Get()
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("seq"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("concat"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("list"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.Apply(v145, []any{lang.NewSymbol("glojure.core/fn")})
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("list"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.Apply(v149, []any{v5})
v151 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v152 := v151.FindInternedVar(lang.NewSymbol("list"))
if v152.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v152)))
}
v153 := v152.Get()
v154 := lang.Apply(v153, []any{v32})
v155 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v156 := v155.FindInternedVar(lang.NewSymbol("list"))
if v156.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v156)))
}
v157 := v156.Get()
v158 := lang.Apply(v157, []any{v37})
v159 := lang.Apply(v142, []any{v146, v150, v154, v158})
v160 := lang.Apply(v139, []any{v159})
v161 := lang.Apply(v136, []any{v160})
v162 := lang.Apply(v101, []any{v105, v125, v129, v133, v161})
v163 := lang.Apply(v98, []any{v162})
v164 := lang.Apply(v95, []any{v163})
v165 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v166 := v165.FindInternedVar(lang.NewSymbol("list"))
if v166.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v166)))
}
v167 := v166.Get()
v168 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v169 := v168.FindInternedVar(lang.NewSymbol("seq"))
if v169.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v169)))
}
v170 := v169.Get()
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("concat"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
v174 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v175 := v174.FindInternedVar(lang.NewSymbol("list"))
if v175.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v175)))
}
v176 := v175.Get()
v177 := lang.Apply(v176, []any{lang.NewSymbol("var")})
v178 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v179 := v178.FindInternedVar(lang.NewSymbol("list"))
if v179.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v179)))
}
v180 := v179.Get()
v181 := lang.Apply(v180, []any{v5})
v182 := lang.Apply(v173, []any{v177, v181})
v183 := lang.Apply(v170, []any{v182})
v184 := lang.Apply(v167, []any{v183})
v185 := lang.Apply(v48, []any{v52, v92, v164, v184})
v186 := lang.Apply(v45, []any{v185})
return v186
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// defmacro
{
v0 := lang.NewSymbol("defmacro").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("doc-string?"), lang.NewSymbol("attr-map?"), lang.NewVector(lang.NewSymbol("params*")), lang.NewSymbol("body")), lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("doc-string?"), lang.NewSymbol("attr-map?"), lang.NewList(lang.NewVector(lang.NewSymbol("params*")), lang.NewSymbol("body")), lang.NewSymbol("+"), lang.NewSymbol("attr-map?"))), lang.NewKeyword("doc"), "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(445), lang.NewKeyword("end-line"), int(451))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("list"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v5})
var v8 any = v12
_ = v8
var v13 any = v13
_ = v13
var v14 any
for {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("first"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v13})
var v15 any = v19
_ = v15
var v21 any
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("string?"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v15})
if lang.IsTruthy(v25) {
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("cons"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v15, v8})
var v26 any = v30
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("next"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v13})
var v31 any = v35
v8 = v26
v13 = v31
continue
} else {
var v36 any
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("map?"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v15})
if lang.IsTruthy(v40) {
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("cons"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v15, v8})
var v41 any = v45
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("next"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v13})
var v46 any = v50
v8 = v41
v13 = v46
continue
} else {
v36 = v8
}
v21 = v36
}
v14 = v21
  break
}
var v7 any = v14
_ = v7
var v9 any = v6
_ = v9
var v10 any
for {
var v11 any
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("string?"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v9})
v19 := lang.Apply(v14, []any{v18})
if lang.IsTruthy(v19) {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("next"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v9})
var v20 any = v24
v9 = v20
continue
} else {
var v25 any
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("map?"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("first"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v9})
v33 := lang.Apply(v28, []any{v32})
if lang.IsTruthy(v33) {
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("next"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v9})
var v34 any = v38
v9 = v34
continue
} else {
v25 = v9
}
v11 = v25
}
v10 = v11
  break
}
var v8 any = v10
_ = v8
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("vector?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("first"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v9})
v18 := lang.Apply(v13, []any{v17})
if lang.IsTruthy(v18) {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v9})
v10 = v22
} else {
v10 = v9
}
var v9 any = v10
_ = v9
var v24 lang.FnFunc
v24 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v25 := args[0]
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("first"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v25})
var v26 any = v30
_ = v26
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("cons"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("vec"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("cons"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("cons"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{lang.NewSymbol("&env"), v26})
v45 := lang.Apply(v40, []any{lang.NewSymbol("&form"), v44})
v46 := lang.Apply(v37, []any{v45})
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("next"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v25})
v51 := lang.Apply(v34, []any{v46, v50})
return v51
})
v25 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(469), lang.NewKeyword("column"), int(38), lang.NewKeyword("end-line"), int(471), lang.NewKeyword("end-column"), int(87))
v26, err := lang.WithMeta(v24, v25.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v23 any = v26
_ = v23
var v28 lang.FnFunc
v28 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v29 := args[0]
v30 := args[1]
recur_loop_61:
var v31 any
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("nil?"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v30})
if lang.IsTruthy(v35) {
v31 = v29
} else {
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("first"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v30})
var v36 any = v40
_ = v36
var v42 any
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("map?"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v36})
if lang.IsTruthy(v46) {
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("conj"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v29, v36})
v42 = v50
} else {
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("conj"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v23, []any{v36})
v56 := lang.Apply(v54, []any{v29, v55})
var v51 any = v56
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("next"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.Apply(v60, []any{v30})
var v57 any = v61
v29 = v51
v30 = v57
goto recur_loop_61
}
v31 = v42
}
return v31
})
v29 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(472), lang.NewKeyword("column"), int(29), lang.NewKeyword("end-line"), int(478), lang.NewKeyword("end-column"), int(90))
v30, err := lang.WithMeta(v28, v29.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v27 any = v30
_ = v27
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("seq"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.NewVector()
v36 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(479), lang.NewKeyword("column"), int(41), lang.NewKeyword("end-line"), int(479), lang.NewKeyword("end-column"), int(42))
v37, err := lang.WithMeta(v35, v36.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v38 := lang.Apply(v27, []any{v37, v31})
v39 := lang.Apply(v34, []any{v38})
var v31 any = v39
_ = v31
var v41 any = v7
_ = v41
var v42 any = v31
_ = v42
var v43 any
for {
var v44 any
if lang.IsTruthy(v41) {
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("next"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v41})
var v45 any = v49
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("cons"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("first"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v41})
v58 := lang.Apply(v53, []any{v57, v42})
var v50 any = v58
v41 = v45
v42 = v50
continue
} else {
v44 = v42
}
v43 = v44
  break
}
var v40 any = v43
_ = v40
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("list"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("cons"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{lang.NewSymbol("glojure.core/defn"), v40})
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("list"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("list"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{lang.NewSymbol("var"), v5})
v56 := lang.Apply(v51, []any{lang.NewSymbol("."), v55, lang.NewList(lang.NewSymbol("SetMacro"))})
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{lang.NewSymbol("var"), v5})
v61 := lang.Apply(v44, []any{lang.NewSymbol("do"), v48, v56, v60})
return v61
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(451), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(487), lang.NewKeyword("end-column"), int(40))).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// defmethod
{
v0 := lang.NewSymbol("defmethod").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("multifn"), lang.NewSymbol("dispatch-val"), lang.NewSymbol("&"), lang.NewSymbol("fn-tail"))), lang.NewKeyword("doc"), "Creates and installs a new method of multimethod associated with dispatch-value. ", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1781), lang.NewKeyword("end-line"), int(1781))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 4 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.NewList(args[4:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("concat"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol(".")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("with-meta"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.NewMap(lang.NewKeyword("tag"), lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.*MultiFn"))
v25 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(1785), lang.NewKeyword("column"), int(27), lang.NewKeyword("end-line"), int(1785), lang.NewKeyword("end-column"), int(82))
v26, err := lang.WithMeta(v24, v25.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v27 := lang.Apply(v23, []any{v5, v26})
v28 := lang.Apply(v20, []any{v27})
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("list"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{lang.NewSymbol("glojure.core/AddMethod")})
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v6})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("seq"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("concat"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("list"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{lang.NewSymbol("glojure.core/fn")})
v50 := lang.Apply(v45, []any{v49, v7})
v51 := lang.Apply(v42, []any{v50})
v52 := lang.Apply(v39, []any{v51})
v53 := lang.Apply(v13, []any{v17, v28, v32, v36, v52})
v54 := lang.Apply(v10, []any{v53})
return v54
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// defmulti
{
v0 := lang.NewSymbol("defmulti").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("docstring?"), lang.NewSymbol("attr-map?"), lang.NewSymbol("dispatch-fn"), lang.NewSymbol("&"), lang.NewSymbol("options"))), lang.NewKeyword("doc"), "Creates a new multimethod with the associated dispatch function.\n  The docstring and attr-map are optional.\n\n  Options are key-value pairs and may be one of:\n\n  :default\n\n  The default dispatch value, defaults to :default\n\n  :hierarchy\n\n  The value used for hierarchical dispatch (e.g. ::square is-a ::shape)\n\n  Hierarchies are type-like relationships that do not depend upon type\n  inheritance. By default Clojure's multimethods dispatch off of a\n  global hierarchy map.  However, a hierarchy relationship can be\n  created with the derive function used to augment the root ancestor\n  created with make-hierarchy.\n\n  Multimethods expect the value of the hierarchy option to be supplied as\n  a reference type e.g. a var (i.e. via the Var-quote dispatch macro #'\n  or the var special form).", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1723), lang.NewKeyword("end-line"), int(1723))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v8 any
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("string?"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("first"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v6})
v16 := lang.Apply(v11, []any{v15})
if lang.IsTruthy(v16) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("first"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v6})
v8 = v20
} else {
v8 = nil
}
var v7 any = v8
_ = v7
var v22 any
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("string?"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("first"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v21})
v30 := lang.Apply(v25, []any{v29})
if lang.IsTruthy(v30) {
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("next"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v21})
v22 = v34
} else {
v22 = v21
}
var v21 any = v22
_ = v21
var v36 any
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("map?"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("first"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v21})
v44 := lang.Apply(v39, []any{v43})
if lang.IsTruthy(v44) {
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("first"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v21})
v36 = v48
} else {
v49 := lang.NewMap()
v50 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(1757), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(1757), lang.NewKeyword("end-column"), int(24))
v51, err := lang.WithMeta(v49, v50.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v36 = v51
}
var v35 any = v36
_ = v35
var v53 any
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("map?"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("first"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v52})
v61 := lang.Apply(v56, []any{v60})
if lang.IsTruthy(v61) {
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("next"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{v52})
v53 = v65
} else {
v53 = v52
}
var v52 any = v53
_ = v52
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("first"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.Apply(v69, []any{v52})
var v66 any = v70
_ = v66
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("next"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v74, []any{v71})
var v71 any = v75
_ = v71
var v77 any
if lang.IsTruthy(v7) {
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("assoc"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.Apply(v80, []any{v76, lang.NewKeyword("doc"), v7})
v77 = v81
} else {
v77 = v76
}
var v76 any = v77
_ = v76
var v83 any
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("meta"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.Apply(v86, []any{v5})
if lang.IsTruthy(v87) {
v88 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v89 := v88.FindInternedVar(lang.NewSymbol("conj"))
if v89.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v89)))
}
v90 := v89.Get()
v91 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v92 := v91.FindInternedVar(lang.NewSymbol("meta"))
if v92.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v92)))
}
v93 := v92.Get()
v94 := lang.Apply(v93, []any{v5})
v95 := lang.Apply(v90, []any{v94, v82})
v83 = v95
} else {
v83 = v82
}
var v82 any = v83
_ = v82
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("with-meta"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.Apply(v99, []any{v96, v82})
var v96 any = v100
_ = v96
var v102 any
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("="))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("count"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{v71})
v110 := lang.Apply(v105, []any{v109, int64(1)})
if lang.IsTruthy(v110) {
v111 := lang.Apply(lang.NewError, []any{"The syntax for defmulti has changed. Example: (defmulti name dispatch-fn :default dispatch-value)"})
panic(v111)
} else {
v102 = nil
}
_ = v102
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("apply"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v117 := v116.FindInternedVar(lang.NewSymbol("hash-map"))
if v117.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v117)))
}
v118 := v117.Get()
v119 := lang.Apply(v115, []any{v118, v112})
var v112 any = v119
_ = v112
v121 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v122 := v121.FindInternedVar(lang.NewSymbol("get"))
if v122.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v122)))
}
v123 := v122.Get()
v124 := lang.Apply(v123, []any{v112, lang.NewKeyword("default"), lang.NewKeyword("default")})
var v120 any = v124
_ = v120
v126 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v127 := v126.FindInternedVar(lang.NewSymbol("get"))
if v127.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v127)))
}
v128 := v127.Get()
v129 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("global-hierarchy"))
v130 := lang.Apply(v128, []any{v112, lang.NewKeyword("hierarchy"), v129})
var v125 any = v130
_ = v125
v132 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v133 := v132.FindInternedVar(lang.NewSymbol("check-valid-options"))
if v133.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v133)))
}
v134 := v133.Get()
v135 := lang.Apply(v134, []any{v112, lang.NewKeyword("default"), lang.NewKeyword("hierarchy")})
_ = v135
v136 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v137 := v136.FindInternedVar(lang.NewSymbol("seq"))
if v137.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v137)))
}
v138 := v137.Get()
v139 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v140 := v139.FindInternedVar(lang.NewSymbol("concat"))
if v140.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v140)))
}
v141 := v140.Get()
v142 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v143 := v142.FindInternedVar(lang.NewSymbol("list"))
if v143.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v143)))
}
v144 := v143.Get()
v145 := lang.Apply(v144, []any{lang.NewSymbol("glojure.core/let")})
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("list"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v150 := v149.FindInternedVar(lang.NewSymbol("apply"))
if v150.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v150)))
}
v151 := v150.Get()
v152 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v153 := v152.FindInternedVar(lang.NewSymbol("vector"))
if v153.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v153)))
}
v154 := v153.Get()
v155 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v156 := v155.FindInternedVar(lang.NewSymbol("seq"))
if v156.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v156)))
}
v157 := v156.Get()
v158 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v159 := v158.FindInternedVar(lang.NewSymbol("concat"))
if v159.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v159)))
}
v160 := v159.Get()
v161 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v162 := v161.FindInternedVar(lang.NewSymbol("list"))
if v162.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v162)))
}
v163 := v162.Get()
v164 := lang.Apply(v163, []any{lang.NewSymbol("v__0__auto__")})
v165 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v166 := v165.FindInternedVar(lang.NewSymbol("list"))
if v166.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v166)))
}
v167 := v166.Get()
v168 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v169 := v168.FindInternedVar(lang.NewSymbol("seq"))
if v169.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v169)))
}
v170 := v169.Get()
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("concat"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
v174 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v175 := v174.FindInternedVar(lang.NewSymbol("list"))
if v175.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v175)))
}
v176 := v175.Get()
v177 := lang.Apply(v176, []any{lang.NewSymbol("def")})
v178 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v179 := v178.FindInternedVar(lang.NewSymbol("list"))
if v179.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v179)))
}
v180 := v179.Get()
v181 := lang.Apply(v180, []any{v96})
v182 := lang.Apply(v173, []any{v177, v181})
v183 := lang.Apply(v170, []any{v182})
v184 := lang.Apply(v167, []any{v183})
v185 := lang.Apply(v160, []any{v164, v184})
v186 := lang.Apply(v157, []any{v185})
v187 := lang.Apply(v151, []any{v154, v186})
v188 := lang.Apply(v148, []any{v187})
v189 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v190 := v189.FindInternedVar(lang.NewSymbol("list"))
if v190.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v190)))
}
v191 := v190.Get()
v192 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v193 := v192.FindInternedVar(lang.NewSymbol("seq"))
if v193.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v193)))
}
v194 := v193.Get()
v195 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v196 := v195.FindInternedVar(lang.NewSymbol("concat"))
if v196.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v196)))
}
v197 := v196.Get()
v198 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v199 := v198.FindInternedVar(lang.NewSymbol("list"))
if v199.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v199)))
}
v200 := v199.Get()
v201 := lang.Apply(v200, []any{lang.NewSymbol("glojure.core/when-not")})
v202 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v203 := v202.FindInternedVar(lang.NewSymbol("list"))
if v203.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v203)))
}
v204 := v203.Get()
v205 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v206 := v205.FindInternedVar(lang.NewSymbol("seq"))
if v206.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v206)))
}
v207 := v206.Get()
v208 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v209 := v208.FindInternedVar(lang.NewSymbol("concat"))
if v209.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v209)))
}
v210 := v209.Get()
v211 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v212 := v211.FindInternedVar(lang.NewSymbol("list"))
if v212.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v212)))
}
v213 := v212.Get()
v214 := lang.Apply(v213, []any{lang.NewSymbol("glojure.core/and")})
v215 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v216 := v215.FindInternedVar(lang.NewSymbol("list"))
if v216.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v216)))
}
v217 := v216.Get()
v218 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v219 := v218.FindInternedVar(lang.NewSymbol("seq"))
if v219.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v219)))
}
v220 := v219.Get()
v221 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v222 := v221.FindInternedVar(lang.NewSymbol("concat"))
if v222.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v222)))
}
v223 := v222.Get()
v224 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v225 := v224.FindInternedVar(lang.NewSymbol("list"))
if v225.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v225)))
}
v226 := v225.Get()
v227 := lang.Apply(v226, []any{lang.NewSymbol(".HasRoot")})
v228 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v229 := v228.FindInternedVar(lang.NewSymbol("list"))
if v229.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v229)))
}
v230 := v229.Get()
v231 := lang.Apply(v230, []any{lang.NewSymbol("v__0__auto__")})
v232 := lang.Apply(v223, []any{v227, v231})
v233 := lang.Apply(v220, []any{v232})
v234 := lang.Apply(v217, []any{v233})
v235 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v236 := v235.FindInternedVar(lang.NewSymbol("list"))
if v236.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v236)))
}
v237 := v236.Get()
v238 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v239 := v238.FindInternedVar(lang.NewSymbol("seq"))
if v239.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v239)))
}
v240 := v239.Get()
v241 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v242 := v241.FindInternedVar(lang.NewSymbol("concat"))
if v242.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v242)))
}
v243 := v242.Get()
v244 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v245 := v244.FindInternedVar(lang.NewSymbol("list"))
if v245.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v245)))
}
v246 := v245.Get()
v247 := lang.Apply(v246, []any{lang.NewSymbol("glojure.core/instance?")})
v248 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v249 := v248.FindInternedVar(lang.NewSymbol("list"))
if v249.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v249)))
}
v250 := v249.Get()
v251 := lang.Apply(v250, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.*MultiFn")})
v252 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v253 := v252.FindInternedVar(lang.NewSymbol("list"))
if v253.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v253)))
}
v254 := v253.Get()
v255 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v256 := v255.FindInternedVar(lang.NewSymbol("seq"))
if v256.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v256)))
}
v257 := v256.Get()
v258 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v259 := v258.FindInternedVar(lang.NewSymbol("concat"))
if v259.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v259)))
}
v260 := v259.Get()
v261 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v262 := v261.FindInternedVar(lang.NewSymbol("list"))
if v262.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v262)))
}
v263 := v262.Get()
v264 := lang.Apply(v263, []any{lang.NewSymbol("glojure.core/deref")})
v265 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v266 := v265.FindInternedVar(lang.NewSymbol("list"))
if v266.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v266)))
}
v267 := v266.Get()
v268 := lang.Apply(v267, []any{lang.NewSymbol("v__0__auto__")})
v269 := lang.Apply(v260, []any{v264, v268})
v270 := lang.Apply(v257, []any{v269})
v271 := lang.Apply(v254, []any{v270})
v272 := lang.Apply(v243, []any{v247, v251, v271})
v273 := lang.Apply(v240, []any{v272})
v274 := lang.Apply(v237, []any{v273})
v275 := lang.Apply(v210, []any{v214, v234, v274})
v276 := lang.Apply(v207, []any{v275})
v277 := lang.Apply(v204, []any{v276})
v278 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v279 := v278.FindInternedVar(lang.NewSymbol("list"))
if v279.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v279)))
}
v280 := v279.Get()
v281 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v282 := v281.FindInternedVar(lang.NewSymbol("seq"))
if v282.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v282)))
}
v283 := v282.Get()
v284 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v285 := v284.FindInternedVar(lang.NewSymbol("concat"))
if v285.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v285)))
}
v286 := v285.Get()
v287 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v288 := v287.FindInternedVar(lang.NewSymbol("list"))
if v288.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v288)))
}
v289 := v288.Get()
v290 := lang.Apply(v289, []any{lang.NewSymbol("def")})
v291 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v292 := v291.FindInternedVar(lang.NewSymbol("list"))
if v292.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v292)))
}
v293 := v292.Get()
v294 := lang.Apply(v293, []any{v96})
v295 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v296 := v295.FindInternedVar(lang.NewSymbol("list"))
if v296.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v296)))
}
v297 := v296.Get()
v298 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v299 := v298.FindInternedVar(lang.NewSymbol("seq"))
if v299.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v299)))
}
v300 := v299.Get()
v301 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v302 := v301.FindInternedVar(lang.NewSymbol("concat"))
if v302.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v302)))
}
v303 := v302.Get()
v304 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v305 := v304.FindInternedVar(lang.NewSymbol("list"))
if v305.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v305)))
}
v306 := v305.Get()
v307 := lang.Apply(v306, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.NewMultiFn")})
v308 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v309 := v308.FindInternedVar(lang.NewSymbol("list"))
if v309.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v309)))
}
v310 := v309.Get()
v311 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v312 := v311.FindInternedVar(lang.NewSymbol("name"))
if v312.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v312)))
}
v313 := v312.Get()
v314 := lang.Apply(v313, []any{v96})
v315 := lang.Apply(v310, []any{v314})
v316 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v317 := v316.FindInternedVar(lang.NewSymbol("list"))
if v317.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v317)))
}
v318 := v317.Get()
v319 := lang.Apply(v318, []any{v66})
v320 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v321 := v320.FindInternedVar(lang.NewSymbol("list"))
if v321.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v321)))
}
v322 := v321.Get()
v323 := lang.Apply(v322, []any{v120})
v324 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v325 := v324.FindInternedVar(lang.NewSymbol("list"))
if v325.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v325)))
}
v326 := v325.Get()
v327 := lang.Apply(v326, []any{v125})
v328 := lang.Apply(v303, []any{v307, v315, v319, v323, v327})
v329 := lang.Apply(v300, []any{v328})
v330 := lang.Apply(v297, []any{v329})
v331 := lang.Apply(v286, []any{v290, v294, v330})
v332 := lang.Apply(v283, []any{v331})
v333 := lang.Apply(v280, []any{v332})
v334 := lang.Apply(v197, []any{v201, v277, v333})
v335 := lang.Apply(v194, []any{v334})
v336 := lang.Apply(v191, []any{v335})
v337 := lang.Apply(v141, []any{v145, v188, v336})
v338 := lang.Apply(v138, []any{v337})
return v338
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// defn
{
v0 := lang.NewSymbol("defn").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("doc-string?"), lang.NewSymbol("attr-map?"), lang.NewVector(lang.NewSymbol("params*")), lang.NewSymbol("prepost-map?"), lang.NewSymbol("body")), lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("doc-string?"), lang.NewSymbol("attr-map?"), lang.NewList(lang.NewVector(lang.NewSymbol("params*")), lang.NewSymbol("prepost-map?"), lang.NewSymbol("body")), lang.NewSymbol("+"), lang.NewSymbol("attr-map?"))), lang.NewKeyword("doc"), "Same as (def name (fn [params* ] exprs*)) or (def\n    name (fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(5), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(284), lang.NewKeyword("end-line"), int(291))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function defn
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := args[2]
v7 := lang.NewList(args[3:]...)
var v8 any
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("instance?"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{lang.*Symbol, v6})
if lang.IsTruthy(v12) {
v8 = nil
} else {
v13 := lang.Apply(lang.NewIllegalArgumentError, []any{"First argument to defn must be a symbol"})
panic(v13)
}
_ = v8
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("string?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("first"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v7})
v23 := lang.Apply(v18, []any{v22})
if lang.IsTruthy(v23) {
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("first"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v7})
v28 := lang.NewMap(lang.NewKeyword("doc"), v27)
v29 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(297), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(297), lang.NewKeyword("end-column"), int(38))
v30, err := lang.WithMeta(v28, v29.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v15 = v30
} else {
v31 := lang.NewMap()
v32 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(298), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(298), lang.NewKeyword("end-column"), int(20))
v33, err := lang.WithMeta(v31, v32.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v15 = v33
}
var v14 any = v15
_ = v14
var v35 any
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("string?"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("first"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v34})
v43 := lang.Apply(v38, []any{v42})
if lang.IsTruthy(v43) {
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("next"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v34})
v35 = v47
} else {
v35 = v34
}
var v34 any = v35
_ = v34
var v49 any
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("map?"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("first"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{v34})
v57 := lang.Apply(v52, []any{v56})
if lang.IsTruthy(v57) {
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("conj"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("first"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v34})
v65 := lang.Apply(v60, []any{v48, v64})
v49 = v65
} else {
v49 = v48
}
var v48 any = v49
_ = v48
var v67 any
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("map?"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("first"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{v66})
v75 := lang.Apply(v70, []any{v74})
if lang.IsTruthy(v75) {
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("next"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.Apply(v78, []any{v66})
v67 = v79
} else {
v67 = v66
}
var v66 any = v67
_ = v66
var v81 any
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("vector?"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("first"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.Apply(v87, []any{v80})
v89 := lang.Apply(v84, []any{v88})
if lang.IsTruthy(v89) {
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("list"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.Apply(v92, []any{v80})
v81 = v93
} else {
v81 = v80
}
var v80 any = v81
_ = v80
var v95 any
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("map?"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("last"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.Apply(v101, []any{v80})
v103 := lang.Apply(v98, []any{v102})
if lang.IsTruthy(v103) {
v104 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v105 := v104.FindInternedVar(lang.NewSymbol("conj"))
if v105.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v105)))
}
v106 := v105.Get()
v107 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v108 := v107.FindInternedVar(lang.NewSymbol("last"))
if v108.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v108)))
}
v109 := v108.Get()
v110 := lang.Apply(v109, []any{v80})
v111 := lang.Apply(v106, []any{v94, v110})
v95 = v111
} else {
v95 = v94
}
var v94 any = v95
_ = v94
var v113 any
v114 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v115 := v114.FindInternedVar(lang.NewSymbol("map?"))
if v115.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v115)))
}
v116 := v115.Get()
v117 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v118 := v117.FindInternedVar(lang.NewSymbol("last"))
if v118.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v118)))
}
v119 := v118.Get()
v120 := lang.Apply(v119, []any{v112})
v121 := lang.Apply(v116, []any{v120})
if lang.IsTruthy(v121) {
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("butlast"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.Apply(v124, []any{v112})
v113 = v125
} else {
v113 = v112
}
var v112 any = v113
_ = v112
v127 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v128 := v127.FindInternedVar(lang.NewSymbol("conj"))
if v128.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v128)))
}
v129 := v128.Get()
v130 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v131 := v130.FindInternedVar(lang.NewSymbol("list"))
if v131.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v131)))
}
v132 := v131.Get()
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("sigs"))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.Apply(v135, []any{v112})
v137 := lang.Apply(v132, []any{lang.NewSymbol("quote"), v136})
v138 := lang.NewMap(lang.NewKeyword("arglists"), v137)
v139 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(317), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(317), lang.NewKeyword("end-column"), int(60))
v140, err := lang.WithMeta(v138, v139.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v141 := lang.Apply(v129, []any{v140, v126})
var v126 any = v141
_ = v126
v144 := lang.Apply(lang.NewKeyword("inline"), []any{v142})
var v143 any = v144
_ = v143
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("first"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.Apply(v148, []any{v143})
var v145 any = v149
_ = v145
v151 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v152 := v151.FindInternedVar(lang.NewSymbol("second"))
if v152.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v152)))
}
v153 := v152.Get()
v154 := lang.Apply(v153, []any{v143})
var v150 any = v154
_ = v150
var v156 any
var v157 any
v158 := lang.Apply(lang.Equiv, []any{lang.NewSymbol("fn"), v145})
if lang.IsTruthy(v158) {
var v159 any
v160 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v161 := v160.FindInternedVar(lang.NewSymbol("instance?"))
if v161.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v161)))
}
v162 := v161.Get()
v163 := lang.Apply(v162, []any{lang.*Symbol, v150})
if lang.IsTruthy(v163) {
v159 = false
} else {
v159 = true
}
v157 = v159
} else {
v157 = nil
}
if lang.IsTruthy(v157) {
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("assoc"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v168 := v167.FindInternedVar(lang.NewSymbol("cons"))
if v168.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v168)))
}
v169 := v168.Get()
v170 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v171 := v170.FindInternedVar(lang.NewSymbol("cons"))
if v171.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v171)))
}
v172 := v171.Get()
v173, ok := lang.FieldOrMethod(v6, "Name")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "Name")))
}
var v174 any
switch reflect.TypeOf(v173).Kind() {
case reflect.Func:
  v174 = lang.Apply(v173, nil)
default:
  v174 = v173
}
v175 := lang.Apply(lang.ConcatStrings, []any{v174, "__inliner"})
v176 := lang.Apply(lang.NewSymbol, []any{v175})
v177 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v178 := v177.FindInternedVar(lang.NewSymbol("next"))
if v178.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v178)))
}
v179 := v178.Get()
v180 := lang.Apply(v179, []any{v143})
v181 := lang.Apply(v172, []any{v176, v180})
v182 := lang.Apply(v169, []any{v145, v181})
v183 := lang.Apply(v166, []any{v142, lang.NewKeyword("inline"), v182})
v156 = v183
} else {
v156 = v142
}
var v142 any = v156
_ = v142
v144 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v145 := v144.FindInternedVar(lang.NewSymbol("conj"))
if v145.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v145)))
}
v146 := v145.Get()
var v147 any
v148 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v149 := v148.FindInternedVar(lang.NewSymbol("meta"))
if v149.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v149)))
}
v150 := v149.Get()
v151 := lang.Apply(v150, []any{v6})
if lang.IsTruthy(v151) {
v152 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v153 := v152.FindInternedVar(lang.NewSymbol("meta"))
if v153.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v153)))
}
v154 := v153.Get()
v155 := lang.Apply(v154, []any{v6})
v147 = v155
} else {
v156 := lang.NewMap()
v157 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(328), lang.NewKeyword("column"), int(51), lang.NewKeyword("end-line"), int(328), lang.NewKeyword("end-column"), int(52))
v158, err := lang.WithMeta(v156, v157.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v147 = v158
}
v159 := lang.Apply(v146, []any{v147, v143})
var v143 any = v159
_ = v143
v161 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v162 := v161.FindInternedVar(lang.NewSymbol("list"))
if v162.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v162)))
}
v163 := v162.Get()
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("with-meta"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.Apply(v166, []any{v6, v143})
v168 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v169 := v168.FindInternedVar(lang.NewSymbol("with-meta"))
if v169.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v169)))
}
v170 := v169.Get()
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("cons"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
v174 := lang.Apply(v173, []any{lang.NewSymbol("glojure.core/fn"), v112})
v175 := lang.Apply(lang.NewKeyword("tag"), []any{v143})
v176 := lang.NewMap(lang.NewKeyword("rettag"), v175)
v177 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(333), lang.NewKeyword("column"), int(37), lang.NewKeyword("end-line"), int(333), lang.NewKeyword("end-column"), int(54))
v178, err := lang.WithMeta(v176, v177.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v179 := lang.Apply(v170, []any{v174, v178})
v180 := lang.Apply(v163, []any{lang.NewSymbol("def"), v167, v179})
return v180
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(291), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(333), lang.NewKeyword("end-column"), int(58))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// defn-
{
v0 := lang.NewSymbol("defn-").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("&"), lang.NewSymbol("decls"))), lang.NewKeyword("doc"), "same as defn, yielding non-public def", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4949), lang.NewKeyword("end-line"), int(4949))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("list*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("with-meta"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("assoc"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("meta"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v5})
v20 := lang.Apply(v15, []any{v19, lang.NewKeyword("private"), true})
v21 := lang.Apply(v12, []any{v5, v20})
v22 := lang.Apply(v9, []any{lang.NewSymbol("glojure.core/defn"), v21, v6})
return v22
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// defonce
{
v0 := lang.NewSymbol("defonce").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("expr"))), lang.NewKeyword("doc"), "defs name to have the root value of the expr iff the named var has no root value,\n  else expr is unevaluated", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(5806), lang.NewKeyword("end-line"), int(5806))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 4 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("glojure.core/let")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("apply"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("vector"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{lang.NewSymbol("v__0__auto__")})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("seq"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("concat"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("list"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{lang.NewSymbol("def")})
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("list"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{v5})
v53 := lang.Apply(v44, []any{v48, v52})
v54 := lang.Apply(v41, []any{v53})
v55 := lang.Apply(v38, []any{v54})
v56 := lang.Apply(v31, []any{v35, v55})
v57 := lang.Apply(v28, []any{v56})
v58 := lang.Apply(v22, []any{v25, v57})
v59 := lang.Apply(v19, []any{v58})
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("list"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("seq"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("concat"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("list"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{lang.NewSymbol("glojure.core/when-not")})
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("list"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("seq"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("concat"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("list"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, []any{lang.NewSymbol(".HasRoot")})
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("list"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.Apply(v88, []any{lang.NewSymbol("v__0__auto__")})
v90 := lang.Apply(v81, []any{v85, v89})
v91 := lang.Apply(v78, []any{v90})
v92 := lang.Apply(v75, []any{v91})
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("list"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("seq"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("concat"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("list"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.Apply(v104, []any{lang.NewSymbol("def")})
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("list"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{v5})
v110 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v111 := v110.FindInternedVar(lang.NewSymbol("list"))
if v111.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v111)))
}
v112 := v111.Get()
v113 := lang.Apply(v112, []any{v6})
v114 := lang.Apply(v101, []any{v105, v109, v113})
v115 := lang.Apply(v98, []any{v114})
v116 := lang.Apply(v95, []any{v115})
v117 := lang.Apply(v68, []any{v72, v92, v116})
v118 := lang.Apply(v65, []any{v117})
v119 := lang.Apply(v62, []any{v118})
v120 := lang.Apply(v12, []any{v16, v59, v119})
v121 := lang.Apply(v9, []any{v120})
return v121
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// defprotocol
{
v0 := lang.NewSymbol("defprotocol").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("&"), lang.NewSymbol("opts+sigs"))), lang.NewKeyword("doc"), "A protocol is a named set of named methods and their signatures:\n  (defprotocol AProtocolName\n\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n   ;options\n   :extend-via-metadata true\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in \n  Java parlance). defprotocol is dynamic, has no special compile-time \n  effect, and defines no new types or classes. Implementations of \n  the protocol methods can be provided using extend.\n\n  When :extend-via-metadata is true, values can extend protocols by\n  adding metadata where keys are fully-qualified protocol function\n  symbols and values are function implementations. Protocol\n  implementations are checked first for direct definitions (defrecord,\n  deftype, reify), then metadata definitions, then external\n  extensions (extend, extend-type, extend-protocol)\n\n  defprotocol will automatically generate a corresponding interface,\n  with the same name as the protocol, i.e. given a protocol:\n  my.ns/Protocol, an interface: my.ns.Protocol. The interface will\n  have methods corresponding to the protocol functions, and the\n  protocol will automatically work with instances of the interface.\n\n  Note that you should not use this interface with deftype or\n  reify, as they support the protocol directly:\n\n  (defprotocol P \n    (foo [this]) \n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c] \n   P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n  \n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo \n    (let [x 42]\n      (reify P \n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17", lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(28), lang.NewKeyword("end-line"), int(28))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v8 any
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("string?"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("first"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v6})
v16 := lang.Apply(v11, []any{v15})
if lang.IsTruthy(v16) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("first"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v6})
v8 = v20
} else {
v8 = nil
}
var v7 any = v8
_ = v7
var v22 any
if lang.IsTruthy(v7) {
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("rest"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v21})
v22 = v26
} else {
v22 = v21
}
var v21 any = v22
_ = v21
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("take-while"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
var v31 lang.FnFunc
v31 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v32 := args[0]
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("not"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("seq?"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v32})
v40 := lang.Apply(v35, []any{v39})
return v40
})
v32 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(92), lang.NewKeyword("column"), int(26), lang.NewKeyword("end-line"), int(92), lang.NewKeyword("end-column"), int(40))
v33, err := lang.WithMeta(v31, v32.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v34 := lang.Apply(v30, []any{v33, v21})
var v27 any = v34
_ = v27
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("drop-while"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
var v39 lang.FnFunc
v39 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v40 := args[0]
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("not"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("seq?"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v40})
v48 := lang.Apply(v43, []any{v47})
return v48
})
v40 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(93), lang.NewKeyword("column"), int(26), lang.NewKeyword("end-line"), int(93), lang.NewKeyword("end-column"), int(40))
v41, err := lang.WithMeta(v39, v40.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v42 := lang.Apply(v38, []any{v41, v21})
var v35 any = v42
_ = v35
var v44 any
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("="))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v35, v43})
if lang.IsTruthy(v48) {
v44 = nil
} else {
v44 = v43
}
var v43 any = v44
_ = v43
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("seq"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("concat"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("list"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{lang.NewSymbol("do")})
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("list"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("seq"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("concat"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("list"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{lang.NewSymbol("def")})
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("list"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.Apply(v75, []any{v5})
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("list"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("seq"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("concat"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("list"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.Apply(v88, []any{lang.NewSymbol("glojure.core/atom")})
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("list"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("apply"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("hash-map"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("seq"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("concat"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("list"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
v108 := lang.Apply(v107, []any{lang.NewKeyword("on-interface")})
v109 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v110 := v109.FindInternedVar(lang.NewSymbol("list"))
if v110.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v110)))
}
v111 := v110.Get()
v112 := lang.Apply(v111, []any{true})
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("list"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.Apply(v115, []any{lang.NewKeyword("sigs")})
v117 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v118 := v117.FindInternedVar(lang.NewSymbol("list"))
if v118.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v118)))
}
v119 := v118.Get()
v120 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v121 := v120.FindInternedVar(lang.NewSymbol("seq"))
if v121.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v121)))
}
v122 := v121.Get()
v123 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v124 := v123.FindInternedVar(lang.NewSymbol("concat"))
if v124.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v124)))
}
v125 := v124.Get()
v126 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v127 := v126.FindInternedVar(lang.NewSymbol("list"))
if v127.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v127)))
}
v128 := v127.Get()
v129 := lang.Apply(v128, []any{lang.NewSymbol("quote")})
v130 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v131 := v130.FindInternedVar(lang.NewSymbol("list"))
if v131.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v131)))
}
v132 := v131.Get()
v133 := lang.Apply(v132, []any{v35})
v134 := lang.Apply(v125, []any{v129, v133})
v135 := lang.Apply(v122, []any{v134})
v136 := lang.Apply(v119, []any{v135})
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("list"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.Apply(v139, []any{lang.NewKeyword("multis")})
v141 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v142 := v141.FindInternedVar(lang.NewSymbol("list"))
if v142.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v142)))
}
v143 := v142.Get()
v144 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v145 := v144.FindInternedVar(lang.NewSymbol("apply"))
if v145.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v145)))
}
v146 := v145.Get()
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("hash-map"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v151 := v150.FindInternedVar(lang.NewSymbol("seq"))
if v151.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v151)))
}
v152 := v151.Get()
v153 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v154 := v153.FindInternedVar(lang.NewSymbol("concat"))
if v154.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v154)))
}
v155 := v154.Get()
v156 := lang.Apply(v155, nil)
v157 := lang.Apply(v152, []any{v156})
v158 := lang.Apply(v146, []any{v149, v157})
v159 := lang.Apply(v143, []any{v158})
v160 := lang.Apply(v104, []any{v108, v112, v116, v136, v140, v159})
v161 := lang.Apply(v101, []any{v160})
v162 := lang.Apply(v95, []any{v98, v161})
v163 := lang.Apply(v92, []any{v162})
v164 := lang.Apply(v85, []any{v89, v163})
v165 := lang.Apply(v82, []any{v164})
v166 := lang.Apply(v79, []any{v165})
v167 := lang.Apply(v68, []any{v72, v76, v166})
v168 := lang.Apply(v65, []any{v167})
v169 := lang.Apply(v62, []any{v168})
v170 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v171 := v170.FindInternedVar(lang.NewSymbol("list"))
if v171.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v171)))
}
v172 := v171.Get()
v173 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v174 := v173.FindInternedVar(lang.NewSymbol("seq"))
if v174.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v174)))
}
v175 := v174.Get()
v176 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v177 := v176.FindInternedVar(lang.NewSymbol("concat"))
if v177.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v177)))
}
v178 := v177.Get()
v179 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v180 := v179.FindInternedVar(lang.NewSymbol("list"))
if v180.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v180)))
}
v181 := v180.Get()
v182 := lang.Apply(v181, []any{lang.NewSymbol("glojure.core/swap!")})
v183 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v184 := v183.FindInternedVar(lang.NewSymbol("list"))
if v184.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v184)))
}
v185 := v184.Get()
v186 := lang.Apply(v185, []any{lang.NewSymbol("glojure.core/-protocols")})
v187 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v188 := v187.FindInternedVar(lang.NewSymbol("list"))
if v188.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v188)))
}
v189 := v188.Get()
v190 := lang.Apply(v189, []any{lang.NewSymbol("glojure.core/assoc")})
v191 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v192 := v191.FindInternedVar(lang.NewSymbol("list"))
if v192.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v192)))
}
v193 := v192.Get()
v194 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v195 := v194.FindInternedVar(lang.NewSymbol("seq"))
if v195.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v195)))
}
v196 := v195.Get()
v197 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v198 := v197.FindInternedVar(lang.NewSymbol("concat"))
if v198.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v198)))
}
v199 := v198.Get()
v200 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v201 := v200.FindInternedVar(lang.NewSymbol("list"))
if v201.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v201)))
}
v202 := v201.Get()
v203 := lang.Apply(v202, []any{lang.NewSymbol("quote")})
v204 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v205 := v204.FindInternedVar(lang.NewSymbol("list"))
if v205.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v205)))
}
v206 := v205.Get()
v207 := lang.Apply(v206, []any{v5})
v208 := lang.Apply(v199, []any{v203, v207})
v209 := lang.Apply(v196, []any{v208})
v210 := lang.Apply(v193, []any{v209})
v211 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v212 := v211.FindInternedVar(lang.NewSymbol("list"))
if v212.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v212)))
}
v213 := v212.Get()
v214 := lang.Apply(v213, []any{v5})
v215 := lang.Apply(v178, []any{v182, v186, v190, v210, v214})
v216 := lang.Apply(v175, []any{v215})
v217 := lang.Apply(v172, []any{v216})
v218 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v219 := v218.FindInternedVar(lang.NewSymbol("map"))
if v219.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v219)))
}
v220 := v219.Get()
var v221 lang.FnFunc
v221 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v222 := args[0]
v223 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v224 := v223.FindInternedVar(lang.NewSymbol("seq"))
if v224.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v224)))
}
v225 := v224.Get()
v226 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v227 := v226.FindInternedVar(lang.NewSymbol("concat"))
if v227.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v227)))
}
v228 := v227.Get()
v229 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v230 := v229.FindInternedVar(lang.NewSymbol("list"))
if v230.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v230)))
}
v231 := v230.Get()
v232 := lang.Apply(v231, []any{lang.NewSymbol("do")})
v233 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v234 := v233.FindInternedVar(lang.NewSymbol("list"))
if v234.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v234)))
}
v235 := v234.Get()
v236 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v237 := v236.FindInternedVar(lang.NewSymbol("seq"))
if v237.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v237)))
}
v238 := v237.Get()
v239 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v240 := v239.FindInternedVar(lang.NewSymbol("concat"))
if v240.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v240)))
}
v241 := v240.Get()
v242 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v243 := v242.FindInternedVar(lang.NewSymbol("list"))
if v243.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v243)))
}
v244 := v243.Get()
v245 := lang.Apply(v244, []any{lang.NewSymbol("glojure.core/defmulti")})
v246 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v247 := v246.FindInternedVar(lang.NewSymbol("list"))
if v247.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v247)))
}
v248 := v247.Get()
v249 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v250 := v249.FindInternedVar(lang.NewSymbol("first"))
if v250.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v250)))
}
v251 := v250.Get()
v252 := lang.Apply(v251, []any{v222})
v253 := lang.Apply(v248, []any{v252})
v254 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v255 := v254.FindInternedVar(lang.NewSymbol("list"))
if v255.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v255)))
}
v256 := v255.Get()
v257 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v258 := v257.FindInternedVar(lang.NewSymbol("seq"))
if v258.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v258)))
}
v259 := v258.Get()
v260 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v261 := v260.FindInternedVar(lang.NewSymbol("concat"))
if v261.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v261)))
}
v262 := v261.Get()
v263 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v264 := v263.FindInternedVar(lang.NewSymbol("list"))
if v264.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v264)))
}
v265 := v264.Get()
v266 := lang.Apply(v265, []any{lang.NewSymbol("glojure.core/fn")})
v267 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v268 := v267.FindInternedVar(lang.NewSymbol("list"))
if v268.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v268)))
}
v269 := v268.Get()
v270 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v271 := v270.FindInternedVar(lang.NewSymbol("apply"))
if v271.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v271)))
}
v272 := v271.Get()
v273 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v274 := v273.FindInternedVar(lang.NewSymbol("vector"))
if v274.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v274)))
}
v275 := v274.Get()
v276 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v277 := v276.FindInternedVar(lang.NewSymbol("seq"))
if v277.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v277)))
}
v278 := v277.Get()
v279 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v280 := v279.FindInternedVar(lang.NewSymbol("concat"))
if v280.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v280)))
}
v281 := v280.Get()
v282 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v283 := v282.FindInternedVar(lang.NewSymbol("list"))
if v283.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v283)))
}
v284 := v283.Get()
v285 := lang.Apply(v284, []any{lang.NewSymbol("this")})
v286 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v287 := v286.FindInternedVar(lang.NewSymbol("list"))
if v287.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v287)))
}
v288 := v287.Get()
v289 := lang.Apply(v288, []any{lang.NewSymbol("&")})
v290 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v291 := v290.FindInternedVar(lang.NewSymbol("list"))
if v291.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v291)))
}
v292 := v291.Get()
v293 := lang.Apply(v292, []any{lang.NewSymbol("args")})
v294 := lang.Apply(v281, []any{v285, v289, v293})
v295 := lang.Apply(v278, []any{v294})
v296 := lang.Apply(v272, []any{v275, v295})
v297 := lang.Apply(v269, []any{v296})
v298 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v299 := v298.FindInternedVar(lang.NewSymbol("list"))
if v299.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v299)))
}
v300 := v299.Get()
v301 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v302 := v301.FindInternedVar(lang.NewSymbol("seq"))
if v302.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v302)))
}
v303 := v302.Get()
v304 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v305 := v304.FindInternedVar(lang.NewSymbol("concat"))
if v305.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v305)))
}
v306 := v305.Get()
v307 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v308 := v307.FindInternedVar(lang.NewSymbol("list"))
if v308.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v308)))
}
v309 := v308.Get()
v310 := lang.Apply(v309, []any{lang.NewSymbol("glojure.core/class")})
v311 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v312 := v311.FindInternedVar(lang.NewSymbol("list"))
if v312.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v312)))
}
v313 := v312.Get()
v314 := lang.Apply(v313, []any{lang.NewSymbol("this")})
v315 := lang.Apply(v306, []any{v310, v314})
v316 := lang.Apply(v303, []any{v315})
v317 := lang.Apply(v300, []any{v316})
v318 := lang.Apply(v262, []any{v266, v297, v317})
v319 := lang.Apply(v259, []any{v318})
v320 := lang.Apply(v256, []any{v319})
v321 := lang.Apply(v241, []any{v245, v253, v320})
v322 := lang.Apply(v238, []any{v321})
v323 := lang.Apply(v235, []any{v322})
v324 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v325 := v324.FindInternedVar(lang.NewSymbol("list"))
if v325.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v325)))
}
v326 := v325.Get()
v327 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v328 := v327.FindInternedVar(lang.NewSymbol("seq"))
if v328.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v328)))
}
v329 := v328.Get()
v330 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v331 := v330.FindInternedVar(lang.NewSymbol("concat"))
if v331.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v331)))
}
v332 := v331.Get()
v333 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v334 := v333.FindInternedVar(lang.NewSymbol("list"))
if v334.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v334)))
}
v335 := v334.Get()
v336 := lang.Apply(v335, []any{lang.NewSymbol("glojure.core/swap!")})
v337 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v338 := v337.FindInternedVar(lang.NewSymbol("list"))
if v338.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v338)))
}
v339 := v338.Get()
v340 := lang.Apply(v339, []any{v5})
v341 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v342 := v341.FindInternedVar(lang.NewSymbol("list"))
if v342.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v342)))
}
v343 := v342.Get()
v344 := lang.Apply(v343, []any{lang.NewSymbol("glojure.core/assoc-in")})
v345 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v346 := v345.FindInternedVar(lang.NewSymbol("list"))
if v346.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v346)))
}
v347 := v346.Get()
v348 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v349 := v348.FindInternedVar(lang.NewSymbol("apply"))
if v349.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v349)))
}
v350 := v349.Get()
v351 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v352 := v351.FindInternedVar(lang.NewSymbol("vector"))
if v352.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v352)))
}
v353 := v352.Get()
v354 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v355 := v354.FindInternedVar(lang.NewSymbol("seq"))
if v355.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v355)))
}
v356 := v355.Get()
v357 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v358 := v357.FindInternedVar(lang.NewSymbol("concat"))
if v358.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v358)))
}
v359 := v358.Get()
v360 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v361 := v360.FindInternedVar(lang.NewSymbol("list"))
if v361.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v361)))
}
v362 := v361.Get()
v363 := lang.Apply(v362, []any{lang.NewKeyword("multis")})
v364 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v365 := v364.FindInternedVar(lang.NewSymbol("list"))
if v365.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v365)))
}
v366 := v365.Get()
v367 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v368 := v367.FindInternedVar(lang.NewSymbol("seq"))
if v368.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v368)))
}
v369 := v368.Get()
v370 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v371 := v370.FindInternedVar(lang.NewSymbol("concat"))
if v371.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v371)))
}
v372 := v371.Get()
v373 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v374 := v373.FindInternedVar(lang.NewSymbol("list"))
if v374.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v374)))
}
v375 := v374.Get()
v376 := lang.Apply(v375, []any{lang.NewSymbol("glojure.core/keyword")})
v377 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v378 := v377.FindInternedVar(lang.NewSymbol("list"))
if v378.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v378)))
}
v379 := v378.Get()
v380 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v381 := v380.FindInternedVar(lang.NewSymbol("seq"))
if v381.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v381)))
}
v382 := v381.Get()
v383 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v384 := v383.FindInternedVar(lang.NewSymbol("concat"))
if v384.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v384)))
}
v385 := v384.Get()
v386 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v387 := v386.FindInternedVar(lang.NewSymbol("list"))
if v387.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v387)))
}
v388 := v387.Get()
v389 := lang.Apply(v388, []any{lang.NewSymbol("quote")})
v390 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v391 := v390.FindInternedVar(lang.NewSymbol("list"))
if v391.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v391)))
}
v392 := v391.Get()
v393 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v394 := v393.FindInternedVar(lang.NewSymbol("first"))
if v394.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v394)))
}
v395 := v394.Get()
v396 := lang.Apply(v395, []any{v222})
v397 := lang.Apply(v392, []any{v396})
v398 := lang.Apply(v385, []any{v389, v397})
v399 := lang.Apply(v382, []any{v398})
v400 := lang.Apply(v379, []any{v399})
v401 := lang.Apply(v372, []any{v376, v400})
v402 := lang.Apply(v369, []any{v401})
v403 := lang.Apply(v366, []any{v402})
v404 := lang.Apply(v359, []any{v363, v403})
v405 := lang.Apply(v356, []any{v404})
v406 := lang.Apply(v350, []any{v353, v405})
v407 := lang.Apply(v347, []any{v406})
v408 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v409 := v408.FindInternedVar(lang.NewSymbol("list"))
if v409.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v409)))
}
v410 := v409.Get()
v411 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v412 := v411.FindInternedVar(lang.NewSymbol("first"))
if v412.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v412)))
}
v413 := v412.Get()
v414 := lang.Apply(v413, []any{v222})
v415 := lang.Apply(v410, []any{v414})
v416 := lang.Apply(v332, []any{v336, v340, v344, v407, v415})
v417 := lang.Apply(v329, []any{v416})
v418 := lang.Apply(v326, []any{v417})
v419 := lang.Apply(v228, []any{v232, v323, v418})
v420 := lang.Apply(v225, []any{v419})
return v420
})
v222 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(102), lang.NewKeyword("column"), int(13), lang.NewKeyword("end-line"), int(104), lang.NewKeyword("end-column"), int(90))
v223, err := lang.WithMeta(v221, v222.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v224 := lang.Apply(v220, []any{v223, v35})
v225 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v226 := v225.FindInternedVar(lang.NewSymbol("list"))
if v226.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v226)))
}
v227 := v226.Get()
v228 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v229 := v228.FindInternedVar(lang.NewSymbol("seq"))
if v229.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v229)))
}
v230 := v229.Get()
v231 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v232 := v231.FindInternedVar(lang.NewSymbol("concat"))
if v232.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v232)))
}
v233 := v232.Get()
v234 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v235 := v234.FindInternedVar(lang.NewSymbol("list"))
if v235.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v235)))
}
v236 := v235.Get()
v237 := lang.Apply(v236, []any{lang.NewSymbol("var")})
v238 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v239 := v238.FindInternedVar(lang.NewSymbol("list"))
if v239.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v239)))
}
v240 := v239.Get()
v241 := lang.Apply(v240, []any{v5})
v242 := lang.Apply(v233, []any{v237, v241})
v243 := lang.Apply(v230, []any{v242})
v244 := lang.Apply(v227, []any{v243})
v245 := lang.Apply(v55, []any{v59, v169, v217, v224, v244})
v246 := lang.Apply(v52, []any{v245})
return v246
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// defstruct
{
v0 := lang.NewSymbol("defstruct").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("&"), lang.NewSymbol("keys"))), lang.NewKeyword("doc"), "Same as (def name (create-struct keys...))", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4044), lang.NewKeyword("end-line"), int(4044))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("def")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v5})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("seq"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("concat"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("list"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{lang.NewSymbol("glojure.core/create-struct")})
v34 := lang.Apply(v29, []any{v33, v6})
v35 := lang.Apply(v26, []any{v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v12, []any{v16, v20, v36})
v38 := lang.Apply(v9, []any{v37})
return v38
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// delay
{
v0 := lang.NewSymbol("delay").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls. See also - realized?", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(739), lang.NewKeyword("end-line"), int(739))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("list"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("list*"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.NewVector()
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(746), lang.NewKeyword("column"), int(62), lang.NewKeyword("end-line"), int(746), lang.NewKeyword("end-column"), int(63))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v15 := lang.Apply(v11, []any{lang.NewSymbol("fn*"), v14, v5})
v16 := lang.Apply(v8, []any{lang.NewSymbol("new"), lang.NewSymbol("glojure.lang.Delay"), v15})
return v16
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// delay?
{
v0 := lang.NewSymbol("delay?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "returns true if x is a Delay created with delay", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(748), lang.NewKeyword("end-line"), int(748))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{glojure.lang4.Delay, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// deliver
{
v0 := lang.NewSymbol("deliver").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("promise"), lang.NewSymbol("val"))), lang.NewKeyword("doc"), "Delivers the supplied value to the promise, releasing any pending\n  derefs. A subsequent call to deliver on a promise will have no effect.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7109), lang.NewKeyword("end-line"), int(7109))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.Apply(v3, []any{v4})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// denominator
{
v1 := reflect.TypeOf((*big8.Int)(nil))
v0 := lang.NewSymbol("denominator").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("r"))), lang.NewKeyword("doc"), "Returns the denominator part of a Ratio.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3591), lang.NewKeyword("end-line"), int(3591))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, ok := lang.FieldOrMethod(v4, "denominator")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "denominator")))
}
var v6 any
switch reflect.TypeOf(v5).Kind() {
case reflect.Func:
  v6 = lang.Apply(v5, nil)
default:
  v6 = v5
}
return v6
})
v4 := reflect.TypeOf((*big8.Int)(nil))
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// deref
{
v0 := lang.NewSymbol("deref").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ref")), lang.NewVector(lang.NewSymbol("ref"), lang.NewSymbol("timeout-ms"), lang.NewSymbol("timeout-val"))), lang.NewKeyword("doc"), "Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\n  returns the in-transaction-value of ref, else returns the\n  most-recently-committed value of ref. When applied to a var, agent\n  or atom, returns its current state. When applied to a delay, forces\n  it if not already forced. When applied to a future, will block if\n  computation not complete. When applied to a promise, will block\n  until a value is delivered.  The variant taking a timeout can be\n  used for blocking references (futures and promises), and will return\n  timeout-val if the timeout (in milliseconds) is reached before a\n  value is available. See also - realized?.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2304), lang.NewKeyword("end-line"), int(2304))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.IDeref, v3})
if lang.IsTruthy(v8) {
v9, ok := lang.FieldOrMethod(v3, "Deref")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "Deref")))
}
var v10 any
switch reflect.TypeOf(v9).Kind() {
case reflect.Func:
  v10 = lang.Apply(v9, nil)
default:
  v10 = v9
}
v4 = v10
} else {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("deref-future"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3})
v4 = v14
}
return v4
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("instance?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{lang.IBlockingDeref, v3})
if lang.IsTruthy(v10) {
v11, _ := lang.FieldOrMethod(v3, "DerefWithTimeout")
if reflect.TypeOf(v11).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("DerefWithTimeout is not a function")))
}
v12 := lang.Apply(v11, []any{v4, v5})
v6 = v12
} else {
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("deref-future"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4, v5})
v6 = v16
}
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// deref-as-map
{
v0 := lang.NewSymbol("deref-as-map").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(408), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(408), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("o"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("instance?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{lang.IPending, v3})
var v5 any = v9
_ = v5
var v11 any
if lang.IsTruthy(v5) {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("not"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15, ok := lang.FieldOrMethod(v3, "isRealized")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "isRealized")))
}
var v16 any
switch reflect.TypeOf(v15).Kind() {
case reflect.Func:
  v16 = lang.Apply(v15, nil)
default:
  v16 = v15
}
v17 := lang.Apply(v14, []any{v16})
v11 = v17
} else {
v11 = v5
}
var v4 any = v11
_ = v4
var v6 any
if lang.IsTruthy(v4) {
v6 = nil
} else {
var v7 any
func() {
defer func() {
if r := recover(); r != nil {
if lang.CatchMatches(r, lang.Throwable) {
v8 := r
_ = v8
v9 := lang.NewVector(true, v8)
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(415), lang.NewKeyword("column"), int(18), lang.NewKeyword("end-line"), int(415), lang.NewKeyword("end-column"), int(25))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v7 = v11
} else {
panic(r)
}
}
}()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("deref"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
v12 := lang.NewVector(false, v11)
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(413), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(413), lang.NewKeyword("end-column"), int(32))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v7 = v14
}()
v6 = v7
}
var v5 any = v6
_ = v5
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("nth"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v5, int64(0), nil})
var v15 any = v19
_ = v15
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("nth"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v5, int64(1), nil})
var v20 any = v24
_ = v20
var v26 any
var v27 any = v15
_ = v27
var v29 any
if lang.IsTruthy(v27) {
v29 = v27
} else {
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("instance?"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.*Agent, v3})
var v30 any = v34
_ = v30
var v36 any
if lang.IsTruthy(v30) {
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("agent-error"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v3})
v36 = v40
} else {
v36 = v30
}
v29 = v36
}
if lang.IsTruthy(v29) {
v26 = lang.NewKeyword("failed")
} else {
var v27 any
if lang.IsTruthy(v4) {
v27 = lang.NewKeyword("pending")
} else {
var v28 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v28 = lang.NewKeyword("ready")
} else {
v28 = nil
}
v27 = v28
}
v26 = v27
}
v29 := lang.NewMap(lang.NewKeyword("status"), v26, lang.NewKeyword("val"), v20)
v30 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(416), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(429), lang.NewKeyword("end-column"), int(14))
v31, err := lang.WithMeta(v29, v30.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v31
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// deref-future
{
v0 := lang.NewSymbol("deref-future").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2296), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(2296), lang.NewKeyword("end-column"), int(28), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("fut")), lang.NewVector(lang.NewSymbol("fut"), lang.NewSymbol("timeout-ms"), lang.NewSymbol("timeout-val"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "Get")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "Get")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
func() {
defer func() {
if r := recover(); r != nil {
if lang.CatchMatches(r, lang.TimeoutError) {
v7 := r
_ = v7
v6 = v5
} else {
panic(r)
}
}
}()
v7, _ := lang.FieldOrMethod(v3, "Get")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Get is not a function")))
}
v8 := lang.Apply(v7, []any{v4, time9.Millisecond})
v6 = v8
}()
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// derive
{
v0 := lang.NewSymbol("derive").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("tag"), lang.NewSymbol("parent")), lang.NewVector(lang.NewSymbol("h"), lang.NewSymbol("tag"), lang.NewSymbol("parent"))), lang.NewKeyword("doc"), "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5605), lang.NewKeyword("end-line"), int(5605))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
_ = nil
_ = nil
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("alter-var-root"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("global-hierarchy"))
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("derive"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v7, []any{v8, v11, v3, v4})
_ = v12
return nil
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
_ = nil
_ = nil
_ = nil
v7 := lang.Apply(lang.NewKeyword("parents"), []any{v3})
var v6 any = v7
_ = v6
v9 := lang.Apply(lang.NewKeyword("descendants"), []any{v3})
var v8 any = v9
_ = v8
v11 := lang.Apply(lang.NewKeyword("ancestors"), []any{v3})
var v10 any = v11
_ = v10
var v13 lang.FnFunc
v13 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 5 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v14 := args[0]
v15 := args[1]
v16 := args[2]
v17 := args[3]
v18 := args[4]
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("reduce1"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
var v22 lang.FnFunc
v22 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v23 := args[0]
v24 := args[1]
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("assoc"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("reduce1"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("conj"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("get"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.CreatePersistentTreeSet()
v38 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5628), lang.NewKeyword("column"), int(61), lang.NewKeyword("end-line"), int(5628), lang.NewKeyword("end-column"), int(63))
v39, err := lang.WithMeta(v37, v38.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v40 := lang.Apply(v36, []any{v18, v24, v39})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("cons"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v18, []any{v17})
v45 := lang.Apply(v43, []any{v17, v44})
v46 := lang.Apply(v30, []any{v33, v40, v45})
v47 := lang.Apply(v27, []any{v23, v24, v46})
return v47
})
v23 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5626), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(5628), lang.NewKeyword("end-column"), int(98))
v24, err := lang.WithMeta(v22, v23.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("cons"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v16, []any{v15})
v29 := lang.Apply(v27, []any{v15, v28})
v30 := lang.Apply(v21, []any{v24, v14, v29})
return v30
})
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5625), lang.NewKeyword("column"), int(13), lang.NewKeyword("end-line"), int(5629), lang.NewKeyword("end-column"), int(56))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v12 any = v15
_ = v12
var v18 any
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("contains?"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v6, []any{v4})
v23 := lang.Apply(v21, []any{v22, v5})
if lang.IsTruthy(v23) {
v18 = nil
} else {
var v24 any
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("contains?"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v10, []any{v4})
v29 := lang.Apply(v27, []any{v28, v5})
if lang.IsTruthy(v29) {
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("print-str"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v4, "already has", v5, "as ancestor"})
v34 := lang.Apply(lang.NewError, []any{v33})
panic(v34)
} else {
v24 = nil
}
_ = v24
var v35 any
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("contains?"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v10, []any{v5})
v40 := lang.Apply(v38, []any{v39, v4})
if lang.IsTruthy(v40) {
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("print-str"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{"Cyclic derivation:", v5, "has", v4, "as ancestor"})
v45 := lang.Apply(lang.NewError, []any{v44})
panic(v45)
} else {
v35 = nil
}
_ = v35
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("assoc"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(lang.NewKeyword("parents"), []any{v3})
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("conj"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("get"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.CreatePersistentTreeSet()
v57 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5636), lang.NewKeyword("column"), int(61), lang.NewKeyword("end-line"), int(5636), lang.NewKeyword("end-column"), int(63))
v58, err := lang.WithMeta(v56, v57.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v59 := lang.Apply(v55, []any{v6, v4, v58})
v60 := lang.Apply(v52, []any{v59, v5})
v61 := lang.Apply(v48, []any{v49, v4, v60})
v62 := lang.Apply(lang.NewKeyword("ancestors"), []any{v3})
v63 := lang.Apply(v12, []any{v62, v4, v8, v5, v10})
v64 := lang.Apply(lang.NewKeyword("descendants"), []any{v3})
v65 := lang.Apply(v12, []any{v64, v5, v10, v4, v8})
v66 := lang.NewMap(lang.NewKeyword("parents"), v61, lang.NewKeyword("ancestors"), v63, lang.NewKeyword("descendants"), v65)
v67 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5636), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(5638), lang.NewKeyword("end-column"), int(61))
v68, err := lang.WithMeta(v66, v67.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v18 = v68
}
var v17 any = v18
_ = v17
var v70 any
if lang.IsTruthy(v17) {
v70 = v17
} else {
v70 = v3
}
return v70
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// descendants
{
v0 := lang.NewSymbol("descendants").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("tag")), lang.NewVector(lang.NewSymbol("h"), lang.NewSymbol("tag"))), lang.NewKeyword("doc"), "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on Java type inheritance\n  relationships.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5593), lang.NewKeyword("end-line"), int(5593))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("descendants"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("global-hierarchy"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{v9, v3})
return v10
  case 2:
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("class?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
v10 := lang.Apply(java.lang.UnsupportedOperationException10., []any{"Can't get descendants of classes"})
panic(v10)
} else {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("not-empty"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("get"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(lang.NewKeyword("descendants"), []any{v3})
v18 := lang.Apply(v16, []any{v17, v4})
v19 := lang.Apply(v13, []any{v18})
v5 = v19
}
return v5
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// destructure
{
v0 := lang.NewSymbol("destructure").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4400), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(4400), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("partition"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{int64(2), v3})
var v4 any = v8
_ = v4
var v10 lang.FnFunc
{ // function pb
v10 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v12 := args[0]
v13 := args[1]
v14 := args[2]
var v16 lang.FnFunc
v16 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v17 := args[0]
v18 := args[1]
v19 := args[2]
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("gensym"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{"vec__"})
var v20 any = v24
_ = v20
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("gensym"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{"seq__"})
var v25 any = v29
_ = v25
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("gensym"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{"first__"})
var v30 any = v34
_ = v30
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("some"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.CreatePersistentTreeSet(lang.NewSymbol("&"))
v40 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4408), lang.NewKeyword("column"), int(43), lang.NewKeyword("end-line"), int(4408), lang.NewKeyword("end-column"), int(47))
v41, err := lang.WithMeta(v39, v40.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v42 := lang.Apply(v38, []any{v41, v18})
var v35 any = v42
_ = v35
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("conj"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v17, v20, v19})
var v45 any = v49
_ = v45
var v51 any
if lang.IsTruthy(v35) {
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("conj"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("list"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{lang.NewSymbol("glojure.core/seq"), v20})
v59 := lang.Apply(v54, []any{v45, v25, v58})
v51 = v59
} else {
v51 = v45
}
var v44 any = v51
_ = v44
var v45 any = int64(0)
_ = v45
var v46 any = v18
_ = v46
var v47 any = false
_ = v47
var v48 any
for {
var v49 any
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("seq"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v46})
if lang.IsTruthy(v53) {
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("first"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{v46})
var v54 any = v58
_ = v54
var v60 any
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("="))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v54, lang.NewSymbol("&")})
if lang.IsTruthy(v64) {
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("second"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{v46})
v70 := lang.Apply(v11, []any{v44, v69, v25})
var v65 any = v70
var v71 any = v45
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("nnext"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.Apply(v75, []any{v46})
var v72 any = v76
var v77 any = true
v44 = v65
v45 = v71
v46 = v72
v47 = v77
continue
} else {
var v78 any
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("="))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.Apply(v81, []any{v54, lang.NewKeyword("as")})
if lang.IsTruthy(v82) {
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("second"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.Apply(v85, []any{v46})
v87 := lang.Apply(v11, []any{v44, v86, v20})
v78 = v87
} else {
var v88 any
if lang.IsTruthy(lang.NewKeyword("else")) {
var v89 any
if lang.IsTruthy(v47) {
v90 := lang.Apply(errors6.New, []any{"Unsupported binding form, only :as can follow & parameter"})
panic(v90)
} else {
var v92 any
if lang.IsTruthy(v35) {
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("conj"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("seq"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("concat"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("list"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.Apply(v104, []any{lang.NewSymbol("glojure.core/first")})
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("list"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{v25})
v110 := lang.Apply(v101, []any{v105, v109})
v111 := lang.Apply(v98, []any{v110})
v112 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v113 := v112.FindInternedVar(lang.NewSymbol("seq"))
if v113.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v113)))
}
v114 := v113.Get()
v115 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v116 := v115.FindInternedVar(lang.NewSymbol("concat"))
if v116.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v116)))
}
v117 := v116.Get()
v118 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v119 := v118.FindInternedVar(lang.NewSymbol("list"))
if v119.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v119)))
}
v120 := v119.Get()
v121 := lang.Apply(v120, []any{lang.NewSymbol("glojure.core/next")})
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("list"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.Apply(v124, []any{v25})
v126 := lang.Apply(v117, []any{v121, v125})
v127 := lang.Apply(v114, []any{v126})
v128 := lang.Apply(v95, []any{v44, v30, v111, v25, v127})
v92 = v128
} else {
v92 = v44
}
var v129 any
if lang.IsTruthy(v35) {
v129 = v30
} else {
v130 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v131 := v130.FindInternedVar(lang.NewSymbol("list"))
if v131.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v131)))
}
v132 := v131.Get()
v133 := lang.Apply(v132, []any{lang.NewSymbol("glojure.core/nth"), v20, v45, nil})
v129 = v133
}
v134 := lang.Apply(v11, []any{v92, v54, v129})
var v91 any = v134
v136 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v137 := v136.FindInternedVar(lang.NewSymbol("inc"))
if v137.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v137)))
}
v138 := v137.Get()
v139 := lang.Apply(v138, []any{v45})
var v135 any = v139
v141 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v142 := v141.FindInternedVar(lang.NewSymbol("next"))
if v142.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v142)))
}
v143 := v142.Get()
v144 := lang.Apply(v143, []any{v46})
var v140 any = v144
var v145 any = v47
v44 = v91
v45 = v135
v46 = v140
v47 = v145
continue
}
v88 = v89
} else {
v88 = nil
}
v78 = v88
}
v60 = v78
}
v49 = v60
} else {
v49 = v44
}
v48 = v49
  break
}
return v48
})
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4404), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(4438), lang.NewKeyword("end-column"), int(34))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v15 any = v18
_ = v15
var v20 lang.FnFunc
v20 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v21 := args[0]
v22 := args[1]
v23 := args[2]
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("gensym"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{"map__"})
var v24 any = v28
_ = v24
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("with-meta"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.NewMap(lang.NewKeyword("tag"), lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.ISeq"))
v34 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4442), lang.NewKeyword("column"), int(52), lang.NewKeyword("end-line"), int(4442), lang.NewKeyword("end-column"), int(103))
v35, err := lang.WithMeta(v33, v34.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v36 := lang.Apply(v32, []any{v24, v35})
var v29 any = v36
_ = v29
v38 := lang.Apply(lang.NewKeyword("or"), []any{v22})
var v37 any = v38
_ = v37
var v41 lang.FnFunc
v41 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v42 := args[0]
var v43 any
v44 := lang.Apply(lang.NewKeyword("as"), []any{v22})
if lang.IsTruthy(v44) {
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("conj"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(lang.NewKeyword("as"), []any{v22})
v49 := lang.Apply(v47, []any{v42, v48, v24})
v43 = v49
} else {
v43 = v42
}
return v43
})
v42 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4450), lang.NewKeyword("column"), int(40), lang.NewKeyword("end-line"), int(4453), lang.NewKeyword("end-column"), int(48))
v43, err := lang.WithMeta(v41, v42.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("conj"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("conj"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("conj"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("conj"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{v21, v24})
v57 := lang.Apply(v52, []any{v56, v23})
v58 := lang.Apply(v49, []any{v57, v24})
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("seq"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("concat"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("list"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{lang.NewSymbol("if")})
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("list"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("seq"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v76 := v75.FindInternedVar(lang.NewSymbol("concat"))
if v76.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v76)))
}
v77 := v76.Get()
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("list"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.Apply(v80, []any{lang.NewSymbol("glojure.core/seq?")})
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("list"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, []any{v24})
v86 := lang.Apply(v77, []any{v81, v85})
v87 := lang.Apply(v74, []any{v86})
v88 := lang.Apply(v71, []any{v87})
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("list"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("seq"))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v96 := v95.FindInternedVar(lang.NewSymbol("concat"))
if v96.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v96)))
}
v97 := v96.Get()
v98 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v99 := v98.FindInternedVar(lang.NewSymbol("list"))
if v99.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v99)))
}
v100 := v99.Get()
v101 := lang.Apply(v100, []any{lang.NewSymbol("if")})
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("list"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("seq"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("concat"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v112 := v111.FindInternedVar(lang.NewSymbol("list"))
if v112.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v112)))
}
v113 := v112.Get()
v114 := lang.Apply(v113, []any{lang.NewSymbol("glojure.core/next")})
v115 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v116 := v115.FindInternedVar(lang.NewSymbol("list"))
if v116.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v116)))
}
v117 := v116.Get()
v118 := lang.Apply(v117, []any{v29})
v119 := lang.Apply(v110, []any{v114, v118})
v120 := lang.Apply(v107, []any{v119})
v121 := lang.Apply(v104, []any{v120})
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("list"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v126 := v125.FindInternedVar(lang.NewSymbol("seq"))
if v126.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v126)))
}
v127 := v126.Get()
v128 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v129 := v128.FindInternedVar(lang.NewSymbol("concat"))
if v129.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v129)))
}
v130 := v129.Get()
v131 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v132 := v131.FindInternedVar(lang.NewSymbol("list"))
if v132.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v132)))
}
v133 := v132.Get()
v134 := lang.Apply(v133, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.NewPersistentArrayMapAsIfByAssoc")})
v135 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v136 := v135.FindInternedVar(lang.NewSymbol("list"))
if v136.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v136)))
}
v137 := v136.Get()
v138 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v139 := v138.FindInternedVar(lang.NewSymbol("seq"))
if v139.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v139)))
}
v140 := v139.Get()
v141 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v142 := v141.FindInternedVar(lang.NewSymbol("concat"))
if v142.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v142)))
}
v143 := v142.Get()
v144 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v145 := v144.FindInternedVar(lang.NewSymbol("list"))
if v145.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v145)))
}
v146 := v145.Get()
v147 := lang.Apply(v146, []any{lang.NewSymbol("glojure.core/to-array")})
v148 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v149 := v148.FindInternedVar(lang.NewSymbol("list"))
if v149.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v149)))
}
v150 := v149.Get()
v151 := lang.Apply(v150, []any{v29})
v152 := lang.Apply(v143, []any{v147, v151})
v153 := lang.Apply(v140, []any{v152})
v154 := lang.Apply(v137, []any{v153})
v155 := lang.Apply(v130, []any{v134, v154})
v156 := lang.Apply(v127, []any{v155})
v157 := lang.Apply(v124, []any{v156})
v158 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v159 := v158.FindInternedVar(lang.NewSymbol("list"))
if v159.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v159)))
}
v160 := v159.Get()
v161 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v162 := v161.FindInternedVar(lang.NewSymbol("seq"))
if v162.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v162)))
}
v163 := v162.Get()
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("concat"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v168 := v167.FindInternedVar(lang.NewSymbol("list"))
if v168.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v168)))
}
v169 := v168.Get()
v170 := lang.Apply(v169, []any{lang.NewSymbol("if")})
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("list"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
v174 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v175 := v174.FindInternedVar(lang.NewSymbol("seq"))
if v175.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v175)))
}
v176 := v175.Get()
v177 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v178 := v177.FindInternedVar(lang.NewSymbol("concat"))
if v178.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v178)))
}
v179 := v178.Get()
v180 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v181 := v180.FindInternedVar(lang.NewSymbol("list"))
if v181.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v181)))
}
v182 := v181.Get()
v183 := lang.Apply(v182, []any{lang.NewSymbol("glojure.core/seq")})
v184 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v185 := v184.FindInternedVar(lang.NewSymbol("list"))
if v185.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v185)))
}
v186 := v185.Get()
v187 := lang.Apply(v186, []any{v29})
v188 := lang.Apply(v179, []any{v183, v187})
v189 := lang.Apply(v176, []any{v188})
v190 := lang.Apply(v173, []any{v189})
v191 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v192 := v191.FindInternedVar(lang.NewSymbol("list"))
if v192.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v192)))
}
v193 := v192.Get()
v194 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v195 := v194.FindInternedVar(lang.NewSymbol("seq"))
if v195.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v195)))
}
v196 := v195.Get()
v197 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v198 := v197.FindInternedVar(lang.NewSymbol("concat"))
if v198.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v198)))
}
v199 := v198.Get()
v200 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v201 := v200.FindInternedVar(lang.NewSymbol("list"))
if v201.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v201)))
}
v202 := v201.Get()
v203 := lang.Apply(v202, []any{lang.NewSymbol("glojure.core/first")})
v204 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v205 := v204.FindInternedVar(lang.NewSymbol("list"))
if v205.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v205)))
}
v206 := v205.Get()
v207 := lang.Apply(v206, []any{v29})
v208 := lang.Apply(v199, []any{v203, v207})
v209 := lang.Apply(v196, []any{v208})
v210 := lang.Apply(v193, []any{v209})
v211 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v212 := v211.FindInternedVar(lang.NewSymbol("list"))
if v212.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v212)))
}
v213 := v212.Get()
v214 := lang.Apply(v213, []any{lang.NewSymbol("glojure.lang.PersistentArrayMap/EMPTY")})
v215 := lang.Apply(v166, []any{v170, v190, v210, v214})
v216 := lang.Apply(v163, []any{v215})
v217 := lang.Apply(v160, []any{v216})
v218 := lang.Apply(v97, []any{v101, v121, v157, v217})
v219 := lang.Apply(v94, []any{v218})
v220 := lang.Apply(v91, []any{v219})
v221 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v222 := v221.FindInternedVar(lang.NewSymbol("list"))
if v222.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v222)))
}
v223 := v222.Get()
v224 := lang.Apply(v223, []any{v24})
v225 := lang.Apply(v64, []any{v68, v88, v220, v224})
v226 := lang.Apply(v61, []any{v225})
v227 := lang.Apply(v46, []any{v58, v226})
v228 := lang.Apply(v43, []any{v227})
var v40 any = v228
_ = v40
v231 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v232 := v231.FindInternedVar(lang.NewSymbol("reduce1"))
if v232.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v232)))
}
v233 := v232.Get()
var v234 lang.FnFunc
v234 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v235 := args[0]
v236 := args[1]
var v237 any
v238 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v239 := v238.FindInternedVar(lang.NewSymbol("keyword?"))
if v239.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v239)))
}
v240 := v239.Get()
v241 := lang.Apply(v240, []any{v236})
if lang.IsTruthy(v241) {
v243 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v244 := v243.FindInternedVar(lang.NewSymbol("namespace"))
if v244.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v244)))
}
v245 := v244.Get()
v246 := lang.Apply(v245, []any{v236})
var v242 any = v246
_ = v242
v248 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v249 := v248.FindInternedVar(lang.NewSymbol("name"))
if v249.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v249)))
}
v250 := v249.Get()
v251 := lang.Apply(v250, []any{v236})
var v247 any = v251
_ = v247
var v253 any
v254 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v255 := v254.FindInternedVar(lang.NewSymbol("="))
if v255.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v255)))
}
v256 := v255.Get()
v257 := lang.Apply(v256, []any{v247, "keys"})
if lang.IsTruthy(v257) {
v258 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v259 := v258.FindInternedVar(lang.NewSymbol("assoc"))
if v259.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v259)))
}
v260 := v259.Get()
var v261 lang.FnFunc
v261 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v262 := args[0]
v263 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v264 := v263.FindInternedVar(lang.NewSymbol("keyword"))
if v264.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v264)))
}
v265 := v264.Get()
var v266 any = v242
_ = v266
var v268 any
if lang.IsTruthy(v266) {
v268 = v266
} else {
v269 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v270 := v269.FindInternedVar(lang.NewSymbol("namespace"))
if v270.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v270)))
}
v271 := v270.Get()
v272 := lang.Apply(v271, []any{v262})
v268 = v272
}
v266 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v267 := v266.FindInternedVar(lang.NewSymbol("name"))
if v267.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v267)))
}
v268 := v267.Get()
v269 := lang.Apply(v268, []any{v262})
v270 := lang.Apply(v265, []any{v268, v269})
return v270
})
v262 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4460), lang.NewKeyword("column"), int(93), lang.NewKeyword("end-line"), int(4460), lang.NewKeyword("end-column"), int(135))
v263, err := lang.WithMeta(v261, v262.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v264 := lang.Apply(v260, []any{v235, v236, v263})
v253 = v264
} else {
var v265 any
v266 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v267 := v266.FindInternedVar(lang.NewSymbol("="))
if v267.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v267)))
}
v268 := v267.Get()
v269 := lang.Apply(v268, []any{v247, "syms"})
if lang.IsTruthy(v269) {
v270 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v271 := v270.FindInternedVar(lang.NewSymbol("assoc"))
if v271.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v271)))
}
v272 := v271.Get()
var v273 lang.FnFunc
v273 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v274 := args[0]
v275 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v276 := v275.FindInternedVar(lang.NewSymbol("list"))
if v276.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v276)))
}
v277 := v276.Get()
v278 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v279 := v278.FindInternedVar(lang.NewSymbol("symbol"))
if v279.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v279)))
}
v280 := v279.Get()
var v281 any = v242
_ = v281
var v283 any
if lang.IsTruthy(v281) {
v283 = v281
} else {
v284 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v285 := v284.FindInternedVar(lang.NewSymbol("namespace"))
if v285.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v285)))
}
v286 := v285.Get()
v287 := lang.Apply(v286, []any{v274})
v283 = v287
}
v281 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v282 := v281.FindInternedVar(lang.NewSymbol("name"))
if v282.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v282)))
}
v283 := v282.Get()
v284 := lang.Apply(v283, []any{v274})
v285 := lang.Apply(v280, []any{v283, v284})
v286 := lang.Apply(v277, []any{lang.NewSymbol("quote"), v285})
return v286
})
v274 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4461), lang.NewKeyword("column"), int(93), lang.NewKeyword("end-line"), int(4461), lang.NewKeyword("end-column"), int(148))
v275, err := lang.WithMeta(v273, v274.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v276 := lang.Apply(v272, []any{v235, v236, v275})
v265 = v276
} else {
var v277 any
v278 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v279 := v278.FindInternedVar(lang.NewSymbol("="))
if v279.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v279)))
}
v280 := v279.Get()
v281 := lang.Apply(v280, []any{v247, "strs"})
if lang.IsTruthy(v281) {
v282 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v283 := v282.FindInternedVar(lang.NewSymbol("assoc"))
if v283.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v283)))
}
v284 := v283.Get()
v285 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v286 := v285.FindInternedVar(lang.NewSymbol("str"))
if v286.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v286)))
}
v287 := v286.Get()
v288 := lang.Apply(v284, []any{v235, v236, v287})
v277 = v288
} else {
var v289 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v289 = v235
} else {
v289 = nil
}
v277 = v289
}
v265 = v277
}
v253 = v265
}
v237 = v253
} else {
v237 = v235
}
return v237
})
v235 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4456), lang.NewKeyword("column"), int(45), lang.NewKeyword("end-line"), int(4464), lang.NewKeyword("end-column"), int(60))
v236, err := lang.WithMeta(v234, v235.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v237 := lang.NewMap()
v238 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4465), lang.NewKeyword("column"), int(45), lang.NewKeyword("end-line"), int(4465), lang.NewKeyword("end-column"), int(46))
v239, err := lang.WithMeta(v237, v238.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v240 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v241 := v240.FindInternedVar(lang.NewSymbol("keys"))
if v241.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v241)))
}
v242 := v241.Get()
v243 := lang.Apply(v242, []any{v22})
v244 := lang.Apply(v233, []any{v236, v239, v243})
var v230 any = v244
_ = v230
v246 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v247 := v246.FindInternedVar(lang.NewSymbol("reduce1"))
if v247.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v247)))
}
v248 := v247.Get()
var v249 lang.FnFunc
v249 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v250 := args[0]
v251 := args[1]
v252 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v253 := v252.FindInternedVar(lang.NewSymbol("reduce1"))
if v253.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v253)))
}
v254 := v253.Get()
var v255 lang.FnFunc
v255 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v256 := args[0]
v257 := args[1]
v258 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v259 := v258.FindInternedVar(lang.NewSymbol("assoc"))
if v259.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v259)))
}
v260 := v259.Get()
v261 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v262 := v261.FindInternedVar(lang.NewSymbol("val"))
if v262.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v262)))
}
v263 := v262.Get()
v264 := lang.Apply(v263, []any{v251})
v265 := lang.Apply(v264, []any{v257})
v266 := lang.Apply(v260, []any{v256, v257, v265})
return v266
})
v256 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4469), lang.NewKeyword("column"), int(52), lang.NewKeyword("end-line"), int(4469), lang.NewKeyword("end-column"), int(82))
v257, err := lang.WithMeta(v255, v256.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v258 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v259 := v258.FindInternedVar(lang.NewSymbol("dissoc"))
if v259.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v259)))
}
v260 := v259.Get()
v261 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v262 := v261.FindInternedVar(lang.NewSymbol("key"))
if v262.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v262)))
}
v263 := v262.Get()
v264 := lang.Apply(v263, []any{v251})
v265 := lang.Apply(v260, []any{v250, v264})
v266 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v267 := v266.FindInternedVar(lang.NewSymbol("key"))
if v267.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v267)))
}
v268 := v267.Get()
v269 := lang.Apply(v268, []any{v251})
v270 := lang.Apply(v269, []any{v250})
v271 := lang.Apply(v254, []any{v257, v265, v270})
return v271
})
v250 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4468), lang.NewKeyword("column"), int(41), lang.NewKeyword("end-line"), int(4471), lang.NewKeyword("end-column"), int(70))
v251, err := lang.WithMeta(v249, v250.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v252 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v253 := v252.FindInternedVar(lang.NewSymbol("dissoc"))
if v253.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v253)))
}
v254 := v253.Get()
v255 := lang.Apply(v254, []any{v22, lang.NewKeyword("as"), lang.NewKeyword("or")})
v256 := lang.Apply(v248, []any{v251, v255, v230})
var v229 any = v256
_ = v229
var v230 any
for {
var v231 any
v232 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v233 := v232.FindInternedVar(lang.NewSymbol("seq"))
if v233.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v233)))
}
v234 := v233.Get()
v235 := lang.Apply(v234, []any{v229})
if lang.IsTruthy(v235) {
v237 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v238 := v237.FindInternedVar(lang.NewSymbol("key"))
if v238.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v238)))
}
v239 := v238.Get()
v240 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v241 := v240.FindInternedVar(lang.NewSymbol("first"))
if v241.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v241)))
}
v242 := v241.Get()
v243 := lang.Apply(v242, []any{v229})
v244 := lang.Apply(v239, []any{v243})
var v236 any = v244
_ = v236
v246 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v247 := v246.FindInternedVar(lang.NewSymbol("val"))
if v247.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v247)))
}
v248 := v247.Get()
v249 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v250 := v249.FindInternedVar(lang.NewSymbol("first"))
if v250.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v250)))
}
v251 := v250.Get()
v252 := lang.Apply(v251, []any{v229})
v253 := lang.Apply(v248, []any{v252})
var v245 any = v253
_ = v245
var v255 any
v256 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v257 := v256.FindInternedVar(lang.NewSymbol("instance?"))
if v257.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v257)))
}
v258 := v257.Get()
v259 := lang.Apply(v258, []any{lang.Named, v236})
if lang.IsTruthy(v259) {
v260 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v261 := v260.FindInternedVar(lang.NewSymbol("with-meta"))
if v261.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v261)))
}
v262 := v261.Get()
v263 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v264 := v263.FindInternedVar(lang.NewSymbol("symbol"))
if v264.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v264)))
}
v265 := v264.Get()
v266 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v267 := v266.FindInternedVar(lang.NewSymbol("name"))
if v267.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v267)))
}
v268 := v267.Get()
v269 := lang.Apply(v268, []any{v236})
v270 := lang.Apply(v265, []any{nil, v269})
v271 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v272 := v271.FindInternedVar(lang.NewSymbol("meta"))
if v272.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v272)))
}
v273 := v272.Get()
v274 := lang.Apply(v273, []any{v236})
v275 := lang.Apply(v262, []any{v270, v274})
v255 = v275
} else {
v255 = v236
}
var v254 any = v255
_ = v254
var v277 any
v278 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v279 := v278.FindInternedVar(lang.NewSymbol("contains?"))
if v279.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v279)))
}
v280 := v279.Get()
v281 := lang.Apply(v280, []any{v37, v254})
if lang.IsTruthy(v281) {
v282 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v283 := v282.FindInternedVar(lang.NewSymbol("list"))
if v283.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v283)))
}
v284 := v283.Get()
v285 := lang.Apply(v37, []any{v254})
v286 := lang.Apply(v284, []any{lang.NewSymbol("glojure.core/get"), v24, v245, v285})
v277 = v286
} else {
v287 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v288 := v287.FindInternedVar(lang.NewSymbol("list"))
if v288.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v288)))
}
v289 := v288.Get()
v290 := lang.Apply(v289, []any{lang.NewSymbol("glojure.core/get"), v24, v245})
v277 = v290
}
var v276 any = v277
_ = v276
var v293 any
v294 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v295 := v294.FindInternedVar(lang.NewSymbol("ident?"))
if v295.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v295)))
}
v296 := v295.Get()
v297 := lang.Apply(v296, []any{v236})
if lang.IsTruthy(v297) {
v298 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v299 := v298.FindInternedVar(lang.NewSymbol("conj"))
if v299.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v299)))
}
v300 := v299.Get()
v301 := lang.Apply(v300, []any{v40, v254, v276})
v293 = v301
} else {
v302 := lang.Apply(v11, []any{v40, v236, v276})
v293 = v302
}
var v292 any = v293
v304 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v305 := v304.FindInternedVar(lang.NewSymbol("next"))
if v305.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v305)))
}
v306 := v305.Get()
v307 := lang.Apply(v306, []any{v229})
var v303 any = v307
v40 = v292
v229 = v303
continue
} else {
v231 = v40
}
v230 = v231
  break
}
return v230
})
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4440), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(4485), lang.NewKeyword("end-column"), int(34))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v19 any = v22
_ = v19
var v24 any
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("symbol?"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v13})
if lang.IsTruthy(v28) {
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("conj"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("conj"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v12, v13})
v36 := lang.Apply(v31, []any{v35, v14})
v24 = v36
} else {
var v37 any
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("vector?"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v13})
if lang.IsTruthy(v41) {
v42 := lang.Apply(v15, []any{v12, v13, v14})
v37 = v42
} else {
var v43 any
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("map?"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v13})
if lang.IsTruthy(v47) {
v48 := lang.Apply(v19, []any{v12, v13, v14})
v43 = v48
} else {
var v49 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("str"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{"Unsupported binding form: ", v13})
v54 := lang.Apply(errors6.New, []any{v53})
panic(v54)
} else {
v49 = nil
}
v43 = v49
}
v37 = v43
}
v24 = v37
}
return v24
})
v11 := v10
_ = v11
}
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4402), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(4490), lang.NewKeyword("end-column"), int(82))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v9 any = v12
_ = v9
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("first"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v16})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("second"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v16})
v25 := lang.Apply(v9, []any{v15, v20, v24})
return v25
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4491), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(4491), lang.NewKeyword("end-column"), int(66))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v13 any = v16
_ = v13
var v18 any
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("every?"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("symbol?"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("map"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("first"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v27, []any{v30, v4})
v32 := lang.Apply(v21, []any{v24, v31})
if lang.IsTruthy(v32) {
v18 = v3
} else {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("reduce1"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.NewVector()
v37 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4494), lang.NewKeyword("column"), int(30), lang.NewKeyword("end-line"), int(4494), lang.NewKeyword("end-column"), int(31))
v38, err := lang.WithMeta(v36, v37.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v39 := lang.Apply(v35, []any{v13, v38, v4})
v18 = v39
}
return v18
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// disj
{
v0 := lang.NewSymbol("disj").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("set")), lang.NewVector(lang.NewSymbol("set"), lang.NewSymbol("key")), lang.NewVector(lang.NewSymbol("set"), lang.NewSymbol("key"), lang.NewSymbol("&"), lang.NewSymbol("ks"))), lang.NewKeyword("doc"), "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1514), lang.NewKeyword("end-line"), int(1514))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
return v3
  case 2:
v3 := args[0]
v4 := args[1]
var v5 any
if lang.IsTruthy(v3) {
v6, _ := lang.FieldOrMethod(v3, "Disjoin")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Disjoin is not a function")))
}
v7 := lang.Apply(v6, []any{v4})
v5 = v7
} else {
v5 = nil
}
return v5
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
recur_loop_304:
var v6 any
if lang.IsTruthy(v3) {
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("disj"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3, v4})
var v7 any = v11
_ = v7
var v13 any
if lang.IsTruthy(v5) {
var v14 any = v7
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("first"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v5})
var v15 any = v19
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("next"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v5})
var v20 any = v24
v3 = v14
v4 = v15
v5 = v20
goto recur_loop_304
} else {
v13 = v7
}
v6 = v13
} else {
v6 = nil
}
return v6
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// disj!
{
v0 := lang.NewSymbol("disj!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("set")), lang.NewVector(lang.NewSymbol("set"), lang.NewSymbol("key")), lang.NewVector(lang.NewSymbol("set"), lang.NewSymbol("key"), lang.NewSymbol("&"), lang.NewSymbol("ks"))), lang.NewKeyword("doc"), "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3401), lang.NewKeyword("end-line"), int(3401))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
return v3
  case 2:
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "Disjoin")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Disjoin is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
recur_loop_615:
v7, _ := lang.FieldOrMethod(v3, "Disjoin")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Disjoin is not a function")))
}
v8 := lang.Apply(v7, []any{v4})
var v6 any = v8
_ = v6
var v10 any
if lang.IsTruthy(v5) {
var v11 any = v6
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("first"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v5})
var v12 any = v16
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("next"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v5})
var v17 any = v21
v3 = v11
v4 = v12
v5 = v17
goto recur_loop_615
} else {
v10 = v6
}
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// dissoc
{
v0 := lang.NewSymbol("dissoc").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("map")), lang.NewVector(lang.NewSymbol("map"), lang.NewSymbol("key")), lang.NewVector(lang.NewSymbol("map"), lang.NewSymbol("key"), lang.NewSymbol("&"), lang.NewSymbol("ks"))), lang.NewKeyword("doc"), "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1500), lang.NewKeyword("end-line"), int(1500))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
return v3
  case 2:
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(runtime5.RT, "Dissoc")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Dissoc is not a function")))
}
v6 := lang.Apply(v5, []any{v3, v4})
return v6
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
recur_loop_301:
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("dissoc"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3, v4})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v5) {
var v13 any = v6
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v5})
var v14 any = v18
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("next"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v5})
var v19 any = v23
v3 = v13
v4 = v14
v5 = v19
goto recur_loop_301
} else {
v12 = v6
}
return v12
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// dissoc!
{
v0 := lang.NewSymbol("dissoc!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("map"), lang.NewSymbol("key")), lang.NewVector(lang.NewSymbol("map"), lang.NewSymbol("key"), lang.NewSymbol("&"), lang.NewSymbol("ks"))), lang.NewKeyword("doc"), "Returns a transient map that doesn't contain a mapping for key(s).", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3382), lang.NewKeyword("end-line"), int(3382))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "without")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("without is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
recur_loop_611:
v7, _ := lang.FieldOrMethod(v3, "without")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("without is not a function")))
}
v8 := lang.Apply(v7, []any{v4})
var v6 any = v8
_ = v6
var v10 any
if lang.IsTruthy(v5) {
var v11 any = v6
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("first"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v5})
var v12 any = v16
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("next"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v5})
var v17 any = v21
v3 = v11
v4 = v12
v5 = v17
goto recur_loop_611
} else {
v10 = v6
}
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// distinct
{
v0 := lang.NewSymbol("distinct").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5053), lang.NewKeyword("end-line"), int(5053))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("volatile!"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.CreatePersistentTreeSet()
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5060), lang.NewKeyword("column"), int(28), lang.NewKeyword("end-line"), int(5060), lang.NewKeyword("end-column"), int(30))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v12 := lang.Apply(v8, []any{v11})
var v5 any = v12
_ = v5
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v15 := lang.Apply(v4, nil)
return v15
  case 1:
v15 := args[0]
v16 := lang.Apply(v4, []any{v15})
return v16
  case 2:
v15 := args[0]
v16 := args[1]
var v17 any
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("contains?"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("deref"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v5})
v25 := lang.Apply(v20, []any{v24, v16})
if lang.IsTruthy(v25) {
v17 = v15
} else {
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("conj"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29, ok := lang.FieldOrMethod(v5, "Deref")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v5, "Deref")))
}
var v30 any
switch reflect.TypeOf(v29).Kind() {
case reflect.Func:
  v30 = lang.Apply(v29, nil)
default:
  v30 = v29
}
v31 := lang.Apply(v28, []any{v30, v16})
v32, _ := lang.FieldOrMethod(v5, "reset")
if reflect.TypeOf(v32).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("reset is not a function")))
}
v33 := lang.Apply(v32, []any{v31})
_ = v33
v34 := lang.Apply(v4, []any{v15, v16})
v17 = v34
}
return v17
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5061), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(5068), lang.NewKeyword("end-column"), int(37))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v16
})
v4 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5059), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(5068), lang.NewKeyword("end-column"), int(39))
v5, err := lang.WithMeta(v3, v4.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v5
  case 1:
v3 := args[0]
var v5 lang.FnFunc
{ // function step
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := args[0]
v8 := args[1]
var v9 lang.FnFunc
v9 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
var v10 lang.FnFunc
v10 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v11 := args[0]
v12 := args[1]
recur_loop_877:
var v13 any = v11
_ = v13
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("nth"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v13, int64(0), nil})
var v14 any = v18
_ = v14
var v19 any = v13
_ = v19
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v19})
var v21 any = v25
_ = v21
var v27 any
if lang.IsTruthy(v21) {
var v28 any = v21
_ = v28
var v30 any
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("contains?"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v12, v14})
if lang.IsTruthy(v34) {
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("rest"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v28})
var v35 any = v39
var v40 any = v12
v11 = v35
v12 = v40
goto recur_loop_877
} else {
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("cons"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("rest"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v28})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("conj"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v12, v14})
v52 := lang.Apply(v6, []any{v47, v51})
v53 := lang.Apply(v43, []any{v14, v52})
v30 = v53
}
v27 = v30
} else {
v27 = nil
}
return v27
})
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5072), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(5076), lang.NewKeyword("end-column"), int(66))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v13 := lang.Apply(v12, []any{v7, v8})
return v13
})
v10 := lang.Apply(lang.NewLazySeq, []any{v9})
return v10
})
v6 := v5
_ = v6
}
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5070), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(5077), lang.NewKeyword("end-column"), int(29))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v4 any = v7
_ = v4
v9 := lang.CreatePersistentTreeSet()
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5078), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(5078), lang.NewKeyword("end-column"), int(19))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v12 := lang.Apply(v4, []any{v3, v11})
return v12
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// distinct?
{
v1 := reflect.TypeOf(false)
v0 := lang.NewSymbol("distinct?").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "Returns true if no two of the arguments are =", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5664), lang.NewKeyword("end-line"), int(5664))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
return true
  case 2:
v4 := args[0]
v5 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("not"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("="))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v4, v5})
v13 := lang.Apply(v8, []any{v12})
return v13
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := lang.NewList(args[2:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("not="))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4, v5})
if lang.IsTruthy(v11) {
v13 := lang.CreatePersistentTreeSet(v4, v5)
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5673), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(5673), lang.NewKeyword("end-column"), int(20))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v12 any = v15
_ = v12
var v16 any = v6
_ = v16
var v17 any = v16
_ = v17
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("seq"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v17})
var v18 any = v22
_ = v18
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("first"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v18})
var v23 any = v27
_ = v23
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("next"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v28})
var v28 any = v32
_ = v28
var v33 any = v23
_ = v33
var v34 any = v28
_ = v34
var v35 any = v17
_ = v35
var v37 any = v37
_ = v37
var v38 any = v38
_ = v38
var v39 any
for {
var v40 any = v40
_ = v40
var v41 any = v38
_ = v41
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("seq"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v41})
var v42 any = v46
_ = v42
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("first"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v42})
var v47 any = v51
_ = v47
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("next"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{v52})
var v52 any = v56
_ = v52
var v57 any = v47
_ = v57
var v58 any = v52
_ = v58
var v59 any = v41
_ = v59
var v61 any
if lang.IsTruthy(v59) {
var v62 any
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("contains?"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.Apply(v65, []any{v40, v57})
if lang.IsTruthy(v66) {
v62 = false
} else {
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("conj"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{v40, v57})
var v67 any = v71
var v72 any = v58
v37 = v67
v38 = v72
continue
}
v61 = v62
} else {
v61 = true
}
v39 = v61
  break
}
v7 = v39
} else {
v7 = false
}
return v7
  }
})
v4 := reflect.TypeOf(false)
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// doall
{
v0 := lang.NewSymbol("doall").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3131), lang.NewKeyword("end-line"), int(3131))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("dorun"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3})
_ = v7
return v3
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("dorun"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3, v4})
_ = v8
return v4
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// dorun
{
v0 := lang.NewSymbol("dorun").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3116), lang.NewKeyword("end-line"), int(3116))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
recur_loop_579:
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
var v11 any = v4
_ = v11
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("next"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v11})
var v13 any = v17
v3 = v13
goto recur_loop_579
} else {
v10 = nil
}
return v10
  case 2:
v3 := args[0]
v4 := args[1]
recur_loop_580:
var v5 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("pos?"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3})
v12 = v16
} else {
v12 = v6
}
if lang.IsTruthy(v12) {
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("dec"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
var v6 any = v10
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("next"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v4})
var v11 any = v15
v3 = v6
v4 = v11
goto recur_loop_580
} else {
v5 = nil
}
return v5
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// doseq
{
v0 := lang.NewSymbol("doseq").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("seq-exprs"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(3209), lang.NewKeyword("end-line"), int(3209))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("vector?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
if lang.IsTruthy(v11) {
v7 = nil
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("str"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("*ns*"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(lang.NewKeyword("line"), []any{v25})
v27 := lang.Apply(v14, []any{v18, " requires ", "a vector for its binding", " in ", v21, ":", v26})
v28 := lang.Apply(lang.NewIllegalArgumentError, []any{v27})
panic(v28)
}
_ = v7
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("even?"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v37 := lang.Apply(v32, []any{v36})
if lang.IsTruthy(v37) {
v29 = nil
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("first"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("*ns*"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("meta"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(lang.NewKeyword("line"), []any{v51})
v53 := lang.Apply(v40, []any{v44, " requires ", "an even number of forms in binding vector", " in ", v47, ":", v52})
v54 := lang.Apply(lang.NewIllegalArgumentError, []any{v53})
panic(v54)
}
_ = v29
_ = nil
var v56 lang.FnFunc
{ // function step
v56 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v58 := args[0]
v59 := args[1]
var v60 any
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("not"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v59})
if lang.IsTruthy(v64) {
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("seq"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("concat"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("list"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{lang.NewSymbol("do")})
v75 := lang.Apply(v70, []any{v74, v6})
v76 := lang.Apply(v67, []any{v75})
v77 := lang.NewVector(true, v76)
v78 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3220), lang.NewKeyword("column"), int(18), lang.NewKeyword("end-line"), int(3220), lang.NewKeyword("end-column"), int(36))
v79, err := lang.WithMeta(v77, v78.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v60 = v79
} else {
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("first"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.Apply(v83, []any{v59})
var v80 any = v84
_ = v80
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("second"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.Apply(v88, []any{v59})
var v85 any = v89
_ = v85
var v91 any
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("keyword?"))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.Apply(v94, []any{v80})
if lang.IsTruthy(v95) {
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("nnext"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.Apply(v99, []any{v59})
v101 := lang.Apply(v57, []any{v58, v100})
var v96 any = v101
_ = v96
v103 := lang.Apply(v96, []any{int64(0)})
var v102 any = v103
_ = v102
v105 := lang.Apply(v96, []any{int64(1)})
var v104 any = v105
_ = v104
var v107 any
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("="))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.Apply(v110, []any{v80, lang.NewKeyword("let")})
if lang.IsTruthy(v111) {
v112 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v113 := v112.FindInternedVar(lang.NewSymbol("seq"))
if v113.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v113)))
}
v114 := v113.Get()
v115 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v116 := v115.FindInternedVar(lang.NewSymbol("concat"))
if v116.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v116)))
}
v117 := v116.Get()
v118 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v119 := v118.FindInternedVar(lang.NewSymbol("list"))
if v119.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v119)))
}
v120 := v119.Get()
v121 := lang.Apply(v120, []any{lang.NewSymbol("glojure.core/let")})
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("list"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.Apply(v124, []any{v85})
v126 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v127 := v126.FindInternedVar(lang.NewSymbol("list"))
if v127.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v127)))
}
v128 := v127.Get()
v129 := lang.Apply(v128, []any{v104})
v130 := lang.Apply(v117, []any{v121, v125, v129})
v131 := lang.Apply(v114, []any{v130})
v132 := lang.NewVector(v102, v131)
v133 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3228), lang.NewKeyword("column"), int(37), lang.NewKeyword("end-line"), int(3228), lang.NewKeyword("end-column"), int(64))
v134, err := lang.WithMeta(v132, v133.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v107 = v134
} else {
var v135 any
v136 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v137 := v136.FindInternedVar(lang.NewSymbol("="))
if v137.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v137)))
}
v138 := v137.Get()
v139 := lang.Apply(v138, []any{v80, lang.NewKeyword("while")})
if lang.IsTruthy(v139) {
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("seq"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("concat"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("list"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.Apply(v148, []any{lang.NewSymbol("glojure.core/when")})
v150 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v151 := v150.FindInternedVar(lang.NewSymbol("list"))
if v151.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v151)))
}
v152 := v151.Get()
v153 := lang.Apply(v152, []any{v85})
v154 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v155 := v154.FindInternedVar(lang.NewSymbol("list"))
if v155.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v155)))
}
v156 := v155.Get()
v157 := lang.Apply(v156, []any{v104})
var v158 any
if lang.IsTruthy(v102) {
v159 := lang.NewVector(v58)
v160 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3231), lang.NewKeyword("column"), int(65), lang.NewKeyword("end-line"), int(3231), lang.NewKeyword("end-column"), int(73))
v161, err := lang.WithMeta(v159, v160.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v158 = v161
} else {
v158 = nil
}
v162 := lang.Apply(v145, []any{v149, v153, v157, v158})
v163 := lang.Apply(v142, []any{v162})
v164 := lang.NewVector(false, v163)
v165 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3229), lang.NewKeyword("column"), int(39), lang.NewKeyword("end-line"), int(3231), lang.NewKeyword("end-column"), int(76))
v166, err := lang.WithMeta(v164, v165.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v135 = v166
} else {
var v167 any
v168 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v169 := v168.FindInternedVar(lang.NewSymbol("="))
if v169.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v169)))
}
v170 := v169.Get()
v171 := lang.Apply(v170, []any{v80, lang.NewKeyword("when")})
if lang.IsTruthy(v171) {
v172 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v173 := v172.FindInternedVar(lang.NewSymbol("seq"))
if v173.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v173)))
}
v174 := v173.Get()
v175 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v176 := v175.FindInternedVar(lang.NewSymbol("concat"))
if v176.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v176)))
}
v177 := v176.Get()
v178 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v179 := v178.FindInternedVar(lang.NewSymbol("list"))
if v179.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v179)))
}
v180 := v179.Get()
v181 := lang.Apply(v180, []any{lang.NewSymbol("if")})
v182 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v183 := v182.FindInternedVar(lang.NewSymbol("list"))
if v183.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v183)))
}
v184 := v183.Get()
v185 := lang.Apply(v184, []any{v85})
v186 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v187 := v186.FindInternedVar(lang.NewSymbol("list"))
if v187.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v187)))
}
v188 := v187.Get()
v189 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v190 := v189.FindInternedVar(lang.NewSymbol("seq"))
if v190.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v190)))
}
v191 := v190.Get()
v192 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v193 := v192.FindInternedVar(lang.NewSymbol("concat"))
if v193.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v193)))
}
v194 := v193.Get()
v195 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v196 := v195.FindInternedVar(lang.NewSymbol("list"))
if v196.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v196)))
}
v197 := v196.Get()
v198 := lang.Apply(v197, []any{lang.NewSymbol("do")})
v199 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v200 := v199.FindInternedVar(lang.NewSymbol("list"))
if v200.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v200)))
}
v201 := v200.Get()
v202 := lang.Apply(v201, []any{v104})
var v203 any
if lang.IsTruthy(v102) {
v204 := lang.NewVector(v58)
v205 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3235), lang.NewKeyword("column"), int(66), lang.NewKeyword("end-line"), int(3235), lang.NewKeyword("end-column"), int(74))
v206, err := lang.WithMeta(v204, v205.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v203 = v206
} else {
v203 = nil
}
v207 := lang.Apply(v194, []any{v198, v202, v203})
v208 := lang.Apply(v191, []any{v207})
v209 := lang.Apply(v188, []any{v208})
v210 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v211 := v210.FindInternedVar(lang.NewSymbol("list"))
if v211.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v211)))
}
v212 := v211.Get()
v213 := lang.Apply(v212, []any{v58})
v214 := lang.Apply(v177, []any{v181, v185, v209, v213})
v215 := lang.Apply(v174, []any{v214})
v216 := lang.NewVector(false, v215)
v217 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3232), lang.NewKeyword("column"), int(38), lang.NewKeyword("end-line"), int(3236), lang.NewKeyword("end-column"), int(57))
v218, err := lang.WithMeta(v216, v217.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v167 = v218
} else {
v167 = nil
}
v135 = v167
}
v107 = v135
}
v91 = v107
} else {
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("gensym"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.Apply(v99, []any{"seq_"})
var v96 any = v100
_ = v96
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("with-meta"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("gensym"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
v108 := lang.Apply(v107, []any{"chunk_"})
v109 := lang.NewMap(lang.NewKeyword("tag"), lang.NewSymbol("glojure.lang.IChunk"))
v110 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3239), lang.NewKeyword("column"), int(46), lang.NewKeyword("end-line"), int(3239), lang.NewKeyword("end-column"), int(72))
v111, err := lang.WithMeta(v109, v110.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v112 := lang.Apply(v104, []any{v108, v111})
var v101 any = v112
_ = v101
v114 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v115 := v114.FindInternedVar(lang.NewSymbol("gensym"))
if v115.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v115)))
}
v116 := v115.Get()
v117 := lang.Apply(v116, []any{"count_"})
var v113 any = v117
_ = v113
v119 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v120 := v119.FindInternedVar(lang.NewSymbol("gensym"))
if v120.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v120)))
}
v121 := v120.Get()
v122 := lang.Apply(v121, []any{"i_"})
var v118 any = v122
_ = v118
v124 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v125 := v124.FindInternedVar(lang.NewSymbol("seq"))
if v125.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v125)))
}
v126 := v125.Get()
v127 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v128 := v127.FindInternedVar(lang.NewSymbol("concat"))
if v128.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v128)))
}
v129 := v128.Get()
v130 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v131 := v130.FindInternedVar(lang.NewSymbol("list"))
if v131.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v131)))
}
v132 := v131.Get()
v133 := lang.Apply(v132, []any{lang.NewSymbol("recur")})
v134 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v135 := v134.FindInternedVar(lang.NewSymbol("list"))
if v135.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v135)))
}
v136 := v135.Get()
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("seq"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("concat"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("list"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.Apply(v145, []any{lang.NewSymbol("glojure.core/next")})
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("list"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.Apply(v149, []any{v96})
v151 := lang.Apply(v142, []any{v146, v150})
v152 := lang.Apply(v139, []any{v151})
v153 := lang.Apply(v136, []any{v152})
v154 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v155 := v154.FindInternedVar(lang.NewSymbol("list"))
if v155.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v155)))
}
v156 := v155.Get()
v157 := lang.Apply(v156, []any{nil})
v158 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v159 := v158.FindInternedVar(lang.NewSymbol("list"))
if v159.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v159)))
}
v160 := v159.Get()
v161 := lang.Apply(v160, []any{int64(0)})
v162 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v163 := v162.FindInternedVar(lang.NewSymbol("list"))
if v163.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v163)))
}
v164 := v163.Get()
v165 := lang.Apply(v164, []any{int64(0)})
v166 := lang.Apply(v129, []any{v133, v153, v157, v161, v165})
v167 := lang.Apply(v126, []any{v166})
var v123 any = v167
_ = v123
v169 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v170 := v169.FindInternedVar(lang.NewSymbol("nnext"))
if v170.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v170)))
}
v171 := v170.Get()
v172 := lang.Apply(v171, []any{v59})
v173 := lang.Apply(v57, []any{v123, v172})
var v168 any = v173
_ = v168
v175 := lang.Apply(v168, []any{int64(0)})
var v174 any = v175
_ = v174
v177 := lang.Apply(v168, []any{int64(1)})
var v176 any = v177
_ = v176
v179 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v180 := v179.FindInternedVar(lang.NewSymbol("seq"))
if v180.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v180)))
}
v181 := v180.Get()
v182 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v183 := v182.FindInternedVar(lang.NewSymbol("concat"))
if v183.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v183)))
}
v184 := v183.Get()
v185 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v186 := v185.FindInternedVar(lang.NewSymbol("list"))
if v186.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v186)))
}
v187 := v186.Get()
v188 := lang.Apply(v187, []any{lang.NewSymbol("recur")})
v189 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v190 := v189.FindInternedVar(lang.NewSymbol("list"))
if v190.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v190)))
}
v191 := v190.Get()
v192 := lang.Apply(v191, []any{v96})
v193 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v194 := v193.FindInternedVar(lang.NewSymbol("list"))
if v194.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v194)))
}
v195 := v194.Get()
v196 := lang.Apply(v195, []any{v101})
v197 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v198 := v197.FindInternedVar(lang.NewSymbol("list"))
if v198.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v198)))
}
v199 := v198.Get()
v200 := lang.Apply(v199, []any{v113})
v201 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v202 := v201.FindInternedVar(lang.NewSymbol("list"))
if v202.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v202)))
}
v203 := v202.Get()
v204 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v205 := v204.FindInternedVar(lang.NewSymbol("seq"))
if v205.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v205)))
}
v206 := v205.Get()
v207 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v208 := v207.FindInternedVar(lang.NewSymbol("concat"))
if v208.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v208)))
}
v209 := v208.Get()
v210 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v211 := v210.FindInternedVar(lang.NewSymbol("list"))
if v211.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v211)))
}
v212 := v211.Get()
v213 := lang.Apply(v212, []any{lang.NewSymbol("glojure.core/unchecked-inc")})
v214 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v215 := v214.FindInternedVar(lang.NewSymbol("list"))
if v215.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v215)))
}
v216 := v215.Get()
v217 := lang.Apply(v216, []any{v118})
v218 := lang.Apply(v209, []any{v213, v217})
v219 := lang.Apply(v206, []any{v218})
v220 := lang.Apply(v203, []any{v219})
v221 := lang.Apply(v184, []any{v188, v192, v196, v200, v220})
v222 := lang.Apply(v181, []any{v221})
var v178 any = v222
_ = v178
v224 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v225 := v224.FindInternedVar(lang.NewSymbol("nnext"))
if v225.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v225)))
}
v226 := v225.Get()
v227 := lang.Apply(v226, []any{v59})
v228 := lang.Apply(v57, []any{v178, v227})
var v223 any = v228
_ = v223
v230 := lang.Apply(v223, []any{int64(1)})
var v229 any = v230
_ = v229
v232 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v233 := v232.FindInternedVar(lang.NewSymbol("seq"))
if v233.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v233)))
}
v234 := v233.Get()
v235 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v236 := v235.FindInternedVar(lang.NewSymbol("concat"))
if v236.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v236)))
}
v237 := v236.Get()
v238 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v239 := v238.FindInternedVar(lang.NewSymbol("list"))
if v239.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v239)))
}
v240 := v239.Get()
v241 := lang.Apply(v240, []any{lang.NewSymbol("glojure.core/loop")})
v242 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v243 := v242.FindInternedVar(lang.NewSymbol("list"))
if v243.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v243)))
}
v244 := v243.Get()
v245 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v246 := v245.FindInternedVar(lang.NewSymbol("apply"))
if v246.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v246)))
}
v247 := v246.Get()
v248 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v249 := v248.FindInternedVar(lang.NewSymbol("vector"))
if v249.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v249)))
}
v250 := v249.Get()
v251 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v252 := v251.FindInternedVar(lang.NewSymbol("seq"))
if v252.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v252)))
}
v253 := v252.Get()
v254 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v255 := v254.FindInternedVar(lang.NewSymbol("concat"))
if v255.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v255)))
}
v256 := v255.Get()
v257 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v258 := v257.FindInternedVar(lang.NewSymbol("list"))
if v258.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v258)))
}
v259 := v258.Get()
v260 := lang.Apply(v259, []any{v96})
v261 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v262 := v261.FindInternedVar(lang.NewSymbol("list"))
if v262.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v262)))
}
v263 := v262.Get()
v264 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v265 := v264.FindInternedVar(lang.NewSymbol("seq"))
if v265.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v265)))
}
v266 := v265.Get()
v267 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v268 := v267.FindInternedVar(lang.NewSymbol("concat"))
if v268.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v268)))
}
v269 := v268.Get()
v270 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v271 := v270.FindInternedVar(lang.NewSymbol("list"))
if v271.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v271)))
}
v272 := v271.Get()
v273 := lang.Apply(v272, []any{lang.NewSymbol("glojure.core/seq")})
v274 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v275 := v274.FindInternedVar(lang.NewSymbol("list"))
if v275.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v275)))
}
v276 := v275.Get()
v277 := lang.Apply(v276, []any{v85})
v278 := lang.Apply(v269, []any{v273, v277})
v279 := lang.Apply(v266, []any{v278})
v280 := lang.Apply(v263, []any{v279})
v281 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v282 := v281.FindInternedVar(lang.NewSymbol("list"))
if v282.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v282)))
}
v283 := v282.Get()
v284 := lang.Apply(v283, []any{v101})
v285 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v286 := v285.FindInternedVar(lang.NewSymbol("list"))
if v286.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v286)))
}
v287 := v286.Get()
v288 := lang.Apply(v287, []any{nil})
v289 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v290 := v289.FindInternedVar(lang.NewSymbol("list"))
if v290.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v290)))
}
v291 := v290.Get()
v292 := lang.Apply(v291, []any{v113})
v293 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v294 := v293.FindInternedVar(lang.NewSymbol("list"))
if v294.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v294)))
}
v295 := v294.Get()
v296 := lang.Apply(v295, []any{int64(0)})
v297 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v298 := v297.FindInternedVar(lang.NewSymbol("list"))
if v298.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v298)))
}
v299 := v298.Get()
v300 := lang.Apply(v299, []any{v118})
v301 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v302 := v301.FindInternedVar(lang.NewSymbol("list"))
if v302.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v302)))
}
v303 := v302.Get()
v304 := lang.Apply(v303, []any{int64(0)})
v305 := lang.Apply(v256, []any{v260, v280, v284, v288, v292, v296, v300, v304})
v306 := lang.Apply(v253, []any{v305})
v307 := lang.Apply(v247, []any{v250, v306})
v308 := lang.Apply(v244, []any{v307})
v309 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v310 := v309.FindInternedVar(lang.NewSymbol("list"))
if v310.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v310)))
}
v311 := v310.Get()
v312 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v313 := v312.FindInternedVar(lang.NewSymbol("seq"))
if v313.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v313)))
}
v314 := v313.Get()
v315 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v316 := v315.FindInternedVar(lang.NewSymbol("concat"))
if v316.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v316)))
}
v317 := v316.Get()
v318 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v319 := v318.FindInternedVar(lang.NewSymbol("list"))
if v319.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v319)))
}
v320 := v319.Get()
v321 := lang.Apply(v320, []any{lang.NewSymbol("if")})
v322 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v323 := v322.FindInternedVar(lang.NewSymbol("list"))
if v323.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v323)))
}
v324 := v323.Get()
v325 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v326 := v325.FindInternedVar(lang.NewSymbol("seq"))
if v326.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v326)))
}
v327 := v326.Get()
v328 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v329 := v328.FindInternedVar(lang.NewSymbol("concat"))
if v329.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v329)))
}
v330 := v329.Get()
v331 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v332 := v331.FindInternedVar(lang.NewSymbol("list"))
if v332.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v332)))
}
v333 := v332.Get()
v334 := lang.Apply(v333, []any{lang.NewSymbol("glojure.core/<")})
v335 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v336 := v335.FindInternedVar(lang.NewSymbol("list"))
if v336.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v336)))
}
v337 := v336.Get()
v338 := lang.Apply(v337, []any{v118})
v339 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v340 := v339.FindInternedVar(lang.NewSymbol("list"))
if v340.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v340)))
}
v341 := v340.Get()
v342 := lang.Apply(v341, []any{v113})
v343 := lang.Apply(v330, []any{v334, v338, v342})
v344 := lang.Apply(v327, []any{v343})
v345 := lang.Apply(v324, []any{v344})
v346 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v347 := v346.FindInternedVar(lang.NewSymbol("list"))
if v347.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v347)))
}
v348 := v347.Get()
v349 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v350 := v349.FindInternedVar(lang.NewSymbol("seq"))
if v350.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v350)))
}
v351 := v350.Get()
v352 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v353 := v352.FindInternedVar(lang.NewSymbol("concat"))
if v353.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v353)))
}
v354 := v353.Get()
v355 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v356 := v355.FindInternedVar(lang.NewSymbol("list"))
if v356.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v356)))
}
v357 := v356.Get()
v358 := lang.Apply(v357, []any{lang.NewSymbol("glojure.core/let")})
v359 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v360 := v359.FindInternedVar(lang.NewSymbol("list"))
if v360.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v360)))
}
v361 := v360.Get()
v362 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v363 := v362.FindInternedVar(lang.NewSymbol("apply"))
if v363.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v363)))
}
v364 := v363.Get()
v365 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v366 := v365.FindInternedVar(lang.NewSymbol("vector"))
if v366.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v366)))
}
v367 := v366.Get()
v368 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v369 := v368.FindInternedVar(lang.NewSymbol("seq"))
if v369.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v369)))
}
v370 := v369.Get()
v371 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v372 := v371.FindInternedVar(lang.NewSymbol("concat"))
if v372.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v372)))
}
v373 := v372.Get()
v374 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v375 := v374.FindInternedVar(lang.NewSymbol("list"))
if v375.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v375)))
}
v376 := v375.Get()
v377 := lang.Apply(v376, []any{v80})
v378 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v379 := v378.FindInternedVar(lang.NewSymbol("list"))
if v379.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v379)))
}
v380 := v379.Get()
v381 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v382 := v381.FindInternedVar(lang.NewSymbol("seq"))
if v382.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v382)))
}
v383 := v382.Get()
v384 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v385 := v384.FindInternedVar(lang.NewSymbol("concat"))
if v385.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v385)))
}
v386 := v385.Get()
v387 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v388 := v387.FindInternedVar(lang.NewSymbol("list"))
if v388.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v388)))
}
v389 := v388.Get()
v390 := lang.Apply(v389, []any{lang.NewSymbol(".nth")})
v391 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v392 := v391.FindInternedVar(lang.NewSymbol("list"))
if v392.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v392)))
}
v393 := v392.Get()
v394 := lang.Apply(v393, []any{v101})
v395 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v396 := v395.FindInternedVar(lang.NewSymbol("list"))
if v396.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v396)))
}
v397 := v396.Get()
v398 := lang.Apply(v397, []any{v118})
v399 := lang.Apply(v386, []any{v390, v394, v398})
v400 := lang.Apply(v383, []any{v399})
v401 := lang.Apply(v380, []any{v400})
v402 := lang.Apply(v373, []any{v377, v401})
v403 := lang.Apply(v370, []any{v402})
v404 := lang.Apply(v364, []any{v367, v403})
v405 := lang.Apply(v361, []any{v404})
v406 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v407 := v406.FindInternedVar(lang.NewSymbol("list"))
if v407.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v407)))
}
v408 := v407.Get()
v409 := lang.Apply(v408, []any{v229})
var v410 any
if lang.IsTruthy(v174) {
v411 := lang.NewVector(v178)
v412 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3256), lang.NewKeyword("column"), int(48), lang.NewKeyword("end-line"), int(3256), lang.NewKeyword("end-column"), int(62))
v413, err := lang.WithMeta(v411, v412.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v410 = v413
} else {
v410 = nil
}
v414 := lang.Apply(v354, []any{v358, v405, v409, v410})
v415 := lang.Apply(v351, []any{v414})
v416 := lang.Apply(v348, []any{v415})
v417 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v418 := v417.FindInternedVar(lang.NewSymbol("list"))
if v418.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v418)))
}
v419 := v418.Get()
v420 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v421 := v420.FindInternedVar(lang.NewSymbol("seq"))
if v421.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v421)))
}
v422 := v421.Get()
v423 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v424 := v423.FindInternedVar(lang.NewSymbol("concat"))
if v424.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v424)))
}
v425 := v424.Get()
v426 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v427 := v426.FindInternedVar(lang.NewSymbol("list"))
if v427.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v427)))
}
v428 := v427.Get()
v429 := lang.Apply(v428, []any{lang.NewSymbol("glojure.core/when-let")})
v430 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v431 := v430.FindInternedVar(lang.NewSymbol("list"))
if v431.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v431)))
}
v432 := v431.Get()
v433 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v434 := v433.FindInternedVar(lang.NewSymbol("apply"))
if v434.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v434)))
}
v435 := v434.Get()
v436 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v437 := v436.FindInternedVar(lang.NewSymbol("vector"))
if v437.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v437)))
}
v438 := v437.Get()
v439 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v440 := v439.FindInternedVar(lang.NewSymbol("seq"))
if v440.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v440)))
}
v441 := v440.Get()
v442 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v443 := v442.FindInternedVar(lang.NewSymbol("concat"))
if v443.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v443)))
}
v444 := v443.Get()
v445 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v446 := v445.FindInternedVar(lang.NewSymbol("list"))
if v446.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v446)))
}
v447 := v446.Get()
v448 := lang.Apply(v447, []any{v96})
v449 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v450 := v449.FindInternedVar(lang.NewSymbol("list"))
if v450.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v450)))
}
v451 := v450.Get()
v452 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v453 := v452.FindInternedVar(lang.NewSymbol("seq"))
if v453.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v453)))
}
v454 := v453.Get()
v455 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v456 := v455.FindInternedVar(lang.NewSymbol("concat"))
if v456.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v456)))
}
v457 := v456.Get()
v458 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v459 := v458.FindInternedVar(lang.NewSymbol("list"))
if v459.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v459)))
}
v460 := v459.Get()
v461 := lang.Apply(v460, []any{lang.NewSymbol("glojure.core/seq")})
v462 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v463 := v462.FindInternedVar(lang.NewSymbol("list"))
if v463.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v463)))
}
v464 := v463.Get()
v465 := lang.Apply(v464, []any{v96})
v466 := lang.Apply(v457, []any{v461, v465})
v467 := lang.Apply(v454, []any{v466})
v468 := lang.Apply(v451, []any{v467})
v469 := lang.Apply(v444, []any{v448, v468})
v470 := lang.Apply(v441, []any{v469})
v471 := lang.Apply(v435, []any{v438, v470})
v472 := lang.Apply(v432, []any{v471})
v473 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v474 := v473.FindInternedVar(lang.NewSymbol("list"))
if v474.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v474)))
}
v475 := v474.Get()
v476 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v477 := v476.FindInternedVar(lang.NewSymbol("seq"))
if v477.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v477)))
}
v478 := v477.Get()
v479 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v480 := v479.FindInternedVar(lang.NewSymbol("concat"))
if v480.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v480)))
}
v481 := v480.Get()
v482 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v483 := v482.FindInternedVar(lang.NewSymbol("list"))
if v483.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v483)))
}
v484 := v483.Get()
v485 := lang.Apply(v484, []any{lang.NewSymbol("if")})
v486 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v487 := v486.FindInternedVar(lang.NewSymbol("list"))
if v487.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v487)))
}
v488 := v487.Get()
v489 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v490 := v489.FindInternedVar(lang.NewSymbol("seq"))
if v490.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v490)))
}
v491 := v490.Get()
v492 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v493 := v492.FindInternedVar(lang.NewSymbol("concat"))
if v493.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v493)))
}
v494 := v493.Get()
v495 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v496 := v495.FindInternedVar(lang.NewSymbol("list"))
if v496.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v496)))
}
v497 := v496.Get()
v498 := lang.Apply(v497, []any{lang.NewSymbol("glojure.core/chunked-seq?")})
v499 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v500 := v499.FindInternedVar(lang.NewSymbol("list"))
if v500.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v500)))
}
v501 := v500.Get()
v502 := lang.Apply(v501, []any{v96})
v503 := lang.Apply(v494, []any{v498, v502})
v504 := lang.Apply(v491, []any{v503})
v505 := lang.Apply(v488, []any{v504})
v506 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v507 := v506.FindInternedVar(lang.NewSymbol("list"))
if v507.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v507)))
}
v508 := v507.Get()
v509 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v510 := v509.FindInternedVar(lang.NewSymbol("seq"))
if v510.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v510)))
}
v511 := v510.Get()
v512 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v513 := v512.FindInternedVar(lang.NewSymbol("concat"))
if v513.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v513)))
}
v514 := v513.Get()
v515 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v516 := v515.FindInternedVar(lang.NewSymbol("list"))
if v516.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v516)))
}
v517 := v516.Get()
v518 := lang.Apply(v517, []any{lang.NewSymbol("glojure.core/let")})
v519 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v520 := v519.FindInternedVar(lang.NewSymbol("list"))
if v520.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v520)))
}
v521 := v520.Get()
v522 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v523 := v522.FindInternedVar(lang.NewSymbol("apply"))
if v523.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v523)))
}
v524 := v523.Get()
v525 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v526 := v525.FindInternedVar(lang.NewSymbol("vector"))
if v526.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v526)))
}
v527 := v526.Get()
v528 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v529 := v528.FindInternedVar(lang.NewSymbol("seq"))
if v529.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v529)))
}
v530 := v529.Get()
v531 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v532 := v531.FindInternedVar(lang.NewSymbol("concat"))
if v532.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v532)))
}
v533 := v532.Get()
v534 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v535 := v534.FindInternedVar(lang.NewSymbol("list"))
if v535.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v535)))
}
v536 := v535.Get()
v537 := lang.Apply(v536, []any{lang.NewSymbol("c__0__auto__")})
v538 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v539 := v538.FindInternedVar(lang.NewSymbol("list"))
if v539.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v539)))
}
v540 := v539.Get()
v541 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v542 := v541.FindInternedVar(lang.NewSymbol("seq"))
if v542.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v542)))
}
v543 := v542.Get()
v544 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v545 := v544.FindInternedVar(lang.NewSymbol("concat"))
if v545.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v545)))
}
v546 := v545.Get()
v547 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v548 := v547.FindInternedVar(lang.NewSymbol("list"))
if v548.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v548)))
}
v549 := v548.Get()
v550 := lang.Apply(v549, []any{lang.NewSymbol("glojure.core/chunk-first")})
v551 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v552 := v551.FindInternedVar(lang.NewSymbol("list"))
if v552.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v552)))
}
v553 := v552.Get()
v554 := lang.Apply(v553, []any{v96})
v555 := lang.Apply(v546, []any{v550, v554})
v556 := lang.Apply(v543, []any{v555})
v557 := lang.Apply(v540, []any{v556})
v558 := lang.Apply(v533, []any{v537, v557})
v559 := lang.Apply(v530, []any{v558})
v560 := lang.Apply(v524, []any{v527, v559})
v561 := lang.Apply(v521, []any{v560})
v562 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v563 := v562.FindInternedVar(lang.NewSymbol("list"))
if v563.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v563)))
}
v564 := v563.Get()
v565 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v566 := v565.FindInternedVar(lang.NewSymbol("seq"))
if v566.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v566)))
}
v567 := v566.Get()
v568 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v569 := v568.FindInternedVar(lang.NewSymbol("concat"))
if v569.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v569)))
}
v570 := v569.Get()
v571 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v572 := v571.FindInternedVar(lang.NewSymbol("list"))
if v572.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v572)))
}
v573 := v572.Get()
v574 := lang.Apply(v573, []any{lang.NewSymbol("recur")})
v575 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v576 := v575.FindInternedVar(lang.NewSymbol("list"))
if v576.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v576)))
}
v577 := v576.Get()
v578 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v579 := v578.FindInternedVar(lang.NewSymbol("seq"))
if v579.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v579)))
}
v580 := v579.Get()
v581 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v582 := v581.FindInternedVar(lang.NewSymbol("concat"))
if v582.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v582)))
}
v583 := v582.Get()
v584 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v585 := v584.FindInternedVar(lang.NewSymbol("list"))
if v585.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v585)))
}
v586 := v585.Get()
v587 := lang.Apply(v586, []any{lang.NewSymbol("glojure.core/chunk-rest")})
v588 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v589 := v588.FindInternedVar(lang.NewSymbol("list"))
if v589.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v589)))
}
v590 := v589.Get()
v591 := lang.Apply(v590, []any{v96})
v592 := lang.Apply(v583, []any{v587, v591})
v593 := lang.Apply(v580, []any{v592})
v594 := lang.Apply(v577, []any{v593})
v595 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v596 := v595.FindInternedVar(lang.NewSymbol("list"))
if v596.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v596)))
}
v597 := v596.Get()
v598 := lang.Apply(v597, []any{lang.NewSymbol("c__0__auto__")})
v599 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v600 := v599.FindInternedVar(lang.NewSymbol("list"))
if v600.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v600)))
}
v601 := v600.Get()
v602 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v603 := v602.FindInternedVar(lang.NewSymbol("seq"))
if v603.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v603)))
}
v604 := v603.Get()
v605 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v606 := v605.FindInternedVar(lang.NewSymbol("concat"))
if v606.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v606)))
}
v607 := v606.Get()
v608 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v609 := v608.FindInternedVar(lang.NewSymbol("list"))
if v609.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v609)))
}
v610 := v609.Get()
v611 := lang.Apply(v610, []any{lang.NewSymbol("glojure.core/int")})
v612 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v613 := v612.FindInternedVar(lang.NewSymbol("list"))
if v613.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v613)))
}
v614 := v613.Get()
v615 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v616 := v615.FindInternedVar(lang.NewSymbol("seq"))
if v616.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v616)))
}
v617 := v616.Get()
v618 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v619 := v618.FindInternedVar(lang.NewSymbol("concat"))
if v619.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v619)))
}
v620 := v619.Get()
v621 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v622 := v621.FindInternedVar(lang.NewSymbol("list"))
if v622.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v622)))
}
v623 := v622.Get()
v624 := lang.Apply(v623, []any{lang.NewSymbol("glojure.core/count")})
v625 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v626 := v625.FindInternedVar(lang.NewSymbol("list"))
if v626.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v626)))
}
v627 := v626.Get()
v628 := lang.Apply(v627, []any{lang.NewSymbol("c__0__auto__")})
v629 := lang.Apply(v620, []any{v624, v628})
v630 := lang.Apply(v617, []any{v629})
v631 := lang.Apply(v614, []any{v630})
v632 := lang.Apply(v607, []any{v611, v631})
v633 := lang.Apply(v604, []any{v632})
v634 := lang.Apply(v601, []any{v633})
v635 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v636 := v635.FindInternedVar(lang.NewSymbol("list"))
if v636.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v636)))
}
v637 := v636.Get()
v638 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v639 := v638.FindInternedVar(lang.NewSymbol("seq"))
if v639.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v639)))
}
v640 := v639.Get()
v641 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v642 := v641.FindInternedVar(lang.NewSymbol("concat"))
if v642.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v642)))
}
v643 := v642.Get()
v644 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v645 := v644.FindInternedVar(lang.NewSymbol("list"))
if v645.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v645)))
}
v646 := v645.Get()
v647 := lang.Apply(v646, []any{lang.NewSymbol("glojure.core/int")})
v648 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v649 := v648.FindInternedVar(lang.NewSymbol("list"))
if v649.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v649)))
}
v650 := v649.Get()
v651 := lang.Apply(v650, []any{int64(0)})
v652 := lang.Apply(v643, []any{v647, v651})
v653 := lang.Apply(v640, []any{v652})
v654 := lang.Apply(v637, []any{v653})
v655 := lang.Apply(v570, []any{v574, v594, v598, v634, v654})
v656 := lang.Apply(v567, []any{v655})
v657 := lang.Apply(v564, []any{v656})
v658 := lang.Apply(v514, []any{v518, v561, v657})
v659 := lang.Apply(v511, []any{v658})
v660 := lang.Apply(v508, []any{v659})
v661 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v662 := v661.FindInternedVar(lang.NewSymbol("list"))
if v662.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v662)))
}
v663 := v662.Get()
v664 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v665 := v664.FindInternedVar(lang.NewSymbol("seq"))
if v665.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v665)))
}
v666 := v665.Get()
v667 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v668 := v667.FindInternedVar(lang.NewSymbol("concat"))
if v668.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v668)))
}
v669 := v668.Get()
v670 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v671 := v670.FindInternedVar(lang.NewSymbol("list"))
if v671.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v671)))
}
v672 := v671.Get()
v673 := lang.Apply(v672, []any{lang.NewSymbol("glojure.core/let")})
v674 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v675 := v674.FindInternedVar(lang.NewSymbol("list"))
if v675.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v675)))
}
v676 := v675.Get()
v677 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v678 := v677.FindInternedVar(lang.NewSymbol("apply"))
if v678.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v678)))
}
v679 := v678.Get()
v680 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v681 := v680.FindInternedVar(lang.NewSymbol("vector"))
if v681.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v681)))
}
v682 := v681.Get()
v683 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v684 := v683.FindInternedVar(lang.NewSymbol("seq"))
if v684.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v684)))
}
v685 := v684.Get()
v686 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v687 := v686.FindInternedVar(lang.NewSymbol("concat"))
if v687.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v687)))
}
v688 := v687.Get()
v689 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v690 := v689.FindInternedVar(lang.NewSymbol("list"))
if v690.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v690)))
}
v691 := v690.Get()
v692 := lang.Apply(v691, []any{v80})
v693 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v694 := v693.FindInternedVar(lang.NewSymbol("list"))
if v694.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v694)))
}
v695 := v694.Get()
v696 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v697 := v696.FindInternedVar(lang.NewSymbol("seq"))
if v697.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v697)))
}
v698 := v697.Get()
v699 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v700 := v699.FindInternedVar(lang.NewSymbol("concat"))
if v700.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v700)))
}
v701 := v700.Get()
v702 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v703 := v702.FindInternedVar(lang.NewSymbol("list"))
if v703.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v703)))
}
v704 := v703.Get()
v705 := lang.Apply(v704, []any{lang.NewSymbol("glojure.core/first")})
v706 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v707 := v706.FindInternedVar(lang.NewSymbol("list"))
if v707.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v707)))
}
v708 := v707.Get()
v709 := lang.Apply(v708, []any{v96})
v710 := lang.Apply(v701, []any{v705, v709})
v711 := lang.Apply(v698, []any{v710})
v712 := lang.Apply(v695, []any{v711})
v713 := lang.Apply(v688, []any{v692, v712})
v714 := lang.Apply(v685, []any{v713})
v715 := lang.Apply(v679, []any{v682, v714})
v716 := lang.Apply(v676, []any{v715})
v717 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v718 := v717.FindInternedVar(lang.NewSymbol("list"))
if v718.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v718)))
}
v719 := v718.Get()
v720 := lang.Apply(v719, []any{v176})
var v721 any
if lang.IsTruthy(v174) {
v722 := lang.NewVector(v123)
v723 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3264), lang.NewKeyword("column"), int(52), lang.NewKeyword("end-line"), int(3264), lang.NewKeyword("end-column"), int(60))
v724, err := lang.WithMeta(v722, v723.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v721 = v724
} else {
v721 = nil
}
v725 := lang.Apply(v669, []any{v673, v716, v720, v721})
v726 := lang.Apply(v666, []any{v725})
v727 := lang.Apply(v663, []any{v726})
v728 := lang.Apply(v481, []any{v485, v505, v660, v727})
v729 := lang.Apply(v478, []any{v728})
v730 := lang.Apply(v475, []any{v729})
v731 := lang.Apply(v425, []any{v429, v472, v730})
v732 := lang.Apply(v422, []any{v731})
v733 := lang.Apply(v419, []any{v732})
v734 := lang.Apply(v317, []any{v321, v345, v416, v733})
v735 := lang.Apply(v314, []any{v734})
v736 := lang.Apply(v311, []any{v735})
v737 := lang.Apply(v237, []any{v241, v308, v736})
v738 := lang.Apply(v234, []any{v737})
v739 := lang.NewVector(true, v738)
v740 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3250), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(3264), lang.NewKeyword("end-column"), int(67))
v741, err := lang.WithMeta(v739, v740.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v91 = v741
}
v60 = v91
}
return v60
})
v57 := v56
_ = v57
}
v57 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3218), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(3264), lang.NewKeyword("end-column"), int(72))
v58, err := lang.WithMeta(v56, v57.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v55 any = v58
_ = v55
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("nth"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("seq"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.Apply(v65, []any{v5})
v67 := lang.Apply(v55, []any{nil, v66})
v68 := lang.Apply(v62, []any{v67, int64(1)})
return v68
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// dosync
{
v0 := lang.NewSymbol("dosync").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("exprs"))), lang.NewKeyword("doc"), "Runs the exprs (in an implicit do) in a transaction that encompasses\n  exprs and any nested calls.  Starts a transaction if none is already\n  running on this thread. Any uncaught exception will abort the\n  transaction and flow out of dosync. The exprs may be run more than\n  once, but any effects on Refs will be atomic.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(5100), lang.NewKeyword("end-line"), int(5100))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol("glojure.core/sync")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{nil})
v20 := lang.Apply(v11, []any{v15, v19, v5})
v21 := lang.Apply(v8, []any{v20})
return v21
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// dotimes
{
v0 := lang.NewSymbol("dotimes").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(3306), lang.NewKeyword("end-line"), int(3306))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("vector?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
if lang.IsTruthy(v11) {
v7 = nil
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("str"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("*ns*"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(lang.NewKeyword("line"), []any{v25})
v27 := lang.Apply(v14, []any{v18, " requires ", "a vector for its binding", " in ", v21, ":", v26})
v28 := lang.Apply(lang.NewIllegalArgumentError, []any{v27})
panic(v28)
}
_ = v7
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("="))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v37 := lang.Apply(v32, []any{int64(2), v36})
if lang.IsTruthy(v37) {
v29 = nil
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("first"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("*ns*"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("meta"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(lang.NewKeyword("line"), []any{v51})
v53 := lang.Apply(v40, []any{v44, " requires ", "exactly 2 forms in binding vector", " in ", v47, ":", v52})
v54 := lang.Apply(lang.NewIllegalArgumentError, []any{v53})
panic(v54)
}
_ = v29
_ = nil
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("first"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{v5})
var v55 any = v59
_ = v55
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("second"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v5})
var v60 any = v64
_ = v60
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("seq"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("concat"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("list"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v74, []any{lang.NewSymbol("glojure.core/let")})
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("list"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("apply"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("vector"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("seq"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v89 := v88.FindInternedVar(lang.NewSymbol("concat"))
if v89.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v89)))
}
v90 := v89.Get()
v91 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v92 := v91.FindInternedVar(lang.NewSymbol("list"))
if v92.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v92)))
}
v93 := v92.Get()
v94 := lang.Apply(v93, []any{lang.NewSymbol("n__0__auto__")})
v95 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v96 := v95.FindInternedVar(lang.NewSymbol("list"))
if v96.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v96)))
}
v97 := v96.Get()
v98 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v99 := v98.FindInternedVar(lang.NewSymbol("seq"))
if v99.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v99)))
}
v100 := v99.Get()
v101 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v102 := v101.FindInternedVar(lang.NewSymbol("concat"))
if v102.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v102)))
}
v103 := v102.Get()
v104 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v105 := v104.FindInternedVar(lang.NewSymbol("list"))
if v105.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v105)))
}
v106 := v105.Get()
v107 := lang.Apply(v106, []any{lang.NewSymbol("glojure.core/long")})
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("list"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.Apply(v110, []any{v60})
v112 := lang.Apply(v103, []any{v107, v111})
v113 := lang.Apply(v100, []any{v112})
v114 := lang.Apply(v97, []any{v113})
v115 := lang.Apply(v90, []any{v94, v114})
v116 := lang.Apply(v87, []any{v115})
v117 := lang.Apply(v81, []any{v84, v116})
v118 := lang.Apply(v78, []any{v117})
v119 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v120 := v119.FindInternedVar(lang.NewSymbol("list"))
if v120.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v120)))
}
v121 := v120.Get()
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("seq"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v126 := v125.FindInternedVar(lang.NewSymbol("concat"))
if v126.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v126)))
}
v127 := v126.Get()
v128 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v129 := v128.FindInternedVar(lang.NewSymbol("list"))
if v129.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v129)))
}
v130 := v129.Get()
v131 := lang.Apply(v130, []any{lang.NewSymbol("glojure.core/loop")})
v132 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v133 := v132.FindInternedVar(lang.NewSymbol("list"))
if v133.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v133)))
}
v134 := v133.Get()
v135 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v136 := v135.FindInternedVar(lang.NewSymbol("apply"))
if v136.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v136)))
}
v137 := v136.Get()
v138 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v139 := v138.FindInternedVar(lang.NewSymbol("vector"))
if v139.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v139)))
}
v140 := v139.Get()
v141 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v142 := v141.FindInternedVar(lang.NewSymbol("seq"))
if v142.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v142)))
}
v143 := v142.Get()
v144 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v145 := v144.FindInternedVar(lang.NewSymbol("concat"))
if v145.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v145)))
}
v146 := v145.Get()
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("list"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.Apply(v149, []any{v55})
v151 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v152 := v151.FindInternedVar(lang.NewSymbol("list"))
if v152.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v152)))
}
v153 := v152.Get()
v154 := lang.Apply(v153, []any{int64(0)})
v155 := lang.Apply(v146, []any{v150, v154})
v156 := lang.Apply(v143, []any{v155})
v157 := lang.Apply(v137, []any{v140, v156})
v158 := lang.Apply(v134, []any{v157})
v159 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v160 := v159.FindInternedVar(lang.NewSymbol("list"))
if v160.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v160)))
}
v161 := v160.Get()
v162 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v163 := v162.FindInternedVar(lang.NewSymbol("seq"))
if v163.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v163)))
}
v164 := v163.Get()
v165 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v166 := v165.FindInternedVar(lang.NewSymbol("concat"))
if v166.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v166)))
}
v167 := v166.Get()
v168 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v169 := v168.FindInternedVar(lang.NewSymbol("list"))
if v169.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v169)))
}
v170 := v169.Get()
v171 := lang.Apply(v170, []any{lang.NewSymbol("glojure.core/when")})
v172 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v173 := v172.FindInternedVar(lang.NewSymbol("list"))
if v173.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v173)))
}
v174 := v173.Get()
v175 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v176 := v175.FindInternedVar(lang.NewSymbol("seq"))
if v176.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v176)))
}
v177 := v176.Get()
v178 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v179 := v178.FindInternedVar(lang.NewSymbol("concat"))
if v179.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v179)))
}
v180 := v179.Get()
v181 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v182 := v181.FindInternedVar(lang.NewSymbol("list"))
if v182.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v182)))
}
v183 := v182.Get()
v184 := lang.Apply(v183, []any{lang.NewSymbol("glojure.core/<")})
v185 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v186 := v185.FindInternedVar(lang.NewSymbol("list"))
if v186.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v186)))
}
v187 := v186.Get()
v188 := lang.Apply(v187, []any{v55})
v189 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v190 := v189.FindInternedVar(lang.NewSymbol("list"))
if v190.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v190)))
}
v191 := v190.Get()
v192 := lang.Apply(v191, []any{lang.NewSymbol("n__0__auto__")})
v193 := lang.Apply(v180, []any{v184, v188, v192})
v194 := lang.Apply(v177, []any{v193})
v195 := lang.Apply(v174, []any{v194})
v196 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v197 := v196.FindInternedVar(lang.NewSymbol("list"))
if v197.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v197)))
}
v198 := v197.Get()
v199 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v200 := v199.FindInternedVar(lang.NewSymbol("seq"))
if v200.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v200)))
}
v201 := v200.Get()
v202 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v203 := v202.FindInternedVar(lang.NewSymbol("concat"))
if v203.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v203)))
}
v204 := v203.Get()
v205 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v206 := v205.FindInternedVar(lang.NewSymbol("list"))
if v206.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v206)))
}
v207 := v206.Get()
v208 := lang.Apply(v207, []any{lang.NewSymbol("recur")})
v209 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v210 := v209.FindInternedVar(lang.NewSymbol("list"))
if v210.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v210)))
}
v211 := v210.Get()
v212 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v213 := v212.FindInternedVar(lang.NewSymbol("seq"))
if v213.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v213)))
}
v214 := v213.Get()
v215 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v216 := v215.FindInternedVar(lang.NewSymbol("concat"))
if v216.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v216)))
}
v217 := v216.Get()
v218 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v219 := v218.FindInternedVar(lang.NewSymbol("list"))
if v219.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v219)))
}
v220 := v219.Get()
v221 := lang.Apply(v220, []any{lang.NewSymbol("glojure.core/unchecked-inc")})
v222 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v223 := v222.FindInternedVar(lang.NewSymbol("list"))
if v223.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v223)))
}
v224 := v223.Get()
v225 := lang.Apply(v224, []any{v55})
v226 := lang.Apply(v217, []any{v221, v225})
v227 := lang.Apply(v214, []any{v226})
v228 := lang.Apply(v211, []any{v227})
v229 := lang.Apply(v204, []any{v208, v228})
v230 := lang.Apply(v201, []any{v229})
v231 := lang.Apply(v198, []any{v230})
v232 := lang.Apply(v167, []any{v171, v195, v6, v231})
v233 := lang.Apply(v164, []any{v232})
v234 := lang.Apply(v161, []any{v233})
v235 := lang.Apply(v127, []any{v131, v158, v234})
v236 := lang.Apply(v124, []any{v235})
v237 := lang.Apply(v121, []any{v236})
v238 := lang.Apply(v71, []any{v75, v118, v237})
v239 := lang.Apply(v68, []any{v238})
return v239
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// doto
{
v0 := lang.NewSymbol("doto").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("&"), lang.NewSymbol("forms"))), lang.NewKeyword("doc"), "Evaluates x then calls all of the methods and functions with the\n  value of x supplied at the front of the given arguments.  The forms\n  are evaluated in order.  Returns x.\n\n  (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(3853), lang.NewKeyword("end-line"), int(3853))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("gensym"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, nil)
var v7 any = v11
_ = v7
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("seq"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("concat"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("glojure.core/let")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("apply"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("vector"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("seq"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("concat"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("list"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v7})
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("list"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v5})
v46 := lang.Apply(v37, []any{v41, v45})
v47 := lang.Apply(v34, []any{v46})
v48 := lang.Apply(v28, []any{v31, v47})
v49 := lang.Apply(v25, []any{v48})
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("map"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
var v53 lang.FnFunc
v53 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v54 := args[0]
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("with-meta"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
var v58 any
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("seq?"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v61, []any{v54})
if lang.IsTruthy(v62) {
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("seq"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("concat"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("list"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("first"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v74, []any{v54})
v76 := lang.Apply(v71, []any{v75})
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("list"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.Apply(v79, []any{v7})
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("next"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.Apply(v83, []any{v54})
v85 := lang.Apply(v68, []any{v76, v80, v84})
v86 := lang.Apply(v65, []any{v85})
v58 = v86
} else {
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("seq"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("concat"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("list"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.Apply(v95, []any{v54})
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("list"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.Apply(v99, []any{v7})
v101 := lang.Apply(v92, []any{v96, v100})
v102 := lang.Apply(v89, []any{v101})
v58 = v102
}
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("meta"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.Apply(v105, []any{v54})
v107 := lang.Apply(v57, []any{v58, v106})
return v107
})
v54 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3863), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(3868), lang.NewKeyword("end-column"), int(30))
v55, err := lang.WithMeta(v53, v54.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v56 := lang.Apply(v52, []any{v55, v6})
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v7})
v61 := lang.Apply(v18, []any{v22, v49, v56, v60})
v62 := lang.Apply(v15, []any{v61})
return v62
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// double
{
var v1 lang.FnFunc
{ // function double__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/DoubleCast")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("double").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to double", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3493), lang.NewKeyword("end-line"), int(3493))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.AsFloat64, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// double-array
{
var v1 lang.FnFunc
{ // function double-array__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/doubleArray")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("glojure.core/unquote-splicing")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{lang.NewSymbol("glojure.core/args")})
v39 := lang.Apply(v30, []any{v34, v38})
v40 := lang.Apply(v27, []any{v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v21, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
  }
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("double-array").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("size-or-seq")), lang.NewVector(lang.NewSymbol("size"), lang.NewSymbol("init-val-or-seq"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Creates an array of doubles", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5341), lang.NewKeyword("end-line"), int(5341))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "doubleArray")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("doubleArray is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "doubleArrayInit")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("doubleArrayInit is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// double?
{
v0 := lang.NewSymbol("double?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a Double", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1421), lang.NewKeyword("end-line"), int(1421))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.Builtins["float64"], v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// doubles
{
var v1 lang.FnFunc
{ // function doubles
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/doubles")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v9, []any{v13, v17, v21, v25})
v27 := lang.Apply(v6, []any{v26})
return v27
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("doubles").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("xs"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Casts to double[]", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(12), lang.NewKeyword("line"), int(5402), lang.NewKeyword("end-line"), int(5402))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "doubles")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("doubles is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// drop
{
v0 := lang.NewSymbol("drop").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a laziness-preserving sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2901), lang.NewKeyword("end-line"), int(2901))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("volatile!"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
var v6 any = v10
_ = v6
var v12 lang.FnFunc
v12 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v13 := lang.Apply(v5, nil)
return v13
  case 1:
v13 := args[0]
v14 := lang.Apply(v5, []any{v13})
return v14
  case 2:
v13 := args[0]
v14 := args[1]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("deref"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v6})
var v15 any = v19
_ = v15
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("dec"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24, ok := lang.FieldOrMethod(v6, "Deref")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "Deref")))
}
var v25 any
switch reflect.TypeOf(v24).Kind() {
case reflect.Func:
  v25 = lang.Apply(v24, nil)
default:
  v25 = v24
}
v26 := lang.Apply(v23, []any{v25})
v27, _ := lang.FieldOrMethod(v6, "reset")
if reflect.TypeOf(v27).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("reset is not a function")))
}
v28 := lang.Apply(v27, []any{v26})
_ = v28
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("pos?"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v15})
if lang.IsTruthy(v33) {
v29 = v13
} else {
v34 := lang.Apply(v5, []any{v13, v14})
v29 = v34
}
return v29
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2909), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(2917), lang.NewKeyword("end-column"), int(39))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v14
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2907), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(2917), lang.NewKeyword("end-column"), int(41))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("instance?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{lang.IDrop, v4})
if lang.IsTruthy(v9) {
var v11 any
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("pos?"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3})
if lang.IsTruthy(v15) {
var v16 any
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("int?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v3})
if lang.IsTruthy(v20) {
v16 = v3
} else {
v21 := lang.Apply(nil, []any{v3})
v16 = v21
}
v22, _ := lang.FieldOrMethod(v4, "drop")
if reflect.TypeOf(v22).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("drop is not a function")))
}
v23 := lang.Apply(v22, []any{v16})
v11 = v23
} else {
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("seq"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v4})
v11 = v27
}
var v10 any = v11
_ = v10
var v29 any
if lang.IsTruthy(v10) {
v29 = v10
} else {
v29 = lang.NewList()
}
v5 = v29
} else {
var v11 lang.FnFunc
v11 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v12 := args[0]
v13 := args[1]
recur_loop_539:
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("seq"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v13})
var v14 any = v18
_ = v14
var v20 any
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("pos?"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v12})
var v21 any = v25
_ = v21
var v27 any
if lang.IsTruthy(v21) {
v27 = v14
} else {
v27 = v21
}
if lang.IsTruthy(v27) {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("dec"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v12})
var v21 any = v25
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("rest"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v14})
var v26 any = v30
v12 = v21
v13 = v26
goto recur_loop_539
} else {
v20 = v14
}
return v20
})
v12 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2925), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(2929), lang.NewKeyword("end-column"), int(28))
v13, err := lang.WithMeta(v11, v12.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v10 any = v13
_ = v10
var v15 lang.FnFunc
v15 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v16 := lang.Apply(v10, []any{v3, v4})
return v16
})
v16 := lang.Apply(lang.NewLazySeq, []any{v15})
v5 = v16
}
return v5
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// drop-last
{
v0 := lang.NewSymbol("drop-last").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Return a lazy sequence of all but the last n (default 1) items in coll", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2932), lang.NewKeyword("end-line"), int(2932))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("drop-last"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{int64(1), v3})
return v7
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("map"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
var v8 lang.FnFunc
v8 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := args[0]
v10 := args[1]
return v9
})
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2937), lang.NewKeyword("column"), int(18), lang.NewKeyword("end-line"), int(2937), lang.NewKeyword("end-column"), int(29))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("drop"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3, v4})
v15 := lang.Apply(v7, []any{v10, v4, v14})
return v15
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// drop-while
{
v0 := lang.NewSymbol("drop-while").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred")), lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2950), lang.NewKeyword("end-line"), int(2950))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("volatile!"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{true})
var v6 any = v10
_ = v6
var v12 lang.FnFunc
v12 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v13 := lang.Apply(v5, nil)
return v13
  case 1:
v13 := args[0]
v14 := lang.Apply(v5, []any{v13})
return v14
  case 2:
v13 := args[0]
v14 := args[1]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("deref"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v6})
var v15 any = v19
_ = v15
var v21 any
var v22 any = v15
_ = v22
var v24 any
if lang.IsTruthy(v22) {
v25 := lang.Apply(v3, []any{v14})
v24 = v25
} else {
v24 = v22
}
if lang.IsTruthy(v24) {
v21 = v13
} else {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("vreset!"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v6, nil})
_ = v25
v26 := lang.Apply(v5, []any{v13, v14})
v21 = v26
}
return v21
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2959), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(2968), lang.NewKeyword("end-column"), int(42))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v14
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2957), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(2968), lang.NewKeyword("end-column"), int(44))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := args[0]
v8 := args[1]
recur_loop_552:
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v8})
var v9 any = v13
_ = v9
var v15 any
var v16 any = v9
_ = v16
var v18 any
if lang.IsTruthy(v16) {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("first"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v9})
v23 := lang.Apply(v7, []any{v22})
v18 = v23
} else {
v18 = v16
}
if lang.IsTruthy(v18) {
var v16 any = v7
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("rest"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v9})
var v17 any = v21
v7 = v16
v8 = v17
goto recur_loop_552
} else {
v15 = v9
}
return v15
})
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2970), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(2974), lang.NewKeyword("end-column"), int(26))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v5 any = v8
_ = v5
var v10 lang.FnFunc
v10 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v11 := lang.Apply(v5, []any{v3, v4})
return v11
})
v11 := lang.Apply(lang.NewLazySeq, []any{v10})
return v11
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// elide-top-frames
{
v0 := lang.NewSymbol("elide-top-frames").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4794), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(4794), lang.NewKeyword("end-column"), int(32), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ex"), lang.NewSymbol("class-name"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6, ok := lang.FieldOrMethod(v3, "getStackTrace")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getStackTrace")))
}
var v7 any
switch reflect.TypeOf(v6).Kind() {
case reflect.Func:
  v7 = lang.Apply(v6, nil)
default:
  v7 = v6
}
var v5 any = v7
_ = v5
var v9 any = v3
_ = v9
var v11 any
if lang.IsTruthy(v5) {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("into-array"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("drop-while"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
var v18 lang.FnFunc
v18 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v19 := args[0]
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("="))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23, ok := lang.FieldOrMethod(v19, "getClassName")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v19, "getClassName")))
}
var v24 any
switch reflect.TypeOf(v23).Kind() {
case reflect.Func:
  v24 = lang.Apply(v23, nil)
default:
  v24 = v23
}
v25 := lang.Apply(v22, []any{v4, v24})
return v25
})
v19 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4801), lang.NewKeyword("column"), int(25), lang.NewKeyword("end-line"), int(4801), lang.NewKeyword("end-column"), int(77))
v20, err := lang.WithMeta(v18, v19.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v21 := lang.Apply(v17, []any{v20, v5})
v22 := lang.Apply(v14, []any{nil, v21})
v11 = v22
} else {
v11 = nil
}
v23, _ := lang.FieldOrMethod(v9, "setStackTrace")
if reflect.TypeOf(v23).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setStackTrace is not a function")))
}
v24 := lang.Apply(v23, []any{v11})
_ = v24
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// emit-extend-protocol
{
v0 := lang.NewSymbol("emit-extend-protocol").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(205), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(205), lang.NewKeyword("end-column"), int(27), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("p"), lang.NewSymbol("specs"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("parse-impls"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
var v5 any = v9
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("seq"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("concat"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{lang.NewSymbol("do")})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("map"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
var v24 lang.FnFunc
v24 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v25 := args[0]
var v26 any = v25
_ = v26
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("nth"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v26, int64(0), nil})
var v27 any = v31
_ = v27
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("nth"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v26, int64(1), nil})
var v32 any = v36
_ = v32
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("seq"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("concat"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{lang.NewSymbol("glojure.core/extend-type")})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v27})
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("list"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v3})
v56 := lang.Apply(v43, []any{v47, v51, v55, v32})
v57 := lang.Apply(v40, []any{v56})
return v57
})
v25 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(208), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(209), lang.NewKeyword("end-column"), int(42))
v26, err := lang.WithMeta(v24, v25.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v27 := lang.Apply(v23, []any{v26, v5})
v28 := lang.Apply(v16, []any{v20, v27})
v29 := lang.Apply(v13, []any{v28})
return v29
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// emit-extend-type
{
v0 := lang.NewSymbol("emit-extend-type").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(175), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(175), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("c"), lang.NewSymbol("specs"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("parse-impls"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
var v5 any = v9
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("seq"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("concat"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{lang.NewSymbol("glojure.core/extend")})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v3})
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("mapcat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("partial"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("emit-hinted-impl"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v30, []any{v33, v3})
v35 := lang.Apply(v27, []any{v34, v5})
v36 := lang.Apply(v16, []any{v20, v24, v35})
v37 := lang.Apply(v13, []any{v36})
return v37
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// emit-hinted-impl
{
v0 := lang.NewSymbol("emit-hinted-impl").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(163), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(163), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("c"), lang.NewVector(lang.NewSymbol("p"), lang.NewSymbol("fs")))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
var v5 any = v4
_ = v5
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("nth"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v5, int64(0), nil})
var v6 any = v10
_ = v6
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("nth"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v5, int64(1), nil})
var v11 any = v15
_ = v11
var v18 lang.FnFunc
v18 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v19 := args[0]
var v21 any
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("vector?"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("first"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v20})
v29 := lang.Apply(v24, []any{v28})
if lang.IsTruthy(v29) {
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("list"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v20})
v21 = v33
} else {
v21 = v20
}
var v20 any = v21
_ = v20
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("map"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
var v38 lang.FnFunc
v38 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v39 := args[0]
var v40 any = v39
_ = v40
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("seq"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v40})
var v41 any = v45
_ = v41
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("first"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v41})
var v46 any = v50
_ = v46
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("next"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v51})
var v51 any = v55
_ = v51
var v56 any = v46
_ = v56
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("seq"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.Apply(v60, []any{v56})
var v57 any = v61
_ = v57
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("first"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.Apply(v65, []any{v57})
var v62 any = v66
_ = v62
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("next"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{v67})
var v67 any = v71
_ = v67
var v72 any = v62
_ = v72
var v73 any = v67
_ = v73
var v74 any = v51
_ = v74
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("cons"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("apply"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("vector"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("vary-meta"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v89 := v88.FindInternedVar(lang.NewSymbol("assoc"))
if v89.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v89)))
}
v90 := v89.Get()
v91 := lang.Apply(v87, []any{v72, v90, lang.NewKeyword("tag"), v3})
v92 := lang.Apply(v81, []any{v84, v91, v73})
v93 := lang.Apply(v78, []any{v92, v74})
return v93
})
v39 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(168), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(170), lang.NewKeyword("end-column"), int(36))
v40, err := lang.WithMeta(v38, v39.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v41 := lang.Apply(v37, []any{v40, v20})
return v41
})
v19 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(164), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(171), lang.NewKeyword("end-column"), int(30))
v20, err := lang.WithMeta(v18, v19.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v17 any = v20
_ = v17
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("zipmap"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("map"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
var v28 lang.FnFunc
v28 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v29 := args[0]
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("keyword"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("name"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("first"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v29})
v40 := lang.Apply(v35, []any{v39})
v41 := lang.Apply(v32, []any{v40})
return v41
})
v29 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(172), lang.NewKeyword("column"), int(21), lang.NewKeyword("end-line"), int(172), lang.NewKeyword("end-column"), int(46))
v30, err := lang.WithMeta(v28, v29.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v31 := lang.Apply(v27, []any{v30, v11})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("map"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
var v35 lang.FnFunc
v35 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v36 := args[0]
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("cons"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("drop"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{int64(1), v36})
v44 := lang.Apply(v17, []any{v43})
v45 := lang.Apply(v39, []any{lang.NewSymbol("glojure.core/fn"), v44})
return v45
})
v36 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(173), lang.NewKeyword("column"), int(21), lang.NewKeyword("end-line"), int(173), lang.NewKeyword("end-column"), int(49))
v37, err := lang.WithMeta(v35, v36.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v38 := lang.Apply(v34, []any{v37, v11})
v39 := lang.Apply(v24, []any{v31, v38})
v40 := lang.NewVector(v6, v39)
v41 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(172), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(173), lang.NewKeyword("end-column"), int(55))
v42, err := lang.WithMeta(v40, v41.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v42
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// empty
{
v0 := lang.NewSymbol("empty").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns an empty collection of the same category as coll, or nil", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5265), lang.NewKeyword("end-line"), int(5265))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.IPersistentCollection, v3})
if lang.IsTruthy(v8) {
v9, ok := lang.FieldOrMethod(v3, "empty")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "empty")))
}
var v10 any
switch reflect.TypeOf(v9).Kind() {
case reflect.Func:
  v10 = lang.Apply(v9, nil)
default:
  v10 = v9
}
v4 = v10
} else {
v4 = nil
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// empty?
{
v0 := lang.NewSymbol("empty?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns true if coll has no items. To check the emptiness of a seq,\n  please use the idiom (seq x) rather than (not (empty? x))", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6247), lang.NewKeyword("end-line"), int(6247))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("counted?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("zero?"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("count"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3})
v16 := lang.Apply(v11, []any{v15})
v4 = v16
} else {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("not"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("seq"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v3})
v24 := lang.Apply(v19, []any{v23})
v4 = v24
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ensure
{
v0 := lang.NewSymbol("ensure").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ref"))), lang.NewKeyword("doc"), "Must be called in a transaction. Protects the ref from modification\n  by other transactions.  Returns the in-transaction-value of\n  ref. Allows for more concurrency than (ref-set ref @ref)", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2480), lang.NewKeyword("end-line"), int(2480))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(v3, "touch")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("touch is not a function")))
}
v5 := lang.Apply(v4, []any{})
_ = v5
v6, _ := lang.FieldOrMethod(v3, "deref")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("deref is not a function")))
}
v7 := lang.Apply(v6, []any{})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ensure-reduced
{
v0 := lang.NewSymbol("ensure-reduced").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "If x is already reduced?, returns it, else returns (reduced x)", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2841), lang.NewKeyword("end-line"), int(2841))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("reduced?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v4 = v3
} else {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("reduced"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3})
v4 = v12
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// enumeration-seq
{
v0 := lang.NewSymbol("enumeration-seq").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("e"))), lang.NewKeyword("doc"), "Returns a seq on a java.util.Enumeration", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5710), lang.NewKeyword("end-line"), int(5710))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(nil, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// error-handler
{
v0 := lang.NewSymbol("error-handler").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"))), lang.NewKeyword("doc"), "Returns the error-handler of agent a, or nil if there is none.\n  See set-error-handler!", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2202), lang.NewKeyword("end-line"), int(2202))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "getErrorHandler")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getErrorHandler")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// error-mode
{
v0 := lang.NewSymbol("error-mode").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"))), lang.NewKeyword("doc"), "Returns the error-mode of agent a.  See set-error-mode!", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2227), lang.NewKeyword("end-line"), int(2227))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "getErrorMode")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getErrorMode")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// eval
{
v0 := lang.NewSymbol("eval").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("form"))), lang.NewKeyword("doc"), "Evaluates the form data structure (not text!) and returns the result.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3203), lang.NewKeyword("end-line"), int(3203))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(runtime5.Compiler, "Eval")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Eval is not a function")))
}
v5 := lang.Apply(v4, []any{v3})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// even?
{
v0 := lang.NewSymbol("even?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Returns true if n is even, throws an exception if n is not an integer", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1381), lang.NewKeyword("end-line"), int(1381))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("integer?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("zero?"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("bit-and"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(lang.UncheckedLongCast, []any{v3})
v16 := lang.Apply(v14, []any{v15, int64(1)})
v17 := lang.Apply(v11, []any{v16})
v4 = v17
} else {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("str"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{"Argument must be an integer: ", v3})
v22 := lang.Apply(lang.NewIllegalArgumentError, []any{v21})
panic(v22)
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// every-pred
{
v0 := lang.NewSymbol("every-pred").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("p")), lang.NewVector(lang.NewSymbol("p1"), lang.NewSymbol("p2")), lang.NewVector(lang.NewSymbol("p1"), lang.NewSymbol("p2"), lang.NewSymbol("p3")), lang.NewVector(lang.NewSymbol("p1"), lang.NewSymbol("p2"), lang.NewSymbol("p3"), lang.NewSymbol("&"), lang.NewSymbol("ps"))), lang.NewKeyword("doc"), "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7422), lang.NewKeyword("end-line"), int(7422))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
{ // function ep1
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return true
  case 1:
v6 := args[0]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("boolean"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v3, []any{v6})
v11 := lang.Apply(v9, []any{v10})
return v11
  case 2:
v6 := args[0]
v7 := args[1]
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("boolean"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v12 := lang.Apply(v3, []any{v6})
var v11 any = v12
_ = v11
var v14 any
if lang.IsTruthy(v11) {
v15 := lang.Apply(v3, []any{v7})
v14 = v15
} else {
v14 = v11
}
v11 := lang.Apply(v10, []any{v14})
return v11
  case 3:
v6 := args[0]
v7 := args[1]
v8 := args[2]
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("boolean"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v13 := lang.Apply(v3, []any{v6})
var v12 any = v13
_ = v12
var v15 any
if lang.IsTruthy(v12) {
v17 := lang.Apply(v3, []any{v7})
var v16 any = v17
_ = v16
var v19 any
if lang.IsTruthy(v16) {
v20 := lang.Apply(v3, []any{v8})
v19 = v20
} else {
v19 = v16
}
v15 = v19
} else {
v15 = v12
}
v12 := lang.Apply(v11, []any{v15})
return v12
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v6 := args[0]
v7 := args[1]
v8 := args[2]
v9 := lang.NewList(args[3:]...)
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("boolean"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v14 := lang.Apply(v5, []any{v6, v7, v8})
var v13 any = v14
_ = v13
var v16 any
if lang.IsTruthy(v13) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("every?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v3, v9})
v16 = v20
} else {
v16 = v13
}
v13 := lang.Apply(v12, []any{v16})
return v13
  }
})
v5 := v4
_ = v5
}
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7429), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(7435), lang.NewKeyword("end-column"), int(56))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
{ // function ep2
v5 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return true
  case 1:
v7 := args[0]
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("boolean"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v12 := lang.Apply(v3, []any{v7})
var v11 any = v12
_ = v11
var v14 any
if lang.IsTruthy(v11) {
v15 := lang.Apply(v4, []any{v7})
v14 = v15
} else {
v14 = v11
}
v11 := lang.Apply(v10, []any{v14})
return v11
  case 2:
v7 := args[0]
v8 := args[1]
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("boolean"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v13 := lang.Apply(v3, []any{v7})
var v12 any = v13
_ = v12
var v15 any
if lang.IsTruthy(v12) {
v17 := lang.Apply(v3, []any{v8})
var v16 any = v17
_ = v16
var v19 any
if lang.IsTruthy(v16) {
v21 := lang.Apply(v4, []any{v7})
var v20 any = v21
_ = v20
var v23 any
if lang.IsTruthy(v20) {
v24 := lang.Apply(v4, []any{v8})
v23 = v24
} else {
v23 = v20
}
v19 = v23
} else {
v19 = v16
}
v15 = v19
} else {
v15 = v12
}
v12 := lang.Apply(v11, []any{v15})
return v12
  case 3:
v7 := args[0]
v8 := args[1]
v9 := args[2]
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("boolean"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v14 := lang.Apply(v3, []any{v7})
var v13 any = v14
_ = v13
var v16 any
if lang.IsTruthy(v13) {
v18 := lang.Apply(v3, []any{v8})
var v17 any = v18
_ = v17
var v20 any
if lang.IsTruthy(v17) {
v22 := lang.Apply(v3, []any{v9})
var v21 any = v22
_ = v21
var v24 any
if lang.IsTruthy(v21) {
v26 := lang.Apply(v4, []any{v7})
var v25 any = v26
_ = v25
var v28 any
if lang.IsTruthy(v25) {
v30 := lang.Apply(v4, []any{v8})
var v29 any = v30
_ = v29
var v32 any
if lang.IsTruthy(v29) {
v33 := lang.Apply(v4, []any{v9})
v32 = v33
} else {
v32 = v29
}
v28 = v32
} else {
v28 = v25
}
v24 = v28
} else {
v24 = v21
}
v20 = v24
} else {
v20 = v17
}
v16 = v20
} else {
v16 = v13
}
v13 := lang.Apply(v12, []any{v16})
return v13
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v7 := args[0]
v8 := args[1]
v9 := args[2]
v10 := lang.NewList(args[3:]...)
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("boolean"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v15 := lang.Apply(v6, []any{v7, v8, v9})
var v14 any = v15
_ = v14
var v17 any
if lang.IsTruthy(v14) {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("every?"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
var v21 lang.FnFunc
v21 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v22 := args[0]
v24 := lang.Apply(v3, []any{v22})
var v23 any = v24
_ = v23
var v26 any
if lang.IsTruthy(v23) {
v27 := lang.Apply(v4, []any{v22})
v26 = v27
} else {
v26 = v23
}
return v26
})
v22 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7443), lang.NewKeyword("column"), int(46), lang.NewKeyword("end-line"), int(7443), lang.NewKeyword("end-column"), int(65))
v23, err := lang.WithMeta(v21, v22.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v24 := lang.Apply(v20, []any{v23, v10})
v17 = v24
} else {
v17 = v14
}
v14 := lang.Apply(v13, []any{v17})
return v14
  }
})
v6 := v5
_ = v6
}
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7437), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(7443), lang.NewKeyword("end-column"), int(75))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v7
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
{ // function ep3
v6 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return true
  case 1:
v8 := args[0]
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("boolean"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v13 := lang.Apply(v3, []any{v8})
var v12 any = v13
_ = v12
var v15 any
if lang.IsTruthy(v12) {
v17 := lang.Apply(v4, []any{v8})
var v16 any = v17
_ = v16
var v19 any
if lang.IsTruthy(v16) {
v20 := lang.Apply(v5, []any{v8})
v19 = v20
} else {
v19 = v16
}
v15 = v19
} else {
v15 = v12
}
v12 := lang.Apply(v11, []any{v15})
return v12
  case 2:
v8 := args[0]
v9 := args[1]
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("boolean"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v14 := lang.Apply(v3, []any{v8})
var v13 any = v14
_ = v13
var v16 any
if lang.IsTruthy(v13) {
v18 := lang.Apply(v3, []any{v9})
var v17 any = v18
_ = v17
var v20 any
if lang.IsTruthy(v17) {
v22 := lang.Apply(v4, []any{v8})
var v21 any = v22
_ = v21
var v24 any
if lang.IsTruthy(v21) {
v26 := lang.Apply(v4, []any{v9})
var v25 any = v26
_ = v25
var v28 any
if lang.IsTruthy(v25) {
v30 := lang.Apply(v5, []any{v8})
var v29 any = v30
_ = v29
var v32 any
if lang.IsTruthy(v29) {
v33 := lang.Apply(v5, []any{v9})
v32 = v33
} else {
v32 = v29
}
v28 = v32
} else {
v28 = v25
}
v24 = v28
} else {
v24 = v21
}
v20 = v24
} else {
v20 = v17
}
v16 = v20
} else {
v16 = v13
}
v13 := lang.Apply(v12, []any{v16})
return v13
  case 3:
v8 := args[0]
v9 := args[1]
v10 := args[2]
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("boolean"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v15 := lang.Apply(v3, []any{v8})
var v14 any = v15
_ = v14
var v17 any
if lang.IsTruthy(v14) {
v19 := lang.Apply(v3, []any{v9})
var v18 any = v19
_ = v18
var v21 any
if lang.IsTruthy(v18) {
v23 := lang.Apply(v3, []any{v10})
var v22 any = v23
_ = v22
var v25 any
if lang.IsTruthy(v22) {
v27 := lang.Apply(v4, []any{v8})
var v26 any = v27
_ = v26
var v29 any
if lang.IsTruthy(v26) {
v31 := lang.Apply(v4, []any{v9})
var v30 any = v31
_ = v30
var v33 any
if lang.IsTruthy(v30) {
v35 := lang.Apply(v4, []any{v10})
var v34 any = v35
_ = v34
var v37 any
if lang.IsTruthy(v34) {
v39 := lang.Apply(v5, []any{v8})
var v38 any = v39
_ = v38
var v41 any
if lang.IsTruthy(v38) {
v43 := lang.Apply(v5, []any{v9})
var v42 any = v43
_ = v42
var v45 any
if lang.IsTruthy(v42) {
v46 := lang.Apply(v5, []any{v10})
v45 = v46
} else {
v45 = v42
}
v41 = v45
} else {
v41 = v38
}
v37 = v41
} else {
v37 = v34
}
v33 = v37
} else {
v33 = v30
}
v29 = v33
} else {
v29 = v26
}
v25 = v29
} else {
v25 = v22
}
v21 = v25
} else {
v21 = v18
}
v17 = v21
} else {
v17 = v14
}
v14 := lang.Apply(v13, []any{v17})
return v14
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v8 := args[0]
v9 := args[1]
v10 := args[2]
v11 := lang.NewList(args[3:]...)
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("boolean"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v16 := lang.Apply(v7, []any{v8, v9, v10})
var v15 any = v16
_ = v15
var v18 any
if lang.IsTruthy(v15) {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("every?"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
var v22 lang.FnFunc
v22 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v23 := args[0]
v25 := lang.Apply(v3, []any{v23})
var v24 any = v25
_ = v24
var v27 any
if lang.IsTruthy(v24) {
v29 := lang.Apply(v4, []any{v23})
var v28 any = v29
_ = v28
var v31 any
if lang.IsTruthy(v28) {
v32 := lang.Apply(v5, []any{v23})
v31 = v32
} else {
v31 = v28
}
v27 = v31
} else {
v27 = v24
}
return v27
})
v23 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7451), lang.NewKeyword("column"), int(46), lang.NewKeyword("end-line"), int(7451), lang.NewKeyword("end-column"), int(72))
v24, err := lang.WithMeta(v22, v23.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v25 := lang.Apply(v21, []any{v24, v11})
v18 = v25
} else {
v18 = v15
}
v15 := lang.Apply(v14, []any{v18})
return v15
  }
})
v7 := v6
_ = v7
}
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7445), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(7451), lang.NewKeyword("end-column"), int(82))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("list*"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3, v4, v5, v7})
var v7 any = v11
_ = v7
var v13 lang.FnFunc
{ // function epn
v13 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return true
  case 1:
v15 := args[0]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("every?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
var v19 lang.FnFunc
v19 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v20 := args[0]
v21 := lang.Apply(v20, []any{v15})
return v21
})
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7456), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(7456), lang.NewKeyword("end-column"), int(28))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v22 := lang.Apply(v18, []any{v21, v7})
return v22
  case 2:
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("every?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
var v20 lang.FnFunc
v20 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v21 := args[0]
v23 := lang.Apply(v21, []any{v15})
var v22 any = v23
_ = v22
var v25 any
if lang.IsTruthy(v22) {
v26 := lang.Apply(v21, []any{v16})
v25 = v26
} else {
v25 = v22
}
return v25
})
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7457), lang.NewKeyword("column"), int(25), lang.NewKeyword("end-line"), int(7457), lang.NewKeyword("end-column"), int(42))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v23 := lang.Apply(v19, []any{v22, v7})
return v23
  case 3:
v15 := args[0]
v16 := args[1]
v17 := args[2]
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("every?"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
var v21 lang.FnFunc
v21 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v22 := args[0]
v24 := lang.Apply(v22, []any{v15})
var v23 any = v24
_ = v23
var v26 any
if lang.IsTruthy(v23) {
v28 := lang.Apply(v22, []any{v16})
var v27 any = v28
_ = v27
var v30 any
if lang.IsTruthy(v27) {
v31 := lang.Apply(v22, []any{v17})
v30 = v31
} else {
v30 = v27
}
v26 = v30
} else {
v26 = v23
}
return v26
})
v22 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7458), lang.NewKeyword("column"), int(27), lang.NewKeyword("end-line"), int(7458), lang.NewKeyword("end-column"), int(50))
v23, err := lang.WithMeta(v21, v22.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v24 := lang.Apply(v20, []any{v23, v7})
return v24
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v15 := args[0]
v16 := args[1]
v17 := args[2]
v18 := lang.NewList(args[3:]...)
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("boolean"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v23 := lang.Apply(v14, []any{v15, v16, v17})
var v22 any = v23
_ = v22
var v25 any
if lang.IsTruthy(v22) {
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("every?"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
var v29 lang.FnFunc
v29 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v30 := args[0]
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("every?"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v30, v18})
return v34
})
v30 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7460), lang.NewKeyword("column"), int(48), lang.NewKeyword("end-line"), int(7460), lang.NewKeyword("end-column"), int(63))
v31, err := lang.WithMeta(v29, v30.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v32 := lang.Apply(v28, []any{v31, v7})
v25 = v32
} else {
v25 = v22
}
v22 := lang.Apply(v21, []any{v25})
return v22
  }
})
v14 := v13
_ = v14
}
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7454), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(7460), lang.NewKeyword("end-column"), int(71))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v15
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// every?
{
v1 := reflect.TypeOf(false)
v0 := lang.NewSymbol("every?").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns true if (pred x) is logical true for every x in coll, else\n  false.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2664), lang.NewKeyword("end-line"), int(2664))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
recur_loop_480:
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("nil?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v5})
v14 := lang.Apply(v9, []any{v13})
if lang.IsTruthy(v14) {
v6 = true
} else {
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("first"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v5})
v20 := lang.Apply(v4, []any{v19})
if lang.IsTruthy(v20) {
var v21 any = v4
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("next"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v5})
var v22 any = v26
v4 = v21
v5 = v22
goto recur_loop_480
} else {
var v27 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v27 = false
} else {
v27 = nil
}
v15 = v27
}
v6 = v15
}
return v6
})
v4 := reflect.TypeOf(false)
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ex-cause
{
v0 := lang.NewSymbol("ex-cause").WithMeta(lang.NewMap(lang.NewKeyword("tag"), nil, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ex"))), lang.NewKeyword("doc"), "Returns the cause of ex if ex is a Throwable.\n  Otherwise returns nil.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.10", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4828), lang.NewKeyword("end-line"), int(4828))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.Throwable, v3})
if lang.IsTruthy(v8) {
v9, ok := lang.FieldOrMethod(v3, "getCause")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getCause")))
}
var v10 any
switch reflect.TypeOf(v9).Kind() {
case reflect.Func:
  v10 = lang.Apply(v9, nil)
default:
  v10 = v9
}
v4 = v10
} else {
v4 = nil
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ex-data
{
v0 := lang.NewSymbol("ex-data").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ex"))), lang.NewKeyword("doc"), "Returns exception data (a map) if ex is an IExceptionInfo.\n   Otherwise returns nil.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.4", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4812), lang.NewKeyword("end-line"), int(4812))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{nil, v3})
if lang.IsTruthy(v8) {
v9, ok := lang.FieldOrMethod(v3, "getData")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getData")))
}
var v10 any
switch reflect.TypeOf(v9).Kind() {
case reflect.Func:
  v10 = lang.Apply(v9, nil)
default:
  v10 = v9
}
v4 = v10
} else {
v4 = nil
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ex-info
{
v0 := lang.NewSymbol("ex-info").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("msg"), lang.NewSymbol("map")), lang.NewVector(lang.NewSymbol("msg"), lang.NewSymbol("map"), lang.NewSymbol("cause"))), lang.NewKeyword("doc"), "Create an instance of ExceptionInfo, a RuntimeException subclass\n   that carries a map of additional data.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.4", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4803), lang.NewKeyword("end-line"), int(4803))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("elide-top-frames"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(ExceptionInfo11., []any{v3, v4})
v9 := lang.Apply(v7, []any{v8, "glojure.core$ex_info"})
return v9
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("elide-top-frames"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(ExceptionInfo11., []any{v3, v4, v5})
v10 := lang.Apply(v8, []any{v9, "glojure.core$ex_info"})
return v10
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ex-message
{
v0 := lang.NewSymbol("ex-message").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ex"))), lang.NewKeyword("doc"), "Returns the message attached to ex if ex is a Throwable.\n  Otherwise returns nil.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.10", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4820), lang.NewKeyword("end-line"), int(4820))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.Throwable, v3})
if lang.IsTruthy(v8) {
v9, ok := lang.FieldOrMethod(v3, "getMessage")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getMessage")))
}
var v10 any
switch reflect.TypeOf(v9).Kind() {
case reflect.Func:
  v10 = lang.Apply(v9, nil)
default:
  v10 = v9
}
v4 = v10
} else {
v4 = nil
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// extend
{
v0 := lang.NewSymbol("extend").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("atype"), lang.NewSymbol("&"), lang.NewSymbol("proto+mmaps"))), lang.NewKeyword("doc"), "Implementations of protocol methods can be provided using the extend construct:\n\n  (extend AType\n    AProtocol\n     {:foo an-existing-fn\n      :bar (fn [a b] ...)\n      :baz (fn ([a]...) ([a b] ...)...)}\n    BProtocol \n      {...} \n    ...)\n \n  extend takes a type/class (or interface, see below), and one or more\n  protocol + method map pairs. It will extend the polymorphism of the\n  protocol's methods to call the supplied methods when an AType is\n  provided as the first argument. \n\n  Method maps are maps of the keyword-ized method names to ordinary\n  fns. This facilitates easy reuse of existing fns and fn maps, for\n  code reuse/mixins without derivation or composition. You can extend\n  an interface to a protocol. This is primarily to facilitate interop\n  with the host (e.g. Java) but opens the door to incidental multiple\n  inheritance of implementation since a class can inherit from more\n  than one interface, both of which extend the protocol. It is TBD how\n  to specify which impl to use. You can extend a protocol on nil.\n\n  If you are supplying the definitions explicitly (i.e. not reusing\n  exsting functions or mixin maps), you may find it more convenient to\n  use the extend-type or extend-protocol macros.\n\n  Note that multiple independent extend clauses can exist for the same\n  type, not all protocols need be defined in a single extend call.\n\n  See also:\n  extends?, satisfies?, extenders", lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(116), lang.NewKeyword("end-line"), int(116))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("partition"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{int64(2), v4})
v13 := lang.Apply(v8, []any{v12})
var v5 any = v13
_ = v5
var v14 any = nil
_ = v14
var v15 any = int64(0)
_ = v15
var v16 any = int64(0)
_ = v16
var v17 any
for {
var v18 any
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("<"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v16, v15})
if lang.IsTruthy(v22) {
v24, _ := lang.FieldOrMethod(v14, "nth")
if reflect.TypeOf(v24).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v25 := lang.Apply(v24, []any{v16})
var v23 any = v25
_ = v23
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("nth"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v23, int64(0), nil})
var v26 any = v30
_ = v26
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("nth"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v23, int64(1), nil})
var v31 any = v35
_ = v31
var v37 any
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("protocol?"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v26})
if lang.IsTruthy(v41) {
v37 = nil
} else {
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("str"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v26, " is not a protocol"})
v46 := lang.Apply(errors6.New, []any{v45})
panic(v46)
}
_ = v37
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("reduce1"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
var v50 lang.FnFunc
v50 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v51 := args[0]
v52 := args[1]
var v53 any = v52
_ = v53
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("nth"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{v53, int64(0), nil})
var v54 any = v58
_ = v54
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("nth"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.Apply(v62, []any{v53, int64(1), nil})
var v59 any = v63
_ = v59
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("get-in"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("deref"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{v26})
v72 := lang.NewVector(lang.NewKeyword("multis"), v54)
v73 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(158), lang.NewKeyword("column"), int(33), lang.NewKeyword("end-line"), int(158), lang.NewKeyword("end-column"), int(43))
v74, err := lang.WithMeta(v72, v73.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v75 := lang.Apply(v67, []any{v71, v74})
var v76 lang.FnFunc
v76 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v77 := args[0]
v78 := lang.NewList(args[1:]...)
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("apply"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("cons"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, []any{v77, v78})
v86 := lang.Apply(v81, []any{v59, v85})
return v86
  }
})
v77, _ := lang.FieldOrMethod(v75, "AddMethod")
if reflect.TypeOf(v77).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("AddMethod is not a function")))
}
v78 := lang.Apply(v77, []any{v3, v76})
return v78
})
v51 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(156), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(160), lang.NewKeyword("end-column"), int(45))
v52, err := lang.WithMeta(v50, v51.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v53 := lang.Apply(v49, []any{v52, nil, v31})
_ = v53
var v54 any = v5
var v55 any = v14
var v56 any = v15
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.Apply(v60, []any{v16})
var v57 any = v61
v5 = v54
v14 = v55
v15 = v56
v16 = v57
continue
} else {
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("seq"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v5})
var v23 any = v27
_ = v23
var v29 any
if lang.IsTruthy(v23) {
var v30 any = v23
_ = v30
var v32 any
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v30})
if lang.IsTruthy(v36) {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("chunk-first"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v30})
var v37 any = v41
_ = v37
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v30})
var v43 any = v47
var v48 any = v37
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("int"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("count"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{v37})
v57 := lang.Apply(v52, []any{v56})
var v49 any = v57
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("int"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v61, []any{int64(0)})
var v58 any = v62
v5 = v43
v14 = v48
v15 = v49
v16 = v58
continue
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("first"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v30})
var v37 any = v41
_ = v37
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("nth"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v37, int64(0), nil})
var v42 any = v46
_ = v42
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("nth"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v37, int64(1), nil})
var v47 any = v51
_ = v47
var v53 any
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("protocol?"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v42})
if lang.IsTruthy(v57) {
v53 = nil
} else {
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("str"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.Apply(v60, []any{v42, " is not a protocol"})
v62 := lang.Apply(errors6.New, []any{v61})
panic(v62)
}
_ = v53
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("reduce1"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
var v66 lang.FnFunc
v66 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v67 := args[0]
v68 := args[1]
var v69 any = v68
_ = v69
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("nth"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{v69, int64(0), nil})
var v70 any = v74
_ = v70
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("nth"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.Apply(v78, []any{v69, int64(1), nil})
var v75 any = v79
_ = v75
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("get-in"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("deref"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.Apply(v86, []any{v42})
v88 := lang.NewVector(lang.NewKeyword("multis"), v70)
v89 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(158), lang.NewKeyword("column"), int(33), lang.NewKeyword("end-line"), int(158), lang.NewKeyword("end-column"), int(43))
v90, err := lang.WithMeta(v88, v89.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v91 := lang.Apply(v83, []any{v87, v90})
var v92 lang.FnFunc
v92 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v93 := args[0]
v94 := lang.NewList(args[1:]...)
v95 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v96 := v95.FindInternedVar(lang.NewSymbol("apply"))
if v96.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v96)))
}
v97 := v96.Get()
v98 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v99 := v98.FindInternedVar(lang.NewSymbol("cons"))
if v99.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v99)))
}
v100 := v99.Get()
v101 := lang.Apply(v100, []any{v93, v94})
v102 := lang.Apply(v97, []any{v75, v101})
return v102
  }
})
v93, _ := lang.FieldOrMethod(v91, "AddMethod")
if reflect.TypeOf(v93).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("AddMethod is not a function")))
}
v94 := lang.Apply(v93, []any{v3, v92})
return v94
})
v67 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(156), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(160), lang.NewKeyword("end-column"), int(45))
v68, err := lang.WithMeta(v66, v67.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v69 := lang.Apply(v65, []any{v68, nil, v47})
_ = v69
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("next"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{v30})
var v70 any = v74
var v75 any = nil
var v76 any = int64(0)
var v77 any = int64(0)
v5 = v70
v14 = v75
v15 = v76
v16 = v77
continue
}
v29 = v32
} else {
v29 = nil
}
v18 = v29
}
v17 = v18
  break
}
return v17
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// extend-protocol
{
v0 := lang.NewSymbol("extend-protocol").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("p"), lang.NewSymbol("&"), lang.NewSymbol("specs"))), lang.NewKeyword("doc"), "Useful when you want to provide several implementations of the same\n  protocol all at once. Takes a single protocol and the implementation\n  of that protocol for one or more types.\n\n  (extend-protocol Protocol\n    AType\n      (foo [x] ...)\n      (bar [x y] ...)\n    BType\n      (foo [x] ...)\n      (bar [x y] ...)\n    AClass\n      (foo [x] ...)\n      (bar [x y] ...)\n    nil\n      (foo [x] ...)\n      (bar [x y] ...))\n\n  expands into:\n\n  (do\n   (clojure.core/extend-type AType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type BType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type AClass Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type nil Protocol \n     (foo [x] ...) \n     (bar [x y] ...)))", lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(212), lang.NewKeyword("end-line"), int(212))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("emit-extend-protocol"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v5, v6})
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// extend-type
{
v0 := lang.NewSymbol("extend-type").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("t"), lang.NewSymbol("&"), lang.NewSymbol("specs"))), lang.NewKeyword("doc"), "A macro that expands into an extend call. Useful when you are\n  supplying the definitions explicitly inline, extend-type\n  automatically creates the maps required by extend.  Propagates the\n  class as a type hint on the first argument of all fns.\n\n  (extend-type MyType \n    Countable\n      (cnt [c] ...)\n    Foo\n      (bar [x y] ...)\n      (baz ([x] ...) ([x y & zs] ...)))\n\n  expands into:\n\n  (extend MyType\n   Countable\n     {:cnt (fn [c] ...)}\n   Foo\n     {:baz (fn ([x] ...) ([x y & zs] ...))\n      :bar (fn [x y] ...)})", lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(180), lang.NewKeyword("end-line"), int(180))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("emit-extend-type"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v5, v6})
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// false?
{
v1 := reflect.TypeOf(false)
v0 := lang.NewSymbol("false?").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x is the value false, false otherwise.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(504), lang.NewKeyword("end-line"), int(504))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.Identical, []any{v4, false})
return v5
})
v4 := reflect.TypeOf(false)
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ffirst
{
v0 := lang.NewSymbol("ffirst").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Same as (first (first x))", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(98), lang.NewKeyword("end-line"), int(102))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function ffirst
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("first"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("first"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
v12 := lang.Apply(v7, []any{v11})
return v12
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(102), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(102), lang.NewKeyword("end-column"), int(50))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// file-seq
{
v0 := lang.NewSymbol("file-seq").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("dir"))), lang.NewKeyword("doc"), "A tree seq on java.io.Files", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4972), lang.NewKeyword("end-line"), int(4972))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("tree-seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := args[0]
v9, _ := lang.FieldOrMethod(v8, "isDirectory")
if reflect.TypeOf(v9).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("isDirectory is not a function")))
}
v10 := lang.Apply(v9, []any{})
return v10
})
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4978), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(4978), lang.NewKeyword("end-column"), int(47))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v10 lang.FnFunc
v10 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v11 := args[0]
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("seq"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15, _ := lang.FieldOrMethod(v11, "listFiles")
if reflect.TypeOf(v15).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("listFiles is not a function")))
}
v16 := lang.Apply(v15, []any{})
v17 := lang.Apply(v14, []any{v16})
return v17
})
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4979), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(4979), lang.NewKeyword("end-column"), int(51))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v13 := lang.Apply(v6, []any{v9, v12, v3})
return v13
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// filter
{
v0 := lang.NewSymbol("filter").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred")), lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2785), lang.NewKeyword("end-line"), int(2785))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v7 := lang.Apply(v5, nil)
return v7
  case 1:
v7 := args[0]
v8 := lang.Apply(v5, []any{v7})
return v8
  case 2:
v7 := args[0]
v8 := args[1]
var v9 any
v10 := lang.Apply(v3, []any{v8})
if lang.IsTruthy(v10) {
v11 := lang.Apply(v5, []any{v7, v8})
v9 = v11
} else {
v9 = v7
}
return v9
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2793), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(2799), lang.NewKeyword("end-column"), int(22))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2792), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(2799), lang.NewKeyword("end-column"), int(23))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
var v13 any = v6
_ = v13
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v13})
if lang.IsTruthy(v19) {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("chunk-first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v13})
var v20 any = v24
_ = v20
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("count"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v20})
var v25 any = v29
_ = v25
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("chunk-buffer"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v25})
var v30 any = v34
_ = v30
v37 := lang.Apply(lang.LongCast, []any{v25})
var v36 any = v37
_ = v36
var v39 any = int64(0)
_ = v39
var v40 any
for {
var v41 any
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("<"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v39, v36})
if lang.IsTruthy(v45) {
v47, _ := lang.FieldOrMethod(v20, "nth")
if reflect.TypeOf(v47).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v48 := lang.Apply(v47, []any{v39})
var v46 any = v48
_ = v46
var v50 any
v51 := lang.Apply(v3, []any{v46})
if lang.IsTruthy(v51) {
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("chunk-append"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v30, v46})
v50 = v55
} else {
v50 = nil
}
_ = v50
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v39})
var v46 any = v50
v39 = v46
continue
} else {
v41 = nil
}
v40 = v41
  break
}
_ = v40
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("chunk-cons"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("chunk"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v30})
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("filter"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v13})
v50 := lang.Apply(v45, []any{v3, v49})
v51 := lang.Apply(v38, []any{v42, v50})
v15 = v51
} else {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v13})
var v20 any = v24
_ = v20
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("rest"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v13})
var v25 any = v29
_ = v25
var v31 any
v32 := lang.Apply(v3, []any{v20})
if lang.IsTruthy(v32) {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("cons"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("filter"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v3, v25})
v40 := lang.Apply(v35, []any{v20, v39})
v31 = v40
} else {
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("filter"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3, v25})
v31 = v44
}
v15 = v31
}
v12 = v15
} else {
v12 = nil
}
return v12
})
v6 := lang.Apply(lang.NewLazySeq, []any{v5})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// filter-key
{
v0 := lang.NewSymbol("filter-key").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("keyfn"), lang.NewSymbol("pred"), lang.NewSymbol("amap"))), lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4115), lang.NewKeyword("end-line"), int(4117), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v7 := lang.NewMap()
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4118), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(4118), lang.NewKeyword("end-column"), int(17))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v6 any = v9
_ = v6
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("seq"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v5})
var v10 any = v14
_ = v10
var v15 any
for {
var v16 any
if lang.IsTruthy(v10) {
var v17 any
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("first"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v10})
v22 := lang.Apply(v3, []any{v21})
v23 := lang.Apply(v4, []any{v22})
if lang.IsTruthy(v23) {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("assoc"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("key"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("first"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v10})
v35 := lang.Apply(v30, []any{v34})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("val"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("first"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v10})
v43 := lang.Apply(v38, []any{v42})
v44 := lang.Apply(v27, []any{v6, v35, v43})
var v24 any = v44
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("next"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v10})
var v45 any = v49
v6 = v24
v10 = v45
continue
} else {
var v50 any = v6
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("next"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v10})
var v51 any = v55
v6 = v50
v10 = v51
continue
}
v16 = v17
} else {
v16 = v6
}
v15 = v16
  break
}
return v15
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// filterv
{
v0 := lang.NewSymbol("filterv").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a vector of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.4", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6961), lang.NewKeyword("end-line"), int(6961))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("persistent!"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
var v11 lang.FnFunc
v11 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v12 := args[0]
v13 := args[1]
var v14 any
v15 := lang.Apply(v3, []any{v13})
if lang.IsTruthy(v15) {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("conj!"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v12, v13})
v14 = v19
} else {
v14 = v12
}
return v14
})
v12 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6967), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(6967), lang.NewKeyword("end-column"), int(52))
v13, err := lang.WithMeta(v11, v12.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("transient"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.NewVector()
v18 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6968), lang.NewKeyword("column"), int(26), lang.NewKeyword("end-line"), int(6968), lang.NewKeyword("end-column"), int(27))
v19, err := lang.WithMeta(v17, v18.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v20 := lang.Apply(v16, []any{v19})
v21 := lang.Apply(v10, []any{v13, v20, v4})
v22 := lang.Apply(v7, []any{v21})
return v22
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// find
{
v0 := lang.NewSymbol("find").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("map"), lang.NewSymbol("key"))), lang.NewKeyword("doc"), "Returns the map entry for key, or nil if key not present.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1530), lang.NewKeyword("end-line"), int(1530))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(runtime5.RT, "Find")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Find is not a function")))
}
v6 := lang.Apply(v5, []any{v3, v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// find-keyword
{
v1 := reflect.TypeOf((*lang.Keyword)(nil)).Elem()
v0 := lang.NewSymbol("find-keyword").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name")), lang.NewVector(lang.NewSymbol("ns"), lang.NewSymbol("name"))), lang.NewKeyword("doc"), "Returns a Keyword with the given namespace and name if one already\n  exists.  This function will not intern a new keyword. If the keyword\n  has not already been interned, it will return nil.  Do not use :\n  in the keyword strings, it will be added automatically.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(618), lang.NewKeyword("end-line"), int(618))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("keyword?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
v5 = v4
} else {
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("symbol?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v4})
if lang.IsTruthy(v14) {
v15 := lang.Apply(nil, []any{v4})
v10 = v15
} else {
var v16 any
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("string?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v4})
if lang.IsTruthy(v20) {
v21 := lang.Apply(nil, []any{v4})
v16 = v21
} else {
v16 = nil
}
v10 = v16
}
v5 = v10
}
return v5
  case 2:
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(nil, []any{v4, v5})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v4 := reflect.TypeOf((*lang.Keyword)(nil)).Elem()
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// find-ns
{
v0 := lang.NewSymbol("find-ns").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("sym"))), lang.NewKeyword("doc"), "Returns the namespace named by the symbol or nil if it doesn't exist.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4125), lang.NewKeyword("end-line"), int(4125))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(lang.FindNamespace, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// find-var
{
v0 := lang.NewSymbol("find-var").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("sym"))), lang.NewKeyword("doc"), "Returns the global var named by the namespace-qualified symbol, or\n  nil if no var with that name.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2013), lang.NewKeyword("end-line"), int(2013))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(runtime5.RT, "FindVar")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("FindVar is not a function")))
}
v5 := lang.Apply(v4, []any{v3})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// first
{
v0 := lang.NewSymbol("first").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns the first item in the collection. Calls seq on its\n    argument. If coll is nil, returns nil.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(6), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(47), lang.NewKeyword("end-line"), int(52))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function first
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.First, []any{v4})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(52), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(52), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// fits-table?
{
v0 := lang.NewSymbol("fits-table?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ints"))), lang.NewKeyword("doc"), "Returns true if the collection of ints can fit within the\n  max-table-switch-size, false otherwise.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(6625), lang.NewKeyword("end-line"), int(6625), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("<"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("-"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("apply"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("max"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("seq"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v3})
v20 := lang.Apply(v12, []any{v15, v19})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("apply"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("min"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v3})
v31 := lang.Apply(v23, []any{v26, v30})
v32 := lang.Apply(v9, []any{v20, v31})
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("max-switch-table-size"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v6, []any{v32, v35})
return v36
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// flatten
{
v0 := lang.NewSymbol("flatten").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat lazy sequence.\n  (flatten nil) returns an empty sequence.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7118), lang.NewKeyword("end-line"), int(7118))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("filter"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("complement"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("sequential?"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v9, []any{v12})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("rest"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("tree-seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("sequential?"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("seq"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v19, []any{v22, v25, v3})
v27 := lang.Apply(v16, []any{v26})
v28 := lang.Apply(v6, []any{v13, v27})
return v28
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// float
{
var v1 lang.FnFunc
{ // function float__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
var v30 any
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
if lang.IsTruthy(v33) {
v30 = lang.NewSymbol("uncheckedFloatCast")
} else {
v30 = lang.NewSymbol("floatCast")
}
v34 := lang.Apply(v29, []any{v30})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v3})
v39 := lang.Apply(v26, []any{v34, v38})
v40 := lang.Apply(v23, []any{v39})
v41 := lang.Apply(v20, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("float").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to float", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3487), lang.NewKeyword("end-line"), int(3487))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.FloatCast, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// float-array
{
var v1 lang.FnFunc
{ // function float-array__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/floatArray")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("glojure.core/unquote-splicing")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{lang.NewSymbol("glojure.core/args")})
v39 := lang.Apply(v30, []any{v34, v38})
v40 := lang.Apply(v27, []any{v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v21, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
  }
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("float-array").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("size-or-seq")), lang.NewVector(lang.NewSymbol("size"), lang.NewSymbol("init-val-or-seq"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Creates an array of floats", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5301), lang.NewKeyword("end-line"), int(5301))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "floatArray")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("floatArray is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "floatArrayInit")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("floatArrayInit is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// float?
{
v0 := lang.NewSymbol("float?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Returns true if n is a floating point number", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3605), lang.NewKeyword("end-line"), int(3605))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.Builtins["float64"], v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
v10 = v4
} else {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("instance?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.Builtins["float32"], v3})
v10 = v14
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// floats
{
var v1 lang.FnFunc
{ // function floats
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/floats")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v9, []any{v13, v17, v21, v25})
v27 := lang.Apply(v6, []any{v26})
return v27
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("floats").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("xs"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Casts to float[]", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(12), lang.NewKeyword("line"), int(5392), lang.NewKeyword("end-line"), int(5392))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "floats")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("floats is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// flush
{
v0 := lang.NewSymbol("flush").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Flushes the output stream that is the current value of\n  *out*", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3706), lang.NewKeyword("end-line"), int(3706))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v4 := v3.FindInternedVar(lang.NewSymbol("*out*"))
if v4.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v4)))
}
v5 := v4.Get()
v6, _ := lang.FieldOrMethod(v5, "Sync")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Sync is not a function")))
}
v7 := lang.Apply(v6, []any{})
_ = v7
return nil
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// fn
{
v0 := lang.NewSymbol("fn").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("sigs"))), lang.NewKeyword("doc"), "params => positional-params*, or positional-params* & rest-param\n  positional-param => binding-form\n  rest-param => binding-form\n  binding-form => name, or destructuring-form\n\n  Defines a function.\n\n  See https://glojure.org/reference/special_forms#fn for more information", lang.NewKeyword("forms"), lang.NewVector(lang.NewList(lang.NewSymbol("fn"), lang.NewSymbol("name?"), lang.NewVector(lang.NewSymbol("params*")), lang.NewSymbol("exprs*")), lang.NewList(lang.NewSymbol("fn"), lang.NewSymbol("name?"), lang.NewList(lang.NewVector(lang.NewSymbol("params*")), lang.NewSymbol("exprs*")), lang.NewSymbol("+"))), lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4533), lang.NewKeyword("end-line"), int(4533), lang.NewKeyword("special-form"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("symbol?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("first"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v5})
v15 := lang.Apply(v10, []any{v14})
if lang.IsTruthy(v15) {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("first"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v5})
v7 = v19
} else {
v7 = nil
}
var v6 any = v7
_ = v6
var v21 any
if lang.IsTruthy(v6) {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("next"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v20})
v21 = v25
} else {
v21 = v20
}
var v20 any = v21
_ = v20
var v27 any
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("vector?"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("first"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v26})
v35 := lang.Apply(v30, []any{v34})
if lang.IsTruthy(v35) {
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v26})
v27 = v39
} else {
var v40 any
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("seq?"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("first"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v26})
v48 := lang.Apply(v43, []any{v47})
if lang.IsTruthy(v48) {
v40 = v26
} else {
var v49 any
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("seq"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v26})
if lang.IsTruthy(v53) {
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("str"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("first"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v26})
v61 := lang.Apply(v56, []any{"Parameter declaration ", v60, " should be a vector"})
v49 = v61
} else {
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("str"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{"Parameter declaration missing"})
v49 = v65
}
v66 := lang.Apply(lang.NewIllegalArgumentError, []any{v49})
panic(v66)
}
v27 = v40
}
var v26 any = v27
_ = v26
var v68 lang.FnFunc
v68 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v69 := args[0]
var v70 any
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("not"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("seq?"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.Apply(v76, []any{v69})
v78 := lang.Apply(v73, []any{v77})
if lang.IsTruthy(v78) {
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("str"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.Apply(v81, []any{"Invalid signature ", v69, " should be a list"})
v83 := lang.Apply(lang.NewIllegalArgumentError, []any{v82})
panic(v83)
} else {
v70 = nil
}
_ = v70
var v84 any = v69
_ = v84
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("seq"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.Apply(v88, []any{v84})
var v85 any = v89
_ = v85
v91 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v92 := v91.FindInternedVar(lang.NewSymbol("first"))
if v92.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v92)))
}
v93 := v92.Get()
v94 := lang.Apply(v93, []any{v85})
var v90 any = v94
_ = v90
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("next"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.Apply(v98, []any{v95})
var v95 any = v99
_ = v95
var v100 any = v90
_ = v100
var v101 any = v95
_ = v101
var v103 any
v104 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v105 := v104.FindInternedVar(lang.NewSymbol("not"))
if v105.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v105)))
}
v106 := v105.Get()
v107 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v108 := v107.FindInternedVar(lang.NewSymbol("vector?"))
if v108.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v108)))
}
v109 := v108.Get()
v110 := lang.Apply(v109, []any{v100})
v111 := lang.Apply(v106, []any{v110})
if lang.IsTruthy(v111) {
var v112 any
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("seq?"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v117 := v116.FindInternedVar(lang.NewSymbol("first"))
if v117.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v117)))
}
v118 := v117.Get()
v119 := lang.Apply(v118, []any{v26})
v120 := lang.Apply(v115, []any{v119})
if lang.IsTruthy(v120) {
v121 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v122 := v121.FindInternedVar(lang.NewSymbol("str"))
if v122.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v122)))
}
v123 := v122.Get()
v124 := lang.Apply(v123, []any{"Parameter declaration ", v100, " should be a vector"})
v112 = v124
} else {
v125 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v126 := v125.FindInternedVar(lang.NewSymbol("str"))
if v126.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v126)))
}
v127 := v126.Get()
v128 := lang.Apply(v127, []any{"Invalid signature ", v69, " should be a list"})
v112 = v128
}
v129 := lang.Apply(lang.NewIllegalArgumentError, []any{v112})
panic(v129)
} else {
v103 = nil
}
var v102 any = v103
_ = v102
var v131 any
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("next"))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.Apply(v135, []any{v101})
var v132 any = v136
_ = v132
var v138 any
if lang.IsTruthy(v132) {
v139 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v140 := v139.FindInternedVar(lang.NewSymbol("map?"))
if v140.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v140)))
}
v141 := v140.Get()
v142 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v143 := v142.FindInternedVar(lang.NewSymbol("first"))
if v143.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v143)))
}
v144 := v143.Get()
v145 := lang.Apply(v144, []any{v101})
v146 := lang.Apply(v141, []any{v145})
v138 = v146
} else {
v138 = v132
}
if lang.IsTruthy(v138) {
v132 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v133 := v132.FindInternedVar(lang.NewSymbol("first"))
if v133.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v133)))
}
v134 := v133.Get()
v135 := lang.Apply(v134, []any{v101})
v131 = v135
} else {
v131 = nil
}
var v130 any = v131
_ = v130
var v137 any
if lang.IsTruthy(v130) {
v138 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v139 := v138.FindInternedVar(lang.NewSymbol("next"))
if v139.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v139)))
}
v140 := v139.Get()
v141 := lang.Apply(v140, []any{v136})
v137 = v141
} else {
v137 = v136
}
var v136 any = v137
_ = v136
var v143 any = v142
_ = v143
var v145 any
if lang.IsTruthy(v143) {
v145 = v143
} else {
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("meta"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.Apply(v148, []any{v100})
v145 = v149
}
var v142 any = v145
_ = v142
v144 := lang.Apply(lang.NewKeyword("pre"), []any{v142})
var v143 any = v144
_ = v143
v146 := lang.Apply(lang.NewKeyword("post"), []any{v142})
var v145 any = v146
_ = v145
var v148 any
if lang.IsTruthy(v145) {
v149 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v150 := v149.FindInternedVar(lang.NewSymbol("seq"))
if v150.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v150)))
}
v151 := v150.Get()
v152 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v153 := v152.FindInternedVar(lang.NewSymbol("concat"))
if v153.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v153)))
}
v154 := v153.Get()
v155 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v156 := v155.FindInternedVar(lang.NewSymbol("list"))
if v156.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v156)))
}
v157 := v156.Get()
v158 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v159 := v158.FindInternedVar(lang.NewSymbol("seq"))
if v159.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v159)))
}
v160 := v159.Get()
v161 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v162 := v161.FindInternedVar(lang.NewSymbol("concat"))
if v162.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v162)))
}
v163 := v162.Get()
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("list"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.Apply(v166, []any{lang.NewSymbol("glojure.core/let")})
v168 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v169 := v168.FindInternedVar(lang.NewSymbol("list"))
if v169.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v169)))
}
v170 := v169.Get()
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("apply"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
v174 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v175 := v174.FindInternedVar(lang.NewSymbol("vector"))
if v175.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v175)))
}
v176 := v175.Get()
v177 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v178 := v177.FindInternedVar(lang.NewSymbol("seq"))
if v178.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v178)))
}
v179 := v178.Get()
v180 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v181 := v180.FindInternedVar(lang.NewSymbol("concat"))
if v181.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v181)))
}
v182 := v181.Get()
v183 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v184 := v183.FindInternedVar(lang.NewSymbol("list"))
if v184.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v184)))
}
v185 := v184.Get()
v186 := lang.Apply(v185, []any{lang.NewSymbol("%")})
v187 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v188 := v187.FindInternedVar(lang.NewSymbol("list"))
if v188.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v188)))
}
v189 := v188.Get()
var v190 any
v191 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v192 := v191.FindInternedVar(lang.NewSymbol("<"))
if v192.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v192)))
}
v193 := v192.Get()
v194 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v195 := v194.FindInternedVar(lang.NewSymbol("count"))
if v195.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v195)))
}
v196 := v195.Get()
v197 := lang.Apply(v196, []any{v147})
v198 := lang.Apply(v193, []any{int64(1), v197})
if lang.IsTruthy(v198) {
v199 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v200 := v199.FindInternedVar(lang.NewSymbol("seq"))
if v200.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v200)))
}
v201 := v200.Get()
v202 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v203 := v202.FindInternedVar(lang.NewSymbol("concat"))
if v203.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v203)))
}
v204 := v203.Get()
v205 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v206 := v205.FindInternedVar(lang.NewSymbol("list"))
if v206.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v206)))
}
v207 := v206.Get()
v208 := lang.Apply(v207, []any{lang.NewSymbol("do")})
v209 := lang.Apply(v204, []any{v208, v147})
v210 := lang.Apply(v201, []any{v209})
v190 = v210
} else {
v211 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v212 := v211.FindInternedVar(lang.NewSymbol("first"))
if v212.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v212)))
}
v213 := v212.Get()
v214 := lang.Apply(v213, []any{v147})
v190 = v214
}
v215 := lang.Apply(v189, []any{v190})
v216 := lang.Apply(v182, []any{v186, v215})
v217 := lang.Apply(v179, []any{v216})
v218 := lang.Apply(v173, []any{v176, v217})
v219 := lang.Apply(v170, []any{v218})
v220 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v221 := v220.FindInternedVar(lang.NewSymbol("map"))
if v221.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v221)))
}
v222 := v221.Get()
var v223 lang.FnFunc
v223 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v224 := args[0]
v225 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v226 := v225.FindInternedVar(lang.NewSymbol("seq"))
if v226.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v226)))
}
v227 := v226.Get()
v228 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v229 := v228.FindInternedVar(lang.NewSymbol("concat"))
if v229.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v229)))
}
v230 := v229.Get()
v231 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v232 := v231.FindInternedVar(lang.NewSymbol("list"))
if v232.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v232)))
}
v233 := v232.Get()
v234 := lang.Apply(v233, []any{lang.NewSymbol("glojure.core/assert")})
v235 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v236 := v235.FindInternedVar(lang.NewSymbol("list"))
if v236.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v236)))
}
v237 := v236.Get()
v238 := lang.Apply(v237, []any{v224})
v239 := lang.Apply(v230, []any{v234, v238})
v240 := lang.Apply(v227, []any{v239})
return v240
})
v224 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4582), lang.NewKeyword("column"), int(41), lang.NewKeyword("end-line"), int(4582), lang.NewKeyword("end-column"), int(62))
v225, err := lang.WithMeta(v223, v224.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v226 := lang.Apply(v222, []any{v225, v145})
v227 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v228 := v227.FindInternedVar(lang.NewSymbol("list"))
if v228.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v228)))
}
v229 := v228.Get()
v230 := lang.Apply(v229, []any{lang.NewSymbol("%")})
v231 := lang.Apply(v163, []any{v167, v219, v226, v230})
v232 := lang.Apply(v160, []any{v231})
v233 := lang.Apply(v157, []any{v232})
v234 := lang.Apply(v154, []any{v233})
v235 := lang.Apply(v151, []any{v234})
v148 = v235
} else {
v148 = v147
}
var v147 any = v148
_ = v147
var v237 any
if lang.IsTruthy(v143) {
v238 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v239 := v238.FindInternedVar(lang.NewSymbol("concat"))
if v239.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v239)))
}
v240 := v239.Get()
v241 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v242 := v241.FindInternedVar(lang.NewSymbol("map"))
if v242.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v242)))
}
v243 := v242.Get()
var v244 lang.FnFunc
v244 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v245 := args[0]
v246 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v247 := v246.FindInternedVar(lang.NewSymbol("seq"))
if v247.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v247)))
}
v248 := v247.Get()
v249 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v250 := v249.FindInternedVar(lang.NewSymbol("concat"))
if v250.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v250)))
}
v251 := v250.Get()
v252 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v253 := v252.FindInternedVar(lang.NewSymbol("list"))
if v253.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v253)))
}
v254 := v253.Get()
v255 := lang.Apply(v254, []any{lang.NewSymbol("glojure.core/assert")})
v256 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v257 := v256.FindInternedVar(lang.NewSymbol("list"))
if v257.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v257)))
}
v258 := v257.Get()
v259 := lang.Apply(v258, []any{v245})
v260 := lang.Apply(v251, []any{v255, v259})
v261 := lang.Apply(v248, []any{v260})
return v261
})
v245 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4586), lang.NewKeyword("column"), int(44), lang.NewKeyword("end-line"), int(4586), lang.NewKeyword("end-column"), int(65))
v246, err := lang.WithMeta(v244, v245.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v247 := lang.Apply(v243, []any{v246, v143})
v248 := lang.Apply(v240, []any{v247, v236})
v237 = v248
} else {
v237 = v236
}
var v236 any = v237
_ = v236
v250 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v251 := v250.FindInternedVar(lang.NewSymbol("maybe-destructured"))
if v251.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v251)))
}
v252 := v251.Get()
v253 := lang.Apply(v252, []any{v100, v236})
return v253
})
v69 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4558), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(4589), lang.NewKeyword("end-column"), int(53))
v70, err := lang.WithMeta(v68, v69.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v67 any = v70
_ = v67
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("map"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v74, []any{v67, v26})
var v71 any = v75
_ = v71
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("with-meta"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
var v80 any
if lang.IsTruthy(v6) {
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("list*"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.Apply(v83, []any{lang.NewSymbol("fn*"), v6, v71})
v80 = v84
} else {
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("cons"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.Apply(v87, []any{lang.NewSymbol("fn*"), v71})
v80 = v88
}
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("meta"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.Apply(v91, []any{v3})
v93 := lang.Apply(v79, []any{v80, v92})
return v93
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// fn?
{
v0 := lang.NewSymbol("fn?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x implements Fn, i.e. is an object created via fn.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6216), lang.NewKeyword("end-line"), int(6216))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{runtime5.*Fn, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// fnext
{
v0 := lang.NewSymbol("fnext").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Same as (first (next x))", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(6), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(112), lang.NewKeyword("end-line"), int(116))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function fnext
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("first"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("next"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
v12 := lang.Apply(v7, []any{v11})
return v12
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(116), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(116), lang.NewKeyword("end-column"), int(47))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// fnil
{
v0 := lang.NewSymbol("fnil").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("z"))), lang.NewKeyword("doc"), "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6558), lang.NewKeyword("end-line"), int(6558))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v6 := args[0]
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("nil?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v6})
if lang.IsTruthy(v11) {
v7 = v4
} else {
v7 = v6
}
v12 := lang.Apply(v3, []any{v7})
return v12
  case 2:
v6 := args[0]
v7 := args[1]
var v8 any
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("nil?"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v6})
if lang.IsTruthy(v12) {
v8 = v4
} else {
v8 = v6
}
v13 := lang.Apply(v3, []any{v8, v7})
return v13
  case 3:
v6 := args[0]
v7 := args[1]
v8 := args[2]
var v9 any
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("nil?"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v6})
if lang.IsTruthy(v13) {
v9 = v4
} else {
v9 = v6
}
v14 := lang.Apply(v3, []any{v9, v7, v8})
return v14
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v6 := args[0]
v7 := args[1]
v8 := args[2]
v9 := lang.NewList(args[3:]...)
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("apply"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
var v13 any
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("nil?"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v6})
if lang.IsTruthy(v17) {
v13 = v4
} else {
v13 = v6
}
v18 := lang.Apply(v12, []any{v3, v13, v7, v8, v9})
return v18
  }
})
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6567), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(6571), lang.NewKeyword("end-column"), int(55))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v7
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v7 := args[0]
v8 := args[1]
var v9 any
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("nil?"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v7})
if lang.IsTruthy(v13) {
v9 = v4
} else {
v9 = v7
}
var v14 any
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("nil?"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v8})
if lang.IsTruthy(v18) {
v14 = v5
} else {
v14 = v8
}
v19 := lang.Apply(v3, []any{v9, v14})
return v19
  case 3:
v7 := args[0]
v8 := args[1]
v9 := args[2]
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("nil?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v7})
if lang.IsTruthy(v14) {
v10 = v4
} else {
v10 = v7
}
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("nil?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v8})
if lang.IsTruthy(v19) {
v15 = v5
} else {
v15 = v8
}
v20 := lang.Apply(v3, []any{v10, v15, v9})
return v20
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v7 := args[0]
v8 := args[1]
v9 := args[2]
v10 := lang.NewList(args[3:]...)
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("apply"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 any
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("nil?"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v7})
if lang.IsTruthy(v18) {
v14 = v4
} else {
v14 = v7
}
var v19 any
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("nil?"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v8})
if lang.IsTruthy(v23) {
v19 = v5
} else {
v19 = v8
}
v24 := lang.Apply(v13, []any{v3, v14, v19, v9, v10})
return v24
  }
})
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6573), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(6576), lang.NewKeyword("end-column"), int(71))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v8 := args[0]
v9 := args[1]
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("nil?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v8})
if lang.IsTruthy(v14) {
v10 = v4
} else {
v10 = v8
}
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("nil?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v9})
if lang.IsTruthy(v19) {
v15 = v5
} else {
v15 = v9
}
v20 := lang.Apply(v3, []any{v10, v15})
return v20
  case 3:
v8 := args[0]
v9 := args[1]
v10 := args[2]
var v11 any
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("nil?"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v8})
if lang.IsTruthy(v15) {
v11 = v4
} else {
v11 = v8
}
var v16 any
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("nil?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v9})
if lang.IsTruthy(v20) {
v16 = v5
} else {
v16 = v9
}
var v21 any
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("nil?"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v10})
if lang.IsTruthy(v25) {
v21 = v6
} else {
v21 = v10
}
v26 := lang.Apply(v3, []any{v11, v16, v21})
return v26
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v8 := args[0]
v9 := args[1]
v10 := args[2]
v11 := lang.NewList(args[3:]...)
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("apply"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("nil?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v8})
if lang.IsTruthy(v19) {
v15 = v4
} else {
v15 = v8
}
var v20 any
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("nil?"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v9})
if lang.IsTruthy(v24) {
v20 = v5
} else {
v20 = v9
}
var v25 any
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("nil?"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v10})
if lang.IsTruthy(v29) {
v25 = v6
} else {
v25 = v10
}
v30 := lang.Apply(v14, []any{v3, v15, v20, v25, v11})
return v30
  }
})
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6578), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(6581), lang.NewKeyword("end-column"), int(87))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v9
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// for
{
v0 := lang.NewSymbol("for").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("seq-exprs"), lang.NewSymbol("body-expr"))), lang.NewKeyword("doc"), "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4646), lang.NewKeyword("end-line"), int(4646))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 4 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("vector?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
if lang.IsTruthy(v11) {
v7 = nil
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("str"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("*ns*"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(lang.NewKeyword("line"), []any{v25})
v27 := lang.Apply(v14, []any{v18, " requires ", "a vector for its binding", " in ", v21, ":", v26})
v28 := lang.Apply(lang.NewIllegalArgumentError, []any{v27})
panic(v28)
}
_ = v7
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("even?"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v37 := lang.Apply(v32, []any{v36})
if lang.IsTruthy(v37) {
v29 = nil
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("first"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("*ns*"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("meta"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(lang.NewKeyword("line"), []any{v51})
v53 := lang.Apply(v40, []any{v44, " requires ", "an even number of forms in binding vector", " in ", v47, ":", v52})
v54 := lang.Apply(lang.NewIllegalArgumentError, []any{v53})
panic(v54)
}
_ = v29
_ = nil
var v56 lang.FnFunc
v56 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v57 := args[0]
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("reduce1"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
var v61 lang.FnFunc
v61 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v62 := args[0]
v63 := args[1]
var v64 any = v63
_ = v64
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("nth"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{v64, int64(0), nil})
var v65 any = v69
_ = v65
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("nth"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{v64, int64(1), nil})
var v70 any = v74
_ = v70
var v76 any
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("keyword?"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.Apply(v79, []any{v65})
if lang.IsTruthy(v80) {
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("conj"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("pop"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.Apply(v86, []any{v62})
v88 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v89 := v88.FindInternedVar(lang.NewSymbol("conj"))
if v89.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v89)))
}
v90 := v89.Get()
v91 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v92 := v91.FindInternedVar(lang.NewSymbol("peek"))
if v92.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v92)))
}
v93 := v92.Get()
v94 := lang.Apply(v93, []any{v62})
v95 := lang.NewVector(v65, v70)
v96 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4664), lang.NewKeyword("column"), int(72), lang.NewKeyword("end-line"), int(4664), lang.NewKeyword("end-column"), int(76))
v97, err := lang.WithMeta(v95, v96.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v98 := lang.Apply(v90, []any{v94, v97})
v99 := lang.Apply(v83, []any{v87, v98})
v76 = v99
} else {
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("conj"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.NewVector(v65, v70)
v104 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4665), lang.NewKeyword("column"), int(46), lang.NewKeyword("end-line"), int(4665), lang.NewKeyword("end-column"), int(50))
v105, err := lang.WithMeta(v103, v104.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v106 := lang.Apply(v102, []any{v62, v105})
v76 = v106
}
return v76
})
v62 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4662), lang.NewKeyword("column"), int(30), lang.NewKeyword("end-line"), int(4665), lang.NewKeyword("end-column"), int(53))
v63, err := lang.WithMeta(v61, v62.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v64 := lang.NewVector()
v65 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4666), lang.NewKeyword("column"), int(29), lang.NewKeyword("end-line"), int(4666), lang.NewKeyword("end-column"), int(30))
v66, err := lang.WithMeta(v64, v65.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("partition"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.Apply(v69, []any{int64(2), v57})
v71 := lang.Apply(v60, []any{v63, v66, v70})
return v71
})
v57 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4661), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(4666), lang.NewKeyword("end-column"), int(56))
v58, err := lang.WithMeta(v56, v57.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v55 any = v58
_ = v55
var v60 lang.FnFunc
v60 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v61 := lang.NewList(args[0:]...)
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("apply"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("str"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v64, []any{v67, v61})
v69 := lang.Apply(lang.NewIllegalArgumentError, []any{v68})
panic(v69)
  }
})
v61 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4667), lang.NewKeyword("column"), int(13), lang.NewKeyword("end-line"), int(4667), lang.NewKeyword("end-column"), int(125))
v62, err := lang.WithMeta(v60, v61.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v59 any = v62
_ = v59
var v64 lang.FnFunc
{ // function emit-bind
v64 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v66 := args[0]
var v67 any = v66
_ = v67
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("seq"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{v67})
var v68 any = v72
_ = v68
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("first"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.Apply(v76, []any{v68})
var v73 any = v77
_ = v73
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("next"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.Apply(v81, []any{v78})
var v78 any = v82
_ = v78
var v83 any = v73
_ = v83
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("seq"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.Apply(v87, []any{v83})
var v84 any = v88
_ = v84
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("first"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.Apply(v92, []any{v84})
var v89 any = v93
_ = v89
v95 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v96 := v95.FindInternedVar(lang.NewSymbol("next"))
if v96.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v96)))
}
v97 := v96.Get()
v98 := lang.Apply(v97, []any{v94})
var v94 any = v98
_ = v94
var v99 any = v89
_ = v99
v101 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v102 := v101.FindInternedVar(lang.NewSymbol("first"))
if v102.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v102)))
}
v103 := v102.Get()
v104 := lang.Apply(v103, []any{v94})
var v100 any = v104
_ = v100
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("next"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{v105})
var v105 any = v109
_ = v105
var v110 any = v100
_ = v110
var v111 any = v105
_ = v111
var v112 any = v78
_ = v112
v114 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v115 := v114.FindInternedVar(lang.NewSymbol("nth"))
if v115.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v115)))
}
v116 := v115.Get()
v117 := lang.Apply(v116, []any{v112, int64(0), nil})
var v113 any = v117
_ = v113
v119 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v120 := v119.FindInternedVar(lang.NewSymbol("nth"))
if v120.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v120)))
}
v121 := v120.Get()
v122 := lang.Apply(v121, []any{v113, int64(0), nil})
var v118 any = v122
_ = v118
v124 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v125 := v124.FindInternedVar(lang.NewSymbol("nth"))
if v125.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v125)))
}
v126 := v125.Get()
v127 := lang.Apply(v126, []any{v113, int64(1), nil})
var v123 any = v127
_ = v123
var v128 any = v112
_ = v128
v131 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v132 := v131.FindInternedVar(lang.NewSymbol("gensym"))
if v132.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v132)))
}
v133 := v132.Get()
v134 := lang.Apply(v133, []any{"iter__"})
var v130 any = v134
_ = v130
v136 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v137 := v136.FindInternedVar(lang.NewSymbol("gensym"))
if v137.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v137)))
}
v138 := v137.Get()
v139 := lang.Apply(v138, []any{"s__"})
var v135 any = v139
_ = v135
var v141 lang.FnFunc
{ // function do-mod
v141 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v143 := args[0]
var v144 any = v143
_ = v144
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("seq"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.Apply(v148, []any{v144})
var v145 any = v149
_ = v145
v151 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v152 := v151.FindInternedVar(lang.NewSymbol("first"))
if v152.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v152)))
}
v153 := v152.Get()
v154 := lang.Apply(v153, []any{v145})
var v150 any = v154
_ = v150
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("next"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
v159 := lang.Apply(v158, []any{v155})
var v155 any = v159
_ = v155
var v160 any = v150
_ = v160
v162 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v163 := v162.FindInternedVar(lang.NewSymbol("nth"))
if v163.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v163)))
}
v164 := v163.Get()
v165 := lang.Apply(v164, []any{v160, int64(0), nil})
var v161 any = v165
_ = v161
v167 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v168 := v167.FindInternedVar(lang.NewSymbol("nth"))
if v168.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v168)))
}
v169 := v168.Get()
v170 := lang.Apply(v169, []any{v160, int64(1), nil})
var v166 any = v170
_ = v166
var v171 any = v160
_ = v171
var v172 any = v155
_ = v172
var v174 any
v175 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v176 := v175.FindInternedVar(lang.NewSymbol("="))
if v176.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v176)))
}
v177 := v176.Get()
v178 := lang.Apply(v177, []any{v161, lang.NewKeyword("let")})
if lang.IsTruthy(v178) {
v179 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v180 := v179.FindInternedVar(lang.NewSymbol("seq"))
if v180.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v180)))
}
v181 := v180.Get()
v182 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v183 := v182.FindInternedVar(lang.NewSymbol("concat"))
if v183.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v183)))
}
v184 := v183.Get()
v185 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v186 := v185.FindInternedVar(lang.NewSymbol("list"))
if v186.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v186)))
}
v187 := v186.Get()
v188 := lang.Apply(v187, []any{lang.NewSymbol("glojure.core/let")})
v189 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v190 := v189.FindInternedVar(lang.NewSymbol("list"))
if v190.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v190)))
}
v191 := v190.Get()
v192 := lang.Apply(v191, []any{v166})
v193 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v194 := v193.FindInternedVar(lang.NewSymbol("list"))
if v194.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v194)))
}
v195 := v194.Get()
v196 := lang.Apply(v142, []any{v172})
v197 := lang.Apply(v195, []any{v196})
v198 := lang.Apply(v184, []any{v188, v192, v197})
v199 := lang.Apply(v181, []any{v198})
v174 = v199
} else {
var v200 any
v201 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v202 := v201.FindInternedVar(lang.NewSymbol("="))
if v202.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v202)))
}
v203 := v202.Get()
v204 := lang.Apply(v203, []any{v161, lang.NewKeyword("while")})
if lang.IsTruthy(v204) {
v205 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v206 := v205.FindInternedVar(lang.NewSymbol("seq"))
if v206.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v206)))
}
v207 := v206.Get()
v208 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v209 := v208.FindInternedVar(lang.NewSymbol("concat"))
if v209.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v209)))
}
v210 := v209.Get()
v211 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v212 := v211.FindInternedVar(lang.NewSymbol("list"))
if v212.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v212)))
}
v213 := v212.Get()
v214 := lang.Apply(v213, []any{lang.NewSymbol("glojure.core/when")})
v215 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v216 := v215.FindInternedVar(lang.NewSymbol("list"))
if v216.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v216)))
}
v217 := v216.Get()
v218 := lang.Apply(v217, []any{v166})
v219 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v220 := v219.FindInternedVar(lang.NewSymbol("list"))
if v220.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v220)))
}
v221 := v220.Get()
v222 := lang.Apply(v142, []any{v172})
v223 := lang.Apply(v221, []any{v222})
v224 := lang.Apply(v210, []any{v214, v218, v223})
v225 := lang.Apply(v207, []any{v224})
v200 = v225
} else {
var v226 any
v227 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v228 := v227.FindInternedVar(lang.NewSymbol("="))
if v228.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v228)))
}
v229 := v228.Get()
v230 := lang.Apply(v229, []any{v161, lang.NewKeyword("when")})
if lang.IsTruthy(v230) {
v231 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v232 := v231.FindInternedVar(lang.NewSymbol("seq"))
if v232.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v232)))
}
v233 := v232.Get()
v234 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v235 := v234.FindInternedVar(lang.NewSymbol("concat"))
if v235.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v235)))
}
v236 := v235.Get()
v237 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v238 := v237.FindInternedVar(lang.NewSymbol("list"))
if v238.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v238)))
}
v239 := v238.Get()
v240 := lang.Apply(v239, []any{lang.NewSymbol("if")})
v241 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v242 := v241.FindInternedVar(lang.NewSymbol("list"))
if v242.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v242)))
}
v243 := v242.Get()
v244 := lang.Apply(v243, []any{v166})
v245 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v246 := v245.FindInternedVar(lang.NewSymbol("list"))
if v246.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v246)))
}
v247 := v246.Get()
v248 := lang.Apply(v142, []any{v172})
v249 := lang.Apply(v247, []any{v248})
v250 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v251 := v250.FindInternedVar(lang.NewSymbol("list"))
if v251.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v251)))
}
v252 := v251.Get()
v253 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v254 := v253.FindInternedVar(lang.NewSymbol("seq"))
if v254.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v254)))
}
v255 := v254.Get()
v256 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v257 := v256.FindInternedVar(lang.NewSymbol("concat"))
if v257.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v257)))
}
v258 := v257.Get()
v259 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v260 := v259.FindInternedVar(lang.NewSymbol("list"))
if v260.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v260)))
}
v261 := v260.Get()
v262 := lang.Apply(v261, []any{lang.NewSymbol("recur")})
v263 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v264 := v263.FindInternedVar(lang.NewSymbol("list"))
if v264.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v264)))
}
v265 := v264.Get()
v266 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v267 := v266.FindInternedVar(lang.NewSymbol("seq"))
if v267.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v267)))
}
v268 := v267.Get()
v269 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v270 := v269.FindInternedVar(lang.NewSymbol("concat"))
if v270.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v270)))
}
v271 := v270.Get()
v272 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v273 := v272.FindInternedVar(lang.NewSymbol("list"))
if v273.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v273)))
}
v274 := v273.Get()
v275 := lang.Apply(v274, []any{lang.NewSymbol("glojure.core/rest")})
v276 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v277 := v276.FindInternedVar(lang.NewSymbol("list"))
if v277.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v277)))
}
v278 := v277.Get()
v279 := lang.Apply(v278, []any{v135})
v280 := lang.Apply(v271, []any{v275, v279})
v281 := lang.Apply(v268, []any{v280})
v282 := lang.Apply(v265, []any{v281})
v283 := lang.Apply(v258, []any{v262, v282})
v284 := lang.Apply(v255, []any{v283})
v285 := lang.Apply(v252, []any{v284})
v286 := lang.Apply(v236, []any{v240, v244, v249, v285})
v287 := lang.Apply(v233, []any{v286})
v226 = v287
} else {
var v288 any
v289 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v290 := v289.FindInternedVar(lang.NewSymbol("keyword?"))
if v290.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v290)))
}
v291 := v290.Get()
v292 := lang.Apply(v291, []any{v161})
if lang.IsTruthy(v292) {
v293 := lang.Apply(v59, []any{"Invalid 'for' keyword ", v161})
v288 = v293
} else {
var v294 any
if lang.IsTruthy(v128) {
v295 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v296 := v295.FindInternedVar(lang.NewSymbol("seq"))
if v296.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v296)))
}
v297 := v296.Get()
v298 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v299 := v298.FindInternedVar(lang.NewSymbol("concat"))
if v299.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v299)))
}
v300 := v299.Get()
v301 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v302 := v301.FindInternedVar(lang.NewSymbol("list"))
if v302.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v302)))
}
v303 := v302.Get()
v304 := lang.Apply(v303, []any{lang.NewSymbol("glojure.core/let")})
v305 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v306 := v305.FindInternedVar(lang.NewSymbol("list"))
if v306.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v306)))
}
v307 := v306.Get()
v308 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v309 := v308.FindInternedVar(lang.NewSymbol("apply"))
if v309.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v309)))
}
v310 := v309.Get()
v311 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v312 := v311.FindInternedVar(lang.NewSymbol("vector"))
if v312.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v312)))
}
v313 := v312.Get()
v314 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v315 := v314.FindInternedVar(lang.NewSymbol("seq"))
if v315.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v315)))
}
v316 := v315.Get()
v317 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v318 := v317.FindInternedVar(lang.NewSymbol("concat"))
if v318.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v318)))
}
v319 := v318.Get()
v320 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v321 := v320.FindInternedVar(lang.NewSymbol("list"))
if v321.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v321)))
}
v322 := v321.Get()
v323 := lang.Apply(v322, []any{lang.NewSymbol("iterys__0__auto__")})
v324 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v325 := v324.FindInternedVar(lang.NewSymbol("list"))
if v325.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v325)))
}
v326 := v325.Get()
v327 := lang.Apply(v65, []any{v128})
v328 := lang.Apply(v326, []any{v327})
v329 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v330 := v329.FindInternedVar(lang.NewSymbol("list"))
if v330.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v330)))
}
v331 := v330.Get()
v332 := lang.Apply(v331, []any{lang.NewSymbol("fs__1__auto__")})
v333 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v334 := v333.FindInternedVar(lang.NewSymbol("list"))
if v334.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v334)))
}
v335 := v334.Get()
v336 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v337 := v336.FindInternedVar(lang.NewSymbol("seq"))
if v337.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v337)))
}
v338 := v337.Get()
v339 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v340 := v339.FindInternedVar(lang.NewSymbol("concat"))
if v340.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v340)))
}
v341 := v340.Get()
v342 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v343 := v342.FindInternedVar(lang.NewSymbol("list"))
if v343.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v343)))
}
v344 := v343.Get()
v345 := lang.Apply(v344, []any{lang.NewSymbol("glojure.core/seq")})
v346 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v347 := v346.FindInternedVar(lang.NewSymbol("list"))
if v347.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v347)))
}
v348 := v347.Get()
v349 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v350 := v349.FindInternedVar(lang.NewSymbol("seq"))
if v350.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v350)))
}
v351 := v350.Get()
v352 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v353 := v352.FindInternedVar(lang.NewSymbol("concat"))
if v353.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v353)))
}
v354 := v353.Get()
v355 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v356 := v355.FindInternedVar(lang.NewSymbol("list"))
if v356.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v356)))
}
v357 := v356.Get()
v358 := lang.Apply(v357, []any{lang.NewSymbol("iterys__0__auto__")})
v359 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v360 := v359.FindInternedVar(lang.NewSymbol("list"))
if v360.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v360)))
}
v361 := v360.Get()
v362 := lang.Apply(v361, []any{v123})
v363 := lang.Apply(v354, []any{v358, v362})
v364 := lang.Apply(v351, []any{v363})
v365 := lang.Apply(v348, []any{v364})
v366 := lang.Apply(v341, []any{v345, v365})
v367 := lang.Apply(v338, []any{v366})
v368 := lang.Apply(v335, []any{v367})
v369 := lang.Apply(v319, []any{v323, v328, v332, v368})
v370 := lang.Apply(v316, []any{v369})
v371 := lang.Apply(v310, []any{v313, v370})
v372 := lang.Apply(v307, []any{v371})
v373 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v374 := v373.FindInternedVar(lang.NewSymbol("list"))
if v374.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v374)))
}
v375 := v374.Get()
v376 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v377 := v376.FindInternedVar(lang.NewSymbol("seq"))
if v377.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v377)))
}
v378 := v377.Get()
v379 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v380 := v379.FindInternedVar(lang.NewSymbol("concat"))
if v380.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v380)))
}
v381 := v380.Get()
v382 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v383 := v382.FindInternedVar(lang.NewSymbol("list"))
if v383.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v383)))
}
v384 := v383.Get()
v385 := lang.Apply(v384, []any{lang.NewSymbol("if")})
v386 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v387 := v386.FindInternedVar(lang.NewSymbol("list"))
if v387.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v387)))
}
v388 := v387.Get()
v389 := lang.Apply(v388, []any{lang.NewSymbol("fs__1__auto__")})
v390 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v391 := v390.FindInternedVar(lang.NewSymbol("list"))
if v391.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v391)))
}
v392 := v391.Get()
v393 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v394 := v393.FindInternedVar(lang.NewSymbol("seq"))
if v394.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v394)))
}
v395 := v394.Get()
v396 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v397 := v396.FindInternedVar(lang.NewSymbol("concat"))
if v397.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v397)))
}
v398 := v397.Get()
v399 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v400 := v399.FindInternedVar(lang.NewSymbol("list"))
if v400.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v400)))
}
v401 := v400.Get()
v402 := lang.Apply(v401, []any{lang.NewSymbol("glojure.core/concat")})
v403 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v404 := v403.FindInternedVar(lang.NewSymbol("list"))
if v404.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v404)))
}
v405 := v404.Get()
v406 := lang.Apply(v405, []any{lang.NewSymbol("fs__1__auto__")})
v407 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v408 := v407.FindInternedVar(lang.NewSymbol("list"))
if v408.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v408)))
}
v409 := v408.Get()
v410 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v411 := v410.FindInternedVar(lang.NewSymbol("seq"))
if v411.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v411)))
}
v412 := v411.Get()
v413 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v414 := v413.FindInternedVar(lang.NewSymbol("concat"))
if v414.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v414)))
}
v415 := v414.Get()
v416 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v417 := v416.FindInternedVar(lang.NewSymbol("list"))
if v417.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v417)))
}
v418 := v417.Get()
v419 := lang.Apply(v418, []any{v130})
v420 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v421 := v420.FindInternedVar(lang.NewSymbol("list"))
if v421.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v421)))
}
v422 := v421.Get()
v423 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v424 := v423.FindInternedVar(lang.NewSymbol("seq"))
if v424.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v424)))
}
v425 := v424.Get()
v426 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v427 := v426.FindInternedVar(lang.NewSymbol("concat"))
if v427.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v427)))
}
v428 := v427.Get()
v429 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v430 := v429.FindInternedVar(lang.NewSymbol("list"))
if v430.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v430)))
}
v431 := v430.Get()
v432 := lang.Apply(v431, []any{lang.NewSymbol("glojure.core/rest")})
v433 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v434 := v433.FindInternedVar(lang.NewSymbol("list"))
if v434.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v434)))
}
v435 := v434.Get()
v436 := lang.Apply(v435, []any{v135})
v437 := lang.Apply(v428, []any{v432, v436})
v438 := lang.Apply(v425, []any{v437})
v439 := lang.Apply(v422, []any{v438})
v440 := lang.Apply(v415, []any{v419, v439})
v441 := lang.Apply(v412, []any{v440})
v442 := lang.Apply(v409, []any{v441})
v443 := lang.Apply(v398, []any{v402, v406, v442})
v444 := lang.Apply(v395, []any{v443})
v445 := lang.Apply(v392, []any{v444})
v446 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v447 := v446.FindInternedVar(lang.NewSymbol("list"))
if v447.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v447)))
}
v448 := v447.Get()
v449 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v450 := v449.FindInternedVar(lang.NewSymbol("seq"))
if v450.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v450)))
}
v451 := v450.Get()
v452 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v453 := v452.FindInternedVar(lang.NewSymbol("concat"))
if v453.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v453)))
}
v454 := v453.Get()
v455 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v456 := v455.FindInternedVar(lang.NewSymbol("list"))
if v456.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v456)))
}
v457 := v456.Get()
v458 := lang.Apply(v457, []any{lang.NewSymbol("recur")})
v459 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v460 := v459.FindInternedVar(lang.NewSymbol("list"))
if v460.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v460)))
}
v461 := v460.Get()
v462 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v463 := v462.FindInternedVar(lang.NewSymbol("seq"))
if v463.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v463)))
}
v464 := v463.Get()
v465 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v466 := v465.FindInternedVar(lang.NewSymbol("concat"))
if v466.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v466)))
}
v467 := v466.Get()
v468 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v469 := v468.FindInternedVar(lang.NewSymbol("list"))
if v469.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v469)))
}
v470 := v469.Get()
v471 := lang.Apply(v470, []any{lang.NewSymbol("glojure.core/rest")})
v472 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v473 := v472.FindInternedVar(lang.NewSymbol("list"))
if v473.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v473)))
}
v474 := v473.Get()
v475 := lang.Apply(v474, []any{v135})
v476 := lang.Apply(v467, []any{v471, v475})
v477 := lang.Apply(v464, []any{v476})
v478 := lang.Apply(v461, []any{v477})
v479 := lang.Apply(v454, []any{v458, v478})
v480 := lang.Apply(v451, []any{v479})
v481 := lang.Apply(v448, []any{v480})
v482 := lang.Apply(v381, []any{v385, v389, v445, v481})
v483 := lang.Apply(v378, []any{v482})
v484 := lang.Apply(v375, []any{v483})
v485 := lang.Apply(v300, []any{v304, v372, v484})
v486 := lang.Apply(v297, []any{v485})
v294 = v486
} else {
var v487 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v488 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v489 := v488.FindInternedVar(lang.NewSymbol("seq"))
if v489.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v489)))
}
v490 := v489.Get()
v491 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v492 := v491.FindInternedVar(lang.NewSymbol("concat"))
if v492.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v492)))
}
v493 := v492.Get()
v494 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v495 := v494.FindInternedVar(lang.NewSymbol("list"))
if v495.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v495)))
}
v496 := v495.Get()
v497 := lang.Apply(v496, []any{lang.NewSymbol("glojure.core/cons")})
v498 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v499 := v498.FindInternedVar(lang.NewSymbol("list"))
if v499.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v499)))
}
v500 := v499.Get()
v501 := lang.Apply(v500, []any{v6})
v502 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v503 := v502.FindInternedVar(lang.NewSymbol("list"))
if v503.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v503)))
}
v504 := v503.Get()
v505 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v506 := v505.FindInternedVar(lang.NewSymbol("seq"))
if v506.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v506)))
}
v507 := v506.Get()
v508 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v509 := v508.FindInternedVar(lang.NewSymbol("concat"))
if v509.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v509)))
}
v510 := v509.Get()
v511 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v512 := v511.FindInternedVar(lang.NewSymbol("list"))
if v512.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v512)))
}
v513 := v512.Get()
v514 := lang.Apply(v513, []any{v130})
v515 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v516 := v515.FindInternedVar(lang.NewSymbol("list"))
if v516.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v516)))
}
v517 := v516.Get()
v518 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v519 := v518.FindInternedVar(lang.NewSymbol("seq"))
if v519.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v519)))
}
v520 := v519.Get()
v521 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v522 := v521.FindInternedVar(lang.NewSymbol("concat"))
if v522.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v522)))
}
v523 := v522.Get()
v524 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v525 := v524.FindInternedVar(lang.NewSymbol("list"))
if v525.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v525)))
}
v526 := v525.Get()
v527 := lang.Apply(v526, []any{lang.NewSymbol("glojure.core/rest")})
v528 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v529 := v528.FindInternedVar(lang.NewSymbol("list"))
if v529.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v529)))
}
v530 := v529.Get()
v531 := lang.Apply(v530, []any{v135})
v532 := lang.Apply(v523, []any{v527, v531})
v533 := lang.Apply(v520, []any{v532})
v534 := lang.Apply(v517, []any{v533})
v535 := lang.Apply(v510, []any{v514, v534})
v536 := lang.Apply(v507, []any{v535})
v537 := lang.Apply(v504, []any{v536})
v538 := lang.Apply(v493, []any{v497, v501, v537})
v539 := lang.Apply(v490, []any{v538})
v487 = v539
} else {
v487 = nil
}
v294 = v487
}
v288 = v294
}
v226 = v288
}
v200 = v226
}
v174 = v200
}
return v174
})
v142 := v141
_ = v142
}
v142 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4672), lang.NewKeyword("column"), int(34), lang.NewKeyword("end-line"), int(4687), lang.NewKeyword("end-column"), int(73))
v143, err := lang.WithMeta(v141, v142.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v140 any = v143
_ = v140
var v145 any
if lang.IsTruthy(v128) {
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("seq"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v150 := v149.FindInternedVar(lang.NewSymbol("concat"))
if v150.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v150)))
}
v151 := v150.Get()
v152 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v153 := v152.FindInternedVar(lang.NewSymbol("list"))
if v153.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v153)))
}
v154 := v153.Get()
v155 := lang.Apply(v154, []any{lang.NewSymbol("glojure.core/fn")})
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("list"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
v159 := lang.Apply(v158, []any{v130})
v160 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v161 := v160.FindInternedVar(lang.NewSymbol("list"))
if v161.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v161)))
}
v162 := v161.Get()
v163 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v164 := v163.FindInternedVar(lang.NewSymbol("apply"))
if v164.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v164)))
}
v165 := v164.Get()
v166 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v167 := v166.FindInternedVar(lang.NewSymbol("vector"))
if v167.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v167)))
}
v168 := v167.Get()
v169 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v170 := v169.FindInternedVar(lang.NewSymbol("seq"))
if v170.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v170)))
}
v171 := v170.Get()
v172 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v173 := v172.FindInternedVar(lang.NewSymbol("concat"))
if v173.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v173)))
}
v174 := v173.Get()
v175 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v176 := v175.FindInternedVar(lang.NewSymbol("list"))
if v176.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v176)))
}
v177 := v176.Get()
v178 := lang.Apply(v177, []any{v135})
v179 := lang.Apply(v174, []any{v178})
v180 := lang.Apply(v171, []any{v179})
v181 := lang.Apply(v165, []any{v168, v180})
v182 := lang.Apply(v162, []any{v181})
v183 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v184 := v183.FindInternedVar(lang.NewSymbol("list"))
if v184.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v184)))
}
v185 := v184.Get()
v186 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v187 := v186.FindInternedVar(lang.NewSymbol("seq"))
if v187.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v187)))
}
v188 := v187.Get()
v189 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v190 := v189.FindInternedVar(lang.NewSymbol("concat"))
if v190.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v190)))
}
v191 := v190.Get()
v192 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v193 := v192.FindInternedVar(lang.NewSymbol("list"))
if v193.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v193)))
}
v194 := v193.Get()
v195 := lang.Apply(v194, []any{lang.NewSymbol("glojure.core/lazy-seq")})
v196 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v197 := v196.FindInternedVar(lang.NewSymbol("list"))
if v197.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v197)))
}
v198 := v197.Get()
v199 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v200 := v199.FindInternedVar(lang.NewSymbol("seq"))
if v200.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v200)))
}
v201 := v200.Get()
v202 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v203 := v202.FindInternedVar(lang.NewSymbol("concat"))
if v203.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v203)))
}
v204 := v203.Get()
v205 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v206 := v205.FindInternedVar(lang.NewSymbol("list"))
if v206.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v206)))
}
v207 := v206.Get()
v208 := lang.Apply(v207, []any{lang.NewSymbol("glojure.core/loop")})
v209 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v210 := v209.FindInternedVar(lang.NewSymbol("list"))
if v210.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v210)))
}
v211 := v210.Get()
v212 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v213 := v212.FindInternedVar(lang.NewSymbol("apply"))
if v213.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v213)))
}
v214 := v213.Get()
v215 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v216 := v215.FindInternedVar(lang.NewSymbol("vector"))
if v216.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v216)))
}
v217 := v216.Get()
v218 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v219 := v218.FindInternedVar(lang.NewSymbol("seq"))
if v219.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v219)))
}
v220 := v219.Get()
v221 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v222 := v221.FindInternedVar(lang.NewSymbol("concat"))
if v222.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v222)))
}
v223 := v222.Get()
v224 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v225 := v224.FindInternedVar(lang.NewSymbol("list"))
if v225.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v225)))
}
v226 := v225.Get()
v227 := lang.Apply(v226, []any{v135})
v228 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v229 := v228.FindInternedVar(lang.NewSymbol("list"))
if v229.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v229)))
}
v230 := v229.Get()
v231 := lang.Apply(v230, []any{v135})
v232 := lang.Apply(v223, []any{v227, v231})
v233 := lang.Apply(v220, []any{v232})
v234 := lang.Apply(v214, []any{v217, v233})
v235 := lang.Apply(v211, []any{v234})
v236 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v237 := v236.FindInternedVar(lang.NewSymbol("list"))
if v237.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v237)))
}
v238 := v237.Get()
v239 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v240 := v239.FindInternedVar(lang.NewSymbol("seq"))
if v240.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v240)))
}
v241 := v240.Get()
v242 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v243 := v242.FindInternedVar(lang.NewSymbol("concat"))
if v243.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v243)))
}
v244 := v243.Get()
v245 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v246 := v245.FindInternedVar(lang.NewSymbol("list"))
if v246.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v246)))
}
v247 := v246.Get()
v248 := lang.Apply(v247, []any{lang.NewSymbol("glojure.core/when-first")})
v249 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v250 := v249.FindInternedVar(lang.NewSymbol("list"))
if v250.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v250)))
}
v251 := v250.Get()
v252 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v253 := v252.FindInternedVar(lang.NewSymbol("apply"))
if v253.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v253)))
}
v254 := v253.Get()
v255 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v256 := v255.FindInternedVar(lang.NewSymbol("vector"))
if v256.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v256)))
}
v257 := v256.Get()
v258 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v259 := v258.FindInternedVar(lang.NewSymbol("seq"))
if v259.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v259)))
}
v260 := v259.Get()
v261 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v262 := v261.FindInternedVar(lang.NewSymbol("concat"))
if v262.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v262)))
}
v263 := v262.Get()
v264 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v265 := v264.FindInternedVar(lang.NewSymbol("list"))
if v265.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v265)))
}
v266 := v265.Get()
v267 := lang.Apply(v266, []any{v99})
v268 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v269 := v268.FindInternedVar(lang.NewSymbol("list"))
if v269.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v269)))
}
v270 := v269.Get()
v271 := lang.Apply(v270, []any{v135})
v272 := lang.Apply(v263, []any{v267, v271})
v273 := lang.Apply(v260, []any{v272})
v274 := lang.Apply(v254, []any{v257, v273})
v275 := lang.Apply(v251, []any{v274})
v276 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v277 := v276.FindInternedVar(lang.NewSymbol("list"))
if v277.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v277)))
}
v278 := v277.Get()
v279 := lang.Apply(v140, []any{v111})
v280 := lang.Apply(v278, []any{v279})
v281 := lang.Apply(v244, []any{v248, v275, v280})
v282 := lang.Apply(v241, []any{v281})
v283 := lang.Apply(v238, []any{v282})
v284 := lang.Apply(v204, []any{v208, v235, v283})
v285 := lang.Apply(v201, []any{v284})
v286 := lang.Apply(v198, []any{v285})
v287 := lang.Apply(v191, []any{v195, v286})
v288 := lang.Apply(v188, []any{v287})
v289 := lang.Apply(v185, []any{v288})
v290 := lang.Apply(v151, []any{v155, v159, v182, v289})
v291 := lang.Apply(v148, []any{v290})
v145 = v291
} else {
v293 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v294 := v293.FindInternedVar(lang.NewSymbol("gensym"))
if v294.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v294)))
}
v295 := v294.Get()
v296 := lang.Apply(v295, []any{"i__"})
var v292 any = v296
_ = v292
v298 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v299 := v298.FindInternedVar(lang.NewSymbol("gensym"))
if v299.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v299)))
}
v300 := v299.Get()
v301 := lang.Apply(v300, []any{"b__"})
var v297 any = v301
_ = v297
var v303 lang.FnFunc
{ // function do-cmod
v303 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v305 := args[0]
var v306 any = v305
_ = v306
v308 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v309 := v308.FindInternedVar(lang.NewSymbol("seq"))
if v309.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v309)))
}
v310 := v309.Get()
v311 := lang.Apply(v310, []any{v306})
var v307 any = v311
_ = v307
v313 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v314 := v313.FindInternedVar(lang.NewSymbol("first"))
if v314.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v314)))
}
v315 := v314.Get()
v316 := lang.Apply(v315, []any{v307})
var v312 any = v316
_ = v312
v318 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v319 := v318.FindInternedVar(lang.NewSymbol("next"))
if v319.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v319)))
}
v320 := v319.Get()
v321 := lang.Apply(v320, []any{v317})
var v317 any = v321
_ = v317
var v322 any = v312
_ = v322
v324 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v325 := v324.FindInternedVar(lang.NewSymbol("nth"))
if v325.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v325)))
}
v326 := v325.Get()
v327 := lang.Apply(v326, []any{v322, int64(0), nil})
var v323 any = v327
_ = v323
v329 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v330 := v329.FindInternedVar(lang.NewSymbol("nth"))
if v330.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v330)))
}
v331 := v330.Get()
v332 := lang.Apply(v331, []any{v322, int64(1), nil})
var v328 any = v332
_ = v328
var v333 any = v322
_ = v333
var v334 any = v317
_ = v334
var v336 any
v337 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v338 := v337.FindInternedVar(lang.NewSymbol("="))
if v338.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v338)))
}
v339 := v338.Get()
v340 := lang.Apply(v339, []any{v323, lang.NewKeyword("let")})
if lang.IsTruthy(v340) {
v341 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v342 := v341.FindInternedVar(lang.NewSymbol("seq"))
if v342.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v342)))
}
v343 := v342.Get()
v344 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v345 := v344.FindInternedVar(lang.NewSymbol("concat"))
if v345.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v345)))
}
v346 := v345.Get()
v347 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v348 := v347.FindInternedVar(lang.NewSymbol("list"))
if v348.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v348)))
}
v349 := v348.Get()
v350 := lang.Apply(v349, []any{lang.NewSymbol("glojure.core/let")})
v351 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v352 := v351.FindInternedVar(lang.NewSymbol("list"))
if v352.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v352)))
}
v353 := v352.Get()
v354 := lang.Apply(v353, []any{v328})
v355 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v356 := v355.FindInternedVar(lang.NewSymbol("list"))
if v356.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v356)))
}
v357 := v356.Get()
v358 := lang.Apply(v304, []any{v334})
v359 := lang.Apply(v357, []any{v358})
v360 := lang.Apply(v346, []any{v350, v354, v359})
v361 := lang.Apply(v343, []any{v360})
v336 = v361
} else {
var v362 any
v363 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v364 := v363.FindInternedVar(lang.NewSymbol("="))
if v364.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v364)))
}
v365 := v364.Get()
v366 := lang.Apply(v365, []any{v323, lang.NewKeyword("while")})
if lang.IsTruthy(v366) {
v367 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v368 := v367.FindInternedVar(lang.NewSymbol("seq"))
if v368.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v368)))
}
v369 := v368.Get()
v370 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v371 := v370.FindInternedVar(lang.NewSymbol("concat"))
if v371.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v371)))
}
v372 := v371.Get()
v373 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v374 := v373.FindInternedVar(lang.NewSymbol("list"))
if v374.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v374)))
}
v375 := v374.Get()
v376 := lang.Apply(v375, []any{lang.NewSymbol("glojure.core/when")})
v377 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v378 := v377.FindInternedVar(lang.NewSymbol("list"))
if v378.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v378)))
}
v379 := v378.Get()
v380 := lang.Apply(v379, []any{v328})
v381 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v382 := v381.FindInternedVar(lang.NewSymbol("list"))
if v382.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v382)))
}
v383 := v382.Get()
v384 := lang.Apply(v304, []any{v334})
v385 := lang.Apply(v383, []any{v384})
v386 := lang.Apply(v372, []any{v376, v380, v385})
v387 := lang.Apply(v369, []any{v386})
v362 = v387
} else {
var v388 any
v389 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v390 := v389.FindInternedVar(lang.NewSymbol("="))
if v390.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v390)))
}
v391 := v390.Get()
v392 := lang.Apply(v391, []any{v323, lang.NewKeyword("when")})
if lang.IsTruthy(v392) {
v393 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v394 := v393.FindInternedVar(lang.NewSymbol("seq"))
if v394.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v394)))
}
v395 := v394.Get()
v396 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v397 := v396.FindInternedVar(lang.NewSymbol("concat"))
if v397.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v397)))
}
v398 := v397.Get()
v399 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v400 := v399.FindInternedVar(lang.NewSymbol("list"))
if v400.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v400)))
}
v401 := v400.Get()
v402 := lang.Apply(v401, []any{lang.NewSymbol("if")})
v403 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v404 := v403.FindInternedVar(lang.NewSymbol("list"))
if v404.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v404)))
}
v405 := v404.Get()
v406 := lang.Apply(v405, []any{v328})
v407 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v408 := v407.FindInternedVar(lang.NewSymbol("list"))
if v408.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v408)))
}
v409 := v408.Get()
v410 := lang.Apply(v304, []any{v334})
v411 := lang.Apply(v409, []any{v410})
v412 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v413 := v412.FindInternedVar(lang.NewSymbol("list"))
if v413.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v413)))
}
v414 := v413.Get()
v415 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v416 := v415.FindInternedVar(lang.NewSymbol("seq"))
if v416.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v416)))
}
v417 := v416.Get()
v418 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v419 := v418.FindInternedVar(lang.NewSymbol("concat"))
if v419.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v419)))
}
v420 := v419.Get()
v421 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v422 := v421.FindInternedVar(lang.NewSymbol("list"))
if v422.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v422)))
}
v423 := v422.Get()
v424 := lang.Apply(v423, []any{lang.NewSymbol("recur")})
v425 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v426 := v425.FindInternedVar(lang.NewSymbol("list"))
if v426.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v426)))
}
v427 := v426.Get()
v428 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v429 := v428.FindInternedVar(lang.NewSymbol("seq"))
if v429.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v429)))
}
v430 := v429.Get()
v431 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v432 := v431.FindInternedVar(lang.NewSymbol("concat"))
if v432.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v432)))
}
v433 := v432.Get()
v434 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v435 := v434.FindInternedVar(lang.NewSymbol("list"))
if v435.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v435)))
}
v436 := v435.Get()
v437 := lang.Apply(v436, []any{lang.NewSymbol("glojure.core/unchecked-inc")})
v438 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v439 := v438.FindInternedVar(lang.NewSymbol("list"))
if v439.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v439)))
}
v440 := v439.Get()
v441 := lang.Apply(v440, []any{v292})
v442 := lang.Apply(v433, []any{v437, v441})
v443 := lang.Apply(v430, []any{v442})
v444 := lang.Apply(v427, []any{v443})
v445 := lang.Apply(v420, []any{v424, v444})
v446 := lang.Apply(v417, []any{v445})
v447 := lang.Apply(v414, []any{v446})
v448 := lang.Apply(v398, []any{v402, v406, v411, v447})
v449 := lang.Apply(v395, []any{v448})
v388 = v449
} else {
var v450 any
v451 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v452 := v451.FindInternedVar(lang.NewSymbol("keyword?"))
if v452.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v452)))
}
v453 := v452.Get()
v454 := lang.Apply(v453, []any{v323})
if lang.IsTruthy(v454) {
v455 := lang.Apply(v59, []any{"Invalid 'for' keyword ", v323})
v450 = v455
} else {
var v456 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v457 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v458 := v457.FindInternedVar(lang.NewSymbol("seq"))
if v458.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v458)))
}
v459 := v458.Get()
v460 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v461 := v460.FindInternedVar(lang.NewSymbol("concat"))
if v461.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v461)))
}
v462 := v461.Get()
v463 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v464 := v463.FindInternedVar(lang.NewSymbol("list"))
if v464.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v464)))
}
v465 := v464.Get()
v466 := lang.Apply(v465, []any{lang.NewSymbol("do")})
v467 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v468 := v467.FindInternedVar(lang.NewSymbol("list"))
if v468.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v468)))
}
v469 := v468.Get()
v470 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v471 := v470.FindInternedVar(lang.NewSymbol("seq"))
if v471.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v471)))
}
v472 := v471.Get()
v473 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v474 := v473.FindInternedVar(lang.NewSymbol("concat"))
if v474.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v474)))
}
v475 := v474.Get()
v476 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v477 := v476.FindInternedVar(lang.NewSymbol("list"))
if v477.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v477)))
}
v478 := v477.Get()
v479 := lang.Apply(v478, []any{lang.NewSymbol("glojure.core/chunk-append")})
v480 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v481 := v480.FindInternedVar(lang.NewSymbol("list"))
if v481.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v481)))
}
v482 := v481.Get()
v483 := lang.Apply(v482, []any{v297})
v484 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v485 := v484.FindInternedVar(lang.NewSymbol("list"))
if v485.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v485)))
}
v486 := v485.Get()
v487 := lang.Apply(v486, []any{v6})
v488 := lang.Apply(v475, []any{v479, v483, v487})
v489 := lang.Apply(v472, []any{v488})
v490 := lang.Apply(v469, []any{v489})
v491 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v492 := v491.FindInternedVar(lang.NewSymbol("list"))
if v492.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v492)))
}
v493 := v492.Get()
v494 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v495 := v494.FindInternedVar(lang.NewSymbol("seq"))
if v495.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v495)))
}
v496 := v495.Get()
v497 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v498 := v497.FindInternedVar(lang.NewSymbol("concat"))
if v498.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v498)))
}
v499 := v498.Get()
v500 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v501 := v500.FindInternedVar(lang.NewSymbol("list"))
if v501.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v501)))
}
v502 := v501.Get()
v503 := lang.Apply(v502, []any{lang.NewSymbol("recur")})
v504 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v505 := v504.FindInternedVar(lang.NewSymbol("list"))
if v505.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v505)))
}
v506 := v505.Get()
v507 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v508 := v507.FindInternedVar(lang.NewSymbol("seq"))
if v508.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v508)))
}
v509 := v508.Get()
v510 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v511 := v510.FindInternedVar(lang.NewSymbol("concat"))
if v511.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v511)))
}
v512 := v511.Get()
v513 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v514 := v513.FindInternedVar(lang.NewSymbol("list"))
if v514.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v514)))
}
v515 := v514.Get()
v516 := lang.Apply(v515, []any{lang.NewSymbol("glojure.core/unchecked-inc")})
v517 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v518 := v517.FindInternedVar(lang.NewSymbol("list"))
if v518.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v518)))
}
v519 := v518.Get()
v520 := lang.Apply(v519, []any{v292})
v521 := lang.Apply(v512, []any{v516, v520})
v522 := lang.Apply(v509, []any{v521})
v523 := lang.Apply(v506, []any{v522})
v524 := lang.Apply(v499, []any{v503, v523})
v525 := lang.Apply(v496, []any{v524})
v526 := lang.Apply(v493, []any{v525})
v527 := lang.Apply(v462, []any{v466, v490, v526})
v528 := lang.Apply(v459, []any{v527})
v456 = v528
} else {
v456 = nil
}
v450 = v456
}
v388 = v450
}
v362 = v388
}
v336 = v362
}
return v336
})
v304 := v303
_ = v304
}
v304 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4698), lang.NewKeyword("column"), int(39), lang.NewKeyword("end-line"), int(4710), lang.NewKeyword("end-column"), int(79))
v305, err := lang.WithMeta(v303, v304.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v302 any = v305
_ = v302
v307 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v308 := v307.FindInternedVar(lang.NewSymbol("seq"))
if v308.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v308)))
}
v309 := v308.Get()
v310 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v311 := v310.FindInternedVar(lang.NewSymbol("concat"))
if v311.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v311)))
}
v312 := v311.Get()
v313 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v314 := v313.FindInternedVar(lang.NewSymbol("list"))
if v314.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v314)))
}
v315 := v314.Get()
v316 := lang.Apply(v315, []any{lang.NewSymbol("glojure.core/fn")})
v317 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v318 := v317.FindInternedVar(lang.NewSymbol("list"))
if v318.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v318)))
}
v319 := v318.Get()
v320 := lang.Apply(v319, []any{v130})
v321 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v322 := v321.FindInternedVar(lang.NewSymbol("list"))
if v322.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v322)))
}
v323 := v322.Get()
v324 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v325 := v324.FindInternedVar(lang.NewSymbol("apply"))
if v325.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v325)))
}
v326 := v325.Get()
v327 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v328 := v327.FindInternedVar(lang.NewSymbol("vector"))
if v328.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v328)))
}
v329 := v328.Get()
v330 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v331 := v330.FindInternedVar(lang.NewSymbol("seq"))
if v331.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v331)))
}
v332 := v331.Get()
v333 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v334 := v333.FindInternedVar(lang.NewSymbol("concat"))
if v334.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v334)))
}
v335 := v334.Get()
v336 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v337 := v336.FindInternedVar(lang.NewSymbol("list"))
if v337.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v337)))
}
v338 := v337.Get()
v339 := lang.Apply(v338, []any{v135})
v340 := lang.Apply(v335, []any{v339})
v341 := lang.Apply(v332, []any{v340})
v342 := lang.Apply(v326, []any{v329, v341})
v343 := lang.Apply(v323, []any{v342})
v344 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v345 := v344.FindInternedVar(lang.NewSymbol("list"))
if v345.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v345)))
}
v346 := v345.Get()
v347 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v348 := v347.FindInternedVar(lang.NewSymbol("seq"))
if v348.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v348)))
}
v349 := v348.Get()
v350 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v351 := v350.FindInternedVar(lang.NewSymbol("concat"))
if v351.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v351)))
}
v352 := v351.Get()
v353 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v354 := v353.FindInternedVar(lang.NewSymbol("list"))
if v354.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v354)))
}
v355 := v354.Get()
v356 := lang.Apply(v355, []any{lang.NewSymbol("glojure.core/lazy-seq")})
v357 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v358 := v357.FindInternedVar(lang.NewSymbol("list"))
if v358.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v358)))
}
v359 := v358.Get()
v360 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v361 := v360.FindInternedVar(lang.NewSymbol("seq"))
if v361.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v361)))
}
v362 := v361.Get()
v363 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v364 := v363.FindInternedVar(lang.NewSymbol("concat"))
if v364.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v364)))
}
v365 := v364.Get()
v366 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v367 := v366.FindInternedVar(lang.NewSymbol("list"))
if v367.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v367)))
}
v368 := v367.Get()
v369 := lang.Apply(v368, []any{lang.NewSymbol("glojure.core/loop")})
v370 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v371 := v370.FindInternedVar(lang.NewSymbol("list"))
if v371.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v371)))
}
v372 := v371.Get()
v373 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v374 := v373.FindInternedVar(lang.NewSymbol("apply"))
if v374.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v374)))
}
v375 := v374.Get()
v376 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v377 := v376.FindInternedVar(lang.NewSymbol("vector"))
if v377.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v377)))
}
v378 := v377.Get()
v379 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v380 := v379.FindInternedVar(lang.NewSymbol("seq"))
if v380.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v380)))
}
v381 := v380.Get()
v382 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v383 := v382.FindInternedVar(lang.NewSymbol("concat"))
if v383.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v383)))
}
v384 := v383.Get()
v385 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v386 := v385.FindInternedVar(lang.NewSymbol("list"))
if v386.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v386)))
}
v387 := v386.Get()
v388 := lang.Apply(v387, []any{v135})
v389 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v390 := v389.FindInternedVar(lang.NewSymbol("list"))
if v390.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v390)))
}
v391 := v390.Get()
v392 := lang.Apply(v391, []any{v135})
v393 := lang.Apply(v384, []any{v388, v392})
v394 := lang.Apply(v381, []any{v393})
v395 := lang.Apply(v375, []any{v378, v394})
v396 := lang.Apply(v372, []any{v395})
v397 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v398 := v397.FindInternedVar(lang.NewSymbol("list"))
if v398.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v398)))
}
v399 := v398.Get()
v400 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v401 := v400.FindInternedVar(lang.NewSymbol("seq"))
if v401.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v401)))
}
v402 := v401.Get()
v403 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v404 := v403.FindInternedVar(lang.NewSymbol("concat"))
if v404.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v404)))
}
v405 := v404.Get()
v406 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v407 := v406.FindInternedVar(lang.NewSymbol("list"))
if v407.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v407)))
}
v408 := v407.Get()
v409 := lang.Apply(v408, []any{lang.NewSymbol("glojure.core/when-let")})
v410 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v411 := v410.FindInternedVar(lang.NewSymbol("list"))
if v411.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v411)))
}
v412 := v411.Get()
v413 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v414 := v413.FindInternedVar(lang.NewSymbol("apply"))
if v414.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v414)))
}
v415 := v414.Get()
v416 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v417 := v416.FindInternedVar(lang.NewSymbol("vector"))
if v417.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v417)))
}
v418 := v417.Get()
v419 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v420 := v419.FindInternedVar(lang.NewSymbol("seq"))
if v420.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v420)))
}
v421 := v420.Get()
v422 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v423 := v422.FindInternedVar(lang.NewSymbol("concat"))
if v423.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v423)))
}
v424 := v423.Get()
v425 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v426 := v425.FindInternedVar(lang.NewSymbol("list"))
if v426.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v426)))
}
v427 := v426.Get()
v428 := lang.Apply(v427, []any{v135})
v429 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v430 := v429.FindInternedVar(lang.NewSymbol("list"))
if v430.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v430)))
}
v431 := v430.Get()
v432 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v433 := v432.FindInternedVar(lang.NewSymbol("seq"))
if v433.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v433)))
}
v434 := v433.Get()
v435 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v436 := v435.FindInternedVar(lang.NewSymbol("concat"))
if v436.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v436)))
}
v437 := v436.Get()
v438 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v439 := v438.FindInternedVar(lang.NewSymbol("list"))
if v439.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v439)))
}
v440 := v439.Get()
v441 := lang.Apply(v440, []any{lang.NewSymbol("glojure.core/seq")})
v442 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v443 := v442.FindInternedVar(lang.NewSymbol("list"))
if v443.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v443)))
}
v444 := v443.Get()
v445 := lang.Apply(v444, []any{v135})
v446 := lang.Apply(v437, []any{v441, v445})
v447 := lang.Apply(v434, []any{v446})
v448 := lang.Apply(v431, []any{v447})
v449 := lang.Apply(v424, []any{v428, v448})
v450 := lang.Apply(v421, []any{v449})
v451 := lang.Apply(v415, []any{v418, v450})
v452 := lang.Apply(v412, []any{v451})
v453 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v454 := v453.FindInternedVar(lang.NewSymbol("list"))
if v454.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v454)))
}
v455 := v454.Get()
v456 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v457 := v456.FindInternedVar(lang.NewSymbol("seq"))
if v457.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v457)))
}
v458 := v457.Get()
v459 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v460 := v459.FindInternedVar(lang.NewSymbol("concat"))
if v460.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v460)))
}
v461 := v460.Get()
v462 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v463 := v462.FindInternedVar(lang.NewSymbol("list"))
if v463.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v463)))
}
v464 := v463.Get()
v465 := lang.Apply(v464, []any{lang.NewSymbol("if")})
v466 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v467 := v466.FindInternedVar(lang.NewSymbol("list"))
if v467.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v467)))
}
v468 := v467.Get()
v469 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v470 := v469.FindInternedVar(lang.NewSymbol("seq"))
if v470.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v470)))
}
v471 := v470.Get()
v472 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v473 := v472.FindInternedVar(lang.NewSymbol("concat"))
if v473.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v473)))
}
v474 := v473.Get()
v475 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v476 := v475.FindInternedVar(lang.NewSymbol("list"))
if v476.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v476)))
}
v477 := v476.Get()
v478 := lang.Apply(v477, []any{lang.NewSymbol("glojure.core/chunked-seq?")})
v479 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v480 := v479.FindInternedVar(lang.NewSymbol("list"))
if v480.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v480)))
}
v481 := v480.Get()
v482 := lang.Apply(v481, []any{v135})
v483 := lang.Apply(v474, []any{v478, v482})
v484 := lang.Apply(v471, []any{v483})
v485 := lang.Apply(v468, []any{v484})
v486 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v487 := v486.FindInternedVar(lang.NewSymbol("list"))
if v487.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v487)))
}
v488 := v487.Get()
v489 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v490 := v489.FindInternedVar(lang.NewSymbol("seq"))
if v490.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v490)))
}
v491 := v490.Get()
v492 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v493 := v492.FindInternedVar(lang.NewSymbol("concat"))
if v493.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v493)))
}
v494 := v493.Get()
v495 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v496 := v495.FindInternedVar(lang.NewSymbol("list"))
if v496.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v496)))
}
v497 := v496.Get()
v498 := lang.Apply(v497, []any{lang.NewSymbol("glojure.core/let")})
v499 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v500 := v499.FindInternedVar(lang.NewSymbol("list"))
if v500.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v500)))
}
v501 := v500.Get()
v502 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v503 := v502.FindInternedVar(lang.NewSymbol("apply"))
if v503.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v503)))
}
v504 := v503.Get()
v505 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v506 := v505.FindInternedVar(lang.NewSymbol("vector"))
if v506.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v506)))
}
v507 := v506.Get()
v508 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v509 := v508.FindInternedVar(lang.NewSymbol("seq"))
if v509.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v509)))
}
v510 := v509.Get()
v511 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v512 := v511.FindInternedVar(lang.NewSymbol("concat"))
if v512.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v512)))
}
v513 := v512.Get()
v514 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v515 := v514.FindInternedVar(lang.NewSymbol("list"))
if v515.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v515)))
}
v516 := v515.Get()
v517 := lang.Apply(v516, []any{lang.NewSymbol("c__0__auto__")})
v518 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v519 := v518.FindInternedVar(lang.NewSymbol("list"))
if v519.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v519)))
}
v520 := v519.Get()
v521 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v522 := v521.FindInternedVar(lang.NewSymbol("seq"))
if v522.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v522)))
}
v523 := v522.Get()
v524 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v525 := v524.FindInternedVar(lang.NewSymbol("concat"))
if v525.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v525)))
}
v526 := v525.Get()
v527 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v528 := v527.FindInternedVar(lang.NewSymbol("list"))
if v528.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v528)))
}
v529 := v528.Get()
v530 := lang.Apply(v529, []any{lang.NewSymbol("glojure.core/chunk-first")})
v531 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v532 := v531.FindInternedVar(lang.NewSymbol("list"))
if v532.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v532)))
}
v533 := v532.Get()
v534 := lang.Apply(v533, []any{v135})
v535 := lang.Apply(v526, []any{v530, v534})
v536 := lang.Apply(v523, []any{v535})
v537 := lang.Apply(v520, []any{v536})
v538 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v539 := v538.FindInternedVar(lang.NewSymbol("list"))
if v539.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v539)))
}
v540 := v539.Get()
v541 := lang.Apply(v540, []any{lang.NewSymbol("size__1__auto__")})
v542 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v543 := v542.FindInternedVar(lang.NewSymbol("list"))
if v543.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v543)))
}
v544 := v543.Get()
v545 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v546 := v545.FindInternedVar(lang.NewSymbol("seq"))
if v546.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v546)))
}
v547 := v546.Get()
v548 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v549 := v548.FindInternedVar(lang.NewSymbol("concat"))
if v549.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v549)))
}
v550 := v549.Get()
v551 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v552 := v551.FindInternedVar(lang.NewSymbol("list"))
if v552.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v552)))
}
v553 := v552.Get()
v554 := lang.Apply(v553, []any{lang.NewSymbol("glojure.core/int")})
v555 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v556 := v555.FindInternedVar(lang.NewSymbol("list"))
if v556.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v556)))
}
v557 := v556.Get()
v558 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v559 := v558.FindInternedVar(lang.NewSymbol("seq"))
if v559.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v559)))
}
v560 := v559.Get()
v561 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v562 := v561.FindInternedVar(lang.NewSymbol("concat"))
if v562.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v562)))
}
v563 := v562.Get()
v564 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v565 := v564.FindInternedVar(lang.NewSymbol("list"))
if v565.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v565)))
}
v566 := v565.Get()
v567 := lang.Apply(v566, []any{lang.NewSymbol("glojure.core/count")})
v568 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v569 := v568.FindInternedVar(lang.NewSymbol("list"))
if v569.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v569)))
}
v570 := v569.Get()
v571 := lang.Apply(v570, []any{lang.NewSymbol("c__0__auto__")})
v572 := lang.Apply(v563, []any{v567, v571})
v573 := lang.Apply(v560, []any{v572})
v574 := lang.Apply(v557, []any{v573})
v575 := lang.Apply(v550, []any{v554, v574})
v576 := lang.Apply(v547, []any{v575})
v577 := lang.Apply(v544, []any{v576})
v578 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v579 := v578.FindInternedVar(lang.NewSymbol("list"))
if v579.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v579)))
}
v580 := v579.Get()
v581 := lang.Apply(v580, []any{v297})
v582 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v583 := v582.FindInternedVar(lang.NewSymbol("list"))
if v583.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v583)))
}
v584 := v583.Get()
v585 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v586 := v585.FindInternedVar(lang.NewSymbol("seq"))
if v586.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v586)))
}
v587 := v586.Get()
v588 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v589 := v588.FindInternedVar(lang.NewSymbol("concat"))
if v589.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v589)))
}
v590 := v589.Get()
v591 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v592 := v591.FindInternedVar(lang.NewSymbol("list"))
if v592.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v592)))
}
v593 := v592.Get()
v594 := lang.Apply(v593, []any{lang.NewSymbol("glojure.core/chunk-buffer")})
v595 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v596 := v595.FindInternedVar(lang.NewSymbol("list"))
if v596.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v596)))
}
v597 := v596.Get()
v598 := lang.Apply(v597, []any{lang.NewSymbol("size__1__auto__")})
v599 := lang.Apply(v590, []any{v594, v598})
v600 := lang.Apply(v587, []any{v599})
v601 := lang.Apply(v584, []any{v600})
v602 := lang.Apply(v513, []any{v517, v537, v541, v577, v581, v601})
v603 := lang.Apply(v510, []any{v602})
v604 := lang.Apply(v504, []any{v507, v603})
v605 := lang.Apply(v501, []any{v604})
v606 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v607 := v606.FindInternedVar(lang.NewSymbol("list"))
if v607.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v607)))
}
v608 := v607.Get()
v609 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v610 := v609.FindInternedVar(lang.NewSymbol("seq"))
if v610.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v610)))
}
v611 := v610.Get()
v612 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v613 := v612.FindInternedVar(lang.NewSymbol("concat"))
if v613.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v613)))
}
v614 := v613.Get()
v615 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v616 := v615.FindInternedVar(lang.NewSymbol("list"))
if v616.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v616)))
}
v617 := v616.Get()
v618 := lang.Apply(v617, []any{lang.NewSymbol("if")})
v619 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v620 := v619.FindInternedVar(lang.NewSymbol("list"))
if v620.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v620)))
}
v621 := v620.Get()
v622 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v623 := v622.FindInternedVar(lang.NewSymbol("seq"))
if v623.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v623)))
}
v624 := v623.Get()
v625 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v626 := v625.FindInternedVar(lang.NewSymbol("concat"))
if v626.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v626)))
}
v627 := v626.Get()
v628 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v629 := v628.FindInternedVar(lang.NewSymbol("list"))
if v629.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v629)))
}
v630 := v629.Get()
v631 := lang.Apply(v630, []any{lang.NewSymbol("glojure.core/loop")})
v632 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v633 := v632.FindInternedVar(lang.NewSymbol("list"))
if v633.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v633)))
}
v634 := v633.Get()
v635 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v636 := v635.FindInternedVar(lang.NewSymbol("apply"))
if v636.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v636)))
}
v637 := v636.Get()
v638 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v639 := v638.FindInternedVar(lang.NewSymbol("vector"))
if v639.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v639)))
}
v640 := v639.Get()
v641 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v642 := v641.FindInternedVar(lang.NewSymbol("seq"))
if v642.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v642)))
}
v643 := v642.Get()
v644 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v645 := v644.FindInternedVar(lang.NewSymbol("concat"))
if v645.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v645)))
}
v646 := v645.Get()
v647 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v648 := v647.FindInternedVar(lang.NewSymbol("list"))
if v648.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v648)))
}
v649 := v648.Get()
v650 := lang.Apply(v649, []any{v292})
v651 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v652 := v651.FindInternedVar(lang.NewSymbol("list"))
if v652.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v652)))
}
v653 := v652.Get()
v654 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v655 := v654.FindInternedVar(lang.NewSymbol("seq"))
if v655.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v655)))
}
v656 := v655.Get()
v657 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v658 := v657.FindInternedVar(lang.NewSymbol("concat"))
if v658.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v658)))
}
v659 := v658.Get()
v660 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v661 := v660.FindInternedVar(lang.NewSymbol("list"))
if v661.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v661)))
}
v662 := v661.Get()
v663 := lang.Apply(v662, []any{lang.NewSymbol("glojure.core/int")})
v664 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v665 := v664.FindInternedVar(lang.NewSymbol("list"))
if v665.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v665)))
}
v666 := v665.Get()
v667 := lang.Apply(v666, []any{int64(0)})
v668 := lang.Apply(v659, []any{v663, v667})
v669 := lang.Apply(v656, []any{v668})
v670 := lang.Apply(v653, []any{v669})
v671 := lang.Apply(v646, []any{v650, v670})
v672 := lang.Apply(v643, []any{v671})
v673 := lang.Apply(v637, []any{v640, v672})
v674 := lang.Apply(v634, []any{v673})
v675 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v676 := v675.FindInternedVar(lang.NewSymbol("list"))
if v676.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v676)))
}
v677 := v676.Get()
v678 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v679 := v678.FindInternedVar(lang.NewSymbol("seq"))
if v679.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v679)))
}
v680 := v679.Get()
v681 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v682 := v681.FindInternedVar(lang.NewSymbol("concat"))
if v682.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v682)))
}
v683 := v682.Get()
v684 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v685 := v684.FindInternedVar(lang.NewSymbol("list"))
if v685.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v685)))
}
v686 := v685.Get()
v687 := lang.Apply(v686, []any{lang.NewSymbol("if")})
v688 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v689 := v688.FindInternedVar(lang.NewSymbol("list"))
if v689.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v689)))
}
v690 := v689.Get()
v691 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v692 := v691.FindInternedVar(lang.NewSymbol("seq"))
if v692.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v692)))
}
v693 := v692.Get()
v694 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v695 := v694.FindInternedVar(lang.NewSymbol("concat"))
if v695.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v695)))
}
v696 := v695.Get()
v697 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v698 := v697.FindInternedVar(lang.NewSymbol("list"))
if v698.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v698)))
}
v699 := v698.Get()
v700 := lang.Apply(v699, []any{lang.NewSymbol("glojure.core/<")})
v701 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v702 := v701.FindInternedVar(lang.NewSymbol("list"))
if v702.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v702)))
}
v703 := v702.Get()
v704 := lang.Apply(v703, []any{v292})
v705 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v706 := v705.FindInternedVar(lang.NewSymbol("list"))
if v706.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v706)))
}
v707 := v706.Get()
v708 := lang.Apply(v707, []any{lang.NewSymbol("size__1__auto__")})
v709 := lang.Apply(v696, []any{v700, v704, v708})
v710 := lang.Apply(v693, []any{v709})
v711 := lang.Apply(v690, []any{v710})
v712 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v713 := v712.FindInternedVar(lang.NewSymbol("list"))
if v713.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v713)))
}
v714 := v713.Get()
v715 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v716 := v715.FindInternedVar(lang.NewSymbol("seq"))
if v716.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v716)))
}
v717 := v716.Get()
v718 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v719 := v718.FindInternedVar(lang.NewSymbol("concat"))
if v719.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v719)))
}
v720 := v719.Get()
v721 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v722 := v721.FindInternedVar(lang.NewSymbol("list"))
if v722.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v722)))
}
v723 := v722.Get()
v724 := lang.Apply(v723, []any{lang.NewSymbol("glojure.core/let")})
v725 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v726 := v725.FindInternedVar(lang.NewSymbol("list"))
if v726.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v726)))
}
v727 := v726.Get()
v728 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v729 := v728.FindInternedVar(lang.NewSymbol("apply"))
if v729.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v729)))
}
v730 := v729.Get()
v731 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v732 := v731.FindInternedVar(lang.NewSymbol("vector"))
if v732.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v732)))
}
v733 := v732.Get()
v734 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v735 := v734.FindInternedVar(lang.NewSymbol("seq"))
if v735.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v735)))
}
v736 := v735.Get()
v737 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v738 := v737.FindInternedVar(lang.NewSymbol("concat"))
if v738.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v738)))
}
v739 := v738.Get()
v740 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v741 := v740.FindInternedVar(lang.NewSymbol("list"))
if v741.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v741)))
}
v742 := v741.Get()
v743 := lang.Apply(v742, []any{v99})
v744 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v745 := v744.FindInternedVar(lang.NewSymbol("list"))
if v745.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v745)))
}
v746 := v745.Get()
v747 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v748 := v747.FindInternedVar(lang.NewSymbol("seq"))
if v748.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v748)))
}
v749 := v748.Get()
v750 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v751 := v750.FindInternedVar(lang.NewSymbol("concat"))
if v751.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v751)))
}
v752 := v751.Get()
v753 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v754 := v753.FindInternedVar(lang.NewSymbol("list"))
if v754.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v754)))
}
v755 := v754.Get()
v756 := lang.Apply(v755, []any{lang.NewSymbol(".nth")})
v757 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v758 := v757.FindInternedVar(lang.NewSymbol("list"))
if v758.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v758)))
}
v759 := v758.Get()
v760 := lang.Apply(v759, []any{lang.NewSymbol("c__0__auto__")})
v761 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v762 := v761.FindInternedVar(lang.NewSymbol("list"))
if v762.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v762)))
}
v763 := v762.Get()
v764 := lang.Apply(v763, []any{v292})
v765 := lang.Apply(v752, []any{v756, v760, v764})
v766 := lang.Apply(v749, []any{v765})
v767 := lang.Apply(v746, []any{v766})
v768 := lang.Apply(v739, []any{v743, v767})
v769 := lang.Apply(v736, []any{v768})
v770 := lang.Apply(v730, []any{v733, v769})
v771 := lang.Apply(v727, []any{v770})
v772 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v773 := v772.FindInternedVar(lang.NewSymbol("list"))
if v773.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v773)))
}
v774 := v773.Get()
v775 := lang.Apply(v302, []any{v111})
v776 := lang.Apply(v774, []any{v775})
v777 := lang.Apply(v720, []any{v724, v771, v776})
v778 := lang.Apply(v717, []any{v777})
v779 := lang.Apply(v714, []any{v778})
v780 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v781 := v780.FindInternedVar(lang.NewSymbol("list"))
if v781.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v781)))
}
v782 := v781.Get()
v783 := lang.Apply(v782, []any{true})
v784 := lang.Apply(v683, []any{v687, v711, v779, v783})
v785 := lang.Apply(v680, []any{v784})
v786 := lang.Apply(v677, []any{v785})
v787 := lang.Apply(v627, []any{v631, v674, v786})
v788 := lang.Apply(v624, []any{v787})
v789 := lang.Apply(v621, []any{v788})
v790 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v791 := v790.FindInternedVar(lang.NewSymbol("list"))
if v791.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v791)))
}
v792 := v791.Get()
v793 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v794 := v793.FindInternedVar(lang.NewSymbol("seq"))
if v794.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v794)))
}
v795 := v794.Get()
v796 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v797 := v796.FindInternedVar(lang.NewSymbol("concat"))
if v797.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v797)))
}
v798 := v797.Get()
v799 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v800 := v799.FindInternedVar(lang.NewSymbol("list"))
if v800.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v800)))
}
v801 := v800.Get()
v802 := lang.Apply(v801, []any{lang.NewSymbol("glojure.core/chunk-cons")})
v803 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v804 := v803.FindInternedVar(lang.NewSymbol("list"))
if v804.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v804)))
}
v805 := v804.Get()
v806 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v807 := v806.FindInternedVar(lang.NewSymbol("seq"))
if v807.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v807)))
}
v808 := v807.Get()
v809 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v810 := v809.FindInternedVar(lang.NewSymbol("concat"))
if v810.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v810)))
}
v811 := v810.Get()
v812 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v813 := v812.FindInternedVar(lang.NewSymbol("list"))
if v813.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v813)))
}
v814 := v813.Get()
v815 := lang.Apply(v814, []any{lang.NewSymbol("glojure.core/chunk")})
v816 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v817 := v816.FindInternedVar(lang.NewSymbol("list"))
if v817.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v817)))
}
v818 := v817.Get()
v819 := lang.Apply(v818, []any{v297})
v820 := lang.Apply(v811, []any{v815, v819})
v821 := lang.Apply(v808, []any{v820})
v822 := lang.Apply(v805, []any{v821})
v823 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v824 := v823.FindInternedVar(lang.NewSymbol("list"))
if v824.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v824)))
}
v825 := v824.Get()
v826 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v827 := v826.FindInternedVar(lang.NewSymbol("seq"))
if v827.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v827)))
}
v828 := v827.Get()
v829 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v830 := v829.FindInternedVar(lang.NewSymbol("concat"))
if v830.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v830)))
}
v831 := v830.Get()
v832 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v833 := v832.FindInternedVar(lang.NewSymbol("list"))
if v833.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v833)))
}
v834 := v833.Get()
v835 := lang.Apply(v834, []any{v130})
v836 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v837 := v836.FindInternedVar(lang.NewSymbol("list"))
if v837.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v837)))
}
v838 := v837.Get()
v839 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v840 := v839.FindInternedVar(lang.NewSymbol("seq"))
if v840.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v840)))
}
v841 := v840.Get()
v842 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v843 := v842.FindInternedVar(lang.NewSymbol("concat"))
if v843.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v843)))
}
v844 := v843.Get()
v845 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v846 := v845.FindInternedVar(lang.NewSymbol("list"))
if v846.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v846)))
}
v847 := v846.Get()
v848 := lang.Apply(v847, []any{lang.NewSymbol("glojure.core/chunk-rest")})
v849 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v850 := v849.FindInternedVar(lang.NewSymbol("list"))
if v850.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v850)))
}
v851 := v850.Get()
v852 := lang.Apply(v851, []any{v135})
v853 := lang.Apply(v844, []any{v848, v852})
v854 := lang.Apply(v841, []any{v853})
v855 := lang.Apply(v838, []any{v854})
v856 := lang.Apply(v831, []any{v835, v855})
v857 := lang.Apply(v828, []any{v856})
v858 := lang.Apply(v825, []any{v857})
v859 := lang.Apply(v798, []any{v802, v822, v858})
v860 := lang.Apply(v795, []any{v859})
v861 := lang.Apply(v792, []any{v860})
v862 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v863 := v862.FindInternedVar(lang.NewSymbol("list"))
if v863.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v863)))
}
v864 := v863.Get()
v865 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v866 := v865.FindInternedVar(lang.NewSymbol("seq"))
if v866.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v866)))
}
v867 := v866.Get()
v868 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v869 := v868.FindInternedVar(lang.NewSymbol("concat"))
if v869.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v869)))
}
v870 := v869.Get()
v871 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v872 := v871.FindInternedVar(lang.NewSymbol("list"))
if v872.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v872)))
}
v873 := v872.Get()
v874 := lang.Apply(v873, []any{lang.NewSymbol("glojure.core/chunk-cons")})
v875 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v876 := v875.FindInternedVar(lang.NewSymbol("list"))
if v876.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v876)))
}
v877 := v876.Get()
v878 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v879 := v878.FindInternedVar(lang.NewSymbol("seq"))
if v879.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v879)))
}
v880 := v879.Get()
v881 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v882 := v881.FindInternedVar(lang.NewSymbol("concat"))
if v882.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v882)))
}
v883 := v882.Get()
v884 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v885 := v884.FindInternedVar(lang.NewSymbol("list"))
if v885.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v885)))
}
v886 := v885.Get()
v887 := lang.Apply(v886, []any{lang.NewSymbol("glojure.core/chunk")})
v888 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v889 := v888.FindInternedVar(lang.NewSymbol("list"))
if v889.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v889)))
}
v890 := v889.Get()
v891 := lang.Apply(v890, []any{v297})
v892 := lang.Apply(v883, []any{v887, v891})
v893 := lang.Apply(v880, []any{v892})
v894 := lang.Apply(v877, []any{v893})
v895 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v896 := v895.FindInternedVar(lang.NewSymbol("list"))
if v896.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v896)))
}
v897 := v896.Get()
v898 := lang.Apply(v897, []any{nil})
v899 := lang.Apply(v870, []any{v874, v894, v898})
v900 := lang.Apply(v867, []any{v899})
v901 := lang.Apply(v864, []any{v900})
v902 := lang.Apply(v614, []any{v618, v789, v861, v901})
v903 := lang.Apply(v611, []any{v902})
v904 := lang.Apply(v608, []any{v903})
v905 := lang.Apply(v494, []any{v498, v605, v904})
v906 := lang.Apply(v491, []any{v905})
v907 := lang.Apply(v488, []any{v906})
v908 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v909 := v908.FindInternedVar(lang.NewSymbol("list"))
if v909.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v909)))
}
v910 := v909.Get()
v911 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v912 := v911.FindInternedVar(lang.NewSymbol("seq"))
if v912.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v912)))
}
v913 := v912.Get()
v914 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v915 := v914.FindInternedVar(lang.NewSymbol("concat"))
if v915.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v915)))
}
v916 := v915.Get()
v917 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v918 := v917.FindInternedVar(lang.NewSymbol("list"))
if v918.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v918)))
}
v919 := v918.Get()
v920 := lang.Apply(v919, []any{lang.NewSymbol("glojure.core/let")})
v921 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v922 := v921.FindInternedVar(lang.NewSymbol("list"))
if v922.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v922)))
}
v923 := v922.Get()
v924 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v925 := v924.FindInternedVar(lang.NewSymbol("apply"))
if v925.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v925)))
}
v926 := v925.Get()
v927 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v928 := v927.FindInternedVar(lang.NewSymbol("vector"))
if v928.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v928)))
}
v929 := v928.Get()
v930 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v931 := v930.FindInternedVar(lang.NewSymbol("seq"))
if v931.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v931)))
}
v932 := v931.Get()
v933 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v934 := v933.FindInternedVar(lang.NewSymbol("concat"))
if v934.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v934)))
}
v935 := v934.Get()
v936 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v937 := v936.FindInternedVar(lang.NewSymbol("list"))
if v937.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v937)))
}
v938 := v937.Get()
v939 := lang.Apply(v938, []any{v99})
v940 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v941 := v940.FindInternedVar(lang.NewSymbol("list"))
if v941.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v941)))
}
v942 := v941.Get()
v943 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v944 := v943.FindInternedVar(lang.NewSymbol("seq"))
if v944.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v944)))
}
v945 := v944.Get()
v946 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v947 := v946.FindInternedVar(lang.NewSymbol("concat"))
if v947.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v947)))
}
v948 := v947.Get()
v949 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v950 := v949.FindInternedVar(lang.NewSymbol("list"))
if v950.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v950)))
}
v951 := v950.Get()
v952 := lang.Apply(v951, []any{lang.NewSymbol("glojure.core/first")})
v953 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v954 := v953.FindInternedVar(lang.NewSymbol("list"))
if v954.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v954)))
}
v955 := v954.Get()
v956 := lang.Apply(v955, []any{v135})
v957 := lang.Apply(v948, []any{v952, v956})
v958 := lang.Apply(v945, []any{v957})
v959 := lang.Apply(v942, []any{v958})
v960 := lang.Apply(v935, []any{v939, v959})
v961 := lang.Apply(v932, []any{v960})
v962 := lang.Apply(v926, []any{v929, v961})
v963 := lang.Apply(v923, []any{v962})
v964 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v965 := v964.FindInternedVar(lang.NewSymbol("list"))
if v965.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v965)))
}
v966 := v965.Get()
v967 := lang.Apply(v140, []any{v111})
v968 := lang.Apply(v966, []any{v967})
v969 := lang.Apply(v916, []any{v920, v963, v968})
v970 := lang.Apply(v913, []any{v969})
v971 := lang.Apply(v910, []any{v970})
v972 := lang.Apply(v461, []any{v465, v485, v907, v971})
v973 := lang.Apply(v458, []any{v972})
v974 := lang.Apply(v455, []any{v973})
v975 := lang.Apply(v405, []any{v409, v452, v974})
v976 := lang.Apply(v402, []any{v975})
v977 := lang.Apply(v399, []any{v976})
v978 := lang.Apply(v365, []any{v369, v396, v977})
v979 := lang.Apply(v362, []any{v978})
v980 := lang.Apply(v359, []any{v979})
v981 := lang.Apply(v352, []any{v356, v980})
v982 := lang.Apply(v349, []any{v981})
v983 := lang.Apply(v346, []any{v982})
v984 := lang.Apply(v312, []any{v316, v320, v343, v983})
v985 := lang.Apply(v309, []any{v984})
v145 = v985
}
return v145
})
v65 := v64
_ = v65
}
v65 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4668), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(4729), lang.NewKeyword("end-column"), int(68))
v66, err := lang.WithMeta(v64, v65.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v63 any = v66
_ = v63
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("seq"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("concat"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("list"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.Apply(v76, []any{lang.NewSymbol("glojure.core/let")})
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("list"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("apply"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("vector"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("seq"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("concat"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("list"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.Apply(v95, []any{lang.NewSymbol("iter__0__auto__")})
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("list"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.Apply(v55, []any{v5})
v101 := lang.Apply(v63, []any{v100})
v102 := lang.Apply(v99, []any{v101})
v103 := lang.Apply(v92, []any{v96, v102})
v104 := lang.Apply(v89, []any{v103})
v105 := lang.Apply(v83, []any{v86, v104})
v106 := lang.Apply(v80, []any{v105})
v107 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v108 := v107.FindInternedVar(lang.NewSymbol("list"))
if v108.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v108)))
}
v109 := v108.Get()
v110 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v111 := v110.FindInternedVar(lang.NewSymbol("seq"))
if v111.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v111)))
}
v112 := v111.Get()
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("concat"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v117 := v116.FindInternedVar(lang.NewSymbol("list"))
if v117.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v117)))
}
v118 := v117.Get()
v119 := lang.Apply(v118, []any{lang.NewSymbol("iter__0__auto__")})
v120 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v121 := v120.FindInternedVar(lang.NewSymbol("list"))
if v121.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v121)))
}
v122 := v121.Get()
v123 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v124 := v123.FindInternedVar(lang.NewSymbol("second"))
if v124.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v124)))
}
v125 := v124.Get()
v126 := lang.Apply(v125, []any{v5})
v127 := lang.Apply(v122, []any{v126})
v128 := lang.Apply(v115, []any{v119, v127})
v129 := lang.Apply(v112, []any{v128})
v130 := lang.Apply(v109, []any{v129})
v131 := lang.Apply(v73, []any{v77, v106, v130})
v132 := lang.Apply(v70, []any{v131})
return v132
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// force
{
v0 := lang.NewSymbol("force").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(754), lang.NewKeyword("end-line"), int(754))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(glojure.lang4.Delay, "force")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("force is not a function")))
}
v5 := lang.Apply(v4, []any{v3})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// format
{
v0 := lang.NewSymbol("format").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("fmt"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Formats a string using java.lang.String.format, see java.util.Formatter for format\n  string syntax", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5717), lang.NewKeyword("end-line"), int(5717))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("apply"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{fmt.Sprintf, v3, v4})
return v8
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// frequencies
{
v0 := lang.NewSymbol("frequencies").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a map from distinct items in coll to the number of times\n  they appear.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7185), lang.NewKeyword("end-line"), int(7185))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("persistent!"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("reduce"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
var v10 lang.FnFunc
v10 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v11 := args[0]
v12 := args[1]
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("assoc!"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("inc"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("get"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v11, v12, int64(0)})
v23 := lang.Apply(v18, []any{v22})
v24 := lang.Apply(v15, []any{v11, v12, v23})
return v24
})
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7192), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(7193), lang.NewKeyword("end-column"), int(54))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("transient"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.NewMap()
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7194), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(7194), lang.NewKeyword("end-column"), int(24))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v19 := lang.Apply(v15, []any{v18})
v20 := lang.Apply(v9, []any{v12, v19, v3})
v21 := lang.Apply(v6, []any{v20})
return v21
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// future
{
v0 := lang.NewSymbol("future").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Takes a body of expressions and yields a future object that will\n  invoke the body in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant of\n  deref with timeout is used. See also - realized?.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(7009), lang.NewKeyword("end-line"), int(7009))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol("glojure.core/future-call")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("seq"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("concat"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("list"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{lang.NewSymbol("fn*")})
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("list"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("apply"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("vector"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("seq"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("concat"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, nil)
v45 := lang.Apply(v40, []any{v44})
v46 := lang.Apply(v34, []any{v37, v45})
v47 := lang.Apply(v31, []any{v46})
v48 := lang.Apply(v24, []any{v28, v47, v5})
v49 := lang.Apply(v21, []any{v48})
v50 := lang.Apply(v18, []any{v49})
v51 := lang.Apply(v11, []any{v15, v50})
v52 := lang.Apply(v8, []any{v51})
return v52
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// future-call
{
v0 := lang.NewSymbol("future-call").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"))), lang.NewKeyword("doc"), "Takes a function of no args and yields a future object that will\n  invoke the function in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant\n  of deref with timeout is used. See also - realized?.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7003), lang.NewKeyword("end-line"), int(7003))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("binding-conveyor-fn"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v4})
var v4 any = v8
_ = v4
v10 := lang.Apply(lang.AgentSubmit, []any{v4})
var v9 any = v10
_ = v9
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// future-cancel
{
v0 := lang.NewSymbol("future-cancel").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"))), lang.NewKeyword("doc"), "Cancels the future, if possible.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7019), lang.NewKeyword("end-line"), int(7019))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(v3, "cancel")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("cancel is not a function")))
}
v5 := lang.Apply(v4, []any{true})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// future-cancelled?
{
v0 := lang.NewSymbol("future-cancelled?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"))), lang.NewKeyword("doc"), "Returns true if future f is cancelled", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7025), lang.NewKeyword("end-line"), int(7025))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "isCancelled")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "isCancelled")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// future-done?
{
v0 := lang.NewSymbol("future-done?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"))), lang.NewKeyword("doc"), "Returns true if future f is done", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6538), lang.NewKeyword("end-line"), int(6538))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "isDone")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "isDone")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// future?
{
v0 := lang.NewSymbol("future?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x is a future", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6532), lang.NewKeyword("end-line"), int(6532))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{java.util.concurrent7.Future, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// gen-class
{
v0 := lang.NewSymbol("gen-class").WithMeta(lang.NewMap()).(*lang.Symbol)
v1 := ns.Intern(v0)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// gensym
{
v0 := lang.NewSymbol("gensym").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("prefix-string"))), lang.NewKeyword("doc"), "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(599), lang.NewKeyword("end-line"), int(599))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v4 := v3.FindInternedVar(lang.NewSymbol("gensym"))
if v4.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v4)))
}
v5 := v4.Get()
v6 := lang.Apply(v5, []any{"G__"})
return v6
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("str"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("str"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10, _ := lang.FieldOrMethod(runtime5.RT, "NextID")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("NextID is not a function")))
}
v11 := lang.Apply(v10, []any{})
v12 := lang.Apply(v9, []any{v11})
v13 := lang.Apply(v6, []any{v3, v12})
v14 := lang.Apply(lang.NewSymbol, []any{v13})
return v14
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// get
{
var v1 lang.FnFunc
{ // function get__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol(".")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("seq"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("concat"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("list"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{lang.NewSymbol("glojure.core/Get")})
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v3})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v4})
v41 := lang.Apply(v28, []any{v32, v36, v40, v5})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v22, []any{v42})
v44 := lang.Apply(v11, []any{v15, v19, v43})
v45 := lang.Apply(v8, []any{v44})
return v45
  }
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("get").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("map"), lang.NewSymbol("key")), lang.NewVector(lang.NewSymbol("map"), lang.NewSymbol("key"), lang.NewSymbol("not-found"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the value mapped to key, not-found or nil if key not present\n  in associative collection, set, string, array, or ILookup instance.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(2)int64(3)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1489), lang.NewKeyword("end-line"), int(1489))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(lang.Get, []any{v4, v5})
return v6
  case 3:
v4 := args[0]
v5 := args[1]
v6 := args[2]
v7 := lang.Apply(lang.GetDefault, []any{v4, v5, v6})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// get-in
{
v0 := lang.NewSymbol("get-in").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("m"), lang.NewSymbol("ks")), lang.NewVector(lang.NewSymbol("m"), lang.NewSymbol("ks"), lang.NewSymbol("not-found"))), lang.NewKeyword("doc"), "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key\n  is not present, or the not-found value if supplied.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6128), lang.NewKeyword("end-line"), int(6128))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("reduce1"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("get"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v7, []any{v10, v3, v4})
return v11
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v7 := lang.Apply(reflect.StructOf, []any{nil})
v8 := lang.Apply(reflect.New, []any{v7})
v9, ok := lang.FieldOrMethod(v8, "Interface")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v8, "Interface")))
}
var v10 any
switch reflect.TypeOf(v9).Kind() {
case reflect.Func:
  v10 = lang.Apply(v9, nil)
default:
  v10 = v9
}
var v6 any = v10
_ = v6
var v11 any = v11
_ = v11
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("seq"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v12})
var v12 any = v16
_ = v12
var v17 any
for {
var v18 any
if lang.IsTruthy(v12) {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("get"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("first"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v12})
v27 := lang.Apply(v22, []any{v19, v26, v6})
var v19 any = v27
_ = v19
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("identical?"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v6, v19})
if lang.IsTruthy(v33) {
v29 = v5
} else {
var v34 any = v6
var v35 any = v19
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("next"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v12})
var v36 any = v40
v6 = v34
v11 = v35
v12 = v36
continue
}
v18 = v29
} else {
v18 = v11
}
v17 = v18
  break
}
return v17
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// get-method
{
v0 := lang.NewSymbol("get-method").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("multifn"), lang.NewSymbol("dispatch-val"))), lang.NewKeyword("doc"), "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1815), lang.NewKeyword("end-line"), int(1815))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "getMethod")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("getMethod is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// get-thread-bindings
{
v0 := lang.NewSymbol("get-thread-bindings").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Get a map with the Var/value pairs which is currently in effect for the\n  current thread.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1937), lang.NewKeyword("end-line"), int(1937))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := lang.Apply(nil, nil)
return v3
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// get-validator
{
v0 := lang.NewSymbol("get-validator").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("iref"))), lang.NewKeyword("doc"), "Gets the validator-fn for a var/ref/agent/atom.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2392), lang.NewKeyword("end-line"), int(2392))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(v3, "getValidator")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("getValidator is not a function")))
}
v5 := lang.Apply(v4, []any{})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// global-hierarchy
{
v0 := lang.NewSymbol("global-hierarchy").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5513), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(5514), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, lang.NewMap(lang.NewKeyword("parents"), lang.NewMap(), lang.NewKeyword("descendants"), lang.NewMap(), lang.NewKeyword("ancestors"), lang.NewMap()), true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// group-by
{
v0 := lang.NewSymbol("group-by").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7128), lang.NewKeyword("end-line"), int(7128))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("persistent!"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
var v11 lang.FnFunc
v11 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v12 := args[0]
v13 := args[1]
v15 := lang.Apply(v3, []any{v13})
var v14 any = v15
_ = v14
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("assoc!"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("conj"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("get"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.NewVector()
v27 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7139), lang.NewKeyword("column"), int(40), lang.NewKeyword("end-line"), int(7139), lang.NewKeyword("end-column"), int(41))
v28, err := lang.WithMeta(v26, v27.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v29 := lang.Apply(v25, []any{v12, v14, v28})
v30 := lang.Apply(v22, []any{v29, v13})
v31 := lang.Apply(v19, []any{v12, v14, v30})
return v31
})
v12 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7137), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(7139), lang.NewKeyword("end-column"), int(48))
v13, err := lang.WithMeta(v11, v12.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("transient"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.NewMap()
v18 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7140), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(7140), lang.NewKeyword("end-column"), int(17))
v19, err := lang.WithMeta(v17, v18.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v20 := lang.Apply(v16, []any{v19})
v21 := lang.Apply(v10, []any{v13, v20, v4})
v22 := lang.Apply(v7, []any{v21})
return v22
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// halt-when
{
v0 := lang.NewSymbol("halt-when").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred")), lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("retf"))), lang.NewKeyword("doc"), "Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7657), lang.NewKeyword("end-line"), int(7657))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("halt-when"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3, nil})
return v7
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v6 := args[0]
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v8 := lang.Apply(v6, nil)
return v8
  case 1:
v8 := args[0]
var v9 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("map?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v8})
var v10 any = v14
_ = v10
var v16 any
if lang.IsTruthy(v10) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("contains?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v8, lang.NewKeyword("glojure.core/halt")})
v16 = v20
} else {
v16 = v10
}
if lang.IsTruthy(v16) {
v10 := lang.Apply(lang.NewKeyword("glojure.core/halt"), []any{v8})
v9 = v10
} else {
v11 := lang.Apply(v6, []any{v8})
v9 = v11
}
return v9
  case 2:
v8 := args[0]
v9 := args[1]
var v10 any
v11 := lang.Apply(v3, []any{v9})
if lang.IsTruthy(v11) {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("reduced"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
var v15 any
if lang.IsTruthy(v4) {
v16 := lang.Apply(v6, []any{v8})
v17 := lang.Apply(v4, []any{v16, v9})
v15 = v17
} else {
v15 = v9
}
v18 := lang.NewMap(lang.NewKeyword("glojure.core/halt"), v15)
v19 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7678), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(7678), lang.NewKeyword("end-column"), int(72))
v20, err := lang.WithMeta(v18, v19.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v21 := lang.Apply(v14, []any{v20})
v10 = v21
} else {
v22 := lang.Apply(v6, []any{v8, v9})
v10 = v22
}
return v10
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7670), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(7679), lang.NewKeyword("end-column"), int(34))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v9
})
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7669), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(7679), lang.NewKeyword("end-column"), int(35))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// hash
{
v0 := lang.NewSymbol("hash").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns the hash code of its argument. Note this is the hash code\n  consistent with =, and thus is different than .hashCode for Integer,\n  Short, Byte and Clojure collections.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5189), lang.NewKeyword("end-line"), int(5189))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(lang.HashEq, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// hash-map
{
v0 := lang.NewSymbol("hash-map").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("keyvals"))), lang.NewKeyword("doc"), "keyval => key val\n  Returns a new hash map with supplied mappings.  If any keys are\n  equal, they are handled as if by repeated uses of assoc.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(378), lang.NewKeyword("end-line"), int(378))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3 := lang.NewMap()
v4 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(384), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(384), lang.NewKeyword("end-column"), int(8))
v5, err := lang.WithMeta(v3, v4.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v5
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.Apply(lang.CreatePersistentHashMap, []any{v3})
return v4
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// hash-ordered-coll
{
v0 := lang.NewSymbol("hash-ordered-coll").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://glojure.org/data_structures#hash for full algorithms.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.6", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5210), lang.NewKeyword("end-line"), int(5210))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(nil, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// hash-set
{
v0 := lang.NewSymbol("hash-set").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("keys"))), lang.NewKeyword("doc"), "Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(388), lang.NewKeyword("end-line"), int(388))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3 := lang.CreatePersistentTreeSet()
v4 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(393), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(393), lang.NewKeyword("end-column"), int(9))
v5, err := lang.WithMeta(v3, v4.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v5
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.Apply(nil, []any{v3})
return v4
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// hash-unordered-coll
{
v0 := lang.NewSymbol("hash-unordered-coll").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://glojure.org/data_structures#hash for full algorithms.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.6", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5219), lang.NewKeyword("end-line"), int(5219))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(nil, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ident?
{
v0 := lang.NewSymbol("ident?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a symbol or keyword", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1608), lang.NewKeyword("end-line"), int(1608))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("keyword?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
v10 = v4
} else {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("symbol?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3})
v10 = v14
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// identical?
{
var v1 lang.FnFunc
{ // function identical?__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("glojure.lang.Util")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("glojure.core/identical")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v3})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v4})
v31 := lang.Apply(v10, []any{v14, v18, v22, v26, v30})
v32 := lang.Apply(v7, []any{v31})
return v32
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("identical?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Tests if 2 arguments are the same object", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(768), lang.NewKeyword("end-line"), int(768))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(lang.Identical, []any{v4, v5})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// identity
{
v0 := lang.NewSymbol("identity").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns its argument.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1446), lang.NewKeyword("end-line"), int(1446))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
return v3
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// if-let
{
v0 := lang.NewSymbol("if-let").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("then")), lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("then"), lang.NewSymbol("else"), lang.NewSymbol("&"), lang.NewSymbol("oldform"))), lang.NewKeyword("doc"), "bindings => binding-form test\n\n  If test is true, evaluates then with binding-form bound to the value of \n  test, if not, yields else", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1839), lang.NewKeyword("end-line"), int(1839))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("glojure.core/if-let")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v5})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v6})
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("list"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{nil})
v29 := lang.Apply(v12, []any{v16, v20, v24, v28})
v30 := lang.Apply(v9, []any{v29})
return v30
  default:
    if len(args) < 5 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := lang.NewList(args[5:]...)
var v9 any
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("vector?"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v5})
if lang.IsTruthy(v13) {
v9 = nil
} else {
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("str"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("first"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v3})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("*ns*"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("meta"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v3})
v28 := lang.Apply(lang.NewKeyword("line"), []any{v27})
v29 := lang.Apply(v16, []any{v20, " requires ", "a vector for its binding", " in ", v23, ":", v28})
v30 := lang.Apply(lang.NewIllegalArgumentError, []any{v29})
panic(v30)
}
_ = v9
var v31 any
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("nil?"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v8})
if lang.IsTruthy(v35) {
v31 = nil
} else {
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("str"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("first"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v3})
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("*ns*"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("meta"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v3})
v50 := lang.Apply(lang.NewKeyword("line"), []any{v49})
v51 := lang.Apply(v38, []any{v42, " requires ", "1 or 2 forms after binding vector", " in ", v45, ":", v50})
v52 := lang.Apply(lang.NewIllegalArgumentError, []any{v51})
panic(v52)
}
_ = v31
var v53 any
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("="))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("count"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v5})
v61 := lang.Apply(v56, []any{int64(2), v60})
if lang.IsTruthy(v61) {
v53 = nil
} else {
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("str"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("first"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v3})
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("*ns*"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("meta"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v74, []any{v3})
v76 := lang.Apply(lang.NewKeyword("line"), []any{v75})
v77 := lang.Apply(v64, []any{v68, " requires ", "exactly 2 forms in binding vector", " in ", v71, ":", v76})
v78 := lang.Apply(lang.NewIllegalArgumentError, []any{v77})
panic(v78)
}
_ = v53
_ = nil
v80 := lang.Apply(v5, []any{int64(0)})
var v79 any = v80
_ = v79
v82 := lang.Apply(v5, []any{int64(1)})
var v81 any = v82
_ = v81
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("seq"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("concat"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("list"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.Apply(v92, []any{lang.NewSymbol("glojure.core/let")})
v94 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v95 := v94.FindInternedVar(lang.NewSymbol("list"))
if v95.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v95)))
}
v96 := v95.Get()
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("apply"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("vector"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("seq"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("concat"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v110 := v109.FindInternedVar(lang.NewSymbol("list"))
if v110.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v110)))
}
v111 := v110.Get()
v112 := lang.Apply(v111, []any{lang.NewSymbol("temp__0__auto__")})
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("list"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.Apply(v115, []any{v81})
v117 := lang.Apply(v108, []any{v112, v116})
v118 := lang.Apply(v105, []any{v117})
v119 := lang.Apply(v99, []any{v102, v118})
v120 := lang.Apply(v96, []any{v119})
v121 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v122 := v121.FindInternedVar(lang.NewSymbol("list"))
if v122.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v122)))
}
v123 := v122.Get()
v124 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v125 := v124.FindInternedVar(lang.NewSymbol("seq"))
if v125.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v125)))
}
v126 := v125.Get()
v127 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v128 := v127.FindInternedVar(lang.NewSymbol("concat"))
if v128.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v128)))
}
v129 := v128.Get()
v130 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v131 := v130.FindInternedVar(lang.NewSymbol("list"))
if v131.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v131)))
}
v132 := v131.Get()
v133 := lang.Apply(v132, []any{lang.NewSymbol("if")})
v134 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v135 := v134.FindInternedVar(lang.NewSymbol("list"))
if v135.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v135)))
}
v136 := v135.Get()
v137 := lang.Apply(v136, []any{lang.NewSymbol("temp__0__auto__")})
v138 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v139 := v138.FindInternedVar(lang.NewSymbol("list"))
if v139.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v139)))
}
v140 := v139.Get()
v141 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v142 := v141.FindInternedVar(lang.NewSymbol("seq"))
if v142.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v142)))
}
v143 := v142.Get()
v144 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v145 := v144.FindInternedVar(lang.NewSymbol("concat"))
if v145.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v145)))
}
v146 := v145.Get()
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("list"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.Apply(v149, []any{lang.NewSymbol("glojure.core/let")})
v151 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v152 := v151.FindInternedVar(lang.NewSymbol("list"))
if v152.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v152)))
}
v153 := v152.Get()
v154 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v155 := v154.FindInternedVar(lang.NewSymbol("apply"))
if v155.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v155)))
}
v156 := v155.Get()
v157 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v158 := v157.FindInternedVar(lang.NewSymbol("vector"))
if v158.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v158)))
}
v159 := v158.Get()
v160 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v161 := v160.FindInternedVar(lang.NewSymbol("seq"))
if v161.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v161)))
}
v162 := v161.Get()
v163 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v164 := v163.FindInternedVar(lang.NewSymbol("concat"))
if v164.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v164)))
}
v165 := v164.Get()
v166 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v167 := v166.FindInternedVar(lang.NewSymbol("list"))
if v167.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v167)))
}
v168 := v167.Get()
v169 := lang.Apply(v168, []any{v79})
v170 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v171 := v170.FindInternedVar(lang.NewSymbol("list"))
if v171.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v171)))
}
v172 := v171.Get()
v173 := lang.Apply(v172, []any{lang.NewSymbol("temp__0__auto__")})
v174 := lang.Apply(v165, []any{v169, v173})
v175 := lang.Apply(v162, []any{v174})
v176 := lang.Apply(v156, []any{v159, v175})
v177 := lang.Apply(v153, []any{v176})
v178 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v179 := v178.FindInternedVar(lang.NewSymbol("list"))
if v179.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v179)))
}
v180 := v179.Get()
v181 := lang.Apply(v180, []any{v6})
v182 := lang.Apply(v146, []any{v150, v177, v181})
v183 := lang.Apply(v143, []any{v182})
v184 := lang.Apply(v140, []any{v183})
v185 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v186 := v185.FindInternedVar(lang.NewSymbol("list"))
if v186.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v186)))
}
v187 := v186.Get()
v188 := lang.Apply(v187, []any{v7})
v189 := lang.Apply(v129, []any{v133, v137, v184, v188})
v190 := lang.Apply(v126, []any{v189})
v191 := lang.Apply(v123, []any{v190})
v192 := lang.Apply(v89, []any{v93, v120, v191})
v193 := lang.Apply(v86, []any{v192})
return v193
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// if-not
{
v0 := lang.NewSymbol("if-not").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("test"), lang.NewSymbol("then")), lang.NewVector(lang.NewSymbol("test"), lang.NewSymbol("then"), lang.NewSymbol("else"))), lang.NewKeyword("doc"), "Evaluates test. If logical false, evaluates and returns then expr, \n  otherwise else expr, if supplied, else nil.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(760), lang.NewKeyword("end-line"), int(760))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("glojure.core/if-not")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v5})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v6})
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("list"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{nil})
v29 := lang.Apply(v12, []any{v16, v20, v24, v28})
v30 := lang.Apply(v9, []any{v29})
return v30
  case 5:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("concat"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("if")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/not")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v5})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("list"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v6})
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("list"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v7})
v46 := lang.Apply(v13, []any{v17, v37, v41, v45})
v47 := lang.Apply(v10, []any{v46})
return v47
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// if-some
{
v0 := lang.NewSymbol("if-some").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("then")), lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("then"), lang.NewSymbol("else"), lang.NewSymbol("&"), lang.NewSymbol("oldform"))), lang.NewKeyword("doc"), "bindings => binding-form test\n\n   If test is not nil, evaluates then with binding-form bound to the\n   value of test, if not, yields else", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.6", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1874), lang.NewKeyword("end-line"), int(1874))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("glojure.core/if-some")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v5})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v6})
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("list"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{nil})
v29 := lang.Apply(v12, []any{v16, v20, v24, v28})
v30 := lang.Apply(v9, []any{v29})
return v30
  default:
    if len(args) < 5 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := lang.NewList(args[5:]...)
var v9 any
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("vector?"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v5})
if lang.IsTruthy(v13) {
v9 = nil
} else {
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("str"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("first"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v3})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("*ns*"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("meta"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v3})
v28 := lang.Apply(lang.NewKeyword("line"), []any{v27})
v29 := lang.Apply(v16, []any{v20, " requires ", "a vector for its binding", " in ", v23, ":", v28})
v30 := lang.Apply(lang.NewIllegalArgumentError, []any{v29})
panic(v30)
}
_ = v9
var v31 any
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("nil?"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v8})
if lang.IsTruthy(v35) {
v31 = nil
} else {
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("str"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("first"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v3})
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("*ns*"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("meta"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v3})
v50 := lang.Apply(lang.NewKeyword("line"), []any{v49})
v51 := lang.Apply(v38, []any{v42, " requires ", "1 or 2 forms after binding vector", " in ", v45, ":", v50})
v52 := lang.Apply(lang.NewIllegalArgumentError, []any{v51})
panic(v52)
}
_ = v31
var v53 any
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("="))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("count"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v5})
v61 := lang.Apply(v56, []any{int64(2), v60})
if lang.IsTruthy(v61) {
v53 = nil
} else {
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("str"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("first"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v3})
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("*ns*"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("meta"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v74, []any{v3})
v76 := lang.Apply(lang.NewKeyword("line"), []any{v75})
v77 := lang.Apply(v64, []any{v68, " requires ", "exactly 2 forms in binding vector", " in ", v71, ":", v76})
v78 := lang.Apply(lang.NewIllegalArgumentError, []any{v77})
panic(v78)
}
_ = v53
_ = nil
v80 := lang.Apply(v5, []any{int64(0)})
var v79 any = v80
_ = v79
v82 := lang.Apply(v5, []any{int64(1)})
var v81 any = v82
_ = v81
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("seq"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("concat"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("list"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.Apply(v92, []any{lang.NewSymbol("glojure.core/let")})
v94 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v95 := v94.FindInternedVar(lang.NewSymbol("list"))
if v95.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v95)))
}
v96 := v95.Get()
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("apply"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("vector"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("seq"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("concat"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v110 := v109.FindInternedVar(lang.NewSymbol("list"))
if v110.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v110)))
}
v111 := v110.Get()
v112 := lang.Apply(v111, []any{lang.NewSymbol("temp__0__auto__")})
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("list"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.Apply(v115, []any{v81})
v117 := lang.Apply(v108, []any{v112, v116})
v118 := lang.Apply(v105, []any{v117})
v119 := lang.Apply(v99, []any{v102, v118})
v120 := lang.Apply(v96, []any{v119})
v121 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v122 := v121.FindInternedVar(lang.NewSymbol("list"))
if v122.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v122)))
}
v123 := v122.Get()
v124 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v125 := v124.FindInternedVar(lang.NewSymbol("seq"))
if v125.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v125)))
}
v126 := v125.Get()
v127 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v128 := v127.FindInternedVar(lang.NewSymbol("concat"))
if v128.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v128)))
}
v129 := v128.Get()
v130 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v131 := v130.FindInternedVar(lang.NewSymbol("list"))
if v131.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v131)))
}
v132 := v131.Get()
v133 := lang.Apply(v132, []any{lang.NewSymbol("if")})
v134 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v135 := v134.FindInternedVar(lang.NewSymbol("list"))
if v135.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v135)))
}
v136 := v135.Get()
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("seq"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("concat"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("list"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.Apply(v145, []any{lang.NewSymbol("glojure.core/nil?")})
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("list"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.Apply(v149, []any{lang.NewSymbol("temp__0__auto__")})
v151 := lang.Apply(v142, []any{v146, v150})
v152 := lang.Apply(v139, []any{v151})
v153 := lang.Apply(v136, []any{v152})
v154 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v155 := v154.FindInternedVar(lang.NewSymbol("list"))
if v155.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v155)))
}
v156 := v155.Get()
v157 := lang.Apply(v156, []any{v7})
v158 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v159 := v158.FindInternedVar(lang.NewSymbol("list"))
if v159.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v159)))
}
v160 := v159.Get()
v161 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v162 := v161.FindInternedVar(lang.NewSymbol("seq"))
if v162.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v162)))
}
v163 := v162.Get()
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("concat"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v168 := v167.FindInternedVar(lang.NewSymbol("list"))
if v168.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v168)))
}
v169 := v168.Get()
v170 := lang.Apply(v169, []any{lang.NewSymbol("glojure.core/let")})
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("list"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
v174 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v175 := v174.FindInternedVar(lang.NewSymbol("apply"))
if v175.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v175)))
}
v176 := v175.Get()
v177 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v178 := v177.FindInternedVar(lang.NewSymbol("vector"))
if v178.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v178)))
}
v179 := v178.Get()
v180 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v181 := v180.FindInternedVar(lang.NewSymbol("seq"))
if v181.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v181)))
}
v182 := v181.Get()
v183 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v184 := v183.FindInternedVar(lang.NewSymbol("concat"))
if v184.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v184)))
}
v185 := v184.Get()
v186 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v187 := v186.FindInternedVar(lang.NewSymbol("list"))
if v187.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v187)))
}
v188 := v187.Get()
v189 := lang.Apply(v188, []any{v79})
v190 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v191 := v190.FindInternedVar(lang.NewSymbol("list"))
if v191.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v191)))
}
v192 := v191.Get()
v193 := lang.Apply(v192, []any{lang.NewSymbol("temp__0__auto__")})
v194 := lang.Apply(v185, []any{v189, v193})
v195 := lang.Apply(v182, []any{v194})
v196 := lang.Apply(v176, []any{v179, v195})
v197 := lang.Apply(v173, []any{v196})
v198 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v199 := v198.FindInternedVar(lang.NewSymbol("list"))
if v199.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v199)))
}
v200 := v199.Get()
v201 := lang.Apply(v200, []any{v6})
v202 := lang.Apply(v166, []any{v170, v197, v201})
v203 := lang.Apply(v163, []any{v202})
v204 := lang.Apply(v160, []any{v203})
v205 := lang.Apply(v129, []any{v133, v153, v157, v204})
v206 := lang.Apply(v126, []any{v205})
v207 := lang.Apply(v123, []any{v206})
v208 := lang.Apply(v89, []any{v93, v120, v207})
v209 := lang.Apply(v86, []any{v208})
return v209
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ifn?
{
v0 := lang.NewSymbol("ifn?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x implements IFn. Note that many data structures\n  (e.g. sets and maps) implement IFn", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6209), lang.NewKeyword("end-line"), int(6209))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{glojure.lang4.IFn, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// import
{
v0 := lang.NewSymbol("import").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("import-symbols-or-lists"))), lang.NewKeyword("doc"), "import-list => (package-symbol class-name-symbols*)\n\n  For each name in class-name-symbols, adds a mapping from name to the\n  class named by package.name to the current namespace. Use :import in the ns\n  macro in preference to calling this directly.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(3426), lang.NewKeyword("end-line"), int(3426))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("map"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
var v10 lang.FnFunc
v10 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v11 := args[0]
var v12 any
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("seq?"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v11})
var v13 any = v17
_ = v13
var v19 any
if lang.IsTruthy(v13) {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("="))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("first"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v11})
v27 := lang.Apply(v22, []any{lang.NewSymbol("quote"), v26})
v19 = v27
} else {
v19 = v13
}
if lang.IsTruthy(v19) {
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("second"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v11})
v12 = v16
} else {
v12 = v11
}
return v12
})
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3434), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(3434), lang.NewKeyword("end-column"), int(73))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v13 := lang.Apply(v9, []any{v12, v5})
var v6 any = v13
_ = v6
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("seq"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("concat"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{lang.NewSymbol("do")})
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("map"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
var v28 lang.FnFunc
v28 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v29 := args[0]
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("list"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Import"), v29})
return v33
})
v29 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3436), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(3436), lang.NewKeyword("end-column"), int(73))
v30, err := lang.WithMeta(v28, v29.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("reduce1"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
var v34 lang.FnFunc
v34 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v35 := args[0]
v36 := args[1]
var v37 any
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("symbol?"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v36})
if lang.IsTruthy(v41) {
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("conj"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("name"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v36})
v49 := lang.Apply(v44, []any{v35, v48})
v37 = v49
} else {
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("first"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.Apply(v53, []any{v36})
var v50 any = v54
_ = v50
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("rest"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{v36})
var v55 any = v59
_ = v55
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("into1"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v65 := v64.FindInternedVar(lang.NewSymbol("map"))
if v65.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v65)))
}
v66 := v65.Get()
var v67 lang.FnFunc
v67 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v68 := args[0]
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("str"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{v50, ".", v68})
return v72
})
v68 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3441), lang.NewKeyword("column"), int(45), lang.NewKeyword("end-line"), int(3441), lang.NewKeyword("end-column"), int(58))
v69, err := lang.WithMeta(v67, v68.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v70 := lang.Apply(v66, []any{v69, v55})
v71 := lang.Apply(v63, []any{v35, v70})
v37 = v71
}
return v37
})
v35 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3437), lang.NewKeyword("column"), int(26), lang.NewKeyword("end-line"), int(3441), lang.NewKeyword("end-column"), int(66))
v36, err := lang.WithMeta(v34, v35.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v37 := lang.NewVector()
v38 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3442), lang.NewKeyword("column"), int(25), lang.NewKeyword("end-line"), int(3442), lang.NewKeyword("end-column"), int(26))
v39, err := lang.WithMeta(v37, v38.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v40 := lang.Apply(v33, []any{v36, v39, v6})
v41 := lang.Apply(v27, []any{v30, v40})
v42 := lang.Apply(v20, []any{v24, v41})
v43 := lang.Apply(v17, []any{v42})
return v43
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// in-ns
{
v0 := lang.NewSymbol("in-ns").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// inc
{
var v1 lang.FnFunc
{ // function inc__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
var v30 any
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
if lang.IsTruthy(v33) {
v30 = lang.NewSymbol("unchecked_inc")
} else {
v30 = lang.NewSymbol("inc")
}
v34 := lang.Apply(v29, []any{v30})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v3})
v39 := lang.Apply(v26, []any{v34, v38})
v40 := lang.Apply(v23, []any{v39})
v41 := lang.Apply(v20, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("inc").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns a number one greater than num. Does not auto-promote\n  longs, will throw on overflow. See also: inc'", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(915), lang.NewKeyword("end-line"), int(915))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "inc")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("inc is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// inc'
{
var v1 lang.FnFunc
{ // function inc'__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/incP")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("inc'").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns a number one greater than num. Supports arbitrary precision.\n  See also: inc", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(908), lang.NewKeyword("end-line"), int(908))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "incP")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("incP is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// indexed?
{
v0 := lang.NewSymbol("indexed?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Return true if coll implements Indexed, indicating efficient lookup by index", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6263), lang.NewKeyword("end-line"), int(6263))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{glojure.lang4.Indexed, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// infinite?
{
var v1 lang.FnFunc
{ // function infinite?__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol("Double/isInfinite")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3})
v18 := lang.Apply(v9, []any{v13, v17})
v19 := lang.Apply(v6, []any{v18})
return v19
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("infinite?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("num"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns true if num is negative or positive infinity, else false", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)), lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7977), lang.NewKeyword("end-line"), int(7977))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(nil, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// inst-ms
{
v0 := lang.NewSymbol("inst-ms").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("inst"))), lang.NewKeyword("doc"), "Return the number of milliseconds since January 1, 1970, 00:00:00 GMT", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6831), lang.NewKeyword("end-line"), int(6831))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(nil, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// inst?
{
v0 := lang.NewSymbol("inst?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x satisfies Inst", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6837), lang.NewKeyword("end-line"), int(6837))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
return nil
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// instance?
{
v0 := lang.NewSymbol("instance?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("c"), lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Evaluates x and tests if it is an instance of the type\n    t. Returns true or false", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(139), lang.NewKeyword("end-line"), int(143))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function instance?
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(lang.HasType, []any{v4, v5})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(143), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(143), lang.NewKeyword("end-column"), int(85))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// int
{
var v1 lang.FnFunc
{ // function int__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
var v30 any
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
if lang.IsTruthy(v33) {
v30 = lang.NewSymbol("uncheckedIntCast")
} else {
v30 = lang.NewSymbol("intCast")
}
v34 := lang.Apply(v29, []any{v30})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v3})
v39 := lang.Apply(v26, []any{v34, v38})
v40 := lang.Apply(v23, []any{v39})
v41 := lang.Apply(v20, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to int", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(875), lang.NewKeyword("end-line"), int(875))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(runtime5.RT, "IntCast")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("IntCast is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// int-array
{
var v1 lang.FnFunc
{ // function int-array__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/intArray")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("glojure.core/unquote-splicing")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{lang.NewSymbol("glojure.core/args")})
v39 := lang.Apply(v30, []any{v34, v38})
v40 := lang.Apply(v27, []any{v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v21, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
  }
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("int-array").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("size-or-seq")), lang.NewVector(lang.NewSymbol("size"), lang.NewSymbol("init-val-or-seq"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Creates an array of ints", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5356), lang.NewKeyword("end-line"), int(5356))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "intArray")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("intArray is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "intArrayInit")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("intArrayInit is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// int?
{
v0 := lang.NewSymbol("int?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a fixed precision integer", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1395), lang.NewKeyword("end-line"), int(1395))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.Builtins["int64"], v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
v10 = v4
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("instance?"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{nil, v3})
var v11 any = v15
_ = v11
var v17 any
if lang.IsTruthy(v11) {
v17 = v11
} else {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("instance?"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{nil, v3})
var v18 any = v22
_ = v18
var v24 any
if lang.IsTruthy(v18) {
v24 = v18
} else {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("instance?"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{nil, v3})
v24 = v28
}
v17 = v24
}
v10 = v17
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// integer?
{
v0 := lang.NewSymbol("integer?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Returns true if n is an integer", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1379), lang.NewKeyword("end-line"), int(1379))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(lang.IsInteger, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// interleave
{
v0 := lang.NewSymbol("interleave").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("c1")), lang.NewVector(lang.NewSymbol("c1"), lang.NewSymbol("c2")), lang.NewVector(lang.NewSymbol("c1"), lang.NewSymbol("c2"), lang.NewSymbol("&"), lang.NewSymbol("colls"))), lang.NewKeyword("doc"), "Returns a lazy seq of the first item in each coll, then the second etc.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4308), lang.NewKeyword("end-line"), int(4308))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return lang.NewList()
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
return v3
})
v5 := lang.Apply(lang.NewLazySeq, []any{v4})
return v5
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
var v6 any = v10
_ = v6
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("seq"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v4})
var v11 any = v15
_ = v11
var v17 any
var v18 any = v6
_ = v18
var v20 any
if lang.IsTruthy(v18) {
v20 = v11
} else {
v20 = v18
}
if lang.IsTruthy(v20) {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("cons"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v6})
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("cons"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("first"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v11})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("interleave"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("rest"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v6})
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("rest"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v11})
v43 := lang.Apply(v34, []any{v38, v42})
v44 := lang.Apply(v27, []any{v31, v43})
v45 := lang.Apply(v20, []any{v24, v44})
v17 = v45
} else {
v17 = nil
}
return v17
})
v6 := lang.Apply(lang.NewLazySeq, []any{v5})
return v6
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("map"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("seq"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("conj"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v4, v3})
v18 := lang.Apply(v10, []any{v13, v17})
var v7 any = v18
_ = v7
var v20 any
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("every?"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("identity"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v23, []any{v26, v7})
if lang.IsTruthy(v27) {
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("map"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("first"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v33, []any{v36, v7})
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("apply"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("interleave"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("map"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("rest"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v46, []any{v49, v7})
v51 := lang.Apply(v40, []any{v43, v50})
v52 := lang.Apply(v30, []any{v37, v51})
v20 = v52
} else {
v20 = nil
}
return v20
})
v7 := lang.Apply(lang.NewLazySeq, []any{v6})
return v7
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// intern
{
v0 := lang.NewSymbol("intern").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns"), lang.NewSymbol("name")), lang.NewVector(lang.NewSymbol("ns"), lang.NewSymbol("name"), lang.NewSymbol("val"))), lang.NewKeyword("doc"), "Finds or creates a var named by the symbol name in the namespace\n  ns (which can be a symbol or a namespace), setting its root binding\n  to val if supplied. The namespace must exist. The var will adopt any\n  metadata from the name symbol.  Returns the var.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6311), lang.NewKeyword("end-line"), int(6311))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("the-ns"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3})
v10 := lang.Apply(nil, []any{v9, v4})
var v5 any = v10
_ = v5
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("meta"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v4})
if lang.IsTruthy(v16) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("meta"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v4})
v21, _ := lang.FieldOrMethod(v5, "setMeta")
if reflect.TypeOf(v21).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setMeta is not a function")))
}
v22 := lang.Apply(v21, []any{v20})
v12 = v22
} else {
v12 = nil
}
_ = v12
return v5
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("the-ns"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
v11 := lang.Apply(nil, []any{v10, v4, v5})
var v6 any = v11
_ = v6
var v13 any
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("meta"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v4})
if lang.IsTruthy(v17) {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("meta"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v4})
v22, _ := lang.FieldOrMethod(v6, "setMeta")
if reflect.TypeOf(v22).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setMeta is not a function")))
}
v23 := lang.Apply(v22, []any{v21})
v13 = v23
} else {
v13 = nil
}
_ = v13
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// interpose
{
v0 := lang.NewSymbol("interpose").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("sep")), lang.NewVector(lang.NewSymbol("sep"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5230), lang.NewKeyword("end-line"), int(5230))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("volatile!"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{false})
var v6 any = v10
_ = v6
var v12 lang.FnFunc
v12 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v13 := lang.Apply(v5, nil)
return v13
  case 1:
v13 := args[0]
v14 := lang.Apply(v5, []any{v13})
return v14
  case 2:
v13 := args[0]
v14 := args[1]
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("deref"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v6})
if lang.IsTruthy(v19) {
v21 := lang.Apply(v5, []any{v13, v3})
var v20 any = v21
_ = v20
var v23 any
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("reduced?"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v20})
if lang.IsTruthy(v27) {
v23 = v20
} else {
v28 := lang.Apply(v5, []any{v20, v14})
v23 = v28
}
v15 = v23
} else {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("vreset!"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v6, true})
_ = v23
v24 := lang.Apply(v5, []any{v13, v14})
v15 = v24
}
return v15
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5238), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(5249), lang.NewKeyword("end-column"), int(35))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v14
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5236), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(5249), lang.NewKeyword("end-column"), int(37))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("drop"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("interleave"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("repeat"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3})
v15 := lang.Apply(v10, []any{v14, v4})
v16 := lang.Apply(v7, []any{int64(1), v15})
return v16
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// into
{
v0 := lang.NewSymbol("into").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("to")), lang.NewVector(lang.NewSymbol("to"), lang.NewSymbol("from")), lang.NewVector(lang.NewSymbol("to"), lang.NewSymbol("xform"), lang.NewSymbol("from"))), lang.NewKeyword("doc"), "Returns a new coll consisting of to with all of the items of\n  from conjoined. A transducer may be supplied.\n  (into x) returns x. (into) returns [].", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6922), lang.NewKeyword("end-line"), int(6922))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3 := lang.NewVector()
v4 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6928), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(6928), lang.NewKeyword("end-column"), int(8))
v5, err := lang.WithMeta(v3, v4.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v5
  case 1:
v3 := args[0]
return v3
  case 2:
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("instance?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{lang.IEditableCollection, v3})
if lang.IsTruthy(v9) {
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("with-meta"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("persistent!"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("reduce"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("conj!"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("transient"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v18, []any{v21, v25, v4})
v27 := lang.Apply(v15, []any{v26})
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("meta"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v3})
v32 := lang.Apply(v12, []any{v27, v31})
v5 = v32
} else {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("reduce"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("conj"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v35, []any{v38, v3, v4})
v5 = v39
}
return v5
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("instance?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{lang.IEditableCollection, v3})
if lang.IsTruthy(v10) {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("meta"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3})
var v11 any = v15
_ = v11
var v17 lang.FnFunc
v17 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v18 := args[0]
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("with-meta"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("persistent!"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v18})
v26 := lang.Apply(v21, []any{v25, v11})
return v26
  case 2:
v18 := args[0]
v19 := args[1]
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("conj!"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v18, v19})
return v23
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v18 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6937), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(6939), lang.NewKeyword("end-column"), int(44))
v19, err := lang.WithMeta(v17, v18.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v16 any = v19
_ = v16
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("transduce"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("transient"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v3})
v28 := lang.Apply(v23, []any{v4, v16, v27, v5})
v6 = v28
} else {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("transduce"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("conj"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v13, []any{v4, v16, v3, v5})
v6 = v17
}
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// into-array
{
v0 := lang.NewSymbol("into-array").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("aseq")), lang.NewVector(lang.NewSymbol("type"), lang.NewSymbol("aseq"))), lang.NewKeyword("doc"), "Returns an array with components set to the values in aseq. The array's\n  component type is type if provided, or the type of the first value in\n  aseq if present, or Object. All values in aseq must be compatible with\n  the component type. Class objects for the primitive types can be obtained\n  using, e.g., Integer/TYPE.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3444), lang.NewKeyword("end-line"), int(3444))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3})
v8 := lang.Apply(nil, []any{v7})
return v8
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v4})
v9 := lang.Apply(nil, []any{v3, v8})
return v9
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// into1
{
v0 := lang.NewSymbol("into1").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("to"), lang.NewSymbol("from"))), lang.NewKeyword("doc"), "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3416), lang.NewKeyword("end-line"), int(3416), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("instance?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{lang.IEditableCollection, v3})
if lang.IsTruthy(v9) {
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("persistent!"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("reduce1"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("conj!"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("transient"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v3})
v23 := lang.Apply(v15, []any{v18, v22, v4})
v24 := lang.Apply(v12, []any{v23})
v5 = v24
} else {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("reduce1"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("conj"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v27, []any{v30, v3, v4})
v5 = v31
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ints
{
var v1 lang.FnFunc
{ // function ints
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/ints")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v9, []any{v13, v17, v21, v25})
v27 := lang.Apply(v6, []any{v26})
return v27
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("ints").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("xs"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Casts to int[]", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(12), lang.NewKeyword("line"), int(5397), lang.NewKeyword("end-line"), int(5397))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "ints")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("ints is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// io!
{
v0 := lang.NewSymbol("io!").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "If an io! block occurs in a transaction, throws an\n  IllegalStateException, else runs body in an implicit do. If the\n  first expression in body is a literal string, will use that as the\n  exception message.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(2504), lang.NewKeyword("end-line"), int(2504))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("string?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("first"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v5})
v15 := lang.Apply(v10, []any{v14})
if lang.IsTruthy(v15) {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("first"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v5})
v7 = v19
} else {
v7 = nil
}
var v6 any = v7
_ = v6
var v21 any
if lang.IsTruthy(v6) {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("next"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v20})
v21 = v25
} else {
v21 = v20
}
var v20 any = v21
_ = v20
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{lang.NewSymbol("if")})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("seq"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("concat"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("list"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{lang.NewSymbol("glojure.lang.LockingTransaction/isRunning")})
v50 := lang.Apply(v45, []any{v49})
v51 := lang.Apply(v42, []any{v50})
v52 := lang.Apply(v39, []any{v51})
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("list"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("seq"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("concat"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("list"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{lang.NewSymbol("throw")})
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("list"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("seq"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("concat"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v76 := v75.FindInternedVar(lang.NewSymbol("list"))
if v76.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v76)))
}
v77 := v76.Get()
v78 := lang.Apply(v77, []any{lang.NewSymbol("new")})
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("list"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.Apply(v81, []any{lang.NewSymbol("glojure.core/IllegalStateException")})
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("list"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
var v86 any = v6
_ = v86
var v88 any
if lang.IsTruthy(v86) {
v88 = v86
} else {
v88 = "I/O in transaction"
}
v86 := lang.Apply(v85, []any{v88})
v87 := lang.Apply(v74, []any{v78, v82, v86})
v88 := lang.Apply(v71, []any{v87})
v89 := lang.Apply(v68, []any{v88})
v90 := lang.Apply(v61, []any{v65, v89})
v91 := lang.Apply(v58, []any{v90})
v92 := lang.Apply(v55, []any{v91})
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("list"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("seq"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("concat"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("list"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.Apply(v104, []any{lang.NewSymbol("do")})
v106 := lang.Apply(v101, []any{v105, v20})
v107 := lang.Apply(v98, []any{v106})
v108 := lang.Apply(v95, []any{v107})
v109 := lang.Apply(v32, []any{v36, v52, v92, v108})
v110 := lang.Apply(v29, []any{v109})
return v110
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// isa?
{
v0 := lang.NewSymbol("isa?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("child"), lang.NewSymbol("parent")), lang.NewVector(lang.NewSymbol("h"), lang.NewSymbol("child"), lang.NewSymbol("parent"))), lang.NewKeyword("doc"), "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a Java type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5543), lang.NewKeyword("end-line"), int(5543))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("isa?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("global-hierarchy"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v7, []any{v10, v3, v4})
return v11
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("="))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4, v5})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
v12 = v6
} else {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("class?"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v5})
var v14 any = v18
_ = v14
var v20 any
if lang.IsTruthy(v14) {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("class?"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v4})
var v21 any = v25
_ = v21
var v27 any
if lang.IsTruthy(v21) {
v28, _ := lang.FieldOrMethod(v4, "AssignableTo")
if reflect.TypeOf(v28).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("AssignableTo is not a function")))
}
v29 := lang.Apply(v28, []any{v5})
v27 = v29
} else {
v27 = v21
}
v20 = v27
} else {
v20 = v14
}
var v13 any = v20
_ = v13
var v15 any
if lang.IsTruthy(v13) {
v15 = v13
} else {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("contains?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(lang.NewKeyword("ancestors"), []any{v3})
v21 := lang.Apply(v20, []any{v4})
v22 := lang.Apply(v19, []any{v21, v5})
var v16 any = v22
_ = v16
var v24 any
if lang.IsTruthy(v16) {
v24 = v16
} else {
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("class?"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v4})
var v26 any = v30
_ = v26
var v32 any
if lang.IsTruthy(v26) {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("some"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
var v36 lang.FnFunc
v36 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v37 := args[0]
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("contains?"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(lang.NewKeyword("ancestors"), []any{v3})
v42 := lang.Apply(v41, []any{v37})
v43 := lang.Apply(v40, []any{v42, v5})
return v43
})
v37 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5556), lang.NewKeyword("column"), int(34), lang.NewKeyword("end-line"), int(5556), lang.NewKeyword("end-column"), int(71))
v38, err := lang.WithMeta(v36, v37.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("supers"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v4})
v43 := lang.Apply(v35, []any{v38, v42})
v32 = v43
} else {
v32 = v26
}
var v25 any = v32
_ = v25
var v27 any
if lang.IsTruthy(v25) {
v27 = v25
} else {
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("vector?"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v5})
var v28 any = v32
_ = v28
var v34 any
if lang.IsTruthy(v28) {
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("vector?"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
var v35 any = v39
_ = v35
var v41 any
if lang.IsTruthy(v35) {
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("="))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("count"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v5})
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("count"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v4})
v54 := lang.Apply(v45, []any{v49, v53})
var v42 any = v54
_ = v42
var v56 any
if lang.IsTruthy(v42) {
var v57 any = true
_ = v57
var v58 any = int64(0)
_ = v58
var v59 any
for {
var v60 any
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("not"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{v57})
var v61 any = v65
_ = v61
var v67 any
if lang.IsTruthy(v61) {
v67 = v61
} else {
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("="))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("count"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{v5})
v75 := lang.Apply(v70, []any{v58, v74})
v67 = v75
}
if lang.IsTruthy(v67) {
v60 = v57
} else {
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("isa?"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v4, []any{v58})
v66 := lang.Apply(v5, []any{v58})
v67 := lang.Apply(v64, []any{v3, v65, v66})
var v61 any = v67
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("inc"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{v58})
var v68 any = v72
v57 = v61
v58 = v68
continue
}
v59 = v60
  break
}
v56 = v59
} else {
v56 = v42
}
v41 = v56
} else {
v41 = v35
}
v34 = v41
} else {
v34 = v28
}
v27 = v34
}
v24 = v27
}
v15 = v24
}
v12 = v15
}
return v12
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// iterate
{
v0 := lang.NewSymbol("iterate").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns a lazy (infinite!) sequence of x, (f x), (f (f x)) etc.\n  f must be free of side-effects", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3011), lang.NewKeyword("end-line"), int(3011))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.Apply(nil, []any{v3, v4})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// iteration
{
v0 := lang.NewSymbol("iteration").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("step"), lang.NewSymbol("&"), lang.NewMap(lang.NewKeyword("keys"), lang.NewVector(lang.NewSymbol("somef"), lang.NewSymbol("vf"), lang.NewSymbol("kf"), lang.NewSymbol("initk")), lang.NewKeyword("or"), lang.NewMap(lang.NewSymbol("vf"), lang.NewSymbol("identity"), lang.NewSymbol("kf"), lang.NewSymbol("identity"), lang.NewSymbol("somef"), lang.NewSymbol("some?"), lang.NewSymbol("initk"), nil)))), lang.NewKeyword("doc"), "Creates a seqable/reducible via repeated calls to step,\n  a function of some (continuation token) 'k'. The first call to step\n  will be passed initk, returning 'ret'. Iff (somef ret) is true,\n  (vf ret) will be included in the iteration, else iteration will\n  terminate and vf/kf will not be called. If (kf ret) is non-nil it\n  will be passed to the next step call, else iteration will terminate.\n\n  This can be used e.g. to consume APIs that return paginated or batched data.\n\n   step - (possibly impure) fn of 'k' -> 'ret'\n\n   :somef - fn of 'ret' -> logical true/false, default 'some?'\n   :vf - fn of 'ret' -> 'v', a value produced by the iteration, default 'identity'\n   :kf - fn of 'ret' -> 'next-k' or nil (signaling 'do not continue'), default 'identity'\n   :initk - the first value passed to step, default 'nil'\n\n  It is presumed that step with non-initk is unreproducible/non-idempotent.\n  If step with initk is unreproducible it is on the consumer to not consume twice.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7716), lang.NewKeyword("end-line"), int(7716))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
var v5 any = v4
_ = v5
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v6})
if lang.IsTruthy(v11) {
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("next"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v6})
if lang.IsTruthy(v16) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("to-array"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v6})
v21 := lang.Apply(lang.NewPersistentArrayMapAsIfByAssoc, []any{v20})
v12 = v21
} else {
var v22 any
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("seq"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v6})
if lang.IsTruthy(v26) {
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("first"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v6})
v22 = v30
} else {
v22 = nil
}
v12 = v22
}
v7 = v12
} else {
v7 = v6
}
var v6 any = v7
_ = v6
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("get"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("some?"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v34, []any{v6, lang.NewKeyword("somef"), v37})
var v31 any = v38
_ = v31
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("get"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("identity"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v42, []any{v6, lang.NewKeyword("vf"), v45})
var v39 any = v46
_ = v39
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("get"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("identity"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.Apply(v50, []any{v6, lang.NewKeyword("kf"), v53})
var v47 any = v54
_ = v47
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("get"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{v6, lang.NewKeyword("initk"), nil})
var v55 any = v59
_ = v55
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("seq"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.NewVector(nil)
v65 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7743), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(7743), lang.NewKeyword("end-column"), int(11))
v66, err := lang.WithMeta(v64, v65.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v67 lang.FnFunc
{ // function next
v67 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v69 := args[0]
var v70 any
v71 := lang.Apply(v31, []any{v69})
if lang.IsTruthy(v71) {
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("cons"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v39, []any{v69})
v77 := lang.Apply(v47, []any{v69})
var v76 any = v77
_ = v76
var v79 any
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("nil?"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.Apply(v82, []any{v76})
if lang.IsTruthy(v83) {
v79 = nil
} else {
var v84 any = v76
_ = v84
var v86 lang.FnFunc
v86 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v87 := lang.Apply(v3, []any{v84})
v88 := lang.Apply(v68, []any{v87})
return v88
})
v87 := lang.Apply(lang.NewLazySeq, []any{v86})
v79 = v87
}
v76 := lang.Apply(v74, []any{v75, v79})
v70 = v76
} else {
v70 = nil
}
return v70
})
v68 := v67
_ = v68
}
v68 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7744), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(7748), lang.NewKeyword("end-column"), int(51))
v69, err := lang.WithMeta(v67, v68.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v70 := lang.Apply(v3, []any{v55})
v71 := lang.Apply(v69, []any{v70})
v72 := lang.Apply(v63, []any{v66, v71})
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("reduce"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.NewVector(nil, nil, nil)
v77 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7751), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(7751), lang.NewKeyword("end-column"), int(22))
v78, err := lang.WithMeta(v76, v77.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v79 any = nil
_ = v79
v81 := lang.Apply(v3, []any{v55})
var v80 any = v81
_ = v80
var v82 any
for {
var v83 any
v84 := lang.Apply(v31, []any{v80})
if lang.IsTruthy(v84) {
v86 := lang.Apply(v39, []any{v80})
v87 := lang.Apply(nil, []any{v85, v86})
var v85 any = v87
_ = v85
var v89 any
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("reduced?"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.Apply(v92, []any{v85})
if lang.IsTruthy(v93) {
v94 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v95 := v94.FindInternedVar(lang.NewSymbol("deref"))
if v95.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v95)))
}
v96 := v95.Get()
v97 := lang.Apply(v96, []any{v85})
v89 = v97
} else {
v99 := lang.Apply(v47, []any{v80})
var v98 any = v99
_ = v98
var v101 any
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("nil?"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.Apply(v104, []any{v98})
if lang.IsTruthy(v105) {
v101 = v85
} else {
var v106 any = v98
_ = v106
var v108 any = v85
v110 := lang.Apply(v3, []any{v106})
var v109 any = v110
v79 = v108
v80 = v109
continue
}
v89 = v101
}
v83 = v89
} else {
v83 = v79
}
v82 = v83
  break
}
v79 := lang.Apply(v75, []any{v78, v82})
v80 := lang.Apply(nil, []any{glojure.lang4.Seqable, v72, lang.IReduceInit, v79})
return v80
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// iterator-seq
{
v0 := lang.NewSymbol("iterator-seq").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("iter"))), lang.NewKeyword("doc"), "Returns a seq on a java.util.Iterator. Note that most collections\n  providing iterators implement Iterable and thus support seq directly.\n  Seqs cache values, thus iterator-seq should not be used on any\n  iterator that repeatedly returns the same mutable object.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5700), lang.NewKeyword("end-line"), int(5700))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(nil, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// juxt
{
v0 := lang.NewSymbol("juxt").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("g")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("g"), lang.NewSymbol("h")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("g"), lang.NewSymbol("h"), lang.NewSymbol("&"), lang.NewSymbol("fs"))), lang.NewKeyword("doc"), "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2568), lang.NewKeyword("end-line"), int(2568))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v5 := lang.Apply(v3, nil)
v6 := lang.NewVector(v5)
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2578), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(2578), lang.NewKeyword("end-column"), int(16))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
  case 1:
v5 := args[0]
v6 := lang.Apply(v3, []any{v5})
v7 := lang.NewVector(v6)
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2579), lang.NewKeyword("column"), int(13), lang.NewKeyword("end-line"), int(2579), lang.NewKeyword("end-column"), int(19))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v9
  case 2:
v5 := args[0]
v6 := args[1]
v7 := lang.Apply(v3, []any{v5, v6})
v8 := lang.NewVector(v7)
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2580), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(2580), lang.NewKeyword("end-column"), int(23))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v10
  case 3:
v5 := args[0]
v6 := args[1]
v7 := args[2]
v8 := lang.Apply(v3, []any{v5, v6, v7})
v9 := lang.NewVector(v8)
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2581), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(2581), lang.NewKeyword("end-column"), int(27))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v11
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := args[2]
v8 := lang.NewList(args[3:]...)
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("apply"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3, v5, v6, v7, v8})
v13 := lang.NewVector(v12)
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2582), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(2582), lang.NewKeyword("end-column"), int(45))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v15
  }
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2577), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(2582), lang.NewKeyword("end-column"), int(47))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v6 := lang.Apply(v3, nil)
v7 := lang.Apply(v4, nil)
v8 := lang.NewVector(v6, v7)
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2585), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(2585), lang.NewKeyword("end-column"), int(20))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v10
  case 1:
v6 := args[0]
v7 := lang.Apply(v3, []any{v6})
v8 := lang.Apply(v4, []any{v6})
v9 := lang.NewVector(v7, v8)
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2586), lang.NewKeyword("column"), int(13), lang.NewKeyword("end-line"), int(2586), lang.NewKeyword("end-column"), int(25))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v11
  case 2:
v6 := args[0]
v7 := args[1]
v8 := lang.Apply(v3, []any{v6, v7})
v9 := lang.Apply(v4, []any{v6, v7})
v10 := lang.NewVector(v8, v9)
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2587), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(2587), lang.NewKeyword("end-column"), int(31))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v12
  case 3:
v6 := args[0]
v7 := args[1]
v8 := args[2]
v9 := lang.Apply(v3, []any{v6, v7, v8})
v10 := lang.Apply(v4, []any{v6, v7, v8})
v11 := lang.NewVector(v9, v10)
v12 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2588), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(2588), lang.NewKeyword("end-column"), int(37))
v13, err := lang.WithMeta(v11, v12.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v13
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v6 := args[0]
v7 := args[1]
v8 := args[2]
v9 := lang.NewList(args[3:]...)
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("apply"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3, v6, v7, v8, v9})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("apply"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v4, v6, v7, v8, v9})
v18 := lang.NewVector(v13, v17)
v19 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2589), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(2589), lang.NewKeyword("end-column"), int(66))
v20, err := lang.WithMeta(v18, v19.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v20
  }
})
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2584), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(2589), lang.NewKeyword("end-column"), int(68))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v7
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v7 := lang.Apply(v3, nil)
v8 := lang.Apply(v4, nil)
v9 := lang.Apply(v5, nil)
v10 := lang.NewVector(v7, v8, v9)
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2592), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(2592), lang.NewKeyword("end-column"), int(24))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v12
  case 1:
v7 := args[0]
v8 := lang.Apply(v3, []any{v7})
v9 := lang.Apply(v4, []any{v7})
v10 := lang.Apply(v5, []any{v7})
v11 := lang.NewVector(v8, v9, v10)
v12 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2593), lang.NewKeyword("column"), int(13), lang.NewKeyword("end-line"), int(2593), lang.NewKeyword("end-column"), int(31))
v13, err := lang.WithMeta(v11, v12.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v13
  case 2:
v7 := args[0]
v8 := args[1]
v9 := lang.Apply(v3, []any{v7, v8})
v10 := lang.Apply(v4, []any{v7, v8})
v11 := lang.Apply(v5, []any{v7, v8})
v12 := lang.NewVector(v9, v10, v11)
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2594), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(2594), lang.NewKeyword("end-column"), int(39))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v14
  case 3:
v7 := args[0]
v8 := args[1]
v9 := args[2]
v10 := lang.Apply(v3, []any{v7, v8, v9})
v11 := lang.Apply(v4, []any{v7, v8, v9})
v12 := lang.Apply(v5, []any{v7, v8, v9})
v13 := lang.NewVector(v10, v11, v12)
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2595), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(2595), lang.NewKeyword("end-column"), int(47))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v15
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v7 := args[0]
v8 := args[1]
v9 := args[2]
v10 := lang.NewList(args[3:]...)
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("apply"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3, v7, v8, v9, v10})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("apply"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v4, v7, v8, v9, v10})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("apply"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v5, v7, v8, v9, v10})
v23 := lang.NewVector(v14, v18, v22)
v24 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2596), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(2596), lang.NewKeyword("end-column"), int(87))
v25, err := lang.WithMeta(v23, v24.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v25
  }
})
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2591), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(2596), lang.NewKeyword("end-column"), int(89))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("list*"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3, v4, v5, v7})
var v7 any = v11
_ = v7
var v13 lang.FnFunc
v13 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("reduce1"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
var v17 lang.FnFunc
v17 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v18 := args[0]
v19 := args[1]
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("conj"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v19, nil)
v24 := lang.Apply(v22, []any{v18, v23})
return v24
})
v18 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2600), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(2600), lang.NewKeyword("end-column"), int(37))
v19, err := lang.WithMeta(v17, v18.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v20 := lang.NewVector()
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2600), lang.NewKeyword("column"), int(39), lang.NewKeyword("end-line"), int(2600), lang.NewKeyword("end-column"), int(40))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v23 := lang.Apply(v16, []any{v19, v22, v7})
return v23
  case 1:
v14 := args[0]
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("reduce1"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
var v18 lang.FnFunc
v18 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v19 := args[0]
v20 := args[1]
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("conj"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v20, []any{v14})
v25 := lang.Apply(v23, []any{v19, v24})
return v25
})
v19 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2601), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(2601), lang.NewKeyword("end-column"), int(40))
v20, err := lang.WithMeta(v18, v19.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v21 := lang.NewVector()
v22 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2601), lang.NewKeyword("column"), int(42), lang.NewKeyword("end-line"), int(2601), lang.NewKeyword("end-column"), int(43))
v23, err := lang.WithMeta(v21, v22.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v24 := lang.Apply(v17, []any{v20, v23, v7})
return v24
  case 2:
v14 := args[0]
v15 := args[1]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("reduce1"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
var v19 lang.FnFunc
v19 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v20 := args[0]
v21 := args[1]
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("conj"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v21, []any{v14, v15})
v26 := lang.Apply(v24, []any{v20, v25})
return v26
})
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2602), lang.NewKeyword("column"), int(26), lang.NewKeyword("end-line"), int(2602), lang.NewKeyword("end-column"), int(44))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v22 := lang.NewVector()
v23 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2602), lang.NewKeyword("column"), int(46), lang.NewKeyword("end-line"), int(2602), lang.NewKeyword("end-column"), int(47))
v24, err := lang.WithMeta(v22, v23.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v25 := lang.Apply(v18, []any{v21, v24, v7})
return v25
  case 3:
v14 := args[0]
v15 := args[1]
v16 := args[2]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("reduce1"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
var v20 lang.FnFunc
v20 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v21 := args[0]
v22 := args[1]
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("conj"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v22, []any{v14, v15, v16})
v27 := lang.Apply(v25, []any{v21, v26})
return v27
})
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2603), lang.NewKeyword("column"), int(28), lang.NewKeyword("end-line"), int(2603), lang.NewKeyword("end-column"), int(48))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v23 := lang.NewVector()
v24 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2603), lang.NewKeyword("column"), int(50), lang.NewKeyword("end-line"), int(2603), lang.NewKeyword("end-column"), int(51))
v25, err := lang.WithMeta(v23, v24.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v26 := lang.Apply(v19, []any{v22, v25, v7})
return v26
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v14 := args[0]
v15 := args[1]
v16 := args[2]
v17 := lang.NewList(args[3:]...)
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("reduce1"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
var v21 lang.FnFunc
v21 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v22 := args[0]
v23 := args[1]
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("conj"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("apply"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v23, v14, v15, v16, v17})
v31 := lang.Apply(v26, []any{v22, v30})
return v31
})
v22 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2604), lang.NewKeyword("column"), int(35), lang.NewKeyword("end-line"), int(2604), lang.NewKeyword("end-column"), int(66))
v23, err := lang.WithMeta(v21, v22.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v24 := lang.NewVector()
v25 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2604), lang.NewKeyword("column"), int(68), lang.NewKeyword("end-line"), int(2604), lang.NewKeyword("end-column"), int(69))
v26, err := lang.WithMeta(v24, v25.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v27 := lang.Apply(v20, []any{v23, v26, v7})
return v27
  }
})
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2599), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(2604), lang.NewKeyword("end-column"), int(75))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v15
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// keep
{
v0 := lang.NewSymbol("keep").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7339), lang.NewKeyword("end-line"), int(7339))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v7 := lang.Apply(v5, nil)
return v7
  case 1:
v7 := args[0]
v8 := lang.Apply(v5, []any{v7})
return v8
  case 2:
v7 := args[0]
v8 := args[1]
v10 := lang.Apply(v3, []any{v8})
var v9 any = v10
_ = v9
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("nil?"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v9})
if lang.IsTruthy(v16) {
v12 = v7
} else {
v17 := lang.Apply(v5, []any{v7, v9})
v12 = v17
}
return v12
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7347), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(7354), lang.NewKeyword("end-column"), int(31))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7346), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(7354), lang.NewKeyword("end-column"), int(32))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
var v13 any = v6
_ = v13
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v13})
if lang.IsTruthy(v19) {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("chunk-first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v13})
var v20 any = v24
_ = v20
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("count"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v20})
var v25 any = v29
_ = v25
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("chunk-buffer"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v25})
var v30 any = v34
_ = v30
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("long"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v25})
var v36 any = v40
_ = v36
var v42 any = int64(0)
_ = v42
var v43 any
for {
var v44 any
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("<"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v42, v36})
if lang.IsTruthy(v48) {
v50, _ := lang.FieldOrMethod(v20, "nth")
if reflect.TypeOf(v50).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v51 := lang.Apply(v50, []any{v42})
v52 := lang.Apply(v3, []any{v51})
var v49 any = v52
_ = v49
var v54 any
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("nil?"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{v49})
if lang.IsTruthy(v58) {
v54 = nil
} else {
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("chunk-append"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v61, []any{v30, v49})
v54 = v62
}
_ = v54
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v42})
var v49 any = v53
v42 = v49
continue
} else {
v44 = nil
}
v43 = v44
  break
}
_ = v43
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("chunk-cons"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("chunk"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v30})
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("keep"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v13})
v50 := lang.Apply(v45, []any{v3, v49})
v51 := lang.Apply(v38, []any{v42, v50})
v15 = v51
} else {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v13})
v25 := lang.Apply(v3, []any{v24})
var v20 any = v25
_ = v20
var v27 any
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("nil?"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v20})
if lang.IsTruthy(v31) {
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("keep"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("rest"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v13})
v39 := lang.Apply(v34, []any{v3, v38})
v27 = v39
} else {
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("cons"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("keep"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("rest"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v13})
v50 := lang.Apply(v45, []any{v3, v49})
v51 := lang.Apply(v42, []any{v20, v50})
v27 = v51
}
v15 = v27
}
v12 = v15
} else {
v12 = nil
}
return v12
})
v6 := lang.Apply(lang.NewLazySeq, []any{v5})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// keep-indexed
{
v0 := lang.NewSymbol("keep-indexed").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7372), lang.NewKeyword("end-line"), int(7372))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("volatile!"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{int64(-1)})
var v6 any = v10
_ = v6
var v12 lang.FnFunc
v12 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v13 := lang.Apply(v5, nil)
return v13
  case 1:
v13 := args[0]
v14 := lang.Apply(v5, []any{v13})
return v14
  case 2:
v13 := args[0]
v14 := args[1]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("inc"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19, ok := lang.FieldOrMethod(v6, "Deref")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "Deref")))
}
var v20 any
switch reflect.TypeOf(v19).Kind() {
case reflect.Func:
  v20 = lang.Apply(v19, nil)
default:
  v20 = v19
}
v21 := lang.Apply(v18, []any{v20})
v22, _ := lang.FieldOrMethod(v6, "reset")
if reflect.TypeOf(v22).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("reset is not a function")))
}
v23 := lang.Apply(v22, []any{v21})
var v15 any = v23
_ = v15
v25 := lang.Apply(v3, []any{v15, v14})
var v24 any = v25
_ = v24
var v27 any
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("nil?"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v24})
if lang.IsTruthy(v31) {
v27 = v13
} else {
v32 := lang.Apply(v5, []any{v13, v24})
v27 = v32
}
return v27
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7382), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(7390), lang.NewKeyword("end-column"), int(33))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v14
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7380), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(7390), lang.NewKeyword("end-column"), int(35))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
return nil
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// key
{
v0 := lang.NewSymbol("key").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("e"))), lang.NewKeyword("doc"), "Returns the key of the map entry.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1563), lang.NewKeyword("end-line"), int(1563))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(v3, "GetKey")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("GetKey is not a function")))
}
v5 := lang.Apply(v4, []any{})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// keys
{
v0 := lang.NewSymbol("keys").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("map"))), lang.NewKeyword("doc"), "Returns a sequence of the map's keys, in the same order as (seq map).", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1551), lang.NewKeyword("end-line"), int(1551))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(lang.Keys, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// keyword
{
v1 := reflect.TypeOf((*lang.Keyword)(nil)).Elem()
v0 := lang.NewSymbol("keyword").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name")), lang.NewVector(lang.NewSymbol("ns"), lang.NewSymbol("name"))), lang.NewKeyword("doc"), "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(609), lang.NewKeyword("end-line"), int(609))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("keyword?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
v5 = v4
} else {
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("symbol?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v4})
if lang.IsTruthy(v14) {
v15 := lang.Apply(lang.InternKeywordSymbol, []any{v4})
v10 = v15
} else {
var v16 any
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("string?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v4})
if lang.IsTruthy(v20) {
v21 := lang.Apply(lang.InternKeywordString, []any{v4})
v16 = v21
} else {
v16 = nil
}
v10 = v16
}
v5 = v10
}
return v5
  case 2:
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(lang.InternKeyword, []any{v4, v5})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v4 := reflect.TypeOf((*lang.Keyword)(nil)).Elem()
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// keyword?
{
v0 := lang.NewSymbol("keyword?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a Keyword", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(563), lang.NewKeyword("end-line"), int(563))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.Keyword, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// last
{
v0 := lang.NewSymbol("last").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Return the last item in coll, in linear time", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(5), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(262), lang.NewKeyword("end-line"), int(266))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function last
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
recur_loop_32:
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("next"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("next"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v4})
var v10 any = v14
v4 = v10
goto recur_loop_32
} else {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v4})
v5 = v18
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(266), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(269), lang.NewKeyword("end-column"), int(21))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// lazy-cat
{
v0 := lang.NewSymbol("lazy-cat").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("colls"))), lang.NewKeyword("doc"), "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed. \n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4636), lang.NewKeyword("end-line"), int(4636))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol("glojure.core/concat")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("map"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
var v19 lang.FnFunc
v19 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v20 := args[0]
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{lang.NewSymbol("glojure.core/lazy-seq"), v20})
return v24
})
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4644), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(4644), lang.NewKeyword("end-column"), int(37))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v22 := lang.Apply(v18, []any{v21, v5})
v23 := lang.Apply(v11, []any{v15, v22})
v24 := lang.Apply(v8, []any{v23})
return v24
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// lazy-seq
{
v0 := lang.NewSymbol("lazy-seq").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Takes a body of expressions that returns an ISeq or nil, and yields\n  a Seqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls. See also - realized?", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(676), lang.NewKeyword("end-line"), int(676))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("list"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("list*"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.NewVector()
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(683), lang.NewKeyword("column"), int(101), lang.NewKeyword("end-line"), int(683), lang.NewKeyword("end-column"), int(102))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v15 := lang.Apply(v11, []any{lang.NewSymbol("fn*"), v14, v5})
v16 := lang.Apply(v8, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.NewLazySeq"), v15})
return v16
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// let
{
v0 := lang.NewSymbol("let").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "binding => binding-form init-expr\n  binding-form => name, or destructuring-form\n  destructuring-form => map-destructure-form, or seq-destructure-form\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.\n\n  See https://glojure.org/reference/special_forms#binding-forms for\n  more information about destructuring.", lang.NewKeyword("forms"), lang.NewVector(lang.NewList(lang.NewSymbol("let"), lang.NewVector(lang.NewSymbol("bindings*")), lang.NewSymbol("exprs*"))), lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4496), lang.NewKeyword("end-line"), int(4496), lang.NewKeyword("special-form"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("vector?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
if lang.IsTruthy(v11) {
v7 = nil
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("str"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("*ns*"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(lang.NewKeyword("line"), []any{v25})
v27 := lang.Apply(v14, []any{v18, " requires ", "a vector for its binding", " in ", v21, ":", v26})
v28 := lang.Apply(lang.NewIllegalArgumentError, []any{v27})
panic(v28)
}
_ = v7
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("even?"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v37 := lang.Apply(v32, []any{v36})
if lang.IsTruthy(v37) {
v29 = nil
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("first"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("*ns*"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("meta"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(lang.NewKeyword("line"), []any{v51})
v53 := lang.Apply(v40, []any{v44, " requires ", "an even number of forms in binding vector", " in ", v47, ":", v52})
v54 := lang.Apply(lang.NewIllegalArgumentError, []any{v53})
panic(v54)
}
_ = v29
_ = nil
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("seq"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("concat"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("list"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{lang.NewSymbol("let*")})
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("list"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("destructure"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{v5})
v72 := lang.Apply(v67, []any{v71})
v73 := lang.Apply(v60, []any{v64, v72, v6})
v74 := lang.Apply(v57, []any{v73})
return v74
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// letfn
{
v0 := lang.NewSymbol("letfn").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("fnspecs"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n  Takes a vector of function specs and a body, and generates a set of\n  bindings of functions to their names. All of the names are available\n  in all of the definitions of the functions, as well as the body.", lang.NewKeyword("forms"), lang.NewVector(lang.NewList(lang.NewSymbol("letfn"), lang.NewVector(lang.NewSymbol("fnspecs*")), lang.NewSymbol("exprs*"))), lang.NewKeyword("url"), nil, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(6545), lang.NewKeyword("end-line"), int(6545), lang.NewKeyword("special-form"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("letfn*")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("vec"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("interleave"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("map"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("first"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v28, []any{v31, v5})
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("map"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
var v36 lang.FnFunc
v36 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v37 := args[0]
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("cons"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{lang.NewSymbol("glojure.core/fn"), v37})
return v41
})
v37 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6555), lang.NewKeyword("column"), int(35), lang.NewKeyword("end-line"), int(6555), lang.NewKeyword("end-column"), int(47))
v38, err := lang.WithMeta(v36, v37.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v39 := lang.Apply(v35, []any{v38, v5})
v40 := lang.Apply(v25, []any{v32, v39})
v41 := lang.Apply(v22, []any{v40})
v42 := lang.Apply(v19, []any{v41})
v43 := lang.Apply(v12, []any{v16, v42, v6})
v44 := lang.Apply(v9, []any{v43})
return v44
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// libspec?
{
v0 := lang.NewSymbol("libspec?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x is a libspec", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(5848), lang.NewKeyword("end-line"), int(5848), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("symbol?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
v10 = v4
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("vector?"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3})
var v11 any = v15
_ = v11
var v17 any
if lang.IsTruthy(v11) {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("nil?"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("second"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v21, []any{v25})
var v18 any = v26
_ = v18
var v28 any
if lang.IsTruthy(v18) {
v28 = v18
} else {
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("keyword?"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("second"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.Apply(v31, []any{v35})
v28 = v36
}
v17 = v28
} else {
v17 = v11
}
v10 = v17
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// lift-ns
{
v0 := lang.NewSymbol("lift-ns").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("m"))), lang.NewKeyword("doc"), "Returns [lifted-ns lifted-kvs] or nil if m can't be lifted.", lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(261), lang.NewKeyword("end-line"), int(261), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*print-namespace-maps*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
var v8 any = nil
_ = v8
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3})
var v9 any = v13
_ = v9
var v14 any = v9
_ = v14
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("seq"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v14})
var v15 any = v19
_ = v15
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v15})
var v20 any = v24
_ = v20
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("next"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v25})
var v25 any = v29
_ = v25
var v30 any = v20
_ = v30
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("nth"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v30, int64(0), nil})
var v31 any = v35
_ = v31
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("nth"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v30, int64(1), nil})
var v36 any = v40
_ = v36
var v41 any = v30
_ = v41
var v42 any = v25
_ = v42
v44 := lang.NewVector()
v45 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(267), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(267), lang.NewKeyword("end-column"), int(17))
v46, err := lang.WithMeta(v44, v45.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v43 any = v46
_ = v43
var v48 any = v48
_ = v48
var v49 any = v49
_ = v49
var v50 any = v50
_ = v50
var v51 any
for {
var v52 any = v52
_ = v52
var v53 any = v49
_ = v53
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("seq"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{v53})
var v54 any = v58
_ = v54
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("first"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.Apply(v62, []any{v54})
var v59 any = v63
_ = v59
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("next"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v64})
var v64 any = v68
_ = v64
var v69 any = v59
_ = v69
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("nth"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{v69, int64(0), nil})
var v70 any = v74
_ = v70
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("nth"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.Apply(v78, []any{v69, int64(1), nil})
var v75 any = v79
_ = v75
var v80 any = v69
_ = v80
var v81 any = v64
_ = v81
var v82 any = v82
_ = v82
var v84 any
if lang.IsTruthy(v80) {
var v85 any
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("qualified-ident?"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.Apply(v88, []any{v70})
if lang.IsTruthy(v89) {
var v90 any
if lang.IsTruthy(v52) {
var v91 any
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("="))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v96 := v95.FindInternedVar(lang.NewSymbol("namespace"))
if v96.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v96)))
}
v97 := v96.Get()
v98 := lang.Apply(v97, []any{v70})
v99 := lang.Apply(v94, []any{v52, v98})
if lang.IsTruthy(v99) {
var v100 any = v52
var v101 any = v81
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("conj"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("strip-ns"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{v70})
v110 := lang.NewVector(v109, v75)
v111 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(272), lang.NewKeyword("column"), int(43), lang.NewKeyword("end-line"), int(272), lang.NewKeyword("end-column"), int(58))
v112, err := lang.WithMeta(v110, v111.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v113 := lang.Apply(v105, []any{v82, v112})
var v102 any = v113
v48 = v100
v49 = v101
v50 = v102
continue
} else {
v91 = nil
}
v90 = v91
} else {
v115 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v116 := v115.FindInternedVar(lang.NewSymbol("namespace"))
if v116.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v116)))
}
v117 := v116.Get()
v118 := lang.Apply(v117, []any{v70})
var v114 any = v118
_ = v114
var v120 any
if lang.IsTruthy(v114) {
var v121 any = v114
_ = v121
var v123 any = v121
var v124 any = v81
v126 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v127 := v126.FindInternedVar(lang.NewSymbol("conj"))
if v127.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v127)))
}
v128 := v127.Get()
v129 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v130 := v129.FindInternedVar(lang.NewSymbol("strip-ns"))
if v130.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v130)))
}
v131 := v130.Get()
v132 := lang.Apply(v131, []any{v70})
v133 := lang.NewVector(v132, v75)
v134 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(274), lang.NewKeyword("column"), int(47), lang.NewKeyword("end-line"), int(274), lang.NewKeyword("end-column"), int(62))
v135, err := lang.WithMeta(v133, v134.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v136 := lang.Apply(v128, []any{v82, v135})
var v125 any = v136
v48 = v123
v49 = v124
v50 = v125
continue
} else {
v120 = nil
}
v90 = v120
}
v85 = v90
} else {
v85 = nil
}
v84 = v85
} else {
v114 := lang.NewVector(v52, v82)
v115 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(275), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(275), lang.NewKeyword("end-column"), int(16))
v116, err := lang.WithMeta(v114, v115.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v84 = v116
}
v51 = v84
  break
}
v4 = v51
} else {
v4 = nil
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// line-seq
{
v0 := lang.NewSymbol("line-seq").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("rdr"))), lang.NewKeyword("doc"), "Returns the lines of text from rdr as a lazy sequence of strings.\n  rdr must implement java.io.BufferedReader.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3068), lang.NewKeyword("end-line"), int(3068))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5, ok := lang.FieldOrMethod(v3, "readLine")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "readLine")))
}
var v6 any
switch reflect.TypeOf(v5).Kind() {
case reflect.Func:
  v6 = lang.Apply(v5, nil)
default:
  v6 = v5
}
var v4 any = v6
_ = v4
var v8 any
if lang.IsTruthy(v4) {
var v9 any = v4
_ = v9
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("cons"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("line-seq"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
return v18
})
v15 := lang.Apply(lang.NewLazySeq, []any{v14})
v16 := lang.Apply(v13, []any{v9, v15})
v8 = v16
} else {
v8 = nil
}
return v8
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// list
{
v0 := lang.NewSymbol("list").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("items"))), lang.NewKeyword("doc"), "Creates a new list containing the items.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(6), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(15), lang.NewKeyword("end-line"), int(18))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// list*
{
v0 := lang.NewSymbol("list*").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("args")), lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("args")), lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("b"), lang.NewSymbol("args")), lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("b"), lang.NewSymbol("c"), lang.NewSymbol("args")), lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("b"), lang.NewSymbol("c"), lang.NewSymbol("d"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "Creates a new seq containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(641), lang.NewKeyword("end-line"), int(641))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3})
return v7
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("cons"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3, v4})
return v8
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("cons"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("cons"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v4, v5})
v13 := lang.Apply(v8, []any{v3, v12})
return v13
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("cons"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("cons"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("cons"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v5, v6})
v17 := lang.Apply(v12, []any{v4, v16})
v18 := lang.Apply(v9, []any{v3, v17})
return v18
  default:
    if len(args) < 4 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.NewList(args[4:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("cons"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("cons"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("cons"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("cons"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("spread"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v7})
v24 := lang.Apply(v19, []any{v6, v23})
v25 := lang.Apply(v16, []any{v5, v24})
v26 := lang.Apply(v13, []any{v4, v25})
v27 := lang.Apply(v10, []any{v3, v26})
return v27
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// list?
{
v0 := lang.NewSymbol("list?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x implements IPersistentList", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6198), lang.NewKeyword("end-line"), int(6198))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.IPersistentList, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// load
{
v0 := lang.NewSymbol("load").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("paths"))), lang.NewKeyword("doc"), "Loads Clojure code from resources in classpath. A path is interpreted as\n  classpath-relative if it begins with a slash or relative to the root\n  directory for the current namespace otherwise.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("redef"), true, lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6095), lang.NewKeyword("end-line"), int(6095))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v9 any = nil
_ = v9
var v10 any = int64(0)
_ = v10
var v11 any = int64(0)
_ = v11
var v12 any
for {
var v13 any
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("<"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v11, v10})
if lang.IsTruthy(v17) {
v19, _ := lang.FieldOrMethod(v9, "nth")
if reflect.TypeOf(v19).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v20 := lang.Apply(v19, []any{v11})
var v18 any = v20
_ = v18
var v23 any
v24 := lang.Apply(strings12.HasPrefix, []any{v22, "/"})
if lang.IsTruthy(v24) {
v23 = v22
} else {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("str"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("root-directory"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("ns-name"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("*ns*"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v33, []any{v36})
v38 := lang.Apply(v30, []any{v37})
v39 := lang.Apply(v27, []any{v38, lang.NewChar(47), v22})
v23 = v39
}
var v22 any = v23
_ = v22
var v41 any
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("*loading-verbosely*"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
if lang.IsTruthy(v44) {
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("printf"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{"(glojure.core/load \"%s\")\n", v22})
_ = v48
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("flush"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, nil)
v41 = v52
} else {
v41 = nil
}
_ = v41
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("check-cyclic-dependency"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{v22})
_ = v56
var v57 any
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("="))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("first"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v65 := v64.FindInternedVar(lang.NewSymbol("*pending-paths*"))
if v65.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v65)))
}
v66 := v65.Get()
v67 := lang.Apply(v63, []any{v66})
v68 := lang.Apply(v60, []any{v22, v67})
if lang.IsTruthy(v68) {
v57 = nil
} else {
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("hash-map"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*pending-paths*"))
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("conj"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("*pending-paths*"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.Apply(v79, []any{v82, v22})
v84 := lang.Apply(v75, []any{v76, v83})
v85 := lang.Apply(v72, []any{v84})
_ = v85
var v86 any
func() {
defer func() {
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.Apply(v89, nil)
}()
v91 := lang.Apply(strings12.TrimPrefix, []any{v22, "/"})
v92, _ := lang.FieldOrMethod(runtime5.RT, "Load")
if reflect.TypeOf(v92).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Load is not a function")))
}
v93 := lang.Apply(v92, []any{v91})
v86 = v93
}()
v57 = v86
}
_ = v57
var v22 any = v4
var v23 any = v9
var v24 any = v10
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v11})
var v25 any = v29
v4 = v22
v9 = v23
v10 = v24
v11 = v25
continue
} else {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("seq"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v4})
var v18 any = v22
_ = v18
var v24 any
if lang.IsTruthy(v18) {
var v25 any = v18
_ = v25
var v27 any
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v25})
if lang.IsTruthy(v31) {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("chunk-first"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v25})
var v32 any = v36
_ = v32
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v25})
var v38 any = v42
var v43 any = v32
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("int"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("count"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v32})
v52 := lang.Apply(v47, []any{v51})
var v44 any = v52
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("int"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{int64(0)})
var v53 any = v57
v4 = v38
v9 = v43
v10 = v44
v11 = v53
continue
} else {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("first"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v25})
var v32 any = v36
_ = v32
var v39 any
v40 := lang.Apply(strings12.HasPrefix, []any{v38, "/"})
if lang.IsTruthy(v40) {
v39 = v38
} else {
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("str"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("root-directory"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("ns-name"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("*ns*"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v49, []any{v52})
v54 := lang.Apply(v46, []any{v53})
v55 := lang.Apply(v43, []any{v54, lang.NewChar(47), v38})
v39 = v55
}
var v38 any = v39
_ = v38
var v57 any
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("*loading-verbosely*"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
if lang.IsTruthy(v60) {
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("printf"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{"(glojure.core/load \"%s\")\n", v38})
_ = v64
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("flush"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, nil)
v57 = v68
} else {
v57 = nil
}
_ = v57
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("check-cyclic-dependency"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{v38})
_ = v72
var v73 any
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("="))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("first"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("*pending-paths*"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.Apply(v79, []any{v82})
v84 := lang.Apply(v76, []any{v38, v83})
if lang.IsTruthy(v84) {
v73 = nil
} else {
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("hash-map"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*pending-paths*"))
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("conj"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("*pending-paths*"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.Apply(v95, []any{v98, v38})
v100 := lang.Apply(v91, []any{v92, v99})
v101 := lang.Apply(v88, []any{v100})
_ = v101
var v102 any
func() {
defer func() {
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.Apply(v105, nil)
}()
v107 := lang.Apply(strings12.TrimPrefix, []any{v38, "/"})
v108, _ := lang.FieldOrMethod(runtime5.RT, "Load")
if reflect.TypeOf(v108).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Load is not a function")))
}
v109 := lang.Apply(v108, []any{v107})
v102 = v109
}()
v73 = v102
}
_ = v73
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("next"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v25})
var v38 any = v42
var v43 any = nil
var v44 any = int64(0)
var v45 any = int64(0)
v4 = v38
v9 = v43
v10 = v44
v11 = v45
continue
}
v24 = v27
} else {
v24 = nil
}
v13 = v24
}
v12 = v13
  break
}
return v12
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// load-all
{
v0 := lang.NewSymbol("load-all").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("lib"), lang.NewSymbol("need-ns"), lang.NewSymbol("require"))), lang.NewKeyword("doc"), "Loads a lib given its name and forces a load of any libs it directly or\n  indirectly loads. If need-ns, ensures that the associated namespace\n  exists after loading. If require, records the load so any duplicate loads\n  can be skipped.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(5892), lang.NewKeyword("end-line"), int(5892), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("commute"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("*loaded-libs*"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
var v13 lang.FnFunc
v13 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v14 := args[0]
v15 := args[1]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("reduce1"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("conj"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v18, []any{v21, v14, v15})
return v22
})
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5899), lang.NewKeyword("column"), int(27), lang.NewKeyword("end-line"), int(5899), lang.NewKeyword("end-column"), int(47))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("hash-map"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*loaded-libs*"))
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("ref"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("sorted-set"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, nil)
v31 := lang.Apply(v26, []any{v30})
v32 := lang.Apply(v22, []any{v23, v31})
v33 := lang.Apply(v19, []any{v32})
_ = v33
var v34 any
func() {
defer func() {
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, nil)
}()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("load-one"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v3, v4, v5})
_ = v42
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("deref"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("*loaded-libs*"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v45, []any{v48})
v34 = v49
}()
v16 := lang.Apply(v9, []any{v12, v15, v34})
return v16
})
v7, _ := lang.FieldOrMethod(lang.LockingTransaction, "RunInTransaction")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("RunInTransaction is not a function")))
}
v8 := lang.Apply(v7, []any{v6})
return v8
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// load-data-reader-file
{
v0 := lang.NewSymbol("load-data-reader-file").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7836), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(7836), lang.NewKeyword("end-column"), int(28), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("mappings"), lang.NewSymbol("url"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6, ok := lang.FieldOrMethod(v4, "openStream")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "openStream")))
}
var v7 any
switch reflect.TypeOf(v6).Kind() {
case reflect.Func:
  v7 = lang.Apply(v6, nil)
default:
  v7 = v6
}
v8 := lang.Apply(java.io.InputStreamReader14., []any{v7, "UTF-8"})
v9 := lang.Apply(glojure.lang.LineNumberingPushbackReader13., []any{v8})
var v5 any = v9
_ = v5
var v11 any
func() {
defer func() {
v12, ok := lang.FieldOrMethod(v5, "close")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v5, "close")))
}
var v13 any
switch reflect.TypeOf(v12).Kind() {
case reflect.Func:
  v13 = lang.Apply(v12, nil)
default:
  v13 = v12
}
}()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("hash-map"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*file*"))
v22, ok := lang.FieldOrMethod(v4, "getFile")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "getFile")))
}
var v23 any
switch reflect.TypeOf(v22).Kind() {
case reflect.Func:
  v23 = lang.Apply(v22, nil)
default:
  v23 = v22
}
v24 := lang.Apply(v20, []any{v21, v23})
v25 := lang.Apply(v17, []any{v24})
_ = v25
var v26 any
func() {
defer func() {
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, nil)
}()
var v32 any
v33, ok := lang.FieldOrMethod(v4, "getPath")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "getPath")))
}
var v34 any
switch reflect.TypeOf(v33).Kind() {
case reflect.Func:
  v34 = lang.Apply(v33, nil)
default:
  v34 = v33
}
v35, _ := lang.FieldOrMethod(v34, "endsWith")
if reflect.TypeOf(v35).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("endsWith is not a function")))
}
v36 := lang.Apply(v35, []any{"cljc"})
if lang.IsTruthy(v36) {
v37 := lang.NewMap(lang.NewKeyword("eof"), nil, lang.NewKeyword("read-cond"), lang.NewKeyword("allow"))
v38 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7842), lang.NewKeyword("column"), int(25), lang.NewKeyword("end-line"), int(7842), lang.NewKeyword("end-column"), int(52))
v39, err := lang.WithMeta(v37, v38.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v32 = v39
} else {
v40 := lang.NewMap(lang.NewKeyword("eof"), nil)
v41 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7843), lang.NewKeyword("column"), int(25), lang.NewKeyword("end-line"), int(7843), lang.NewKeyword("end-column"), int(34))
v42, err := lang.WithMeta(v40, v41.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v32 = v42
}
var v31 any = v32
_ = v31
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("read"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v31, v5})
var v43 any = v47
_ = v43
var v49 any
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("not"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("map?"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{v43})
v57 := lang.Apply(v52, []any{v56})
if lang.IsTruthy(v57) {
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("ex-info"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("str"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{"Not a valid data-reader map"})
v65 := lang.NewMap(lang.NewKeyword("url"), v4)
v66 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7847), lang.NewKeyword("column"), int(27), lang.NewKeyword("end-line"), int(7847), lang.NewKeyword("end-column"), int(36))
v67, err := lang.WithMeta(v65, v66.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v68 := lang.Apply(v60, []any{v64, v67})
panic(v68)
} else {
v49 = nil
}
_ = v49
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("reduce"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
var v72 lang.FnFunc
v72 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v73 := args[0]
v74 := args[1]
var v75 any = v74
_ = v75
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("nth"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.Apply(v79, []any{v75, int64(0), nil})
var v76 any = v80
_ = v76
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("nth"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, []any{v75, int64(1), nil})
var v81 any = v85
_ = v81
var v87 any
v88 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v89 := v88.FindInternedVar(lang.NewSymbol("not"))
if v89.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v89)))
}
v90 := v89.Get()
v91 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v92 := v91.FindInternedVar(lang.NewSymbol("symbol?"))
if v92.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v92)))
}
v93 := v92.Get()
v94 := lang.Apply(v93, []any{v76})
v95 := lang.Apply(v90, []any{v94})
if lang.IsTruthy(v95) {
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("ex-info"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("str"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.Apply(v101, []any{"Invalid form in data-reader file"})
v103 := lang.NewMap(lang.NewKeyword("url"), v4, lang.NewKeyword("form"), v76)
v104 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7852), lang.NewKeyword("column"), int(30), lang.NewKeyword("end-line"), int(7853), lang.NewKeyword("end-column"), int(38))
v105, err := lang.WithMeta(v103, v104.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v106 := lang.Apply(v98, []any{v102, v105})
panic(v106)
} else {
v87 = nil
}
_ = v87
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("data-reader-var"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.Apply(v110, []any{v81})
var v107 any = v111
_ = v107
var v113 any
v115 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v116 := v115.FindInternedVar(lang.NewSymbol("contains?"))
if v116.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v116)))
}
v117 := v116.Get()
v118 := lang.Apply(v117, []any{v3, v76})
var v114 any = v118
_ = v114
var v120 any
if lang.IsTruthy(v114) {
v121 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v122 := v121.FindInternedVar(lang.NewSymbol("not="))
if v122.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v122)))
}
v123 := v122.Get()
v124 := lang.Apply(v3, []any{v76})
v125 := lang.Apply(v123, []any{v124, v107})
v120 = v125
} else {
v120 = v114
}
if lang.IsTruthy(v120) {
v114 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v115 := v114.FindInternedVar(lang.NewSymbol("ex-info"))
if v115.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v115)))
}
v116 := v115.Get()
v117 := lang.NewMap(lang.NewKeyword("url"), v4, lang.NewKeyword("conflict"), v76, lang.NewKeyword("mappings"), v73)
v118 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7858), lang.NewKeyword("column"), int(32), lang.NewKeyword("end-line"), int(7860), lang.NewKeyword("end-column"), int(44))
v119, err := lang.WithMeta(v117, v118.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v120 := lang.Apply(v116, []any{"Conflicting data-reader mapping", v119})
panic(v120)
} else {
v113 = nil
}
_ = v113
v121 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v122 := v121.FindInternedVar(lang.NewSymbol("assoc"))
if v122.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v122)))
}
v123 := v122.Get()
v124 := lang.Apply(v123, []any{v73, v76, v107})
return v124
})
v73 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7849), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(7861), lang.NewKeyword("end-column"), int(32))
v74, err := lang.WithMeta(v72, v73.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v75 := lang.Apply(v71, []any{v74, v3, v43})
v26 = v75
}()
v11 = v26
}()
return v11
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// load-data-readers
{
v0 := lang.NewSymbol("load-data-readers").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7865), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(7865), lang.NewKeyword("end-column"), int(24), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v4 := v3.FindInternedVar(lang.NewSymbol("alter-var-root"))
if v4.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v4)))
}
v5 := v4.Get()
v6 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*data-readers*"))
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := args[0]
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("reduce"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("load-data-reader-file"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("data-reader-urls"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, nil)
v19 := lang.Apply(v11, []any{v14, v8, v18})
return v19
})
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7867), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(7869), lang.NewKeyword("end-column"), int(57))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v10 := lang.Apply(v5, []any{v6, v9})
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// load-file
{
v0 := lang.NewSymbol("load-file").WithMeta(lang.NewMap(lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// load-lib
{
v0 := lang.NewSymbol("load-lib").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("prefix"), lang.NewSymbol("lib"), lang.NewSymbol("&"), lang.NewSymbol("options"))), lang.NewKeyword("doc"), "Loads a lib with options", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(5904), lang.NewKeyword("end-line"), int(5904), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("throw-if"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
var v9 any = v3
_ = v9
var v11 any
if lang.IsTruthy(v9) {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("pos?"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("name"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v4})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("int"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewChar(46)})
v23 := lang.Apply(strings12.Index, []any{v18, v22})
v24 := lang.Apply(v14, []any{v23})
v11 = v24
} else {
v11 = v9
}
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("name"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v4})
v13 := lang.Apply(v8, []any{v11, "Found lib name '%s' containing period with prefix '%s'.  lib names inside prefix lists must not contain periods", v12, v3})
_ = v13
var v15 any
if lang.IsTruthy(v3) {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("symbol"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("str"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v3, lang.NewChar(46), v14})
v23 := lang.Apply(v18, []any{v22})
v15 = v23
} else {
v15 = v14
}
var v14 any = v15
_ = v14
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("apply"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("hash-map"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v27, []any{v30, v5})
var v24 any = v31
_ = v24
var v32 any = v24
_ = v32
var v34 any
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("seq?"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v33})
if lang.IsTruthy(v38) {
var v39 any
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("next"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v33})
if lang.IsTruthy(v43) {
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("to-array"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v33})
v48 := lang.Apply(lang.NewPersistentArrayMapAsIfByAssoc, []any{v47})
v39 = v48
} else {
var v49 any
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("seq"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v33})
if lang.IsTruthy(v53) {
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("first"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v33})
v49 = v57
} else {
v49 = nil
}
v39 = v49
}
v34 = v39
} else {
v34 = v33
}
var v33 any = v34
_ = v33
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("get"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v61, []any{v33, lang.NewKeyword("as")})
var v58 any = v62
_ = v58
v64 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v65 := v64.FindInternedVar(lang.NewSymbol("get"))
if v65.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v65)))
}
v66 := v65.Get()
v67 := lang.Apply(v66, []any{v33, lang.NewKeyword("reload")})
var v63 any = v67
_ = v63
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("get"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{v33, lang.NewKeyword("reload-all")})
var v68 any = v72
_ = v68
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("get"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.Apply(v76, []any{v33, lang.NewKeyword("require")})
var v73 any = v77
_ = v73
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("get"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.Apply(v81, []any{v33, lang.NewKeyword("use")})
var v78 any = v82
_ = v78
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("get"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.Apply(v86, []any{v33, lang.NewKeyword("verbose")})
var v83 any = v87
_ = v83
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("get"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.Apply(v91, []any{v33, lang.NewKeyword("as-alias")})
var v88 any = v92
_ = v88
v94 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v95 := v94.FindInternedVar(lang.NewSymbol("contains?"))
if v95.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v95)))
}
v96 := v95.Get()
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("deref"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("*loaded-libs*"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.Apply(v99, []any{v102})
v104 := lang.Apply(v96, []any{v103, v14})
var v93 any = v104
_ = v93
var v106 any = v58
_ = v106
var v108 any
if lang.IsTruthy(v106) {
v108 = v106
} else {
v108 = v78
}
var v105 any = v108
_ = v105
var v107 any
if lang.IsTruthy(v68) {
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("load-all"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v107 = v110
} else {
var v111 any
if lang.IsTruthy(v63) {
v112 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v113 := v112.FindInternedVar(lang.NewSymbol("load-one"))
if v113.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v113)))
}
v114 := v113.Get()
v111 = v114
} else {
var v115 any
v116 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v117 := v116.FindInternedVar(lang.NewSymbol("not"))
if v117.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v117)))
}
v118 := v117.Get()
v119 := lang.Apply(v118, []any{v93})
if lang.IsTruthy(v119) {
var v120 any
if lang.IsTruthy(v105) {
v121 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v122 := v121.FindInternedVar(lang.NewSymbol("load-one"))
if v122.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v122)))
}
v123 := v122.Get()
v120 = v123
} else {
var v124 any
if lang.IsTruthy(v88) {
var v125 lang.FnFunc
v125 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v126 := args[0]
v127 := args[1]
v128 := args[2]
v129 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v130 := v129.FindInternedVar(lang.NewSymbol("create-ns"))
if v130.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v130)))
}
v131 := v130.Get()
v132 := lang.Apply(v131, []any{v126})
return v132
})
v126 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5918), lang.NewKeyword("column"), int(48), lang.NewKeyword("end-line"), int(5918), lang.NewKeyword("end-column"), int(88))
v127, err := lang.WithMeta(v125, v126.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v124 = v127
} else {
var v128 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v129 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v130 := v129.FindInternedVar(lang.NewSymbol("load-one"))
if v130.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v130)))
}
v131 := v130.Get()
v128 = v131
} else {
v128 = nil
}
v124 = v128
}
v120 = v124
}
v115 = v120
} else {
v115 = nil
}
v111 = v115
}
v107 = v111
}
var v106 any = v107
_ = v106
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("select-keys"))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.Apply(v135, []any{v24, lang.NewList(lang.NewKeyword("exclude"), lang.NewKeyword("only"), lang.NewKeyword("rename"), lang.NewKeyword("refer"))})
var v132 any = v136
_ = v132
v138 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v139 := v138.FindInternedVar(lang.NewSymbol("not"))
if v139.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v139)))
}
v140 := v139.Get()
v141 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v142 := v141.FindInternedVar(lang.NewSymbol("find-ns"))
if v142.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v142)))
}
v143 := v142.Get()
v144 := lang.Apply(v143, []any{v14})
v145 := lang.Apply(v140, []any{v144})
var v137 any = v145
_ = v137
v148 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v149 := v148.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v149.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v149)))
}
v150 := v149.Get()
v151 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v152 := v151.FindInternedVar(lang.NewSymbol("hash-map"))
if v152.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v152)))
}
v153 := v152.Get()
v154 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*loading-verbosely*"))
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("*loading-verbosely*"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
var v155 any = v158
_ = v155
var v160 any
if lang.IsTruthy(v155) {
v160 = v155
} else {
v160 = v83
}
v155 := lang.Apply(v153, []any{v154, v160})
v156 := lang.Apply(v150, []any{v155})
_ = v156
var v157 any
func() {
defer func() {
v158 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v159 := v158.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v159.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v159)))
}
v160 := v159.Get()
v161 := lang.Apply(v160, nil)
}()
var v162 any
if lang.IsTruthy(v106) {
var v163 any
func() {
defer func() {
if r := recover(); r != nil {
if lang.CatchMatches(r, lang.Builtins["any"]) {
v164 := r
_ = v164
var v165 any
if lang.IsTruthy(v137) {
v166 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v167 := v166.FindInternedVar(lang.NewSymbol("remove-ns"))
if v167.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v167)))
}
v168 := v167.Get()
v169 := lang.Apply(v168, []any{v14})
v165 = v169
} else {
v165 = nil
}
_ = v165
panic(v164)
} else {
panic(r)
}
}
}()
v164 := lang.Apply(v106, []any{v14, v105, v73})
v163 = v164
}()
v162 = v163
} else {
v165 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v166 := v165.FindInternedVar(lang.NewSymbol("throw-if"))
if v166.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v166)))
}
v167 := v166.Get()
var v168 any = v105
_ = v168
var v170 any
if lang.IsTruthy(v168) {
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("not"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
v174 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v175 := v174.FindInternedVar(lang.NewSymbol("find-ns"))
if v175.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v175)))
}
v176 := v175.Get()
v177 := lang.Apply(v176, []any{v14})
v178 := lang.Apply(v173, []any{v177})
v170 = v178
} else {
v170 = v168
}
v168 := lang.Apply(v167, []any{v170, "namespace '%s' not found", v14})
v162 = v168
}
_ = v162
var v169 any
var v170 any = v105
_ = v170
var v172 any
if lang.IsTruthy(v170) {
v173 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v174 := v173.FindInternedVar(lang.NewSymbol("*loading-verbosely*"))
if v174.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v174)))
}
v175 := v174.Get()
v172 = v175
} else {
v172 = v170
}
if lang.IsTruthy(v172) {
v170 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v171 := v170.FindInternedVar(lang.NewSymbol("printf"))
if v171.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v171)))
}
v172 := v171.Get()
v173 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v174 := v173.FindInternedVar(lang.NewSymbol("ns-name"))
if v174.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v174)))
}
v175 := v174.Get()
v176 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v177 := v176.FindInternedVar(lang.NewSymbol("*ns*"))
if v177.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v177)))
}
v178 := v177.Get()
v179 := lang.Apply(v175, []any{v178})
v180 := lang.Apply(v172, []any{"(glojure.core/in-ns '%s)\n", v179})
v169 = v180
} else {
v169 = nil
}
_ = v169
var v181 any
if lang.IsTruthy(v58) {
var v182 any
v183 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v184 := v183.FindInternedVar(lang.NewSymbol("*loading-verbosely*"))
if v184.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v184)))
}
v185 := v184.Get()
if lang.IsTruthy(v185) {
v186 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v187 := v186.FindInternedVar(lang.NewSymbol("printf"))
if v187.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v187)))
}
v188 := v187.Get()
v189 := lang.Apply(v188, []any{"(glojure.core/alias '%s '%s)\n", v58, v14})
v182 = v189
} else {
v182 = nil
}
_ = v182
v190 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v191 := v190.FindInternedVar(lang.NewSymbol("alias"))
if v191.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v191)))
}
v192 := v191.Get()
v193 := lang.Apply(v192, []any{v58, v14})
v181 = v193
} else {
v181 = nil
}
_ = v181
var v194 any
if lang.IsTruthy(v88) {
var v195 any
v196 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v197 := v196.FindInternedVar(lang.NewSymbol("*loading-verbosely*"))
if v197.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v197)))
}
v198 := v197.Get()
if lang.IsTruthy(v198) {
v199 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v200 := v199.FindInternedVar(lang.NewSymbol("printf"))
if v200.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v200)))
}
v201 := v200.Get()
v202 := lang.Apply(v201, []any{"(glojure.core/alias '%s '%s)\n", v88, v14})
v195 = v202
} else {
v195 = nil
}
_ = v195
v203 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v204 := v203.FindInternedVar(lang.NewSymbol("alias"))
if v204.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v204)))
}
v205 := v204.Get()
v206 := lang.Apply(v205, []any{v88, v14})
v194 = v206
} else {
v194 = nil
}
_ = v194
var v207 any
var v208 any = v78
_ = v208
var v210 any
if lang.IsTruthy(v208) {
v210 = v208
} else {
v211 := lang.Apply(lang.NewKeyword("refer"), []any{v132})
v210 = v211
}
if lang.IsTruthy(v210) {
var v208 any
v209 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v210 := v209.FindInternedVar(lang.NewSymbol("*loading-verbosely*"))
if v210.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v210)))
}
v211 := v210.Get()
if lang.IsTruthy(v211) {
v212 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v213 := v212.FindInternedVar(lang.NewSymbol("printf"))
if v213.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v213)))
}
v214 := v213.Get()
v215 := lang.Apply(v214, []any{"(glojure.core/refer '%s", v14})
_ = v215
v217 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v218 := v217.FindInternedVar(lang.NewSymbol("seq"))
if v218.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v218)))
}
v219 := v218.Get()
v220 := lang.Apply(v219, []any{v132})
var v216 any = v220
_ = v216
var v221 any = nil
_ = v221
var v222 any = int64(0)
_ = v222
var v223 any = int64(0)
_ = v223
var v224 any
for {
var v225 any
v226 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v227 := v226.FindInternedVar(lang.NewSymbol("<"))
if v227.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v227)))
}
v228 := v227.Get()
v229 := lang.Apply(v228, []any{v223, v222})
if lang.IsTruthy(v229) {
v231, _ := lang.FieldOrMethod(v221, "nth")
if reflect.TypeOf(v231).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v232 := lang.Apply(v231, []any{v223})
var v230 any = v232
_ = v230
v234 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v235 := v234.FindInternedVar(lang.NewSymbol("printf"))
if v235.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v235)))
}
v236 := v235.Get()
v237 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v238 := v237.FindInternedVar(lang.NewSymbol("key"))
if v238.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v238)))
}
v239 := v238.Get()
v240 := lang.Apply(v239, []any{v230})
v241 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v242 := v241.FindInternedVar(lang.NewSymbol("print-str"))
if v242.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v242)))
}
v243 := v242.Get()
v244 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v245 := v244.FindInternedVar(lang.NewSymbol("val"))
if v245.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v245)))
}
v246 := v245.Get()
v247 := lang.Apply(v246, []any{v230})
v248 := lang.Apply(v243, []any{v247})
v249 := lang.Apply(v236, []any{" %s '%s", v240, v248})
_ = v249
var v250 any = v216
var v251 any = v221
var v252 any = v222
v254 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v255 := v254.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v255.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v255)))
}
v256 := v255.Get()
v257 := lang.Apply(v256, []any{v223})
var v253 any = v257
v216 = v250
v221 = v251
v222 = v252
v223 = v253
continue
} else {
v231 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v232 := v231.FindInternedVar(lang.NewSymbol("seq"))
if v232.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v232)))
}
v233 := v232.Get()
v234 := lang.Apply(v233, []any{v216})
var v230 any = v234
_ = v230
var v236 any
if lang.IsTruthy(v230) {
var v237 any = v230
_ = v237
var v239 any
v240 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v241 := v240.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v241.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v241)))
}
v242 := v241.Get()
v243 := lang.Apply(v242, []any{v237})
if lang.IsTruthy(v243) {
v245 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v246 := v245.FindInternedVar(lang.NewSymbol("chunk-first"))
if v246.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v246)))
}
v247 := v246.Get()
v248 := lang.Apply(v247, []any{v237})
var v244 any = v248
_ = v244
v251 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v252 := v251.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v252.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v252)))
}
v253 := v252.Get()
v254 := lang.Apply(v253, []any{v237})
var v250 any = v254
var v255 any = v244
v257 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v258 := v257.FindInternedVar(lang.NewSymbol("int"))
if v258.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v258)))
}
v259 := v258.Get()
v260 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v261 := v260.FindInternedVar(lang.NewSymbol("count"))
if v261.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v261)))
}
v262 := v261.Get()
v263 := lang.Apply(v262, []any{v244})
v264 := lang.Apply(v259, []any{v263})
var v256 any = v264
v266 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v267 := v266.FindInternedVar(lang.NewSymbol("int"))
if v267.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v267)))
}
v268 := v267.Get()
v269 := lang.Apply(v268, []any{int64(0)})
var v265 any = v269
v216 = v250
v221 = v255
v222 = v256
v223 = v265
continue
} else {
v245 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v246 := v245.FindInternedVar(lang.NewSymbol("first"))
if v246.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v246)))
}
v247 := v246.Get()
v248 := lang.Apply(v247, []any{v237})
var v244 any = v248
_ = v244
v250 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v251 := v250.FindInternedVar(lang.NewSymbol("printf"))
if v251.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v251)))
}
v252 := v251.Get()
v253 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v254 := v253.FindInternedVar(lang.NewSymbol("key"))
if v254.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v254)))
}
v255 := v254.Get()
v256 := lang.Apply(v255, []any{v244})
v257 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v258 := v257.FindInternedVar(lang.NewSymbol("print-str"))
if v258.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v258)))
}
v259 := v258.Get()
v260 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v261 := v260.FindInternedVar(lang.NewSymbol("val"))
if v261.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v261)))
}
v262 := v261.Get()
v263 := lang.Apply(v262, []any{v244})
v264 := lang.Apply(v259, []any{v263})
v265 := lang.Apply(v252, []any{" %s '%s", v256, v264})
_ = v265
v267 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v268 := v267.FindInternedVar(lang.NewSymbol("next"))
if v268.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v268)))
}
v269 := v268.Get()
v270 := lang.Apply(v269, []any{v237})
var v266 any = v270
var v271 any = nil
var v272 any = int64(0)
var v273 any = int64(0)
v216 = v266
v221 = v271
v222 = v272
v223 = v273
continue
}
v236 = v239
} else {
v236 = nil
}
v225 = v236
}
v224 = v225
  break
}
_ = v224
v216 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v217 := v216.FindInternedVar(lang.NewSymbol("printf"))
if v217.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v217)))
}
v218 := v217.Get()
v219 := lang.Apply(v218, []any{")\n"})
v208 = v219
} else {
v208 = nil
}
_ = v208
v220 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v221 := v220.FindInternedVar(lang.NewSymbol("apply"))
if v221.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v221)))
}
v222 := v221.Get()
v223 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v224 := v223.FindInternedVar(lang.NewSymbol("refer"))
if v224.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v224)))
}
v225 := v224.Get()
v226 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v227 := v226.FindInternedVar(lang.NewSymbol("mapcat"))
if v227.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v227)))
}
v228 := v227.Get()
v229 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v230 := v229.FindInternedVar(lang.NewSymbol("seq"))
if v230.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v230)))
}
v231 := v230.Get()
v232 := lang.Apply(v228, []any{v231, v132})
v233 := lang.Apply(v222, []any{v225, v14, v232})
v207 = v233
} else {
v207 = nil
}
v157 = v207
}()
return v157
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// load-libs
{
v0 := lang.NewSymbol("load-libs").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Loads libs, interpreting libspecs, prefix lists, and flags for\n  forwarding to load-lib", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(5951), lang.NewKeyword("end-line"), int(5951), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("filter"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("keyword?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v7, []any{v10, v3})
var v4 any = v11
_ = v4
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("interleave"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("repeat"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{true})
v20 := lang.Apply(v15, []any{v4, v19})
var v12 any = v20
_ = v12
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("filter"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("complement"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("keyword?"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v27, []any{v30})
v32 := lang.Apply(v24, []any{v31, v21})
var v21 any = v32
_ = v21
v35 := lang.CreatePersistentTreeSet(lang.NewKeyword("as"), lang.NewKeyword("reload"), lang.NewKeyword("reload-all"), lang.NewKeyword("require"), lang.NewKeyword("use"), lang.NewKeyword("verbose"), lang.NewKeyword("refer"), lang.NewKeyword("as-alias"))
v36 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5959), lang.NewKeyword("column"), int(21), lang.NewKeyword("end-line"), int(5959), lang.NewKeyword("end-column"), int(86))
v37, err := lang.WithMeta(v35, v36.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v34 any = v37
_ = v34
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("seq"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("remove"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v34, v4})
v46 := lang.Apply(v41, []any{v45})
var v38 any = v46
_ = v38
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("throw-if"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("apply"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("str"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("interpose"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{lang.NewChar(44), v38})
v61 := lang.Apply(v53, []any{v56, "Unsupported option(s) supplied: ", v60})
v62 := lang.Apply(v50, []any{v38, v61})
_ = v62
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("throw-if"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("not"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("seq"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v21})
v44 := lang.Apply(v39, []any{v43})
v45 := lang.Apply(v36, []any{v44, "Nothing specified to load"})
_ = v45
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("seq"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v21})
var v46 any = v50
_ = v46
var v51 any = nil
_ = v51
var v52 any = int64(0)
_ = v52
var v53 any = int64(0)
_ = v53
var v54 any
for {
var v55 any
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("<"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{v53, v52})
if lang.IsTruthy(v59) {
v61, _ := lang.FieldOrMethod(v51, "nth")
if reflect.TypeOf(v61).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v62 := lang.Apply(v61, []any{v53})
var v60 any = v62
_ = v60
var v64 any
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("libspec?"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v60})
if lang.IsTruthy(v68) {
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("apply"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("load-lib"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v76 := v75.FindInternedVar(lang.NewSymbol("prependss"))
if v76.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v76)))
}
v77 := v76.Get()
v78 := lang.Apply(v77, []any{v60, v12})
v79 := lang.Apply(v71, []any{v74, nil, v78})
v64 = v79
} else {
var v80 any = v60
_ = v80
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("seq"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, []any{v80})
var v81 any = v85
_ = v81
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("first"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.Apply(v89, []any{v81})
var v86 any = v90
_ = v86
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("next"))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.Apply(v94, []any{v91})
var v91 any = v95
_ = v91
var v96 any = v86
_ = v96
var v97 any = v91
_ = v97
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("throw-if"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("nil?"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.Apply(v104, []any{v96})
v106 := lang.Apply(v101, []any{v105, "prefix cannot be nil"})
_ = v106
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("seq"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.Apply(v110, []any{v97})
var v107 any = v111
_ = v107
var v112 any = nil
_ = v112
var v113 any = int64(0)
_ = v113
var v114 any = int64(0)
_ = v114
var v115 any
for {
var v116 any
v117 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v118 := v117.FindInternedVar(lang.NewSymbol("<"))
if v118.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v118)))
}
v119 := v118.Get()
v120 := lang.Apply(v119, []any{v114, v113})
if lang.IsTruthy(v120) {
v122, _ := lang.FieldOrMethod(v112, "nth")
if reflect.TypeOf(v122).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v123 := lang.Apply(v122, []any{v114})
var v121 any = v123
_ = v121
v125 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v126 := v125.FindInternedVar(lang.NewSymbol("apply"))
if v126.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v126)))
}
v127 := v126.Get()
v128 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v129 := v128.FindInternedVar(lang.NewSymbol("load-lib"))
if v129.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v129)))
}
v130 := v129.Get()
v131 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v132 := v131.FindInternedVar(lang.NewSymbol("prependss"))
if v132.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v132)))
}
v133 := v132.Get()
v134 := lang.Apply(v133, []any{v121, v12})
v135 := lang.Apply(v127, []any{v130, v96, v134})
_ = v135
var v136 any = v107
var v137 any = v112
var v138 any = v113
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.Apply(v142, []any{v114})
var v139 any = v143
v107 = v136
v112 = v137
v113 = v138
v114 = v139
continue
} else {
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("seq"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.Apply(v124, []any{v107})
var v121 any = v125
_ = v121
var v127 any
if lang.IsTruthy(v121) {
var v128 any = v121
_ = v128
var v130 any
v131 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v132 := v131.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v132.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v132)))
}
v133 := v132.Get()
v134 := lang.Apply(v133, []any{v128})
if lang.IsTruthy(v134) {
v136 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v137 := v136.FindInternedVar(lang.NewSymbol("chunk-first"))
if v137.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v137)))
}
v138 := v137.Get()
v139 := lang.Apply(v138, []any{v128})
var v135 any = v139
_ = v135
v142 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v143 := v142.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v143.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v143)))
}
v144 := v143.Get()
v145 := lang.Apply(v144, []any{v128})
var v141 any = v145
var v146 any = v135
v148 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v149 := v148.FindInternedVar(lang.NewSymbol("int"))
if v149.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v149)))
}
v150 := v149.Get()
v151 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v152 := v151.FindInternedVar(lang.NewSymbol("count"))
if v152.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v152)))
}
v153 := v152.Get()
v154 := lang.Apply(v153, []any{v135})
v155 := lang.Apply(v150, []any{v154})
var v147 any = v155
v157 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v158 := v157.FindInternedVar(lang.NewSymbol("int"))
if v158.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v158)))
}
v159 := v158.Get()
v160 := lang.Apply(v159, []any{int64(0)})
var v156 any = v160
v107 = v141
v112 = v146
v113 = v147
v114 = v156
continue
} else {
v136 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v137 := v136.FindInternedVar(lang.NewSymbol("first"))
if v137.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v137)))
}
v138 := v137.Get()
v139 := lang.Apply(v138, []any{v128})
var v135 any = v139
_ = v135
v141 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v142 := v141.FindInternedVar(lang.NewSymbol("apply"))
if v142.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v142)))
}
v143 := v142.Get()
v144 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v145 := v144.FindInternedVar(lang.NewSymbol("load-lib"))
if v145.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v145)))
}
v146 := v145.Get()
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("prependss"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.Apply(v149, []any{v135, v12})
v151 := lang.Apply(v143, []any{v146, v96, v150})
_ = v151
v153 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v154 := v153.FindInternedVar(lang.NewSymbol("next"))
if v154.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v154)))
}
v155 := v154.Get()
v156 := lang.Apply(v155, []any{v128})
var v152 any = v156
var v157 any = nil
var v158 any = int64(0)
var v159 any = int64(0)
v107 = v152
v112 = v157
v113 = v158
v114 = v159
continue
}
v127 = v130
} else {
v127 = nil
}
v116 = v127
}
v115 = v116
  break
}
v64 = v115
}
_ = v64
var v80 any = v46
var v81 any = v51
var v82 any = v52
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.Apply(v86, []any{v53})
var v83 any = v87
v46 = v80
v51 = v81
v52 = v82
v53 = v83
continue
} else {
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("seq"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v46})
var v60 any = v64
_ = v60
var v66 any
if lang.IsTruthy(v60) {
var v67 any = v60
_ = v67
var v69 any
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.Apply(v72, []any{v67})
if lang.IsTruthy(v73) {
v75 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v76 := v75.FindInternedVar(lang.NewSymbol("chunk-first"))
if v76.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v76)))
}
v77 := v76.Get()
v78 := lang.Apply(v77, []any{v67})
var v74 any = v78
_ = v74
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.Apply(v83, []any{v67})
var v80 any = v84
var v85 any = v74
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("int"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("count"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.Apply(v92, []any{v74})
v94 := lang.Apply(v89, []any{v93})
var v86 any = v94
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("int"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.Apply(v98, []any{int64(0)})
var v95 any = v99
v46 = v80
v51 = v85
v52 = v86
v53 = v95
continue
} else {
v75 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v76 := v75.FindInternedVar(lang.NewSymbol("first"))
if v76.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v76)))
}
v77 := v76.Get()
v78 := lang.Apply(v77, []any{v67})
var v74 any = v78
_ = v74
var v80 any
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("libspec?"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.Apply(v83, []any{v74})
if lang.IsTruthy(v84) {
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("apply"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v89 := v88.FindInternedVar(lang.NewSymbol("load-lib"))
if v89.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v89)))
}
v90 := v89.Get()
v91 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v92 := v91.FindInternedVar(lang.NewSymbol("prependss"))
if v92.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v92)))
}
v93 := v92.Get()
v94 := lang.Apply(v93, []any{v74, v12})
v95 := lang.Apply(v87, []any{v90, nil, v94})
v80 = v95
} else {
var v96 any = v74
_ = v96
v98 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v99 := v98.FindInternedVar(lang.NewSymbol("seq"))
if v99.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v99)))
}
v100 := v99.Get()
v101 := lang.Apply(v100, []any{v96})
var v97 any = v101
_ = v97
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("first"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.Apply(v105, []any{v97})
var v102 any = v106
_ = v102
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("next"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.Apply(v110, []any{v107})
var v107 any = v111
_ = v107
var v112 any = v102
_ = v112
var v113 any = v107
_ = v113
v115 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v116 := v115.FindInternedVar(lang.NewSymbol("throw-if"))
if v116.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v116)))
}
v117 := v116.Get()
v118 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v119 := v118.FindInternedVar(lang.NewSymbol("nil?"))
if v119.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v119)))
}
v120 := v119.Get()
v121 := lang.Apply(v120, []any{v112})
v122 := lang.Apply(v117, []any{v121, "prefix cannot be nil"})
_ = v122
v124 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v125 := v124.FindInternedVar(lang.NewSymbol("seq"))
if v125.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v125)))
}
v126 := v125.Get()
v127 := lang.Apply(v126, []any{v113})
var v123 any = v127
_ = v123
var v128 any = nil
_ = v128
var v129 any = int64(0)
_ = v129
var v130 any = int64(0)
_ = v130
var v131 any
for {
var v132 any
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("<"))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.Apply(v135, []any{v130, v129})
if lang.IsTruthy(v136) {
v138, _ := lang.FieldOrMethod(v128, "nth")
if reflect.TypeOf(v138).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v139 := lang.Apply(v138, []any{v130})
var v137 any = v139
_ = v137
v141 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v142 := v141.FindInternedVar(lang.NewSymbol("apply"))
if v142.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v142)))
}
v143 := v142.Get()
v144 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v145 := v144.FindInternedVar(lang.NewSymbol("load-lib"))
if v145.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v145)))
}
v146 := v145.Get()
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("prependss"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.Apply(v149, []any{v137, v12})
v151 := lang.Apply(v143, []any{v146, v112, v150})
_ = v151
var v152 any = v123
var v153 any = v128
var v154 any = v129
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
v159 := lang.Apply(v158, []any{v130})
var v155 any = v159
v123 = v152
v128 = v153
v129 = v154
v130 = v155
continue
} else {
v138 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v139 := v138.FindInternedVar(lang.NewSymbol("seq"))
if v139.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v139)))
}
v140 := v139.Get()
v141 := lang.Apply(v140, []any{v123})
var v137 any = v141
_ = v137
var v143 any
if lang.IsTruthy(v137) {
var v144 any = v137
_ = v144
var v146 any
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.Apply(v149, []any{v144})
if lang.IsTruthy(v150) {
v152 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v153 := v152.FindInternedVar(lang.NewSymbol("chunk-first"))
if v153.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v153)))
}
v154 := v153.Get()
v155 := lang.Apply(v154, []any{v144})
var v151 any = v155
_ = v151
v158 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v159 := v158.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v159.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v159)))
}
v160 := v159.Get()
v161 := lang.Apply(v160, []any{v144})
var v157 any = v161
var v162 any = v151
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("int"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v168 := v167.FindInternedVar(lang.NewSymbol("count"))
if v168.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v168)))
}
v169 := v168.Get()
v170 := lang.Apply(v169, []any{v151})
v171 := lang.Apply(v166, []any{v170})
var v163 any = v171
v173 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v174 := v173.FindInternedVar(lang.NewSymbol("int"))
if v174.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v174)))
}
v175 := v174.Get()
v176 := lang.Apply(v175, []any{int64(0)})
var v172 any = v176
v123 = v157
v128 = v162
v129 = v163
v130 = v172
continue
} else {
v152 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v153 := v152.FindInternedVar(lang.NewSymbol("first"))
if v153.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v153)))
}
v154 := v153.Get()
v155 := lang.Apply(v154, []any{v144})
var v151 any = v155
_ = v151
v157 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v158 := v157.FindInternedVar(lang.NewSymbol("apply"))
if v158.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v158)))
}
v159 := v158.Get()
v160 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v161 := v160.FindInternedVar(lang.NewSymbol("load-lib"))
if v161.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v161)))
}
v162 := v161.Get()
v163 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v164 := v163.FindInternedVar(lang.NewSymbol("prependss"))
if v164.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v164)))
}
v165 := v164.Get()
v166 := lang.Apply(v165, []any{v151, v12})
v167 := lang.Apply(v159, []any{v162, v112, v166})
_ = v167
v169 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v170 := v169.FindInternedVar(lang.NewSymbol("next"))
if v170.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v170)))
}
v171 := v170.Get()
v172 := lang.Apply(v171, []any{v144})
var v168 any = v172
var v173 any = nil
var v174 any = int64(0)
var v175 any = int64(0)
v123 = v168
v128 = v173
v129 = v174
v130 = v175
continue
}
v143 = v146
} else {
v143 = nil
}
v132 = v143
}
v131 = v132
  break
}
v80 = v131
}
_ = v80
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("next"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.Apply(v99, []any{v67})
var v96 any = v100
var v101 any = nil
var v102 any = int64(0)
var v103 any = int64(0)
v46 = v96
v51 = v101
v52 = v102
v53 = v103
continue
}
v66 = v69
} else {
v66 = nil
}
v55 = v66
}
v54 = v55
  break
}
return v54
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// load-one
{
v0 := lang.NewSymbol("load-one").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("lib"), lang.NewSymbol("need-ns"), lang.NewSymbol("require"))), lang.NewKeyword("doc"), "Loads a lib given its name. If need-ns, ensures that the associated\n  namespace exists after loading. If require, records the load so any\n  duplicate loads can be skipped.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(5879), lang.NewKeyword("end-line"), int(5879), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("load"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("root-resource"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3})
v13 := lang.Apply(v8, []any{v12})
_ = v13
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("throw-if"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
var v17 any = v4
_ = v17
var v19 any
if lang.IsTruthy(v17) {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("not"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("find-ns"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v3})
v27 := lang.Apply(v22, []any{v26})
v19 = v27
} else {
v19 = v17
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("root-resource"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v3})
v21 := lang.Apply(v16, []any{v19, "namespace '%s' not found after loading '%s'", v3, v20})
_ = v21
var v22 any
if lang.IsTruthy(v5) {
var v23 lang.FnFunc
v23 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("commute"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("*loaded-libs*"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("conj"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v26, []any{v29, v32, v3})
return v33
})
v24, _ := lang.FieldOrMethod(lang.LockingTransaction, "RunInTransaction")
if reflect.TypeOf(v24).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("RunInTransaction is not a function")))
}
v25 := lang.Apply(v24, []any{v23})
v22 = v25
} else {
v22 = nil
}
return v22
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// load-reader
{
v0 := lang.NewSymbol("load-reader").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("rdr"))), lang.NewKeyword("doc"), "Sequentially read and evaluate the set of forms contained in the\n  stream/file", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4081), lang.NewKeyword("end-line"), int(4081))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(runtime5.Compiler, "load")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("load is not a function")))
}
v5 := lang.Apply(v4, []any{v3})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// load-string
{
v0 := lang.NewSymbol("load-string").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Sequentially read and evaluate the set of forms contained in the\n  string", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4088), lang.NewKeyword("end-line"), int(4088))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.Apply(java.io.StringReader15., []any{v3})
v6 := lang.Apply(glojure.lang.LineNumberingPushbackReader13., []any{v5})
var v4 any = v6
_ = v4
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("load-reader"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
return v11
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// loaded-libs
{
v0 := lang.NewSymbol("loaded-libs").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Returns a sorted set of symbols naming the currently loaded libs", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6090), lang.NewKeyword("end-line"), int(6090))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v4 := v3.FindInternedVar(lang.NewSymbol("deref"))
if v4.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v4)))
}
v5 := v4.Get()
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*loaded-libs*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v5, []any{v8})
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// locking
{
v0 := lang.NewSymbol("locking").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Executes exprs in an implicit do, while holding the monitor of x.\n  Will release the monitor of x in all circumstances.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1643), lang.NewKeyword("end-line"), int(1643))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("glojure.core/let")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("apply"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("vector"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{lang.NewSymbol("lockee__0__auto__")})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v5})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v22, []any{v25, v41})
v43 := lang.Apply(v19, []any{v42})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("seq"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("concat"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("list"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{lang.NewSymbol("try")})
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("seq"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("concat"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("list"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{lang.NewSymbol("glojure.core/let")})
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("list"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("apply"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("vector"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("seq"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("concat"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("list"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.Apply(v87, []any{lang.NewSymbol("locklocal__1__auto__")})
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("list"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.Apply(v91, []any{lang.NewSymbol("lockee__0__auto__")})
v93 := lang.Apply(v84, []any{v88, v92})
v94 := lang.Apply(v81, []any{v93})
v95 := lang.Apply(v75, []any{v78, v94})
v96 := lang.Apply(v72, []any{v95})
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("list"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("seq"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("concat"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("list"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{lang.NewSymbol("monitor-enter")})
v110 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v111 := v110.FindInternedVar(lang.NewSymbol("list"))
if v111.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v111)))
}
v112 := v111.Get()
v113 := lang.Apply(v112, []any{lang.NewSymbol("locklocal__1__auto__")})
v114 := lang.Apply(v105, []any{v109, v113})
v115 := lang.Apply(v102, []any{v114})
v116 := lang.Apply(v99, []any{v115})
v117 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v118 := v117.FindInternedVar(lang.NewSymbol("list"))
if v118.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v118)))
}
v119 := v118.Get()
v120 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v121 := v120.FindInternedVar(lang.NewSymbol("seq"))
if v121.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v121)))
}
v122 := v121.Get()
v123 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v124 := v123.FindInternedVar(lang.NewSymbol("concat"))
if v124.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v124)))
}
v125 := v124.Get()
v126 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v127 := v126.FindInternedVar(lang.NewSymbol("list"))
if v127.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v127)))
}
v128 := v127.Get()
v129 := lang.Apply(v128, []any{lang.NewSymbol("try")})
v130 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v131 := v130.FindInternedVar(lang.NewSymbol("list"))
if v131.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v131)))
}
v132 := v131.Get()
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("seq"))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v137 := v136.FindInternedVar(lang.NewSymbol("concat"))
if v137.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v137)))
}
v138 := v137.Get()
v139 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v140 := v139.FindInternedVar(lang.NewSymbol("list"))
if v140.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v140)))
}
v141 := v140.Get()
v142 := lang.Apply(v141, []any{lang.NewSymbol("finally")})
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("list"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("seq"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v150 := v149.FindInternedVar(lang.NewSymbol("concat"))
if v150.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v150)))
}
v151 := v150.Get()
v152 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v153 := v152.FindInternedVar(lang.NewSymbol("list"))
if v153.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v153)))
}
v154 := v153.Get()
v155 := lang.Apply(v154, []any{lang.NewSymbol("monitor-exit")})
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("list"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
v159 := lang.Apply(v158, []any{lang.NewSymbol("locklocal__1__auto__")})
v160 := lang.Apply(v151, []any{v155, v159})
v161 := lang.Apply(v148, []any{v160})
v162 := lang.Apply(v145, []any{v161})
v163 := lang.Apply(v138, []any{v142, v162})
v164 := lang.Apply(v135, []any{v163})
v165 := lang.Apply(v132, []any{v164})
v166 := lang.Apply(v125, []any{v129, v6, v165})
v167 := lang.Apply(v122, []any{v166})
v168 := lang.Apply(v119, []any{v167})
v169 := lang.Apply(v65, []any{v69, v96, v116, v168})
v170 := lang.Apply(v62, []any{v169})
v171 := lang.Apply(v59, []any{v170})
v172 := lang.Apply(v52, []any{v56, v171})
v173 := lang.Apply(v49, []any{v172})
v174 := lang.Apply(v46, []any{v173})
v175 := lang.Apply(v12, []any{v16, v43, v174})
v176 := lang.Apply(v9, []any{v175})
return v176
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// long
{
var v1 lang.FnFunc
{ // function long__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/LongCast")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("long").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to long", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3481), lang.NewKeyword("end-line"), int(3481))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.LongCast, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// long-array
{
var v1 lang.FnFunc
{ // function long-array__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/longArray")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("glojure.core/unquote-splicing")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{lang.NewSymbol("glojure.core/args")})
v39 := lang.Apply(v30, []any{v34, v38})
v40 := lang.Apply(v27, []any{v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v21, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
  }
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("long-array").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("size-or-seq")), lang.NewVector(lang.NewSymbol("size"), lang.NewSymbol("init-val-or-seq"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Creates an array of longs", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)int64(2)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5364), lang.NewKeyword("end-line"), int(5364))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "longArray")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("longArray is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "longArrayInit")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("longArrayInit is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// longs
{
var v1 lang.FnFunc
{ // function longs
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/longs")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v9, []any{v13, v17, v21, v25})
v27 := lang.Apply(v6, []any{v26})
return v27
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("longs").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("xs"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Casts to long[]", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(12), lang.NewKeyword("line"), int(5407), lang.NewKeyword("end-line"), int(5407))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "longs")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("longs is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// loop
{
v0 := lang.NewSymbol("loop").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.", lang.NewKeyword("forms"), lang.NewVector(lang.NewList(lang.NewSymbol("loop"), lang.NewVector(lang.NewSymbol("bindings*")), lang.NewSymbol("exprs*"))), lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4597), lang.NewKeyword("end-line"), int(4597), lang.NewKeyword("special-form"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("vector?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
if lang.IsTruthy(v11) {
v7 = nil
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("str"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("*ns*"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(lang.NewKeyword("line"), []any{v25})
v27 := lang.Apply(v14, []any{v18, " requires ", "a vector for its binding", " in ", v21, ":", v26})
v28 := lang.Apply(lang.NewIllegalArgumentError, []any{v27})
panic(v28)
}
_ = v7
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("even?"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v37 := lang.Apply(v32, []any{v36})
if lang.IsTruthy(v37) {
v29 = nil
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("first"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("*ns*"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("meta"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(lang.NewKeyword("line"), []any{v51})
v53 := lang.Apply(v40, []any{v44, " requires ", "an even number of forms in binding vector", " in ", v47, ":", v52})
v54 := lang.Apply(lang.NewIllegalArgumentError, []any{v53})
panic(v54)
}
_ = v29
_ = nil
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("destructure"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{v5})
var v55 any = v59
_ = v55
var v61 any
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("="))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{v55, v5})
if lang.IsTruthy(v65) {
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("seq"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("concat"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("list"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v74, []any{lang.NewSymbol("loop*")})
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("list"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.Apply(v78, []any{v5})
v80 := lang.Apply(v71, []any{v75, v79, v6})
v81 := lang.Apply(v68, []any{v80})
v61 = v81
} else {
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("take-nth"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("drop"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.Apply(v88, []any{int64(1), v5})
v90 := lang.Apply(v85, []any{int64(2), v89})
var v82 any = v90
_ = v82
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("take-nth"))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.Apply(v94, []any{int64(2), v5})
var v91 any = v95
_ = v91
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("map"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
var v100 lang.FnFunc
v100 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v101 := args[0]
var v102 any
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("symbol?"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.Apply(v105, []any{v101})
if lang.IsTruthy(v106) {
v102 = v101
} else {
v107 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v108 := v107.FindInternedVar(lang.NewSymbol("gensym"))
if v108.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v108)))
}
v109 := v108.Get()
v110 := lang.Apply(v109, nil)
v102 = v110
}
return v102
})
v101 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4611), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(4611), lang.NewKeyword("end-column"), int(58))
v102, err := lang.WithMeta(v100, v101.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v103 := lang.Apply(v99, []any{v102, v91})
var v96 any = v103
_ = v96
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("reduce1"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
var v108 lang.FnFunc
v108 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v109 := args[0]
v110 := args[1]
var v111 any = v110
_ = v111
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("nth"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.Apply(v115, []any{v111, int64(0), nil})
var v112 any = v116
_ = v112
v118 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v119 := v118.FindInternedVar(lang.NewSymbol("nth"))
if v119.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v119)))
}
v120 := v119.Get()
v121 := lang.Apply(v120, []any{v111, int64(1), nil})
var v117 any = v121
_ = v117
v123 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v124 := v123.FindInternedVar(lang.NewSymbol("nth"))
if v124.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v124)))
}
v125 := v124.Get()
v126 := lang.Apply(v125, []any{v111, int64(2), nil})
var v122 any = v126
_ = v122
var v128 any
v129 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v130 := v129.FindInternedVar(lang.NewSymbol("symbol?"))
if v130.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v130)))
}
v131 := v130.Get()
v132 := lang.Apply(v131, []any{v112})
if lang.IsTruthy(v132) {
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("conj"))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.Apply(v135, []any{v109, v122, v117})
v128 = v136
} else {
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("conj"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.Apply(v139, []any{v109, v122, v117, v112, v122})
v128 = v140
}
return v128
})
v109 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4612), lang.NewKeyword("column"), int(28), lang.NewKeyword("end-line"), int(4615), lang.NewKeyword("end-column"), int(50))
v110, err := lang.WithMeta(v108, v109.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v111 := lang.NewVector()
v112 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4616), lang.NewKeyword("column"), int(27), lang.NewKeyword("end-line"), int(4616), lang.NewKeyword("end-column"), int(28))
v113, err := lang.WithMeta(v111, v112.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v114 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v115 := v114.FindInternedVar(lang.NewSymbol("map"))
if v115.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v115)))
}
v116 := v115.Get()
v117 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v118 := v117.FindInternedVar(lang.NewSymbol("vector"))
if v118.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v118)))
}
v119 := v118.Get()
v120 := lang.Apply(v116, []any{v119, v91, v82, v96})
v121 := lang.Apply(v107, []any{v110, v113, v120})
var v104 any = v121
_ = v104
v123 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v124 := v123.FindInternedVar(lang.NewSymbol("seq"))
if v124.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v124)))
}
v125 := v124.Get()
v126 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v127 := v126.FindInternedVar(lang.NewSymbol("concat"))
if v127.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v127)))
}
v128 := v127.Get()
v129 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v130 := v129.FindInternedVar(lang.NewSymbol("list"))
if v130.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v130)))
}
v131 := v130.Get()
v132 := lang.Apply(v131, []any{lang.NewSymbol("glojure.core/let")})
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("list"))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.Apply(v135, []any{v104})
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("list"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("seq"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("concat"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("list"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.Apply(v148, []any{lang.NewSymbol("loop*")})
v150 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v151 := v150.FindInternedVar(lang.NewSymbol("list"))
if v151.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v151)))
}
v152 := v151.Get()
v153 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v154 := v153.FindInternedVar(lang.NewSymbol("vec"))
if v154.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v154)))
}
v155 := v154.Get()
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("interleave"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
v159 := lang.Apply(v158, []any{v96, v96})
v160 := lang.Apply(v155, []any{v159})
v161 := lang.Apply(v152, []any{v160})
v162 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v163 := v162.FindInternedVar(lang.NewSymbol("list"))
if v163.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v163)))
}
v164 := v163.Get()
v165 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v166 := v165.FindInternedVar(lang.NewSymbol("seq"))
if v166.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v166)))
}
v167 := v166.Get()
v168 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v169 := v168.FindInternedVar(lang.NewSymbol("concat"))
if v169.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v169)))
}
v170 := v169.Get()
v171 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v172 := v171.FindInternedVar(lang.NewSymbol("list"))
if v172.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v172)))
}
v173 := v172.Get()
v174 := lang.Apply(v173, []any{lang.NewSymbol("glojure.core/let")})
v175 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v176 := v175.FindInternedVar(lang.NewSymbol("list"))
if v176.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v176)))
}
v177 := v176.Get()
v178 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v179 := v178.FindInternedVar(lang.NewSymbol("vec"))
if v179.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v179)))
}
v180 := v179.Get()
v181 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v182 := v181.FindInternedVar(lang.NewSymbol("interleave"))
if v182.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v182)))
}
v183 := v182.Get()
v184 := lang.Apply(v183, []any{v91, v96})
v185 := lang.Apply(v180, []any{v184})
v186 := lang.Apply(v177, []any{v185})
v187 := lang.Apply(v170, []any{v174, v186, v6})
v188 := lang.Apply(v167, []any{v187})
v189 := lang.Apply(v164, []any{v188})
v190 := lang.Apply(v145, []any{v149, v161, v189})
v191 := lang.Apply(v142, []any{v190})
v192 := lang.Apply(v139, []any{v191})
v193 := lang.Apply(v128, []any{v132, v136, v192})
v194 := lang.Apply(v125, []any{v193})
v61 = v194
}
return v61
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// macroexpand
{
v0 := lang.NewSymbol("macroexpand").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("form"))), lang.NewKeyword("doc"), "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4025), lang.NewKeyword("end-line"), int(4025))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("macroexpand-1"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("identical?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v4, v3})
if lang.IsTruthy(v14) {
v10 = v3
} else {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("macroexpand"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v4})
v10 = v18
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// macroexpand-1
{
v0 := lang.NewSymbol("macroexpand-1").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("form"))), lang.NewKeyword("doc"), "If form represents a macro form, returns its expansion,\n  else returns form.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4017), lang.NewKeyword("end-line"), int(4017))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(runtime5.Compiler, "macroexpand1")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("macroexpand1 is not a function")))
}
v5 := lang.Apply(v4, []any{v3})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// make-array
{
v0 := lang.NewSymbol("make-array").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("type"), lang.NewSymbol("len")), lang.NewVector(lang.NewSymbol("type"), lang.NewSymbol("dim"), lang.NewSymbol("&"), lang.NewSymbol("more-dims"))), lang.NewKeyword("doc"), "Creates and returns an array of instances of the specified class of\n  the specified dimension(s).  Note that a class object is required.\n  Class objects can be obtained by using their imported or\n  fully-qualified name.  Class objects for the primitive types can be\n  obtained using, e.g., Integer/TYPE.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3985), lang.NewKeyword("end-line"), int(3985))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("int"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v4})
v9, _ := lang.FieldOrMethod(nil, "newInstance")
if reflect.TypeOf(v9).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("newInstance is not a function")))
}
v10 := lang.Apply(v9, []any{v3, v8})
return v10
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("cons"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4, v5})
var v6 any = v10
_ = v6
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("make-array"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15, ok := lang.FieldOrMethod(nil, "TYPE")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", nil, "TYPE")))
}
var v16 any
switch reflect.TypeOf(v15).Kind() {
case reflect.Func:
  v16 = lang.Apply(v15, nil)
default:
  v16 = v15
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("count"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v6})
v21 := lang.Apply(v14, []any{v16, v20})
var v11 any = v21
_ = v11
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("long"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("alength"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v11})
v31 := lang.Apply(v26, []any{v30})
var v23 any = v31
_ = v23
var v33 any = int64(0)
_ = v33
var v34 any
for {
var v35 any
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("<"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v33, v23})
if lang.IsTruthy(v39) {
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("aset-int"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("nth"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v6, v33})
v47 := lang.Apply(v42, []any{v11, v33, v46})
_ = v47
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{v33})
var v48 any = v52
v33 = v48
continue
} else {
v35 = nil
}
v34 = v35
  break
}
_ = v34
v23, _ := lang.FieldOrMethod(nil, "newInstance")
if reflect.TypeOf(v23).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("newInstance is not a function")))
}
v24 := lang.Apply(v23, []any{v3, v11})
return v24
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// make-hierarchy
{
v0 := lang.NewSymbol("make-hierarchy").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Creates a hierarchy object for use with derive, isa? etc.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5507), lang.NewKeyword("end-line"), int(5507))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := lang.NewMap()
v4 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5511), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(5511), lang.NewKeyword("end-column"), int(17))
v5, err := lang.WithMeta(v3, v4.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v6 := lang.NewMap()
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5511), lang.NewKeyword("column"), int(32), lang.NewKeyword("end-line"), int(5511), lang.NewKeyword("end-column"), int(33))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v9 := lang.NewMap()
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5511), lang.NewKeyword("column"), int(46), lang.NewKeyword("end-line"), int(5511), lang.NewKeyword("end-column"), int(47))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v12 := lang.NewMap(lang.NewKeyword("parents"), v5, lang.NewKeyword("descendants"), v8, lang.NewKeyword("ancestors"), v11)
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5511), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(5511), lang.NewKeyword("end-column"), int(48))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v14
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// map
{
v0 := lang.NewSymbol("map").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("c1"), lang.NewSymbol("c2")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("c1"), lang.NewSymbol("c2"), lang.NewSymbol("c3")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("c1"), lang.NewSymbol("c2"), lang.NewSymbol("c3"), lang.NewSymbol("&"), lang.NewSymbol("colls"))), lang.NewKeyword("doc"), "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2719), lang.NewKeyword("end-line"), int(2719))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v7 := lang.Apply(v5, nil)
return v7
  case 1:
v7 := args[0]
v8 := lang.Apply(v5, []any{v7})
return v8
  case 2:
v7 := args[0]
v8 := args[1]
v9 := lang.Apply(v3, []any{v8})
v10 := lang.Apply(v5, []any{v7, v9})
return v10
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v7 := args[0]
v8 := args[1]
v9 := lang.NewList(args[2:]...)
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("apply"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3, v8, v9})
v14 := lang.Apply(v5, []any{v7, v13})
return v14
  }
})
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2730), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(2736), lang.NewKeyword("end-column"), int(47))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2729), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(2736), lang.NewKeyword("end-column"), int(48))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
var v13 any = v6
_ = v13
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v13})
if lang.IsTruthy(v19) {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("chunk-first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v13})
var v20 any = v24
_ = v20
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("int"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("count"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v20})
v33 := lang.Apply(v28, []any{v32})
var v25 any = v33
_ = v25
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("chunk-buffer"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v25})
var v34 any = v38
_ = v34
v41 := lang.Apply(lang.LongCast, []any{v25})
var v40 any = v41
_ = v40
var v43 any = int64(0)
_ = v43
var v44 any
for {
var v45 any
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("<"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v43, v40})
if lang.IsTruthy(v49) {
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("chunk-append"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53, _ := lang.FieldOrMethod(v20, "nth")
if reflect.TypeOf(v53).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v54 := lang.Apply(v53, []any{v43})
v55 := lang.Apply(v3, []any{v54})
v56 := lang.Apply(v52, []any{v34, v55})
_ = v56
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.Apply(v60, []any{v43})
var v57 any = v61
v43 = v57
continue
} else {
v45 = nil
}
v44 = v45
  break
}
_ = v44
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("chunk-cons"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("chunk"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v34})
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("map"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v13})
v54 := lang.Apply(v49, []any{v3, v53})
v55 := lang.Apply(v42, []any{v46, v54})
v15 = v55
} else {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("cons"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("first"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v13})
v27 := lang.Apply(v3, []any{v26})
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("map"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("rest"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v13})
v35 := lang.Apply(v30, []any{v3, v34})
v36 := lang.Apply(v22, []any{v27, v35})
v15 = v36
}
v12 = v15
} else {
v12 = nil
}
return v12
})
v6 := lang.Apply(lang.NewLazySeq, []any{v5})
return v6
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
var v7 any = v11
_ = v7
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("seq"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v5})
var v12 any = v16
_ = v12
var v18 any
var v19 any = v7
_ = v19
var v21 any
if lang.IsTruthy(v19) {
v21 = v12
} else {
v21 = v19
}
if lang.IsTruthy(v21) {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("cons"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("first"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v7})
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("first"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v12})
v30 := lang.Apply(v3, []any{v25, v29})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("map"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("rest"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{v7})
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("rest"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v12})
v42 := lang.Apply(v33, []any{v3, v37, v41})
v43 := lang.Apply(v21, []any{v30, v42})
v18 = v43
} else {
v18 = nil
}
return v18
})
v7 := lang.Apply(lang.NewLazySeq, []any{v6})
return v7
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v4})
var v8 any = v12
_ = v8
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("seq"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5})
var v13 any = v17
_ = v13
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("seq"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v6})
var v18 any = v22
_ = v18
var v24 any
var v25 any = v8
_ = v25
var v27 any
if lang.IsTruthy(v25) {
var v28 any = v13
_ = v28
var v30 any
if lang.IsTruthy(v28) {
v30 = v18
} else {
v30 = v28
}
v27 = v30
} else {
v27 = v25
}
if lang.IsTruthy(v27) {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("cons"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("first"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v8})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("first"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v13})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("first"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v18})
v40 := lang.Apply(v3, []any{v31, v35, v39})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("map"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("rest"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v8})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("rest"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v13})
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("rest"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v18})
v56 := lang.Apply(v43, []any{v3, v47, v51, v55})
v57 := lang.Apply(v27, []any{v40, v56})
v24 = v57
} else {
v24 = nil
}
return v24
})
v8 := lang.Apply(lang.NewLazySeq, []any{v7})
return v8
  default:
    if len(args) < 4 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.NewList(args[4:]...)
var v9 lang.FnFunc
{ // function step
v9 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v11 := args[0]
var v12 lang.FnFunc
v12 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("map"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v16, []any{v19, v11})
var v13 any = v20
_ = v13
var v22 any
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("every?"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("identity"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v25, []any{v28, v13})
if lang.IsTruthy(v29) {
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("cons"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("map"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("first"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v35, []any{v38, v13})
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("map"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("rest"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v42, []any{v45, v13})
v47 := lang.Apply(v10, []any{v46})
v48 := lang.Apply(v32, []any{v39, v47})
v22 = v48
} else {
v22 = nil
}
return v22
})
v13 := lang.Apply(lang.NewLazySeq, []any{v12})
return v13
})
v10 := v9
_ = v10
}
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2761), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(2765), lang.NewKeyword("end-column"), int(68))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v8 any = v11
_ = v8
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("map"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
var v16 lang.FnFunc
v16 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v17 := args[0]
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("apply"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v3, v17})
return v21
})
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2766), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(2766), lang.NewKeyword("end-column"), int(22))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("conj"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v7, v6, v5, v4})
v23 := lang.Apply(v8, []any{v22})
v24 := lang.Apply(v15, []any{v18, v23})
return v24
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// map-entry?
{
v0 := lang.NewSymbol("map-entry?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a map entry", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.8", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1473), lang.NewKeyword("end-line"), int(1473))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{java.util16.Map$Entry, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// map-indexed
{
v0 := lang.NewSymbol("map-indexed").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7309), lang.NewKeyword("end-line"), int(7309))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("volatile!"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{int64(-1)})
var v6 any = v10
_ = v6
var v12 lang.FnFunc
v12 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v13 := lang.Apply(v5, nil)
return v13
  case 1:
v13 := args[0]
v14 := lang.Apply(v5, []any{v13})
return v14
  case 2:
v13 := args[0]
v14 := args[1]
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("inc"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18, ok := lang.FieldOrMethod(v6, "Deref")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "Deref")))
}
var v19 any
switch reflect.TypeOf(v18).Kind() {
case reflect.Func:
  v19 = lang.Apply(v18, nil)
default:
  v19 = v18
}
v20 := lang.Apply(v17, []any{v19})
v21, _ := lang.FieldOrMethod(v6, "reset")
if reflect.TypeOf(v21).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("reset is not a function")))
}
v22 := lang.Apply(v21, []any{v20})
v23 := lang.Apply(v3, []any{v22, v14})
v24 := lang.Apply(v5, []any{v13, v23})
return v24
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7320), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(7324), lang.NewKeyword("end-column"), int(48))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v14
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7318), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(7324), lang.NewKeyword("end-column"), int(50))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
return nil
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// map?
{
v0 := lang.NewSymbol("map?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x implements IPersistentMap", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(5), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(167), lang.NewKeyword("end-line"), int(171))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function map?
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.IPersistentMap, v4})
return v8
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(171), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(171), lang.NewKeyword("end-column"), int(97))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// mapcat
{
v0 := lang.NewSymbol("mapcat").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("colls"))), lang.NewKeyword("doc"), "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2775), lang.NewKeyword("end-line"), int(2775))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("comp"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("map"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("cat"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v6, []any{v10, v13})
return v14
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("apply"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("apply"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("map"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v13, []any{v16, v3, v4})
v18 := lang.Apply(v7, []any{v10, v17})
return v18
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// mapv
{
v0 := lang.NewSymbol("mapv").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("c1"), lang.NewSymbol("c2")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("c1"), lang.NewSymbol("c2"), lang.NewSymbol("c3")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("c1"), lang.NewSymbol("c2"), lang.NewSymbol("c3"), lang.NewSymbol("&"), lang.NewSymbol("colls"))), lang.NewKeyword("doc"), "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.4", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6943), lang.NewKeyword("end-line"), int(6943))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("persistent!"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
var v11 lang.FnFunc
v11 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v12 := args[0]
v13 := args[1]
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("conj!"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v3, []any{v13})
v18 := lang.Apply(v16, []any{v12, v17})
return v18
})
v12 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6952), lang.NewKeyword("column"), int(18), lang.NewKeyword("end-line"), int(6952), lang.NewKeyword("end-column"), int(43))
v13, err := lang.WithMeta(v11, v12.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("transient"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.NewVector()
v18 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6952), lang.NewKeyword("column"), int(56), lang.NewKeyword("end-line"), int(6952), lang.NewKeyword("end-column"), int(57))
v19, err := lang.WithMeta(v17, v18.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v20 := lang.Apply(v16, []any{v19})
v21 := lang.Apply(v10, []any{v13, v20, v4})
v22 := lang.Apply(v7, []any{v21})
return v22
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("into"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.NewVector()
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6955), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(6955), lang.NewKeyword("end-column"), int(13))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("map"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3, v4, v5})
v16 := lang.Apply(v8, []any{v11, v15})
return v16
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("into"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.NewVector()
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6957), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(6957), lang.NewKeyword("end-column"), int(13))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("map"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4, v5, v6})
v17 := lang.Apply(v9, []any{v12, v16})
return v17
  default:
    if len(args) < 4 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.NewList(args[4:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("into"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.NewVector()
v12 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6959), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(6959), lang.NewKeyword("end-column"), int(13))
v13, err := lang.WithMeta(v11, v12.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("apply"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("map"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v16, []any{v19, v3, v4, v5, v6, v7})
v21 := lang.Apply(v10, []any{v13, v20})
return v21
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// max
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed11
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed11
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed11
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("max").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the greatest of the nums.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1108), lang.NewKeyword("end-line"), int(1108))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v5 := args[0]
return v5
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "max")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("max is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("max"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("max"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// max-key
{
v0 := lang.NewSymbol("max-key").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("k"), lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("k"), lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("k"), lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "Returns the x for which (k x), a number, is greatest.\n\n  If there are multiple such xs, the last one is returned.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5013), lang.NewKeyword("end-line"), int(5013))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
return v4
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol(">"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v3, []any{v4})
v11 := lang.Apply(v3, []any{v5})
v12 := lang.Apply(v9, []any{v10, v11})
if lang.IsTruthy(v12) {
v6 = v4
} else {
v6 = v5
}
return v6
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.Apply(v3, []any{v4})
var v7 any = v8
_ = v7
v10 := lang.Apply(v3, []any{v5})
var v9 any = v10
_ = v9
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol(">"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v7, v9})
if lang.IsTruthy(v16) {
v17 := lang.NewVector(v4, v7)
v18 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5023), lang.NewKeyword("column"), int(31), lang.NewKeyword("end-line"), int(5023), lang.NewKeyword("end-column"), int(36))
v19, err := lang.WithMeta(v17, v18.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v12 = v19
} else {
v20 := lang.NewVector(v5, v9)
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5023), lang.NewKeyword("column"), int(38), lang.NewKeyword("end-line"), int(5023), lang.NewKeyword("end-column"), int(43))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v12 = v22
}
var v11 any = v12
_ = v11
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("nth"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v11, int64(0), nil})
var v23 any = v27
_ = v23
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("nth"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v11, int64(1), nil})
var v28 any = v32
_ = v28
var v34 any = v34
_ = v34
var v35 any = v35
_ = v35
var v36 any = v36
_ = v36
var v37 any
for {
var v38 any
if lang.IsTruthy(v36) {
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("first"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v36})
var v39 any = v43
_ = v39
v45 := lang.Apply(v3, []any{v39})
var v44 any = v45
_ = v44
var v47 any
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol(">="))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v44, v35})
if lang.IsTruthy(v51) {
var v52 any = v39
var v53 any = v44
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("next"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{v36})
var v54 any = v58
v34 = v52
v35 = v53
v36 = v54
continue
} else {
var v59 any = v34
var v60 any = v35
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("next"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{v36})
var v61 any = v65
v34 = v59
v35 = v60
v36 = v61
continue
}
v38 = v47
} else {
v38 = v34
}
v37 = v38
  break
}
return v37
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// max-mask-bits
{
v0 := lang.NewSymbol("max-mask-bits").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6601), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(6601), lang.NewKeyword("end-column"), int(28), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, int64(13), true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// max-switch-table-size
{
v0 := lang.NewSymbol("max-switch-table-size").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6602), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(6602), lang.NewKeyword("end-column"), int(36), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, int64(8192), true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// maybe-destructured
{
v0 := lang.NewSymbol("maybe-destructured").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4514), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(4515), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("params"), lang.NewSymbol("body"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("every?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("symbol?"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v8, []any{v11, v3})
if lang.IsTruthy(v12) {
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("cons"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4})
v5 = v16
} else {
var v17 any = v17
_ = v17
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("with-meta"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.NewVector()
v23 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4520), lang.NewKeyword("column"), int(34), lang.NewKeyword("end-line"), int(4520), lang.NewKeyword("end-column"), int(35))
v24, err := lang.WithMeta(v22, v23.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("meta"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v17})
v29 := lang.Apply(v21, []any{v24, v28})
var v18 any = v29
_ = v18
v31 := lang.NewVector()
v32 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4521), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(4521), lang.NewKeyword("end-column"), int(18))
v33, err := lang.WithMeta(v31, v32.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v30 any = v33
_ = v30
var v34 any
for {
var v35 any
if lang.IsTruthy(v17) {
var v36 any
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("symbol?"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("first"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v17})
v44 := lang.Apply(v39, []any{v43})
if lang.IsTruthy(v44) {
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("next"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v17})
var v45 any = v49
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("conj"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("first"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v17})
v58 := lang.Apply(v53, []any{v18, v57})
var v50 any = v58
var v59 any = v30
v17 = v45
v18 = v50
v30 = v59
continue
} else {
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("gensym"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{"p__"})
var v60 any = v64
_ = v60
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("next"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.Apply(v69, []any{v17})
var v66 any = v70
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("conj"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v74, []any{v18, v60})
var v71 any = v75
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("conj"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("conj"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("first"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.Apply(v85, []any{v17})
v87 := lang.Apply(v82, []any{v30, v86})
v88 := lang.Apply(v79, []any{v87, v60})
var v76 any = v88
v17 = v66
v18 = v71
v30 = v76
continue
}
v35 = v36
} else {
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("seq"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("concat"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("list"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{v18})
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("list"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("seq"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("concat"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("list"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.Apply(v81, []any{lang.NewSymbol("glojure.core/let")})
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("list"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.Apply(v85, []any{v30})
v87 := lang.Apply(v78, []any{v82, v86, v4})
v88 := lang.Apply(v75, []any{v87})
v89 := lang.Apply(v72, []any{v88})
v90 := lang.Apply(v65, []any{v69, v89})
v91 := lang.Apply(v62, []any{v90})
v35 = v91
}
v34 = v35
  break
}
v5 = v34
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// maybe-min-hash
{
v0 := lang.NewSymbol("maybe-min-hash").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("hashes"))), lang.NewKeyword("doc"), "takes a collection of hashes and returns [shift mask] or nil if none found", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(6604), lang.NewKeyword("end-line"), int(6604), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("first"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("filter"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
var v10 lang.FnFunc
v10 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v11 := args[0]
var v12 any = v11
_ = v12
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("nth"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v12, int64(0), nil})
var v13 any = v17
_ = v13
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("nth"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v12, int64(1), nil})
var v18 any = v22
_ = v18
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("apply"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("distinct?"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("map"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
var v33 lang.FnFunc
v33 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v34 := args[0]
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("shift-mask"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v13, v18, v34})
return v38
})
v34 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6609), lang.NewKeyword("column"), int(37), lang.NewKeyword("end-line"), int(6609), lang.NewKeyword("end-column"), int(55))
v35, err := lang.WithMeta(v33, v34.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v36 := lang.Apply(v32, []any{v35, v3})
v37 := lang.Apply(v26, []any{v29, v36})
return v37
})
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6608), lang.NewKeyword("column"), int(13), lang.NewKeyword("end-line"), int(6609), lang.NewKeyword("end-column"), int(65))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v14 lang.FnFunc
{ // function iter__154
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v16 := args[0]
var v17 lang.FnFunc
v17 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
var v18 any = v18
_ = v18
var v19 any
for {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v18})
var v20 any = v24
_ = v20
var v26 any
if lang.IsTruthy(v20) {
var v27 any = v20
_ = v27
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("first"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v27})
var v29 any = v33
_ = v29
var v36 lang.FnFunc
{ // function iter__156
v36 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v38 := args[0]
var v39 lang.FnFunc
v39 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
var v40 any = v40
_ = v40
var v41 any
for {
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("seq"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v40})
var v42 any = v46
_ = v42
var v48 any
if lang.IsTruthy(v42) {
var v49 any = v42
_ = v49
var v51 any
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v49})
if lang.IsTruthy(v55) {
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("chunk-first"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v49})
var v56 any = v60
_ = v56
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("int"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("count"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v56})
v69 := lang.Apply(v64, []any{v68})
var v61 any = v69
_ = v61
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("chunk-buffer"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{v61})
var v70 any = v74
_ = v70
var v76 any
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("int"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.Apply(v80, []any{int64(0)})
var v77 any = v81
_ = v77
var v82 any
for {
var v83 any
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("<"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.Apply(v86, []any{v77, v61})
if lang.IsTruthy(v87) {
v89, _ := lang.FieldOrMethod(v56, "nth")
if reflect.TypeOf(v89).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v90 := lang.Apply(v89, []any{v77})
var v88 any = v90
_ = v88
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("chunk-append"))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.NewVector(v88, v29)
v96 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6612), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(6612), lang.NewKeyword("end-column"), int(26))
v97, err := lang.WithMeta(v95, v96.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v98 := lang.Apply(v94, []any{v70, v97})
_ = v98
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.Apply(v102, []any{v77})
var v99 any = v103
v77 = v99
continue
} else {
v83 = true
}
v82 = v83
  break
}
if lang.IsTruthy(v82) {
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("chunk-cons"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("chunk"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.Apply(v82, []any{v70})
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.Apply(v86, []any{v49})
v88 := lang.Apply(v37, []any{v87})
v89 := lang.Apply(v79, []any{v83, v88})
v76 = v89
} else {
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("chunk-cons"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("chunk"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.Apply(v95, []any{v70})
v97 := lang.Apply(v92, []any{v96, nil})
v76 = v97
}
v51 = v76
} else {
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("first"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v49})
var v56 any = v60
_ = v56
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("cons"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.NewVector(v56, v29)
v66 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6612), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(6612), lang.NewKeyword("end-column"), int(26))
v67, err := lang.WithMeta(v65, v66.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("rest"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{v49})
v72 := lang.Apply(v37, []any{v71})
v73 := lang.Apply(v64, []any{v67, v72})
v51 = v73
}
v48 = v51
} else {
v48 = nil
}
v41 = v48
  break
}
return v41
})
v40 := lang.Apply(lang.NewLazySeq, []any{v39})
return v40
})
v37 := v36
_ = v37
}
var v35 any = v36
_ = v35
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("seq"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("range"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{int64(0), int64(31)})
v45 := lang.Apply(v35, []any{v44})
v46 := lang.Apply(v40, []any{v45})
var v37 any = v46
_ = v37
var v48 any
if lang.IsTruthy(v37) {
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("concat"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("rest"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v18})
v56 := lang.Apply(v15, []any{v55})
v57 := lang.Apply(v51, []any{v37, v56})
v48 = v57
} else {
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("rest"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v61, []any{v18})
var v58 any = v62
v18 = v58
continue
}
v26 = v48
} else {
v26 = nil
}
v19 = v26
  break
}
return v19
})
v18 := lang.Apply(lang.NewLazySeq, []any{v17})
return v18
})
v15 := v14
_ = v15
}
var v13 any = v14
_ = v13
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("map"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
var v19 lang.FnFunc
v19 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v20 := args[0]
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("dec"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("bit-shift-left"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{int64(1), v20})
v28 := lang.Apply(v23, []any{v27})
return v28
})
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6610), lang.NewKeyword("column"), int(29), lang.NewKeyword("end-line"), int(6610), lang.NewKeyword("end-column"), int(55))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("range"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("inc"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("max-mask-bits"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v27, []any{v30})
v32 := lang.Apply(v24, []any{int64(1), v31})
v33 := lang.Apply(v18, []any{v21, v32})
v34 := lang.Apply(v13, []any{v33})
v13 := lang.Apply(v9, []any{v12, v34})
v14 := lang.Apply(v6, []any{v13})
return v14
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// memfn
{
v0 := lang.NewSymbol("memfn").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a Java method as\n  a first-class fn. name may be type-hinted with the method receiver's\n  type in order to avoid reflective calls.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(3872), lang.NewKeyword("end-line"), int(3872))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("with-meta"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("gensym"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{"target"})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("meta"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v5})
v19 := lang.Apply(v10, []any{v14, v18})
var v7 any = v19
_ = v7
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/fn")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("apply"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("vector"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("seq"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("concat"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("list"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v7})
v50 := lang.Apply(v45, []any{v49, v6})
v51 := lang.Apply(v42, []any{v50})
v52 := lang.Apply(v36, []any{v39, v51})
v53 := lang.Apply(v33, []any{v52})
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("list"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("seq"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("concat"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("list"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.Apply(v65, []any{lang.NewSymbol(".")})
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("list"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.Apply(v69, []any{v7})
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("list"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("seq"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("concat"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("list"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.Apply(v82, []any{v5})
v84 := lang.Apply(v79, []any{v83, v6})
v85 := lang.Apply(v76, []any{v84})
v86 := lang.Apply(v73, []any{v85})
v87 := lang.Apply(v62, []any{v66, v70, v86})
v88 := lang.Apply(v59, []any{v87})
v89 := lang.Apply(v56, []any{v88})
v90 := lang.Apply(v26, []any{v30, v53, v89})
v91 := lang.Apply(v23, []any{v90})
return v91
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// memoize
{
v0 := lang.NewSymbol("memoize").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"))), lang.NewKeyword("doc"), "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6337), lang.NewKeyword("end-line"), int(6337))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("atom"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.NewMap()
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6345), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(6345), lang.NewKeyword("end-column"), int(20))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v11 := lang.Apply(v7, []any{v10})
var v4 any = v11
_ = v4
var v13 lang.FnFunc
v13 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v14 := lang.NewList(args[0:]...)
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("find"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("deref"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v4})
v23 := lang.Apply(v18, []any{v22, v14})
var v15 any = v23
_ = v15
var v25 any
if lang.IsTruthy(v15) {
var v26 any = v15
_ = v26
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("val"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v26})
v25 = v31
} else {
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("apply"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v3, v14})
var v26 any = v30
_ = v26
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("swap!"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("assoc"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v34, []any{v4, v37, v14, v26})
_ = v38
v25 = v26
}
return v25
  }
})
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6346), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(6351), lang.NewKeyword("end-column"), int(16))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v15
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// merge
{
v0 := lang.NewSymbol("merge").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("maps"))), lang.NewKeyword("doc"), "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3040), lang.NewKeyword("end-line"), int(3040))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("some"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("identity"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v7, []any{v10, v3})
if lang.IsTruthy(v11) {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("reduce1"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
var v15 lang.FnFunc
v15 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v16 := args[0]
v17 := args[1]
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("conj"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
var v21 any = v16
_ = v21
var v23 any
if lang.IsTruthy(v21) {
v23 = v21
} else {
v24 := lang.NewMap()
v25 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3048), lang.NewKeyword("column"), int(28), lang.NewKeyword("end-line"), int(3048), lang.NewKeyword("end-column"), int(29))
v26, err := lang.WithMeta(v24, v25.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v23 = v26
}
v21 := lang.Apply(v20, []any{v23, v17})
return v21
})
v16 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3048), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(3048), lang.NewKeyword("end-column"), int(34))
v17, err := lang.WithMeta(v15, v16.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v18 := lang.Apply(v14, []any{v17, v3})
v4 = v18
} else {
v4 = nil
}
return v4
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// merge-hash-collisions
{
v0 := lang.NewSymbol("merge-hash-collisions").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("expr-sym"), lang.NewSymbol("default"), lang.NewSymbol("tests"), lang.NewSymbol("thens"))), lang.NewKeyword("doc"), "Takes a case expression, default expression, and a sequence of test constants\n  and a corresponding sequence of then expressions. Returns a tuple of\n  [tests thens skip-check-set] where no tests have the same hash. Each set of\n  input test constants with the same hash is replaced with a single test\n  constant (the case int), and their respective thens are combined into:\n  (condp = expr\n    test-1 then-1\n    ...\n    test-n then-n\n    default).\n  The skip-check is a set of case ints for which post-switch equivalence\n  checking must not be done (the cases holding the above condp thens).", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(28), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(6647), lang.NewKeyword("end-line"), int(6647), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 4 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v9 := lang.NewMap()
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6661), lang.NewKeyword("column"), int(26), lang.NewKeyword("end-line"), int(6661), lang.NewKeyword("end-column"), int(27))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v8 any = v11
_ = v8
var v12 any = v5
_ = v12
var v13 any = v6
_ = v13
var v14 any
for {
var v15 any
var v16 any = v12
_ = v16
var v18 any
if lang.IsTruthy(v16) {
v18 = v13
} else {
v18 = v16
}
if lang.IsTruthy(v18) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("update"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("first"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v12})
v24 := lang.Apply(lang.Hash, []any{v23})
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("fnil"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("conj"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.NewVector()
v32 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6664), lang.NewKeyword("column"), int(102), lang.NewKeyword("end-line"), int(6664), lang.NewKeyword("end-column"), int(103))
v33, err := lang.WithMeta(v31, v32.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v34 := lang.Apply(v27, []any{v30, v33})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("first"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v12})
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("first"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v13})
v43 := lang.NewVector(v38, v42)
v44 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6664), lang.NewKeyword("column"), int(106), lang.NewKeyword("end-line"), int(6664), lang.NewKeyword("end-column"), int(128))
v45, err := lang.WithMeta(v43, v44.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v46 := lang.Apply(v19, []any{v8, v24, v34, v45})
var v16 any = v46
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("next"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v12})
var v47 any = v51
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("next"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{v13})
var v52 any = v56
v8 = v16
v12 = v47
v13 = v52
continue
} else {
v15 = v8
}
v14 = v15
  break
}
var v7 any = v14
_ = v7
var v9 lang.FnFunc
v9 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v10 := args[0]
v11 := args[1]
v12 := args[2]
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("mapcat"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
var v17 lang.FnFunc
v17 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v18 := args[0]
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("first"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v18})
v26 := lang.Apply(v21, []any{lang.NewSymbol("quote"), v25})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("second"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v18})
v31 := lang.NewVector(v26, v30)
v32 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6668), lang.NewKeyword("column"), int(56), lang.NewKeyword("end-line"), int(6668), lang.NewKeyword("end-column"), int(93))
v33, err := lang.WithMeta(v31, v32.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v33
})
v18 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6668), lang.NewKeyword("column"), int(47), lang.NewKeyword("end-line"), int(6668), lang.NewKeyword("end-column"), int(94))
v19, err := lang.WithMeta(v17, v18.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v20 := lang.Apply(v16, []any{v19, v12})
var v13 any = v20
_ = v13
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/condp")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{lang.NewSymbol("glojure.core/=")})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v3})
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v4})
v44 := lang.Apply(v27, []any{v31, v35, v39, v13, v43})
v45 := lang.Apply(v24, []any{v44})
var v21 any = v45
_ = v21
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("assoc"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v10, v11, v21})
return v50
})
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6667), lang.NewKeyword("column"), int(21), lang.NewKeyword("end-line"), int(6670), lang.NewKeyword("end-column"), int(42))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v8 any = v11
_ = v8
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("reduce1"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
var v16 lang.FnFunc
v16 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v17 := args[0]
v18 := args[1]
var v19 any = v18
_ = v19
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("nth"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v19, int64(0), nil})
var v20 any = v24
_ = v20
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("nth"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v19, int64(1), nil})
var v25 any = v29
_ = v25
var v31 any
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("=="))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("count"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v25})
v39 := lang.Apply(v34, []any{int64(1), v38})
if lang.IsTruthy(v39) {
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("assoc"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("ffirst"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v25})
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("second"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("first"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v25})
v54 := lang.Apply(v49, []any{v53})
v55 := lang.Apply(v42, []any{v17, v46, v54})
v31 = v55
} else {
v56 := lang.Apply(v8, []any{v17, v20, v25})
v31 = v56
}
return v31
})
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6672), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(6675), lang.NewKeyword("end-column"), int(45))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v19 := lang.NewMap()
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6676), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(6676), lang.NewKeyword("end-column"), int(17))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v22 := lang.Apply(v15, []any{v18, v21, v7})
var v12 any = v22
_ = v12
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("into1"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.CreatePersistentTreeSet()
v28 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6680), lang.NewKeyword("column"), int(29), lang.NewKeyword("end-line"), int(6680), lang.NewKeyword("end-column"), int(31))
v29, err := lang.WithMeta(v27, v28.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("map"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("first"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("filter"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
var v39 lang.FnFunc
v39 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v40 := args[0]
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("<"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("count"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("second"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v40})
v51 := lang.Apply(v46, []any{v50})
v52 := lang.Apply(v43, []any{int64(1), v51})
return v52
})
v40 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6678), lang.NewKeyword("column"), int(30), lang.NewKeyword("end-line"), int(6678), lang.NewKeyword("end-column"), int(54))
v41, err := lang.WithMeta(v39, v40.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v42 := lang.Apply(v38, []any{v41, v7})
v43 := lang.Apply(v32, []any{v35, v42})
v44 := lang.Apply(v26, []any{v29, v43})
var v23 any = v44
_ = v23
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("keys"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v12})
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("vals"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v12})
v54 := lang.NewVector(v49, v53, v23)
v55 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6681), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(6681), lang.NewKeyword("end-column"), int(40))
v56, err := lang.WithMeta(v54, v55.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v56
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// merge-with
{
v0 := lang.NewSymbol("merge-with").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("maps"))), lang.NewKeyword("doc"), "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3050), lang.NewKeyword("end-line"), int(3050))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("some"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("identity"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v8, []any{v11, v4})
if lang.IsTruthy(v12) {
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("key"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v16})
var v17 any = v21
_ = v17
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("val"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v16})
var v22 any = v26
_ = v22
var v28 any
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("contains?"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v15, v17})
if lang.IsTruthy(v32) {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("assoc"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("get"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v15, v17})
v40 := lang.Apply(v3, []any{v39, v22})
v41 := lang.Apply(v35, []any{v15, v17, v40})
v28 = v41
} else {
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("assoc"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v15, v17, v22})
v28 = v45
}
return v28
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3059), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(3063), lang.NewKeyword("end-column"), int(23))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v13 any = v16
_ = v13
var v18 lang.FnFunc
v18 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v19 := args[0]
v20 := args[1]
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("reduce1"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
var v24 any = v19
_ = v24
var v26 any
if lang.IsTruthy(v24) {
v26 = v24
} else {
v27 := lang.NewMap()
v28 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3065), lang.NewKeyword("column"), int(34), lang.NewKeyword("end-line"), int(3065), lang.NewKeyword("end-column"), int(35))
v29, err := lang.WithMeta(v27, v28.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v26 = v29
}
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("seq"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v20})
v28 := lang.Apply(v23, []any{v13, v26, v27})
return v28
})
v19 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3064), lang.NewKeyword("column"), int(18), lang.NewKeyword("end-line"), int(3065), lang.NewKeyword("end-column"), int(47))
v20, err := lang.WithMeta(v18, v19.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v17 any = v20
_ = v17
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("reduce1"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v17, v4})
v5 = v25
} else {
v5 = nil
}
return v5
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// meta
{
v0 := lang.NewSymbol("meta").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("obj"))), lang.NewKeyword("doc"), "Returns the metadata of obj, returns nil if there is no metadata.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(5), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(202), lang.NewKeyword("end-line"), int(206))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function meta
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("instance?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{lang.IMeta, v4})
if lang.IsTruthy(v9) {
v10, ok := lang.FieldOrMethod(v4, "Meta")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "Meta")))
}
var v11 any
switch reflect.TypeOf(v10).Kind() {
case reflect.Func:
  v11 = lang.Apply(v10, nil)
default:
  v11 = v10
}
v5 = v11
} else {
v5 = nil
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(206), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(208), lang.NewKeyword("end-column"), int(21))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// methods
{
v0 := lang.NewSymbol("methods").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("multifn"))), lang.NewKeyword("doc"), "Given a multimethod, returns a map of dispatch values -> dispatch fns", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1809), lang.NewKeyword("end-line"), int(1809))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "getMethodTable")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getMethodTable")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// min
{
var v1 lang.FnFunc
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v2 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
if lang.IsTruthy(v7) {
v4 = closed12
} else {
v4 = v3
}
var v3 any = v4
_ = v3
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("concat"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol(".")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v2})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v25, []any{v41})
v43 := lang.Apply(v14, []any{v18, v22, v42})
v44 := lang.Apply(v11, []any{v43})
return v44
  case 2:
v2 := args[0]
v3 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v5 = closed12
} else {
v5 = v4
}
var v4 any = v5
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol(".")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("seq"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("concat"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v4})
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v2})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.Apply(v32, []any{v36, v40, v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v26, []any{v46})
v48 := lang.Apply(v15, []any{v19, v23, v47})
v49 := lang.Apply(v12, []any{v48})
return v49
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v2 := args[0]
v3 := args[1]
v4 := lang.NewList(args[2:]...)
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
if lang.IsTruthy(v9) {
v6 = closed12
} else {
v6 = v5
}
var v5 any = v6
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce1"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v15})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v16})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
return v56
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v5})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v2})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(v39, []any{v43, v47, v51})
v53 := lang.Apply(v36, []any{v52})
v54 := lang.Apply(v33, []any{v53})
v55 := lang.Apply(v22, []any{v26, v30, v54})
v56 := lang.Apply(v19, []any{v55})
v57 := lang.Apply(v13, []any{v16, v56, v4})
return v57
  }
})
v1 = v1.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))).(lang.FnFunc)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "Gt")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Gt is not a function")))
}
v5 := lang.Apply(v4, []any{v3, int64(1)})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v0 := lang.NewSymbol("min").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the least of the nums.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), v2, lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1118), lang.NewKeyword("end-line"), int(1118))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v5 := args[0]
return v5
  case 2:
v5 := args[0]
v6 := args[1]
v7, _ := lang.FieldOrMethod(lang.Numbers, "min")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("min is not a function")))
}
v8 := lang.Apply(v7, []any{v5, v6})
return v8
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v5 := args[0]
v6 := args[1]
v7 := lang.NewList(args[2:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("reduce1"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("min"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("min"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5, v6})
v18 := lang.Apply(v10, []any{v13, v17, v7})
return v18
  }
})
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// min-key
{
v0 := lang.NewSymbol("min-key").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("k"), lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("k"), lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("k"), lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5033), lang.NewKeyword("end-line"), int(5033))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
return v4
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("<"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v3, []any{v4})
v11 := lang.Apply(v3, []any{v5})
v12 := lang.Apply(v9, []any{v10, v11})
if lang.IsTruthy(v12) {
v6 = v4
} else {
v6 = v5
}
return v6
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.Apply(v3, []any{v4})
var v7 any = v8
_ = v7
v10 := lang.Apply(v3, []any{v5})
var v9 any = v10
_ = v9
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("<"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v7, v9})
if lang.IsTruthy(v16) {
v17 := lang.NewVector(v4, v7)
v18 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5043), lang.NewKeyword("column"), int(31), lang.NewKeyword("end-line"), int(5043), lang.NewKeyword("end-column"), int(36))
v19, err := lang.WithMeta(v17, v18.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v12 = v19
} else {
v20 := lang.NewVector(v5, v9)
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5043), lang.NewKeyword("column"), int(38), lang.NewKeyword("end-line"), int(5043), lang.NewKeyword("end-column"), int(43))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v12 = v22
}
var v11 any = v12
_ = v11
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("nth"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v11, int64(0), nil})
var v23 any = v27
_ = v23
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("nth"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v11, int64(1), nil})
var v28 any = v32
_ = v28
var v34 any = v34
_ = v34
var v35 any = v35
_ = v35
var v36 any = v36
_ = v36
var v37 any
for {
var v38 any
if lang.IsTruthy(v36) {
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("first"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v36})
var v39 any = v43
_ = v39
v45 := lang.Apply(v3, []any{v39})
var v44 any = v45
_ = v44
var v47 any
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("<="))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v44, v35})
if lang.IsTruthy(v51) {
var v52 any = v39
var v53 any = v44
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("next"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{v36})
var v54 any = v58
v34 = v52
v35 = v53
v36 = v54
continue
} else {
var v59 any = v34
var v60 any = v35
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("next"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{v36})
var v61 any = v65
v34 = v59
v35 = v60
v36 = v61
continue
}
v38 = v47
} else {
v38 = v34
}
v37 = v38
  break
}
return v37
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// mix-collection-hash
{
v0 := lang.NewSymbol("mix-collection-hash").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("hash-basis"), lang.NewSymbol("count"))), lang.NewKeyword("doc"), "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://glojure.org/data_structures#hash for full algorithms.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.6", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5199), lang.NewKeyword("end-line"), int(5199))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.Apply(nil, []any{v3, v4})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// mk-bound-fn
{
v0 := lang.NewSymbol("mk-bound-fn").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5127), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(5127), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("sc"), lang.NewSymbol("test"), lang.NewSymbol("key"))), lang.NewKeyword("private"), true, lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := args[0]
v8, ok := lang.FieldOrMethod(v3, "comparator")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "comparator")))
}
var v9 any
switch reflect.TypeOf(v8).Kind() {
case reflect.Func:
  v9 = lang.Apply(v8, nil)
default:
  v9 = v8
}
v10, _ := lang.FieldOrMethod(v3, "entryKey")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("entryKey is not a function")))
}
v11 := lang.Apply(v10, []any{v7})
v12, _ := lang.FieldOrMethod(v9, "compare")
if reflect.TypeOf(v12).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("compare is not a function")))
}
v13 := lang.Apply(v12, []any{v11, v5})
v14 := lang.Apply(v4, []any{v13, int64(0)})
return v14
})
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5130), lang.NewKeyword("column"), int(3), lang.NewKeyword("end-line"), int(5131), lang.NewKeyword("end-column"), int(64))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// mod
{
v0 := lang.NewSymbol("mod").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("num"), lang.NewSymbol("div"))), lang.NewKeyword("doc"), "Modulus of num and div. Truncates toward negative infinity.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3567), lang.NewKeyword("end-line"), int(3567))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("rem"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3, v4})
var v5 any = v9
_ = v5
var v11 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("zero?"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v5})
var v12 any = v16
_ = v12
var v18 any
if lang.IsTruthy(v12) {
v18 = v12
} else {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("="))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("pos?"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("pos?"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v4})
v30 := lang.Apply(v21, []any{v25, v29})
v18 = v30
}
if lang.IsTruthy(v18) {
v11 = v5
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("+"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v5, v4})
v11 = v15
}
return v11
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// name
{
v1 := reflect.TypeOf("")
v0 := lang.NewSymbol("name").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns the name String of a string, symbol or keyword.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1585), lang.NewKeyword("end-line"), int(1585))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("string?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
v5 = v4
} else {
v10, _ := lang.FieldOrMethod(v4, "Name")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Name is not a function")))
}
v11 := lang.Apply(v10, []any{})
v5 = v11
}
return v5
})
v4 := reflect.TypeOf("")
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// namespace
{
v1 := reflect.TypeOf("")
v0 := lang.NewSymbol("namespace").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns the namespace String of a symbol or keyword, or nil if not present.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1593), lang.NewKeyword("end-line"), int(1593))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(v4, "Namespace")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Namespace is not a function")))
}
v6 := lang.Apply(v5, []any{})
return v6
})
v4 := reflect.TypeOf("")
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// nary-inline
{
v0 := lang.NewSymbol("nary-inline").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(948), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(948), lang.NewKeyword("end-column"), int(27), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("op")), lang.NewVector(lang.NewSymbol("op"), lang.NewSymbol("unchecked-op"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("nary-inline"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3, v3})
return v7
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v6 := args[0]
var v8 any
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
if lang.IsTruthy(v11) {
v8 = v4
} else {
v8 = v7
}
var v7 any = v8
_ = v7
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("seq"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("concat"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.NewSymbol(".")})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("seq"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("concat"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v7})
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v6})
v44 := lang.Apply(v35, []any{v39, v43})
v45 := lang.Apply(v32, []any{v44})
v46 := lang.Apply(v29, []any{v45})
v47 := lang.Apply(v18, []any{v22, v26, v46})
v48 := lang.Apply(v15, []any{v47})
return v48
  case 2:
v6 := args[0]
v7 := args[1]
var v9 any
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
if lang.IsTruthy(v12) {
v9 = v4
} else {
v9 = v8
}
var v8 any = v9
_ = v8
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("seq"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("concat"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{lang.NewSymbol(".")})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("seq"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("concat"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v8})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v6})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("list"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v7})
v49 := lang.Apply(v36, []any{v40, v44, v48})
v50 := lang.Apply(v33, []any{v49})
v51 := lang.Apply(v30, []any{v50})
v52 := lang.Apply(v19, []any{v23, v27, v51})
v53 := lang.Apply(v16, []any{v52})
return v53
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v6 := args[0]
v7 := args[1]
v8 := lang.NewList(args[2:]...)
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
if lang.IsTruthy(v13) {
v10 = v4
} else {
v10 = v9
}
var v9 any = v10
_ = v9
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("reduce1"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
var v18 lang.FnFunc
v18 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v19 := args[0]
v20 := args[1]
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol(".")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("seq"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("concat"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v9})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v19})
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("list"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v20})
v56 := lang.Apply(v43, []any{v47, v51, v55})
v57 := lang.Apply(v40, []any{v56})
v58 := lang.Apply(v37, []any{v57})
v59 := lang.Apply(v26, []any{v30, v34, v58})
v60 := lang.Apply(v23, []any{v59})
return v60
})
v19 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(959), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(959), lang.NewKeyword("end-column"), int(88))
v20, err := lang.WithMeta(v18, v19.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol(".")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("seq"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("concat"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v9})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v6})
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("list"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v7})
v56 := lang.Apply(v43, []any{v47, v51, v55})
v57 := lang.Apply(v40, []any{v56})
v58 := lang.Apply(v37, []any{v57})
v59 := lang.Apply(v26, []any{v30, v34, v58})
v60 := lang.Apply(v23, []any{v59})
v61 := lang.Apply(v17, []any{v20, v60, v8})
return v61
  }
})
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(951), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(960), lang.NewKeyword("end-column"), int(86))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// nat-int?
{
v0 := lang.NewSymbol("nat-int?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a non-negative fixed precision integer", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1415), lang.NewKeyword("end-line"), int(1415))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("int?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("not"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("neg?"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3})
v18 := lang.Apply(v13, []any{v17})
v10 = v18
} else {
v10 = v4
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// neg-int?
{
v0 := lang.NewSymbol("neg-int?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a negative fixed precision integer", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1409), lang.NewKeyword("end-line"), int(1409))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("int?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("neg?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3})
v10 = v14
} else {
v10 = v4
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// neg?
{
var v1 lang.FnFunc
{ // function neg?__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/isNeg")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("neg?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("num"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns true if num is less than zero, else false", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1259), lang.NewKeyword("end-line"), int(1259))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "isNeg")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("isNeg is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// newline
{
v0 := lang.NewSymbol("newline").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Writes a platform-specific newline to *out*", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3698), lang.NewKeyword("end-line"), int(3698))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v4 := v3.FindInternedVar(lang.NewSymbol("*out*"))
if v4.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v4)))
}
v5 := v4.Get()
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("system-newline"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(lang.AppendWriter, []any{v5, v8})
_ = v9
return nil
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// next
{
v1 := reflect.TypeOf((*lang.ISeq)(nil)).Elem()
v0 := lang.NewSymbol("next").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(5), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(55), lang.NewKeyword("end-line"), int(61))).(*lang.Symbol)
var v3 lang.FnFunc
{ // function next
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v6 := lang.Apply(lang.Next, []any{v5})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(61), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(61), lang.NewKeyword("end-column"), int(77))).(lang.FnFunc)
v4 := v3
_ = v4
}
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// nfirst
{
v0 := lang.NewSymbol("nfirst").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Same as (next (first x))", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(105), lang.NewKeyword("end-line"), int(109))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function nfirst
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("next"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("first"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
v12 := lang.Apply(v7, []any{v11})
return v12
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(109), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(109), lang.NewKeyword("end-column"), int(49))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// nil?
{
v1 := reflect.TypeOf(false)
var v2 lang.FnFunc
{ // function nil?__inliner
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("list"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Identical"), v4, nil})
return v8
})
v3 := v2
_ = v3
}
v0 := lang.NewSymbol("nil?").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v2, lang.NewKeyword("doc"), "Returns true if x is nil, false otherwise.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(435), lang.NewKeyword("end-line"), int(435))).(*lang.Symbol)
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v6 := lang.Apply(lang.IsNil, []any{v5})
return v6
})
v5 := reflect.TypeOf(false)
v4 = v4.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v5)).(lang.FnFunc)
v3 := ns.InternWithValue(v0, v4, true)
if v0.Meta() != nil {
	v3.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// nnext
{
v0 := lang.NewSymbol("nnext").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Same as (next (next x))", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(6), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(119), lang.NewKeyword("end-line"), int(123))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function nnext
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("next"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("next"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
v12 := lang.Apply(v7, []any{v11})
return v12
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(123), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(123), lang.NewKeyword("end-column"), int(46))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// normalize-slurp-opts
{
v0 := lang.NewSymbol("normalize-slurp-opts").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6974), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(6974), lang.NewKeyword("end-column"), int(27), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("opts"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("string?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("first"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
v12 := lang.Apply(v7, []any{v11})
if lang.IsTruthy(v12) {
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("println"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{"WARNING: (slurp f enc) is deprecated, use (slurp f :encoding enc)."})
_ = v16
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("first"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v3})
v21 := lang.NewVector(lang.NewKeyword("encoding"), v20)
v22 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6979), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(6979), lang.NewKeyword("end-column"), int(30))
v23, err := lang.WithMeta(v21, v22.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v4 = v23
} else {
v4 = v3
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// not
{
v1 := reflect.TypeOf(false)
v0 := lang.NewSymbol("not").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x is logical false, false otherwise.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(523), lang.NewKeyword("end-line"), int(523))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
var v5 any
if lang.IsTruthy(v4) {
v5 = false
} else {
v5 = true
}
return v5
})
v4 := reflect.TypeOf(false)
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// not-any?
{
v1 := reflect.TypeOf(false)
v0 := lang.NewSymbol("not-any?").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns false if (pred x) is logical true for any x in coll,\n  else true.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(2696), lang.NewKeyword("end-line"), int(2701))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v4 := lang.Apply(closed14, nil)
v5 := lang.Apply(closed13, []any{v4})
return v5
  case 1:
v4 := args[0]
v5 := lang.Apply(closed14, []any{v4})
v6 := lang.Apply(closed13, []any{v5})
return v6
  case 2:
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(closed14, []any{v4, v5})
v7 := lang.Apply(closed13, []any{v6})
return v7
  case 3:
v4 := args[0]
v5 := args[1]
v6 := args[2]
v7 := lang.Apply(closed14, []any{v4, v5, v6})
v8 := lang.Apply(closed13, []any{v7})
return v8
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := args[2]
v7 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("apply"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{closed14, v4, v5, v6, v7})
v12 := lang.Apply(closed13, []any{v11})
return v12
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2559), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(2564), lang.NewKeyword("end-column"), int(49))).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// not-empty
{
v0 := lang.NewSymbol("not-empty").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "If coll is empty, returns nil, else coll", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5516), lang.NewKeyword("end-line"), int(5516))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v4 = v3
} else {
v4 = nil
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// not-every?
{
v1 := reflect.TypeOf(false)
v0 := lang.NewSymbol("not-every?").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns false if (pred x) is logical true for every x in\n  coll, else true.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(2677), lang.NewKeyword("end-line"), int(2682))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v4 := lang.Apply(closed15, nil)
v5 := lang.Apply(closed13, []any{v4})
return v5
  case 1:
v4 := args[0]
v5 := lang.Apply(closed15, []any{v4})
v6 := lang.Apply(closed13, []any{v5})
return v6
  case 2:
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(closed15, []any{v4, v5})
v7 := lang.Apply(closed13, []any{v6})
return v7
  case 3:
v4 := args[0]
v5 := args[1]
v6 := args[2]
v7 := lang.Apply(closed15, []any{v4, v5, v6})
v8 := lang.Apply(closed13, []any{v7})
return v8
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := args[2]
v7 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("apply"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{closed15, v4, v5, v6, v7})
v12 := lang.Apply(closed13, []any{v11})
return v12
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2559), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(2564), lang.NewKeyword("end-column"), int(49))).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// not=
{
v1 := reflect.TypeOf(false)
v0 := lang.NewSymbol("not=").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "Same as (not (= obj1 obj2))", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(812), lang.NewKeyword("end-line"), int(812))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
return false
  case 2:
v4 := args[0]
v5 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("not"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("="))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v4, v5})
v13 := lang.Apply(v8, []any{v12})
return v13
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := args[1]
v6 := lang.NewList(args[2:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("not"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("apply"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("="))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v12, []any{v15, v4, v5, v6})
v17 := lang.Apply(v9, []any{v16})
return v17
  }
})
v4 := reflect.TypeOf(false)
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ns
{
v0 := lang.NewSymbol("ns").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name"), lang.NewSymbol("docstring?"), lang.NewSymbol("attr-map?"), lang.NewSymbol("references*"))), lang.NewKeyword("doc"), "Sets *ns* to the namespace named by name (unevaluated), creating it\n  if needed.  references can be zero or more of: (:refer-glojure ...)\n  (:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)\n  with the syntax of refer-glojure/require/use/import/load/gen-class\n  respectively, except the arguments are unevaluated and need not be\n  quoted. (:gen-class ...), when supplied, defaults to :name\n  corresponding to the ns name, :main true, :impl-ns same as ns, and\n  :init-impl-ns true. All options of gen-class are\n  supported. The :gen-class directive is ignored when not\n  compiling. If :gen-class is not supplied, when compiled only an\n  nsname__init.class will be generated. If :refer-glojure is not used, a\n  default (refer 'glojure.core) is used.  Use of ns is preferred to\n  individual calls to in-ns/require/use/import:\n\n  (ns foo.bar\n    (:refer-glojure :exclude [ancestors printf])\n    (:require (glojure.contrib sql combinatorics))\n    (:use (my.lib this that))\n    (:import (java.util Date Timer Random)\n             (java.sql Connection Statement)))", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(5742), lang.NewKeyword("end-line"), int(5742))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v8 lang.FnFunc
v8 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := args[0]
var v10 any = v9
_ = v10
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("seq"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v10})
var v11 any = v15
_ = v11
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("first"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v11})
var v16 any = v20
_ = v16
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("next"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v21})
var v21 any = v25
_ = v21
var v26 any = v16
_ = v26
var v27 any = v21
_ = v27
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("seq"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("concat"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("symbol"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("name"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v26})
v45 := lang.Apply(v40, []any{"glojure.core", v44})
v46 := lang.Apply(v37, []any{v45})
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("map"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
var v50 lang.FnFunc
v50 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v51 := args[0]
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("list"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{lang.NewSymbol("quote"), v51})
return v55
})
v51 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5769), lang.NewKeyword("column"), int(21), lang.NewKeyword("end-line"), int(5769), lang.NewKeyword("end-column"), int(36))
v52, err := lang.WithMeta(v50, v51.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v53 := lang.Apply(v49, []any{v52, v27})
v54 := lang.Apply(v34, []any{v46, v53})
v55 := lang.Apply(v31, []any{v54})
return v55
})
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5767), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(5769), lang.NewKeyword("end-column"), int(44))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v7 any = v10
_ = v7
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("string?"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("first"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v6})
v20 := lang.Apply(v15, []any{v19})
if lang.IsTruthy(v20) {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v6})
v12 = v24
} else {
v12 = nil
}
var v11 any = v12
_ = v11
var v26 any
if lang.IsTruthy(v11) {
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("next"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v25})
v26 = v30
} else {
v26 = v25
}
var v25 any = v26
_ = v25
var v32 any
if lang.IsTruthy(v11) {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("vary-meta"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("assoc"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v35, []any{v31, v38, lang.NewKeyword("doc"), v11})
v32 = v39
} else {
v32 = v31
}
var v31 any = v32
_ = v31
var v41 any
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("map?"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("first"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v25})
v49 := lang.Apply(v44, []any{v48})
if lang.IsTruthy(v49) {
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("first"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v25})
v41 = v53
} else {
v41 = nil
}
var v40 any = v41
_ = v40
var v55 any
if lang.IsTruthy(v40) {
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("next"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{v54})
v55 = v59
} else {
v55 = v54
}
var v54 any = v55
_ = v54
var v61 any
if lang.IsTruthy(v40) {
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("vary-meta"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("merge"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v64, []any{v60, v67, v40})
v61 = v68
} else {
v61 = v60
}
var v60 any = v61
_ = v60
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("first"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("filter"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
var v76 lang.FnFunc
v76 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v77 := args[0]
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("="))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("first"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.Apply(v83, []any{v77})
v85 := lang.Apply(v80, []any{lang.NewKeyword("gen-class"), v84})
return v85
})
v77 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5780), lang.NewKeyword("column"), int(41), lang.NewKeyword("end-line"), int(5780), lang.NewKeyword("end-column"), int(65))
v78, err := lang.WithMeta(v76, v77.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v79 := lang.Apply(v75, []any{v78, v54})
v80 := lang.Apply(v72, []any{v79})
var v69 any = v80
_ = v69
var v82 any
if lang.IsTruthy(v69) {
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("list*"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("str"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.Apply(v88, []any{v60})
v90, _ := lang.FieldOrMethod(v89, "replace")
if reflect.TypeOf(v90).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("replace is not a function")))
}
v91 := lang.Apply(v90, []any{lang.NewChar(45), lang.NewChar(95)})
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("next"))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.Apply(v94, []any{v69})
v96 := lang.Apply(v85, []any{lang.NewSymbol("glojure.core/gen-class"), lang.NewKeyword("name"), v91, lang.NewKeyword("impl-ns"), v60, lang.NewKeyword("main"), true, v95})
v82 = v96
} else {
v82 = nil
}
var v81 any = v82
_ = v81
v98 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v99 := v98.FindInternedVar(lang.NewSymbol("remove"))
if v99.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v99)))
}
v100 := v99.Get()
var v101 lang.FnFunc
v101 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v102 := args[0]
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("="))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("first"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{v102})
v110 := lang.Apply(v105, []any{lang.NewKeyword("gen-class"), v109})
return v110
})
v102 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5784), lang.NewKeyword("column"), int(28), lang.NewKeyword("end-line"), int(5784), lang.NewKeyword("end-column"), int(52))
v103, err := lang.WithMeta(v101, v102.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v104 := lang.Apply(v100, []any{v103, v97})
var v97 any = v104
_ = v97
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("meta"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{v60})
var v105 any = v109
_ = v105
v111 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v112 := v111.FindInternedVar(lang.NewSymbol("seq"))
if v112.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v112)))
}
v113 := v112.Get()
v114 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v115 := v114.FindInternedVar(lang.NewSymbol("concat"))
if v115.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v115)))
}
v116 := v115.Get()
v117 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v118 := v117.FindInternedVar(lang.NewSymbol("list"))
if v118.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v118)))
}
v119 := v118.Get()
v120 := lang.Apply(v119, []any{lang.NewSymbol("do")})
v121 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v122 := v121.FindInternedVar(lang.NewSymbol("list"))
if v122.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v122)))
}
v123 := v122.Get()
v124 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v125 := v124.FindInternedVar(lang.NewSymbol("seq"))
if v125.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v125)))
}
v126 := v125.Get()
v127 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v128 := v127.FindInternedVar(lang.NewSymbol("concat"))
if v128.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v128)))
}
v129 := v128.Get()
v130 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v131 := v130.FindInternedVar(lang.NewSymbol("list"))
if v131.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v131)))
}
v132 := v131.Get()
v133 := lang.Apply(v132, []any{lang.NewSymbol("glojure.core/in-ns")})
v134 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v135 := v134.FindInternedVar(lang.NewSymbol("list"))
if v135.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v135)))
}
v136 := v135.Get()
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("seq"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("concat"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("list"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.Apply(v145, []any{lang.NewSymbol("quote")})
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("list"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.Apply(v149, []any{v60})
v151 := lang.Apply(v142, []any{v146, v150})
v152 := lang.Apply(v139, []any{v151})
v153 := lang.Apply(v136, []any{v152})
v154 := lang.Apply(v129, []any{v133, v153})
v155 := lang.Apply(v126, []any{v154})
v156 := lang.Apply(v123, []any{v155})
var v157 any
if lang.IsTruthy(v105) {
v158 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v159 := v158.FindInternedVar(lang.NewSymbol("seq"))
if v159.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v159)))
}
v160 := v159.Get()
v161 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v162 := v161.FindInternedVar(lang.NewSymbol("concat"))
if v162.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v162)))
}
v163 := v162.Get()
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("list"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v168 := v167.FindInternedVar(lang.NewSymbol("seq"))
if v168.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v168)))
}
v169 := v168.Get()
v170 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v171 := v170.FindInternedVar(lang.NewSymbol("concat"))
if v171.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v171)))
}
v172 := v171.Get()
v173 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v174 := v173.FindInternedVar(lang.NewSymbol("list"))
if v174.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v174)))
}
v175 := v174.Get()
v176 := lang.Apply(v175, []any{lang.NewSymbol(".ResetMeta")})
v177 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v178 := v177.FindInternedVar(lang.NewSymbol("list"))
if v178.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v178)))
}
v179 := v178.Get()
v180 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v181 := v180.FindInternedVar(lang.NewSymbol("seq"))
if v181.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v181)))
}
v182 := v181.Get()
v183 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v184 := v183.FindInternedVar(lang.NewSymbol("concat"))
if v184.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v184)))
}
v185 := v184.Get()
v186 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v187 := v186.FindInternedVar(lang.NewSymbol("list"))
if v187.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v187)))
}
v188 := v187.Get()
v189 := lang.Apply(v188, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.FindNamespace")})
v190 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v191 := v190.FindInternedVar(lang.NewSymbol("list"))
if v191.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v191)))
}
v192 := v191.Get()
v193 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v194 := v193.FindInternedVar(lang.NewSymbol("seq"))
if v194.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v194)))
}
v195 := v194.Get()
v196 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v197 := v196.FindInternedVar(lang.NewSymbol("concat"))
if v197.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v197)))
}
v198 := v197.Get()
v199 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v200 := v199.FindInternedVar(lang.NewSymbol("list"))
if v200.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v200)))
}
v201 := v200.Get()
v202 := lang.Apply(v201, []any{lang.NewSymbol("quote")})
v203 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v204 := v203.FindInternedVar(lang.NewSymbol("list"))
if v204.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v204)))
}
v205 := v204.Get()
v206 := lang.Apply(v205, []any{v60})
v207 := lang.Apply(v198, []any{v202, v206})
v208 := lang.Apply(v195, []any{v207})
v209 := lang.Apply(v192, []any{v208})
v210 := lang.Apply(v185, []any{v189, v209})
v211 := lang.Apply(v182, []any{v210})
v212 := lang.Apply(v179, []any{v211})
v213 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v214 := v213.FindInternedVar(lang.NewSymbol("list"))
if v214.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v214)))
}
v215 := v214.Get()
v216 := lang.Apply(v215, []any{v105})
v217 := lang.Apply(v172, []any{v176, v212, v216})
v218 := lang.Apply(v169, []any{v217})
v219 := lang.Apply(v166, []any{v218})
v220 := lang.Apply(v163, []any{v219})
v221 := lang.Apply(v160, []any{v220})
v157 = v221
} else {
v157 = nil
}
v222 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v223 := v222.FindInternedVar(lang.NewSymbol("list"))
if v223.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v223)))
}
v224 := v223.Get()
v225 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v226 := v225.FindInternedVar(lang.NewSymbol("seq"))
if v226.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v226)))
}
v227 := v226.Get()
v228 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v229 := v228.FindInternedVar(lang.NewSymbol("concat"))
if v229.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v229)))
}
v230 := v229.Get()
v231 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v232 := v231.FindInternedVar(lang.NewSymbol("list"))
if v232.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v232)))
}
v233 := v232.Get()
v234 := lang.Apply(v233, []any{lang.NewSymbol("glojure.core/with-loading-context")})
var v235 any
if lang.IsTruthy(v81) {
v236 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v237 := v236.FindInternedVar(lang.NewSymbol("list"))
if v237.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v237)))
}
v238 := v237.Get()
v239 := lang.Apply(v238, []any{v81})
v235 = v239
} else {
v235 = nil
}
var v240 any
v242 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v243 := v242.FindInternedVar(lang.NewSymbol("not="))
if v243.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v243)))
}
v244 := v243.Get()
v245 := lang.Apply(v244, []any{v60, lang.NewSymbol("glojure.core")})
var v241 any = v245
_ = v241
var v247 any
if lang.IsTruthy(v241) {
v248 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v249 := v248.FindInternedVar(lang.NewSymbol("not-any?"))
if v249.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v249)))
}
v250 := v249.Get()
var v251 lang.FnFunc
v251 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v252 := args[0]
v253 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v254 := v253.FindInternedVar(lang.NewSymbol("="))
if v254.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v254)))
}
v255 := v254.Get()
v256 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v257 := v256.FindInternedVar(lang.NewSymbol("first"))
if v257.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v257)))
}
v258 := v257.Get()
v259 := lang.Apply(v258, []any{v252})
v260 := lang.Apply(v255, []any{lang.NewKeyword("refer-glojure"), v259})
return v260
})
v252 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5793), lang.NewKeyword("column"), int(58), lang.NewKeyword("end-line"), int(5793), lang.NewKeyword("end-column"), int(86))
v253, err := lang.WithMeta(v251, v252.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v254 := lang.Apply(v250, []any{v253, v97})
v247 = v254
} else {
v247 = v241
}
if lang.IsTruthy(v247) {
v241 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v242 := v241.FindInternedVar(lang.NewSymbol("seq"))
if v242.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v242)))
}
v243 := v242.Get()
v244 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v245 := v244.FindInternedVar(lang.NewSymbol("concat"))
if v245.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v245)))
}
v246 := v245.Get()
v247 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v248 := v247.FindInternedVar(lang.NewSymbol("list"))
if v248.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v248)))
}
v249 := v248.Get()
v250 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v251 := v250.FindInternedVar(lang.NewSymbol("seq"))
if v251.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v251)))
}
v252 := v251.Get()
v253 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v254 := v253.FindInternedVar(lang.NewSymbol("concat"))
if v254.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v254)))
}
v255 := v254.Get()
v256 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v257 := v256.FindInternedVar(lang.NewSymbol("list"))
if v257.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v257)))
}
v258 := v257.Get()
v259 := lang.Apply(v258, []any{lang.NewSymbol("glojure.core/refer")})
v260 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v261 := v260.FindInternedVar(lang.NewSymbol("list"))
if v261.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v261)))
}
v262 := v261.Get()
v263 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v264 := v263.FindInternedVar(lang.NewSymbol("seq"))
if v264.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v264)))
}
v265 := v264.Get()
v266 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v267 := v266.FindInternedVar(lang.NewSymbol("concat"))
if v267.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v267)))
}
v268 := v267.Get()
v269 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v270 := v269.FindInternedVar(lang.NewSymbol("list"))
if v270.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v270)))
}
v271 := v270.Get()
v272 := lang.Apply(v271, []any{lang.NewSymbol("quote")})
v273 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v274 := v273.FindInternedVar(lang.NewSymbol("list"))
if v274.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v274)))
}
v275 := v274.Get()
v276 := lang.Apply(v275, []any{lang.NewSymbol("glojure.core")})
v277 := lang.Apply(v268, []any{v272, v276})
v278 := lang.Apply(v265, []any{v277})
v279 := lang.Apply(v262, []any{v278})
v280 := lang.Apply(v255, []any{v259, v279})
v281 := lang.Apply(v252, []any{v280})
v282 := lang.Apply(v249, []any{v281})
v283 := lang.Apply(v246, []any{v282})
v284 := lang.Apply(v243, []any{v283})
v240 = v284
} else {
v240 = nil
}
v285 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v286 := v285.FindInternedVar(lang.NewSymbol("map"))
if v286.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v286)))
}
v287 := v286.Get()
v288 := lang.Apply(v287, []any{v7, v97})
v289 := lang.Apply(v230, []any{v234, v235, v240, v288})
v290 := lang.Apply(v227, []any{v289})
v291 := lang.Apply(v224, []any{v290})
v292 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v293 := v292.FindInternedVar(lang.NewSymbol("list"))
if v293.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v293)))
}
v294 := v293.Get()
v295 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v296 := v295.FindInternedVar(lang.NewSymbol("seq"))
if v296.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v296)))
}
v297 := v296.Get()
v298 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v299 := v298.FindInternedVar(lang.NewSymbol("concat"))
if v299.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v299)))
}
v300 := v299.Get()
v301 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v302 := v301.FindInternedVar(lang.NewSymbol("list"))
if v302.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v302)))
}
v303 := v302.Get()
v304 := lang.Apply(v303, []any{lang.NewSymbol("if")})
v305 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v306 := v305.FindInternedVar(lang.NewSymbol("list"))
if v306.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v306)))
}
v307 := v306.Get()
v308 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v309 := v308.FindInternedVar(lang.NewSymbol("seq"))
if v309.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v309)))
}
v310 := v309.Get()
v311 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v312 := v311.FindInternedVar(lang.NewSymbol("concat"))
if v312.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v312)))
}
v313 := v312.Get()
v314 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v315 := v314.FindInternedVar(lang.NewSymbol("list"))
if v315.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v315)))
}
v316 := v315.Get()
v317 := lang.Apply(v316, []any{lang.NewSymbol(".Equals")})
v318 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v319 := v318.FindInternedVar(lang.NewSymbol("list"))
if v319.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v319)))
}
v320 := v319.Get()
v321 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v322 := v321.FindInternedVar(lang.NewSymbol("seq"))
if v322.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v322)))
}
v323 := v322.Get()
v324 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v325 := v324.FindInternedVar(lang.NewSymbol("concat"))
if v325.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v325)))
}
v326 := v325.Get()
v327 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v328 := v327.FindInternedVar(lang.NewSymbol("list"))
if v328.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v328)))
}
v329 := v328.Get()
v330 := lang.Apply(v329, []any{lang.NewSymbol("quote")})
v331 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v332 := v331.FindInternedVar(lang.NewSymbol("list"))
if v332.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v332)))
}
v333 := v332.Get()
v334 := lang.Apply(v333, []any{v60})
v335 := lang.Apply(v326, []any{v330, v334})
v336 := lang.Apply(v323, []any{v335})
v337 := lang.Apply(v320, []any{v336})
v338 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v339 := v338.FindInternedVar(lang.NewSymbol("list"))
if v339.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v339)))
}
v340 := v339.Get()
v341 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v342 := v341.FindInternedVar(lang.NewSymbol("seq"))
if v342.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v342)))
}
v343 := v342.Get()
v344 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v345 := v344.FindInternedVar(lang.NewSymbol("concat"))
if v345.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v345)))
}
v346 := v345.Get()
v347 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v348 := v347.FindInternedVar(lang.NewSymbol("list"))
if v348.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v348)))
}
v349 := v348.Get()
v350 := lang.Apply(v349, []any{lang.NewSymbol("quote")})
v351 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v352 := v351.FindInternedVar(lang.NewSymbol("list"))
if v352.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v352)))
}
v353 := v352.Get()
v354 := lang.Apply(v353, []any{lang.NewSymbol("glojure.core")})
v355 := lang.Apply(v346, []any{v350, v354})
v356 := lang.Apply(v343, []any{v355})
v357 := lang.Apply(v340, []any{v356})
v358 := lang.Apply(v313, []any{v317, v337, v357})
v359 := lang.Apply(v310, []any{v358})
v360 := lang.Apply(v307, []any{v359})
v361 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v362 := v361.FindInternedVar(lang.NewSymbol("list"))
if v362.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v362)))
}
v363 := v362.Get()
v364 := lang.Apply(v363, []any{nil})
v365 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v366 := v365.FindInternedVar(lang.NewSymbol("list"))
if v366.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v366)))
}
v367 := v366.Get()
v368 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v369 := v368.FindInternedVar(lang.NewSymbol("seq"))
if v369.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v369)))
}
v370 := v369.Get()
v371 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v372 := v371.FindInternedVar(lang.NewSymbol("concat"))
if v372.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v372)))
}
v373 := v372.Get()
v374 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v375 := v374.FindInternedVar(lang.NewSymbol("list"))
if v375.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v375)))
}
v376 := v375.Get()
v377 := lang.Apply(v376, []any{lang.NewSymbol("do")})
v378 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v379 := v378.FindInternedVar(lang.NewSymbol("list"))
if v379.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v379)))
}
v380 := v379.Get()
v381 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v382 := v381.FindInternedVar(lang.NewSymbol("seq"))
if v382.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v382)))
}
v383 := v382.Get()
v384 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v385 := v384.FindInternedVar(lang.NewSymbol("concat"))
if v385.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v385)))
}
v386 := v385.Get()
v387 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v388 := v387.FindInternedVar(lang.NewSymbol("list"))
if v388.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v388)))
}
v389 := v388.Get()
v390 := lang.Apply(v389, []any{lang.NewSymbol("glojure.core/dosync")})
v391 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v392 := v391.FindInternedVar(lang.NewSymbol("list"))
if v392.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v392)))
}
v393 := v392.Get()
v394 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v395 := v394.FindInternedVar(lang.NewSymbol("seq"))
if v395.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v395)))
}
v396 := v395.Get()
v397 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v398 := v397.FindInternedVar(lang.NewSymbol("concat"))
if v398.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v398)))
}
v399 := v398.Get()
v400 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v401 := v400.FindInternedVar(lang.NewSymbol("list"))
if v401.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v401)))
}
v402 := v401.Get()
v403 := lang.Apply(v402, []any{lang.NewSymbol("glojure.core/commute")})
v404 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v405 := v404.FindInternedVar(lang.NewSymbol("list"))
if v405.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v405)))
}
v406 := v405.Get()
v407 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v408 := v407.FindInternedVar(lang.NewSymbol("seq"))
if v408.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v408)))
}
v409 := v408.Get()
v410 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v411 := v410.FindInternedVar(lang.NewSymbol("concat"))
if v411.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v411)))
}
v412 := v411.Get()
v413 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v414 := v413.FindInternedVar(lang.NewSymbol("list"))
if v414.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v414)))
}
v415 := v414.Get()
v416 := lang.Apply(v415, []any{lang.NewSymbol("glojure.core/deref")})
v417 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v418 := v417.FindInternedVar(lang.NewSymbol("list"))
if v418.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v418)))
}
v419 := v418.Get()
v420 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v421 := v420.FindInternedVar(lang.NewSymbol("seq"))
if v421.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v421)))
}
v422 := v421.Get()
v423 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v424 := v423.FindInternedVar(lang.NewSymbol("concat"))
if v424.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v424)))
}
v425 := v424.Get()
v426 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v427 := v426.FindInternedVar(lang.NewSymbol("list"))
if v427.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v427)))
}
v428 := v427.Get()
v429 := lang.Apply(v428, []any{lang.NewSymbol("var")})
v430 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v431 := v430.FindInternedVar(lang.NewSymbol("list"))
if v431.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v431)))
}
v432 := v431.Get()
v433 := lang.Apply(v432, []any{lang.NewSymbol("glojure.core/*loaded-libs*")})
v434 := lang.Apply(v425, []any{v429, v433})
v435 := lang.Apply(v422, []any{v434})
v436 := lang.Apply(v419, []any{v435})
v437 := lang.Apply(v412, []any{v416, v436})
v438 := lang.Apply(v409, []any{v437})
v439 := lang.Apply(v406, []any{v438})
v440 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v441 := v440.FindInternedVar(lang.NewSymbol("list"))
if v441.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v441)))
}
v442 := v441.Get()
v443 := lang.Apply(v442, []any{lang.NewSymbol("glojure.core/conj")})
v444 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v445 := v444.FindInternedVar(lang.NewSymbol("list"))
if v445.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v445)))
}
v446 := v445.Get()
v447 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v448 := v447.FindInternedVar(lang.NewSymbol("seq"))
if v448.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v448)))
}
v449 := v448.Get()
v450 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v451 := v450.FindInternedVar(lang.NewSymbol("concat"))
if v451.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v451)))
}
v452 := v451.Get()
v453 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v454 := v453.FindInternedVar(lang.NewSymbol("list"))
if v454.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v454)))
}
v455 := v454.Get()
v456 := lang.Apply(v455, []any{lang.NewSymbol("quote")})
v457 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v458 := v457.FindInternedVar(lang.NewSymbol("list"))
if v458.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v458)))
}
v459 := v458.Get()
v460 := lang.Apply(v459, []any{v60})
v461 := lang.Apply(v452, []any{v456, v460})
v462 := lang.Apply(v449, []any{v461})
v463 := lang.Apply(v446, []any{v462})
v464 := lang.Apply(v399, []any{v403, v439, v443, v463})
v465 := lang.Apply(v396, []any{v464})
v466 := lang.Apply(v393, []any{v465})
v467 := lang.Apply(v386, []any{v390, v466})
v468 := lang.Apply(v383, []any{v467})
v469 := lang.Apply(v380, []any{v468})
v470 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v471 := v470.FindInternedVar(lang.NewSymbol("list"))
if v471.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v471)))
}
v472 := v471.Get()
v473 := lang.Apply(v472, []any{nil})
v474 := lang.Apply(v373, []any{v377, v469, v473})
v475 := lang.Apply(v370, []any{v474})
v476 := lang.Apply(v367, []any{v475})
v477 := lang.Apply(v300, []any{v304, v360, v364, v476})
v478 := lang.Apply(v297, []any{v477})
v479 := lang.Apply(v294, []any{v478})
v480 := lang.Apply(v116, []any{v120, v156, v157, v291, v479})
v481 := lang.Apply(v113, []any{v480})
return v481
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ns-aliases
{
v0 := lang.NewSymbol("ns-aliases").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns"))), lang.NewKeyword("doc"), "Returns a map of the aliases for the namespace.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4273), lang.NewKeyword("end-line"), int(4273))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("the-ns"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3})
v8, ok := lang.FieldOrMethod(v7, "getAliases")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v7, "getAliases")))
}
var v9 any
switch reflect.TypeOf(v8).Kind() {
case reflect.Func:
  v9 = lang.Apply(v8, nil)
default:
  v9 = v8
}
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ns-imports
{
v0 := lang.NewSymbol("ns-imports").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns"))), lang.NewKeyword("doc"), "Returns a map of the import mappings for the namespace.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4199), lang.NewKeyword("end-line"), int(4199))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("filter-key"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("val"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("partial"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("instance?"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v12, []any{v15, reflect.Type})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("ns-map"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v3})
v21 := lang.Apply(v6, []any{v9, v16, v20})
return v21
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ns-interns
{
v0 := lang.NewSymbol("ns-interns").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns"))), lang.NewKeyword("doc"), "Returns a map of the intern mappings for the namespace.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4206), lang.NewKeyword("end-line"), int(4206))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("the-ns"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v4})
var v4 any = v8
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("filter-key"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("val"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
var v16 lang.FnFunc
v16 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v17 := args[0]
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("instance?"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.*Var, v17})
var v18 any = v22
_ = v18
var v24 any
if lang.IsTruthy(v18) {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("="))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28, ok := lang.FieldOrMethod(v17, "Namespace")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v17, "Namespace")))
}
var v29 any
switch reflect.TypeOf(v28).Kind() {
case reflect.Func:
  v29 = lang.Apply(v28, nil)
default:
  v29 = v28
}
v30 := lang.Apply(v27, []any{v4, v29})
v24 = v30
} else {
v24 = v18
}
return v24
})
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4212), lang.NewKeyword("column"), int(21), lang.NewKeyword("end-line"), int(4213), lang.NewKeyword("end-column"), int(56))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("ns-map"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v4})
v23 := lang.Apply(v12, []any{v15, v18, v22})
return v23
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ns-map
{
v0 := lang.NewSymbol("ns-map").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns"))), lang.NewKeyword("doc"), "Returns a map of all the mappings for the namespace.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4170), lang.NewKeyword("end-line"), int(4170))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("the-ns"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3})
v8, ok := lang.FieldOrMethod(v7, "Mappings")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v7, "Mappings")))
}
var v9 any
switch reflect.TypeOf(v8).Kind() {
case reflect.Func:
  v9 = lang.Apply(v8, nil)
default:
  v9 = v8
}
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ns-name
{
v0 := lang.NewSymbol("ns-name").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns"))), lang.NewKeyword("doc"), "Returns the name of the namespace, a symbol.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4163), lang.NewKeyword("end-line"), int(4163))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("the-ns"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3})
v8, ok := lang.FieldOrMethod(v7, "Name")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v7, "Name")))
}
var v9 any
switch reflect.TypeOf(v8).Kind() {
case reflect.Func:
  v9 = lang.Apply(v8, nil)
default:
  v9 = v8
}
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ns-publics
{
v0 := lang.NewSymbol("ns-publics").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns"))), lang.NewKeyword("doc"), "Returns a map of the public intern mappings for the namespace.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4188), lang.NewKeyword("end-line"), int(4188))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("the-ns"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v4})
var v4 any = v8
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("filter-key"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("val"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
var v16 lang.FnFunc
v16 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v17 := args[0]
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("instance?"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.*Var, v17})
var v18 any = v22
_ = v18
var v24 any
if lang.IsTruthy(v18) {
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("="))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29, ok := lang.FieldOrMethod(v17, "Namespace")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v17, "Namespace")))
}
var v30 any
switch reflect.TypeOf(v29).Kind() {
case reflect.Func:
  v30 = lang.Apply(v29, nil)
default:
  v30 = v29
}
v31 := lang.Apply(v28, []any{v4, v30})
var v25 any = v31
_ = v25
var v33 any
if lang.IsTruthy(v25) {
v34, ok := lang.FieldOrMethod(v17, "IsPublic")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v17, "IsPublic")))
}
var v35 any
switch reflect.TypeOf(v34).Kind() {
case reflect.Func:
  v35 = lang.Apply(v34, nil)
default:
  v35 = v34
}
v33 = v35
} else {
v33 = v25
}
v24 = v33
} else {
v24 = v18
}
return v24
})
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4194), lang.NewKeyword("column"), int(21), lang.NewKeyword("end-line"), int(4196), lang.NewKeyword("end-column"), int(48))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("ns-map"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v4})
v23 := lang.Apply(v12, []any{v15, v18, v22})
return v23
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ns-refers
{
v0 := lang.NewSymbol("ns-refers").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns"))), lang.NewKeyword("doc"), "Returns a map of the refer mappings for the namespace.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4253), lang.NewKeyword("end-line"), int(4253))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("the-ns"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v4})
var v4 any = v8
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("filter-key"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("val"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
var v16 lang.FnFunc
v16 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v17 := args[0]
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("instance?"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{lang.*Var, v17})
var v18 any = v22
_ = v18
var v24 any
if lang.IsTruthy(v18) {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("not="))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28, ok := lang.FieldOrMethod(v17, "Namespace")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v17, "Namespace")))
}
var v29 any
switch reflect.TypeOf(v28).Kind() {
case reflect.Func:
  v29 = lang.Apply(v28, nil)
default:
  v29 = v28
}
v30 := lang.Apply(v27, []any{v4, v29})
v24 = v30
} else {
v24 = v18
}
return v24
})
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4259), lang.NewKeyword("column"), int(21), lang.NewKeyword("end-line"), int(4260), lang.NewKeyword("end-column"), int(59))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("ns-map"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v4})
v23 := lang.Apply(v12, []any{v15, v18, v22})
return v23
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ns-resolve
{
v0 := lang.NewSymbol("ns-resolve").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns"), lang.NewSymbol("sym")), lang.NewVector(lang.NewSymbol("ns"), lang.NewSymbol("env"), lang.NewSymbol("sym"))), lang.NewKeyword("doc"), "Returns the var or Class to which a symbol will be resolved in the\n  namespace (unless found in the environment), else nil.  Note that\n  if the symbol is fully qualified, the var/Class to which it resolves\n  need not be present in the namespace.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4358), lang.NewKeyword("end-line"), int(4358))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("ns-resolve"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3, nil, v4})
return v8
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("contains?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4, v5})
if lang.IsTruthy(v10) {
v6 = nil
} else {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("the-ns"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3})
v15, _ := lang.FieldOrMethod(runtime5.Compiler, "maybeResolveIn")
if reflect.TypeOf(v15).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("maybeResolveIn is not a function")))
}
v16 := lang.Apply(v15, []any{v14, v5})
v6 = v16
}
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ns-unalias
{
v0 := lang.NewSymbol("ns-unalias").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns"), lang.NewSymbol("sym"))), lang.NewKeyword("doc"), "Removes the alias for the symbol from the namespace.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4280), lang.NewKeyword("end-line"), int(4280))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("the-ns"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
v9, _ := lang.FieldOrMethod(v8, "removeAlias")
if reflect.TypeOf(v9).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("removeAlias is not a function")))
}
v10 := lang.Apply(v9, []any{v4})
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ns-unmap
{
v0 := lang.NewSymbol("ns-unmap").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns"), lang.NewSymbol("sym"))), lang.NewKeyword("doc"), "Removes the mappings for the symbol from the namespace.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4177), lang.NewKeyword("end-line"), int(4177))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("the-ns"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
v9, _ := lang.FieldOrMethod(v8, "unmap")
if reflect.TypeOf(v9).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unmap is not a function")))
}
v10 := lang.Apply(v9, []any{v4})
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// nth
{
var v1 lang.FnFunc
{ // function nth__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol(".")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("list"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("seq"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("concat"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("list"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{lang.NewSymbol("glojure.core/Nth")})
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("list"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("seq"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("concat"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("list"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{lang.NewSymbol("glojure.core/unquote")})
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("list"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{lang.NewSymbol("glojure.core/c")})
v50 := lang.Apply(v41, []any{v45, v49})
v51 := lang.Apply(v38, []any{v50})
v52 := lang.Apply(v35, []any{v51})
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("list"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("seq"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("concat"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("list"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{lang.NewSymbol("glojure.core/unquote")})
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("list"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{lang.NewSymbol("glojure.core/i")})
v70 := lang.Apply(v61, []any{v65, v69})
v71 := lang.Apply(v58, []any{v70})
v72 := lang.Apply(v55, []any{v71})
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("list"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("seq"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("concat"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("list"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, []any{lang.NewSymbol("glojure.core/unquote-splicing")})
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("list"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.Apply(v88, []any{lang.NewSymbol("glojure.core/nf")})
v90 := lang.Apply(v81, []any{v85, v89})
v91 := lang.Apply(v78, []any{v90})
v92 := lang.Apply(v75, []any{v91})
v93 := lang.Apply(v28, []any{v32, v52, v72, v92})
v94 := lang.Apply(v25, []any{v93})
v95 := lang.Apply(v22, []any{v94})
v96 := lang.Apply(v11, []any{v15, v19, v95})
v97 := lang.Apply(v8, []any{v96})
return v97
  }
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("nth").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("index")), lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("index"), lang.NewSymbol("not-found"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, Java arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(2)int64(3)), lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(882), lang.NewKeyword("end-line"), int(882))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(runtime5.RT, "Nth")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Nth is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  case 3:
v4 := args[0]
v5 := args[1]
v6 := args[2]
v7, _ := lang.FieldOrMethod(runtime5.RT, "NthDefault")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("NthDefault is not a function")))
}
v8 := lang.Apply(v7, []any{v4, v5, v6})
return v8
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// nthnext
{
v0 := lang.NewSymbol("nthnext").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Returns the nth next of coll, (seq coll) when n is 0.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3147), lang.NewKeyword("end-line"), int(3147))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("instance?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{lang.IDrop, v3})
if lang.IsTruthy(v9) {
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("pos?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v4})
if lang.IsTruthy(v14) {
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("int?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v4})
if lang.IsTruthy(v19) {
v15 = v4
} else {
v20 := lang.Apply(nil, []any{v4})
v15 = v20
}
v21, _ := lang.FieldOrMethod(v3, "drop")
if reflect.TypeOf(v21).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("drop is not a function")))
}
v22 := lang.Apply(v21, []any{v15})
v10 = v22
} else {
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("seq"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v3})
v10 = v26
}
v5 = v10
} else {
var v27 any = v27
_ = v27
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("seq"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v3})
var v28 any = v32
_ = v28
var v33 any
for {
var v34 any
var v35 any = v28
_ = v35
var v37 any
if lang.IsTruthy(v35) {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("pos?"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v27})
v37 = v41
} else {
v37 = v35
}
if lang.IsTruthy(v37) {
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("dec"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v27})
var v35 any = v39
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("next"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v28})
var v40 any = v44
v27 = v35
v28 = v40
continue
} else {
v34 = v28
}
v33 = v34
  break
}
v5 = v33
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// nthrest
{
v0 := lang.NewSymbol("nthrest").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"), lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Returns the nth rest of coll, coll when n is 0.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3161), lang.NewKeyword("end-line"), int(3161))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("pos?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
var v11 any
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("instance?"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.IDrop, v3})
if lang.IsTruthy(v15) {
var v16 any
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("int?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v4})
if lang.IsTruthy(v20) {
v16 = v4
} else {
v21 := lang.Apply(nil, []any{v4})
v16 = v21
}
v22, _ := lang.FieldOrMethod(v3, "drop")
if reflect.TypeOf(v22).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("drop is not a function")))
}
v23 := lang.Apply(v22, []any{v16})
v11 = v23
} else {
var v24 any = v24
_ = v24
var v25 any = v3
_ = v25
var v26 any
for {
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("pos?"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v24})
var v28 any = v32
_ = v28
var v34 any
if lang.IsTruthy(v28) {
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("seq"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v25})
v34 = v38
} else {
v34 = v28
}
var v27 any = v34
_ = v27
var v29 any
if lang.IsTruthy(v27) {
var v30 any = v27
_ = v30
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("dec"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v24})
var v32 any = v36
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("rest"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v30})
var v37 any = v41
v24 = v32
v25 = v37
continue
} else {
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("seq"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v25})
v29 = v33
}
v26 = v29
  break
}
v11 = v26
}
var v10 any = v11
_ = v10
var v25 any
if lang.IsTruthy(v10) {
v25 = v10
} else {
v25 = lang.NewList()
}
v5 = v25
} else {
v5 = v3
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// num
{
var v1 lang.FnFunc
{ // function num__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/num")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("num").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to Number", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3474), lang.NewKeyword("end-line"), int(3474))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "num")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("num is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// number?
{
v0 := lang.NewSymbol("number?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x is a Number", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3560), lang.NewKeyword("end-line"), int(3560))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(lang.IsNumber, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// numerator
{
v1 := reflect.TypeOf((*big8.Int)(nil))
v0 := lang.NewSymbol("numerator").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("r"))), lang.NewKeyword("doc"), "Returns the numerator part of a Ratio.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3583), lang.NewKeyword("end-line"), int(3583))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, ok := lang.FieldOrMethod(v4, "numerator")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "numerator")))
}
var v6 any
switch reflect.TypeOf(v5).Kind() {
case reflect.Func:
  v6 = lang.Apply(v5, nil)
default:
  v6 = v5
}
return v6
})
v4 := reflect.TypeOf((*big8.Int)(nil))
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// object-array
{
var v1 lang.FnFunc
{ // function object-array__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/Object_array")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v9, []any{v13, v17, v21, v25})
v27 := lang.Apply(v6, []any{v26})
return v27
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("object-array").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("size-or-seq"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Creates an array of objects", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)), lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5349), lang.NewKeyword("end-line"), int(5349))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(runtime5.RT, "Object_array")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Object_array is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// odd?
{
v0 := lang.NewSymbol("odd?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Returns true if n is odd, throws an exception if n is not an integer", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1389), lang.NewKeyword("end-line"), int(1389))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("not"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("even?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
v11 := lang.Apply(v6, []any{v10})
return v11
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// or
{
v0 := lang.NewSymbol("or").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("&"), lang.NewSymbol("next"))), lang.NewKeyword("doc"), "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(847), lang.NewKeyword("end-line"), int(847))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
return nil
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
return v5
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("glojure.core/let")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("apply"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("vector"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{lang.NewSymbol("or__0__auto__")})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v5})
v40 := lang.Apply(v31, []any{v35, v39})
v41 := lang.Apply(v28, []any{v40})
v42 := lang.Apply(v22, []any{v25, v41})
v43 := lang.Apply(v19, []any{v42})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("seq"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("concat"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("list"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{lang.NewSymbol("if")})
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{lang.NewSymbol("or__0__auto__")})
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("list"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{lang.NewSymbol("or__0__auto__")})
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("list"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("seq"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("concat"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("list"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.Apply(v76, []any{lang.NewSymbol("glojure.core/or")})
v78 := lang.Apply(v73, []any{v77, v6})
v79 := lang.Apply(v70, []any{v78})
v80 := lang.Apply(v67, []any{v79})
v81 := lang.Apply(v52, []any{v56, v60, v64, v80})
v82 := lang.Apply(v49, []any{v81})
v83 := lang.Apply(v46, []any{v82})
v84 := lang.Apply(v12, []any{v16, v43, v83})
v85 := lang.Apply(v9, []any{v84})
return v85
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// parents
{
v0 := lang.NewSymbol("parents").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("tag")), lang.NewVector(lang.NewSymbol("h"), lang.NewSymbol("tag"))), lang.NewKeyword("doc"), "Returns the immediate parents of tag, either via a Java type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5564), lang.NewKeyword("end-line"), int(5564))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("parents"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("global-hierarchy"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{v9, v3})
return v10
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("not-empty"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("get"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(lang.NewKeyword("parents"), []any{v3})
v13 := lang.Apply(v11, []any{v12, v4})
var v8 any = v13
_ = v8
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("class?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v4})
if lang.IsTruthy(v19) {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("into1"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("set"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("bases"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v4})
v30 := lang.Apply(v25, []any{v29})
v31 := lang.Apply(v22, []any{v30, v8})
v15 = v31
} else {
v15 = v8
}
v8 := lang.Apply(v7, []any{v15})
return v8
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// parse-boolean
{
v0 := lang.NewSymbol("parse-boolean").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Parse strings \"true\" or \"false\" and return a boolean, or nil if invalid", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7957), lang.NewKeyword("end-line"), int(7957))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("string?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
var v9 any = v3
_ = v9
v4 = nil
} else {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("parsing-err"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3})
v13 := lang.Apply(lang.NewIllegalArgumentError, []any{v12})
panic(v13)
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// parse-double
{
v0 := lang.NewSymbol("parse-double").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Parse string with floating point components and return a Double value,\n  or nil if parse fails.\n\n  Grammar: https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7935), lang.NewKeyword("end-line"), int(7935))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("string?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v10 := lang.Apply(strconv17.ParseFloat, []any{v3, int64(64)})
var v9 any = v10
_ = v9
var v12 any
v13 := lang.Apply(v9, []any{int64(1)})
if lang.IsTruthy(v13) {
v12 = nil
} else {
v14 := lang.Apply(v9, []any{int64(0)})
v12 = v14
}
v4 = v12
} else {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("parsing-err"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3})
v13 := lang.Apply(lang.NewIllegalArgumentError, []any{v12})
panic(v13)
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// parse-impls
{
v0 := lang.NewSymbol("parse-impls").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(13), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(13), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("specs"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.NewMap()
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(14), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(14), lang.NewKeyword("end-column"), int(15))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v4 any = v7
_ = v4
var v8 any = v3
_ = v8
var v9 any
for {
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("seq"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v8})
if lang.IsTruthy(v14) {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("assoc"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("first"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v8})
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("take-while"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq?"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("next"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v8})
v33 := lang.Apply(v25, []any{v28, v32})
v34 := lang.Apply(v18, []any{v4, v22, v33})
var v15 any = v34
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("drop-while"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("seq?"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("next"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v8})
v46 := lang.Apply(v38, []any{v41, v45})
var v35 any = v46
v4 = v15
v8 = v35
continue
} else {
v10 = v4
}
v9 = v10
  break
}
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// parse-long
{
v0 := lang.NewSymbol("parse-long").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Parse string of decimal digits with optional leading -/+ and return a\n  Long value, or nil if parse fails", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7926), lang.NewKeyword("end-line"), int(7926))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("string?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v10 := lang.Apply(strconv17.ParseInt, []any{v3, int64(10), int64(64)})
var v9 any = v10
_ = v9
var v12 any
v13 := lang.Apply(v9, []any{int64(1)})
if lang.IsTruthy(v13) {
v12 = nil
} else {
v14 := lang.Apply(v9, []any{int64(0)})
v12 = v14
}
v4 = v12
} else {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("parsing-err"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3})
v13 := lang.Apply(lang.NewIllegalArgumentError, []any{v12})
panic(v13)
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// parse-uuid
{
v0 := lang.NewSymbol("parse-uuid").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Parse a string representing a UUID and return a java.util.UUID instance,\n  or nil if parse fails.\n\n  Grammar: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#toString--", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7946), lang.NewKeyword("end-line"), int(7946))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
func() {
defer func() {
if r := recover(); r != nil {
if lang.CatchMatches(r, nil) {
v5 := r
_ = v5
v4 = nil
} else {
panic(r)
}
}
}()
v5 := lang.Apply(nil, []any{v3})
v4 = v5
}()
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// parsing-err
{
v0 := lang.NewSymbol("parsing-err").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("val"))), lang.NewKeyword("doc"), "Construct message for parsing for non-string parsing error", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(7921), lang.NewKeyword("end-line"), int(7921), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("str"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("nil?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
if lang.IsTruthy(v11) {
v7 = "nil"
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("class"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3})
v16, ok := lang.FieldOrMethod(v15, "Name")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v15, "Name")))
}
var v17 any
switch reflect.TypeOf(v16).Kind() {
case reflect.Func:
  v17 = lang.Apply(v16, nil)
default:
  v17 = v16
}
v7 = v17
}
v18 := lang.Apply(v6, []any{"Expected string, got ", v7})
return v18
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// partial
{
v0 := lang.NewSymbol("partial").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("arg1")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("arg1"), lang.NewSymbol("arg2")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("arg1"), lang.NewSymbol("arg2"), lang.NewSymbol("arg3")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("arg1"), lang.NewSymbol("arg2"), lang.NewSymbol("arg3"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2606), lang.NewKeyword("end-line"), int(2606))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
return v3
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v6 := lang.Apply(v3, []any{v4})
return v6
  case 1:
v6 := args[0]
v7 := lang.Apply(v3, []any{v4, v6})
return v7
  case 2:
v6 := args[0]
v7 := args[1]
v8 := lang.Apply(v3, []any{v4, v6, v7})
return v8
  case 3:
v6 := args[0]
v7 := args[1]
v8 := args[2]
v9 := lang.Apply(v3, []any{v4, v6, v7, v8})
return v9
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v6 := args[0]
v7 := args[1]
v8 := args[2]
v9 := lang.NewList(args[3:]...)
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("apply"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3, v4, v6, v7, v8, v9})
return v13
  }
})
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2614), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(2619), lang.NewKeyword("end-column"), int(48))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v7
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v7 := lang.Apply(v3, []any{v4, v5})
return v7
  case 1:
v7 := args[0]
v8 := lang.Apply(v3, []any{v4, v5, v7})
return v8
  case 2:
v7 := args[0]
v8 := args[1]
v9 := lang.Apply(v3, []any{v4, v5, v7, v8})
return v9
  case 3:
v7 := args[0]
v8 := args[1]
v9 := args[2]
v10 := lang.Apply(v3, []any{v4, v5, v7, v8, v9})
return v10
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v7 := args[0]
v8 := args[1]
v9 := args[2]
v10 := lang.NewList(args[3:]...)
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("apply"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3, v4, v5, v7, v8, v9, v10})
return v14
  }
})
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2621), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(2626), lang.NewKeyword("end-column"), int(53))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v8 := lang.Apply(v3, []any{v4, v5, v6})
return v8
  case 1:
v8 := args[0]
v9 := lang.Apply(v3, []any{v4, v5, v6, v8})
return v9
  case 2:
v8 := args[0]
v9 := args[1]
v10 := lang.Apply(v3, []any{v4, v5, v6, v8, v9})
return v10
  case 3:
v8 := args[0]
v9 := args[1]
v10 := args[2]
v11 := lang.Apply(v3, []any{v4, v5, v6, v8, v9, v10})
return v11
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v8 := args[0]
v9 := args[1]
v10 := args[2]
v11 := lang.NewList(args[3:]...)
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("apply"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3, v4, v5, v6, v8, v9, v10, v11})
return v15
  }
})
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2628), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(2633), lang.NewKeyword("end-column"), int(58))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v9
  default:
    if len(args) < 4 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.NewList(args[4:]...)
var v8 lang.FnFunc
v8 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v9 := lang.NewList(args[0:]...)
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("apply"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("concat"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v7, v9})
v17 := lang.Apply(v12, []any{v3, v4, v5, v6, v16})
return v17
  }
})
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2635), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(2635), lang.NewKeyword("end-column"), int(60))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// partition
{
v0 := lang.NewSymbol("partition").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("step"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("step"), lang.NewSymbol("pad"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3177), lang.NewKeyword("end-line"), int(3177))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("partition"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3, v3, v4})
return v8
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
var v7 any = v11
_ = v7
var v13 any
if lang.IsTruthy(v7) {
var v14 any = v7
_ = v14
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("doall"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("take"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v3, v14})
v24 := lang.Apply(v19, []any{v23})
var v16 any = v24
_ = v16
var v26 any
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("="))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("count"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v16})
v34 := lang.Apply(v29, []any{v3, v33})
if lang.IsTruthy(v34) {
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("cons"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("partition"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("nthrest"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v14, v4})
v45 := lang.Apply(v40, []any{v3, v4, v44})
v46 := lang.Apply(v37, []any{v16, v45})
v26 = v46
} else {
v26 = nil
}
v13 = v26
} else {
v13 = nil
}
return v13
})
v7 := lang.Apply(lang.NewLazySeq, []any{v6})
return v7
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v6})
var v8 any = v12
_ = v8
var v14 any
if lang.IsTruthy(v8) {
var v15 any = v8
_ = v15
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("doall"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("take"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v3, v15})
v25 := lang.Apply(v20, []any{v24})
var v17 any = v25
_ = v17
var v27 any
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("="))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("count"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v17})
v35 := lang.Apply(v30, []any{v3, v34})
if lang.IsTruthy(v35) {
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("cons"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("partition"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("nthrest"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v15, v4})
v46 := lang.Apply(v41, []any{v3, v4, v5, v45})
v47 := lang.Apply(v38, []any{v17, v46})
v27 = v47
} else {
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("take"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("concat"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v17, v5})
v58 := lang.Apply(v53, []any{v3, v57})
v59 := lang.Apply(v50, []any{v58})
v27 = v59
}
v14 = v27
} else {
v14 = nil
}
return v14
})
v8 := lang.Apply(lang.NewLazySeq, []any{v7})
return v8
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// partition-all
{
v0 := lang.NewSymbol("partition-all").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("step"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7222), lang.NewKeyword("end-line"), int(7222))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("to-array"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
v11 := lang.Apply(lang.NewArrayList, []any{v10})
var v6 any = v11
_ = v6
var v13 lang.FnFunc
v13 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v14 := lang.Apply(v5, nil)
return v14
  case 1:
v14 := args[0]
var v16 any
v17, ok := lang.FieldOrMethod(v6, "isEmpty")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "isEmpty")))
}
var v18 any
switch reflect.TypeOf(v17).Kind() {
case reflect.Func:
  v18 = lang.Apply(v17, nil)
default:
  v18 = v17
}
if lang.IsTruthy(v18) {
v16 = v15
} else {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("vec"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23, ok := lang.FieldOrMethod(v6, "toArray")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "toArray")))
}
var v24 any
switch reflect.TypeOf(v23).Kind() {
case reflect.Func:
  v24 = lang.Apply(v23, nil)
default:
  v24 = v23
}
v25 := lang.Apply(v22, []any{v24})
var v19 any = v25
_ = v19
v27, ok := lang.FieldOrMethod(v6, "clear")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "clear")))
}
var v28 any
switch reflect.TypeOf(v27).Kind() {
case reflect.Func:
  v28 = lang.Apply(v27, nil)
default:
  v28 = v27
}
_ = v28
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("unreduced"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v5, []any{v15, v19})
v33 := lang.Apply(v31, []any{v32})
v16 = v33
}
var v15 any = v16
_ = v15
v20 := lang.Apply(v5, []any{v15})
return v20
  case 2:
v14 := args[0]
v15 := args[1]
v16, _ := lang.FieldOrMethod(v6, "add")
if reflect.TypeOf(v16).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("add is not a function")))
}
v17 := lang.Apply(v16, []any{v15})
_ = v17
var v18 any
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("="))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22, ok := lang.FieldOrMethod(v6, "size")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "size")))
}
var v23 any
switch reflect.TypeOf(v22).Kind() {
case reflect.Func:
  v23 = lang.Apply(v22, nil)
default:
  v23 = v22
}
v24 := lang.Apply(v21, []any{v3, v23})
if lang.IsTruthy(v24) {
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("vec"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29, ok := lang.FieldOrMethod(v6, "toArray")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "toArray")))
}
var v30 any
switch reflect.TypeOf(v29).Kind() {
case reflect.Func:
  v30 = lang.Apply(v29, nil)
default:
  v30 = v29
}
v31 := lang.Apply(v28, []any{v30})
var v25 any = v31
_ = v25
v33, ok := lang.FieldOrMethod(v6, "clear")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "clear")))
}
var v34 any
switch reflect.TypeOf(v33).Kind() {
case reflect.Func:
  v34 = lang.Apply(v33, nil)
default:
  v34 = v33
}
_ = v34
v35 := lang.Apply(v5, []any{v14, v25})
v18 = v35
} else {
v18 = v14
}
return v18
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7231), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(7247), lang.NewKeyword("end-column"), int(23))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v15
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7229), lang.NewKeyword("column"), int(4), lang.NewKeyword("end-line"), int(7247), lang.NewKeyword("end-column"), int(25))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("partition-all"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3, v3, v4})
return v8
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
var v7 any = v11
_ = v7
var v13 any
if lang.IsTruthy(v7) {
var v14 any = v7
_ = v14
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("doall"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("take"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v3, v14})
v24 := lang.Apply(v19, []any{v23})
var v16 any = v24
_ = v16
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("cons"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("partition-all"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("nthrest"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v14, v4})
v36 := lang.Apply(v31, []any{v3, v4, v35})
v37 := lang.Apply(v28, []any{v16, v36})
v13 = v37
} else {
v13 = nil
}
return v13
})
v7 := lang.Apply(lang.NewLazySeq, []any{v6})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// partition-by
{
v0 := lang.NewSymbol("partition-by").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7142), lang.NewKeyword("end-line"), int(7142))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
var v6 any = "unimplemented: new with non-constant class type"
_ = v6
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("volatile!"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{lang.NewKeyword("glojure.core/none")})
var v7 any = v11
_ = v7
var v13 lang.FnFunc
v13 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v14 := lang.Apply(v5, nil)
return v14
  case 1:
v14 := args[0]
var v16 any
v17, ok := lang.FieldOrMethod(v6, "isEmpty")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "isEmpty")))
}
var v18 any
switch reflect.TypeOf(v17).Kind() {
case reflect.Func:
  v18 = lang.Apply(v17, nil)
default:
  v18 = v17
}
if lang.IsTruthy(v18) {
v16 = v15
} else {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("vec"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23, ok := lang.FieldOrMethod(v6, "toArray")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "toArray")))
}
var v24 any
switch reflect.TypeOf(v23).Kind() {
case reflect.Func:
  v24 = lang.Apply(v23, nil)
default:
  v24 = v23
}
v25 := lang.Apply(v22, []any{v24})
var v19 any = v25
_ = v19
v27, ok := lang.FieldOrMethod(v6, "clear")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "clear")))
}
var v28 any
switch reflect.TypeOf(v27).Kind() {
case reflect.Func:
  v28 = lang.Apply(v27, nil)
default:
  v28 = v27
}
_ = v28
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("unreduced"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v5, []any{v15, v19})
v33 := lang.Apply(v31, []any{v32})
v16 = v33
}
var v15 any = v16
_ = v15
v20 := lang.Apply(v5, []any{v15})
return v20
  case 2:
v14 := args[0]
v15 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("deref"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v7})
var v16 any = v20
_ = v16
v22 := lang.Apply(v3, []any{v15})
var v21 any = v22
_ = v21
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("vreset!"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v7, v21})
_ = v27
var v28 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("identical?"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v16, lang.NewKeyword("glojure.core/none")})
var v29 any = v33
_ = v29
var v35 any
if lang.IsTruthy(v29) {
v35 = v29
} else {
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("="))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v21, v16})
v35 = v39
}
if lang.IsTruthy(v35) {
v29, _ := lang.FieldOrMethod(v6, "add")
if reflect.TypeOf(v29).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("add is not a function")))
}
v30 := lang.Apply(v29, []any{v15})
_ = v30
v28 = v14
} else {
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("vec"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35, ok := lang.FieldOrMethod(v6, "toArray")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "toArray")))
}
var v36 any
switch reflect.TypeOf(v35).Kind() {
case reflect.Func:
  v36 = lang.Apply(v35, nil)
default:
  v36 = v35
}
v37 := lang.Apply(v34, []any{v36})
var v31 any = v37
_ = v31
v39, ok := lang.FieldOrMethod(v6, "clear")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "clear")))
}
var v40 any
switch reflect.TypeOf(v39).Kind() {
case reflect.Func:
  v40 = lang.Apply(v39, nil)
default:
  v40 = v39
}
_ = v40
v42 := lang.Apply(v5, []any{v14, v31})
var v41 any = v42
_ = v41
var v44 any
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("reduced?"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v41})
if lang.IsTruthy(v48) {
v44 = nil
} else {
v49, _ := lang.FieldOrMethod(v6, "add")
if reflect.TypeOf(v49).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("add is not a function")))
}
v50 := lang.Apply(v49, []any{v15})
v44 = v50
}
_ = v44
v28 = v41
}
return v28
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7152), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(7176), lang.NewKeyword("end-column"), int(28))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v15
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7149), lang.NewKeyword("column"), int(3), lang.NewKeyword("end-line"), int(7176), lang.NewKeyword("end-column"), int(30))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
var v13 any = v6
_ = v13
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("first"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v13})
var v15 any = v19
_ = v15
v21 := lang.Apply(v3, []any{v15})
var v20 any = v21
_ = v20
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("cons"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("take-while"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
var v29 lang.FnFunc
v29 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v30 := args[0]
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("="))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v3, []any{v30})
v35 := lang.Apply(v33, []any{v20, v34})
return v35
})
v30 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7182), lang.NewKeyword("column"), int(41), lang.NewKeyword("end-line"), int(7182), lang.NewKeyword("end-column"), int(53))
v31, err := lang.WithMeta(v29, v30.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("next"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v13})
v36 := lang.Apply(v28, []any{v31, v35})
v37 := lang.Apply(v25, []any{v15, v36})
var v22 any = v37
_ = v22
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("cons"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("partition-by"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
var v45 lang.FnFunc
v45 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("drop"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("count"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{v22})
v53 := lang.Apply(v48, []any{v52, v13})
return v53
})
v46 := lang.Apply(lang.NewLazySeq, []any{v45})
v47 := lang.Apply(v44, []any{v3, v46})
v48 := lang.Apply(v41, []any{v22, v47})
v12 = v48
} else {
v12 = nil
}
return v12
})
v6 := lang.Apply(lang.NewLazySeq, []any{v5})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// partitionv
{
v0 := lang.NewSymbol("partitionv").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("step"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("step"), lang.NewSymbol("pad"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of vectors of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.12", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7262), lang.NewKeyword("end-line"), int(7262))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("partitionv"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3, v3, v4})
return v8
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
var v7 any = v11
_ = v7
var v13 any
if lang.IsTruthy(v7) {
var v14 any = v7
_ = v14
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("into"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.NewVector()
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7274), lang.NewKeyword("column"), int(22), lang.NewKeyword("end-line"), int(7274), lang.NewKeyword("end-column"), int(23))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("take"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v3})
v27 := lang.Apply(v19, []any{v22, v26, v14})
var v16 any = v27
_ = v16
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("="))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v16})
v37 := lang.Apply(v32, []any{v3, v36})
if lang.IsTruthy(v37) {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("cons"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("partitionv"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("nthrest"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v14, v4})
v48 := lang.Apply(v43, []any{v3, v4, v47})
v49 := lang.Apply(v40, []any{v16, v48})
v29 = v49
} else {
v29 = nil
}
v13 = v29
} else {
v13 = nil
}
return v13
})
v7 := lang.Apply(lang.NewLazySeq, []any{v6})
return v7
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v6})
var v8 any = v12
_ = v8
var v14 any
if lang.IsTruthy(v8) {
var v15 any = v8
_ = v15
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("into"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.NewVector()
v22 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7280), lang.NewKeyword("column"), int(22), lang.NewKeyword("end-line"), int(7280), lang.NewKeyword("end-column"), int(23))
v23, err := lang.WithMeta(v21, v22.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("take"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v3})
v28 := lang.Apply(v20, []any{v23, v27, v15})
var v17 any = v28
_ = v17
var v30 any
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("="))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("count"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{v17})
v38 := lang.Apply(v33, []any{v3, v37})
if lang.IsTruthy(v38) {
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("cons"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("partitionv"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("nthrest"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v15, v4})
v49 := lang.Apply(v44, []any{v3, v4, v5, v48})
v50 := lang.Apply(v41, []any{v17, v49})
v30 = v50
} else {
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("list"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("into"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.NewVector()
v58 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7283), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(7283), lang.NewKeyword("end-column"), int(25))
v59, err := lang.WithMeta(v57, v58.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("take"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.Apply(v62, []any{v3})
v64 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v65 := v64.FindInternedVar(lang.NewSymbol("concat"))
if v65.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v65)))
}
v66 := v65.Get()
v67 := lang.Apply(v66, []any{v17, v5})
v68 := lang.Apply(v56, []any{v59, v63, v67})
v69 := lang.Apply(v53, []any{v68})
v30 = v69
}
v14 = v30
} else {
v14 = nil
}
return v14
})
v8 := lang.Apply(lang.NewLazySeq, []any{v7})
return v8
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// partitionv-all
{
v0 := lang.NewSymbol("partitionv-all").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("step"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of vector partitions, but may include\n  partitions with fewer than n items at the end.\n  Returns a stateful transducer when no collection is provided.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.12", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7285), lang.NewKeyword("end-line"), int(7285))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("partition-all"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3})
return v7
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("partitionv-all"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3, v3, v4})
return v8
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("seq"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
var v7 any = v11
_ = v7
var v13 any
if lang.IsTruthy(v7) {
var v14 any = v7
_ = v14
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("into"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.NewVector()
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7297), lang.NewKeyword("column"), int(24), lang.NewKeyword("end-line"), int(7297), lang.NewKeyword("end-column"), int(25))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("take"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v3})
v27 := lang.Apply(v19, []any{v22, v26, v5})
var v16 any = v27
_ = v16
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("cons"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("partitionv-all"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("drop"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v4, v14})
v39 := lang.Apply(v34, []any{v3, v4, v38})
v40 := lang.Apply(v31, []any{v16, v39})
v13 = v40
} else {
v13 = nil
}
return v13
})
v7 := lang.Apply(lang.NewLazySeq, []any{v6})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// pcalls
{
v0 := lang.NewSymbol("pcalls").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("fns"))), lang.NewKeyword("doc"), "Executes the no-arg fns in parallel, returning a lazy sequence of\n  their values", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7056), lang.NewKeyword("end-line"), int(7056))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("pmap"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := args[0]
v9 := lang.Apply(v8, nil)
return v9
})
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7061), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(7061), lang.NewKeyword("end-column"), int(20))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v10 := lang.Apply(v6, []any{v9, v3})
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// peek
{
v0 := lang.NewSymbol("peek").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1455), lang.NewKeyword("end-line"), int(1455))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(runtime5.RT, "Peek")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Peek is not a function")))
}
v5 := lang.Apply(v4, []any{v3})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// persistent!
{
v0 := lang.NewSymbol("persistent!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3350), lang.NewKeyword("end-line"), int(3350))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "Persistent")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "Persistent")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// pmap
{
v0 := lang.NewSymbol("pmap").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll"), lang.NewSymbol("&"), lang.NewSymbol("colls"))), lang.NewKeyword("doc"), "Like map, except f is applied in parallel. Semi-lazy in that the\n  parallel computation stays ahead of the consumption, but doesn't\n  realize the entire result unless required. Only useful for\n  computationally intensive functions where the time of f dominates\n  the coordination overhead.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7031), lang.NewKeyword("end-line"), int(7031))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("+"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(runtime18.NumCPU, nil)
v10 := lang.Apply(v8, []any{int64(2), v9})
var v5 any = v10
_ = v5
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("map"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
var v15 lang.FnFunc
v15 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v16 := args[0]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("future-call"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
var v20 lang.FnFunc
v20 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v21 := lang.Apply(v3, []any{v16})
return v21
})
v21 := lang.Apply(v19, []any{v20})
return v21
})
v16 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7041), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(7041), lang.NewKeyword("end-column"), int(34))
v17, err := lang.WithMeta(v15, v16.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v18 := lang.Apply(v14, []any{v17, v4})
var v11 any = v18
_ = v11
var v20 lang.FnFunc
{ // function step
v20 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v22 := args[0]
v23 := args[1]
var v24 any = v22
_ = v24
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v24})
var v25 any = v29
_ = v25
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("first"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v25})
var v30 any = v34
_ = v30
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("next"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v35})
var v35 any = v39
_ = v35
var v40 any = v30
_ = v40
var v41 any = v35
_ = v41
var v42 any = v24
_ = v42
var v44 lang.FnFunc
v44 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("seq"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v23})
var v45 any = v49
_ = v45
var v51 any
if lang.IsTruthy(v45) {
var v52 any = v45
_ = v52
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("cons"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("deref"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v40})
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("rest"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v52})
v65 := lang.Apply(v21, []any{v41, v64})
v66 := lang.Apply(v56, []any{v60, v65})
v51 = v66
} else {
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("map"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("deref"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v54, []any{v57, v42})
v51 = v58
}
return v51
})
v45 := lang.Apply(lang.NewLazySeq, []any{v44})
return v45
})
v21 := v20
_ = v21
}
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7042), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(7046), lang.NewKeyword("end-column"), int(36))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v19 any = v22
_ = v19
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("drop"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v5, v11})
v28 := lang.Apply(v19, []any{v11, v27})
return v28
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
var v7 lang.FnFunc
{ // function step
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := args[0]
var v10 lang.FnFunc
v10 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("map"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("seq"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v14, []any{v17, v9})
var v11 any = v18
_ = v11
var v20 any
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("every?"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("identity"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v23, []any{v26, v11})
if lang.IsTruthy(v27) {
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("cons"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("map"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("first"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v33, []any{v36, v11})
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("map"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("rest"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v40, []any{v43, v11})
v45 := lang.Apply(v8, []any{v44})
v46 := lang.Apply(v30, []any{v37, v45})
v20 = v46
} else {
v20 = nil
}
return v20
})
v11 := lang.Apply(lang.NewLazySeq, []any{v10})
return v11
})
v8 := v7
_ = v8
}
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7049), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(7053), lang.NewKeyword("end-column"), int(67))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v6 any = v9
_ = v6
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("pmap"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("apply"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v3, v15})
return v19
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7054), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(7054), lang.NewKeyword("end-column"), int(23))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("cons"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v4, v5})
v21 := lang.Apply(v6, []any{v20})
v22 := lang.Apply(v13, []any{v16, v21})
return v22
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// pop
{
v0 := lang.NewSymbol("pop").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item. If\n  the collection is empty, throws an exception.  Note - not the same\n  as next/butlast.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1462), lang.NewKeyword("end-line"), int(1462))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(runtime5.RT, "Pop")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Pop is not a function")))
}
v5 := lang.Apply(v4, []any{v3})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// pop!
{
v0 := lang.NewSymbol("pop!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3393), lang.NewKeyword("end-line"), int(3393))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "pop")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "pop")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// pop-thread-bindings
{
v0 := lang.NewSymbol("pop-thread-bindings").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Pop one set of bindings pushed with push-binding before. It is an error to\n  pop bindings without pushing before.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1929), lang.NewKeyword("end-line"), int(1929))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := lang.Apply(lang.PopThreadBindings, nil)
return v3
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// pos-int?
{
v0 := lang.NewSymbol("pos-int?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a positive fixed precision integer", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1403), lang.NewKeyword("end-line"), int(1403))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("int?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("pos?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3})
v10 = v14
} else {
v10 = v4
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// pos?
{
var v1 lang.FnFunc
{ // function pos?__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/isPos")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("pos?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("num"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns true if num is greater than zero, else false", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1252), lang.NewKeyword("end-line"), int(1252))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "isPos")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("isPos is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// pr
{
v0 := lang.NewSymbol("pr").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "Prints the object(s) to the output stream that is the current value\n  of *out*.  Prints the object(s), separated by spaces if there is\n  more than one.  By default, pr and prn print in a way that objects\n  can be read by the reader", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(8), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3678), lang.NewKeyword("end-line"), int(3678), lang.NewKeyword("dynamic"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return nil
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("pr-on"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*out*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{v3, v9})
return v10
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
recur_loop_671:
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("pr"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
_ = v8
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("*out*"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(lang.AppendWriter, []any{v11, lang.NewChar(32)})
_ = v12
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("next"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v4})
var v13 any = v17
_ = v13
var v19 any
if lang.IsTruthy(v13) {
var v20 any = v13
_ = v20
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("first"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v4})
var v22 any = v26
var v27 any = v20
v3 = v22
v4 = v27
goto recur_loop_671
} else {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("apply"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("pr"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v22, []any{v25, v4})
v19 = v26
}
return v19
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// pr-on
{
v0 := lang.NewSymbol("pr-on").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("w"))), lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3669), lang.NewKeyword("end-line"), int(3669), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*print-dup*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
if lang.IsTruthy(v8) {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("print-dup"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3, v4})
v5 = v12
} else {
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("print-method"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3, v4})
v5 = v16
}
_ = v5
return nil
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// pr-str
{
v1 := reflect.TypeOf("")
v0 := lang.NewSymbol("pr-str").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("xs"))), lang.NewKeyword("doc"), "pr to a string, returning it", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4758), lang.NewKeyword("end-line"), int(4758))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := lang.NewList(args[0:]...)
var v5 any = "unimplemented: new with non-constant class type"
_ = v5
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("hash-map"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*out*"))
v15 := lang.Apply(v13, []any{v14, v5})
v16 := lang.Apply(v10, []any{v15})
_ = v16
var v17 any
func() {
defer func() {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, nil)
}()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("apply"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("pr"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v24, []any{v27, v4})
_ = v28
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("str"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v5})
v17 = v32
}()
return v17
  }
})
v4 := reflect.TypeOf("")
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// prefer-method
{
v0 := lang.NewSymbol("prefer-method").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("multifn"), lang.NewSymbol("dispatch-val-x"), lang.NewSymbol("dispatch-val-y"))), lang.NewKeyword("doc"), "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y \n   when there is a conflict", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1801), lang.NewKeyword("end-line"), int(1801))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6, _ := lang.FieldOrMethod(v3, "PreferMethod")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("PreferMethod is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// prefers
{
v0 := lang.NewSymbol("prefers").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("multifn"))), lang.NewKeyword("doc"), "Given a multimethod, returns a map of preferred value -> set of other values", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1822), lang.NewKeyword("end-line"), int(1822))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "getPreferTable")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getPreferTable")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// prep-hashes
{
v0 := lang.NewSymbol("prep-hashes").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("expr-sym"), lang.NewSymbol("default"), lang.NewSymbol("tests"), lang.NewSymbol("thens"))), lang.NewKeyword("doc"), "Takes a sequence of test constants and a corresponding sequence of then\n  expressions. Returns a tuple of [shift mask case-map switch-type skip-check]\n  where case-map is a map of int case values to [test then] tuples, switch-type\n  is either :sparse or :compact, and skip-check is a set of case ints for which\n  post-switch equivalence checking must not be done (occurs with hash\n  collisions).", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(6683), lang.NewKeyword("end-line"), int(6683), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 4 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
var v8 lang.FnFunc
v8 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := args[0]
v10 := lang.Apply(lang.Hash, []any{v9})
return v10
})
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6691), lang.NewKeyword("column"), int(18), lang.NewKeyword("end-line"), int(6691), lang.NewKeyword("end-column"), int(66))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v7 any = v10
_ = v7
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("into1"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.CreatePersistentTreeSet()
v16 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6692), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(6692), lang.NewKeyword("end-column"), int(25))
v17, err := lang.WithMeta(v15, v16.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("map"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v7, v5})
v22 := lang.Apply(v14, []any{v17, v21})
var v11 any = v22
_ = v11
var v24 any
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("=="))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("count"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v5})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("count"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v11})
v36 := lang.Apply(v27, []any{v31, v35})
if lang.IsTruthy(v36) {
var v37 any
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("fits-table?"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v11})
if lang.IsTruthy(v41) {
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("case-map"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("identity"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v44, []any{v7, v47, v5, v6})
v49 := lang.NewVector(int64(0), int64(0), v48, lang.NewKeyword("compact"))
v50 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6696), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(6696), lang.NewKeyword("end-column"), int(63))
v51, err := lang.WithMeta(v49, v50.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v37 = v51
} else {
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("maybe-min-hash"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v11})
var v53 any = v57
_ = v53
var v59 any
if lang.IsTruthy(v53) {
v59 = v53
} else {
v60 := lang.NewVector(int64(0), int64(0))
v61 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6697), lang.NewKeyword("column"), int(56), lang.NewKeyword("end-line"), int(6697), lang.NewKeyword("end-column"), int(60))
v62, err := lang.WithMeta(v60, v61.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v59 = v62
}
var v52 any = v59
_ = v52
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("nth"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.Apply(v56, []any{v52, int64(0), nil})
var v53 any = v57
_ = v53
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("nth"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v61, []any{v52, int64(1), nil})
var v58 any = v62
_ = v58
var v64 any
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("zero?"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v58})
if lang.IsTruthy(v68) {
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("case-map"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("identity"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v71, []any{v7, v74, v5, v6})
v76 := lang.NewVector(int64(0), int64(0), v75, lang.NewKeyword("sparse"))
v77 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6700), lang.NewKeyword("column"), int(13), lang.NewKeyword("end-line"), int(6700), lang.NewKeyword("end-column"), int(66))
v78, err := lang.WithMeta(v76, v77.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v64 = v78
} else {
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("case-map"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
var v82 lang.FnFunc
v82 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v83 := args[0]
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("shift-mask"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.Apply(v7, []any{v83})
v88 := lang.Apply(v86, []any{v53, v58, v87})
return v88
})
v83 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6702), lang.NewKeyword("column"), int(35), lang.NewKeyword("end-line"), int(6702), lang.NewKeyword("end-column"), int(71))
v84, err := lang.WithMeta(v82, v83.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("identity"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.Apply(v81, []any{v84, v87, v5, v6})
v89 := lang.NewVector(v53, v58, v88, lang.NewKeyword("compact"))
v90 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6702), lang.NewKeyword("column"), int(13), lang.NewKeyword("end-line"), int(6702), lang.NewKeyword("end-column"), int(103))
v91, err := lang.WithMeta(v89, v90.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v64 = v91
}
v37 = v64
}
v24 = v37
} else {
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("merge-hash-collisions"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{v3, v4, v5, v6})
var v52 any = v56
_ = v52
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("nth"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.Apply(v60, []any{v52, int64(0), nil})
var v57 any = v61
_ = v57
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("nth"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.Apply(v65, []any{v52, int64(1), nil})
var v62 any = v66
_ = v62
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("nth"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{v52, int64(2), nil})
var v67 any = v71
_ = v67
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("prep-hashes"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.Apply(v75, []any{v3, v4, v57, v62})
var v72 any = v76
_ = v72
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("nth"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.Apply(v80, []any{v72, int64(0), nil})
var v77 any = v81
_ = v77
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("nth"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.Apply(v85, []any{v72, int64(1), nil})
var v82 any = v86
_ = v82
v88 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v89 := v88.FindInternedVar(lang.NewSymbol("nth"))
if v89.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v89)))
}
v90 := v89.Get()
v91 := lang.Apply(v90, []any{v72, int64(2), nil})
var v87 any = v91
_ = v87
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("nth"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.Apply(v95, []any{v72, int64(3), nil})
var v92 any = v96
_ = v92
var v98 any
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("zero?"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.Apply(v101, []any{v82})
if lang.IsTruthy(v102) {
v98 = v97
} else {
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("into1"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.CreatePersistentTreeSet()
v107 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6708), lang.NewKeyword("column"), int(33), lang.NewKeyword("end-line"), int(6708), lang.NewKeyword("end-column"), int(35))
v108, err := lang.WithMeta(v106, v107.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v109 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v110 := v109.FindInternedVar(lang.NewSymbol("map"))
if v110.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v110)))
}
v111 := v110.Get()
var v112 lang.FnFunc
v112 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v113 := args[0]
v114 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v115 := v114.FindInternedVar(lang.NewSymbol("shift-mask"))
if v115.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v115)))
}
v116 := v115.Get()
v117 := lang.Apply(v116, []any{v77, v82, v113})
return v117
})
v113 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6708), lang.NewKeyword("column"), int(42), lang.NewKeyword("end-line"), int(6708), lang.NewKeyword("end-column"), int(67))
v114, err := lang.WithMeta(v112, v113.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v115 := lang.Apply(v111, []any{v114, v97})
v116 := lang.Apply(v105, []any{v108, v115})
v98 = v116
}
var v97 any = v98
_ = v97
v118 := lang.NewVector(v77, v82, v87, v92, v97)
v119 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6709), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(6709), lang.NewKeyword("end-column"), int(52))
v120, err := lang.WithMeta(v118, v119.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v24 = v120
}
return v24
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// prep-ints
{
v0 := lang.NewSymbol("prep-ints").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("tests"), lang.NewSymbol("thens"))), lang.NewKeyword("doc"), "Takes a sequence of int-sized test constants and a corresponding sequence of\n  then expressions. Returns a tuple of [shift mask case-map switch-type] where\n  case-map is a map of int case values to [test then] tuples, and switch-type\n  is either :sparse or :compact.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(6631), lang.NewKeyword("end-line"), int(6631), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("fits-table?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3})
if lang.IsTruthy(v9) {
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("case-map"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("int"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("int"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v12, []any{v15, v18, v3, v4})
v20 := lang.NewVector(int64(0), int64(0), v19, lang.NewKeyword("compact"))
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6639), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(6639), lang.NewKeyword("end-column"), int(49))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v5 = v22
} else {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("maybe-min-hash"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("map"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("int"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v30, []any{v33, v3})
v35 := lang.Apply(v27, []any{v34})
var v24 any = v35
_ = v24
var v37 any
if lang.IsTruthy(v24) {
v37 = v24
} else {
v38 := lang.NewVector(int64(0), int64(0))
v39 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6640), lang.NewKeyword("column"), int(61), lang.NewKeyword("end-line"), int(6640), lang.NewKeyword("end-column"), int(65))
v40, err := lang.WithMeta(v38, v39.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v37 = v40
}
var v23 any = v37
_ = v23
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("nth"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v23, int64(0), nil})
var v24 any = v28
_ = v24
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("nth"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v23, int64(1), nil})
var v29 any = v33
_ = v29
var v35 any
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("zero?"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v29})
if lang.IsTruthy(v39) {
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("case-map"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("int"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("int"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v42, []any{v45, v48, v3, v4})
v50 := lang.NewVector(int64(0), int64(0), v49, lang.NewKeyword("sparse"))
v51 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6643), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(6643), lang.NewKeyword("end-column"), int(52))
v52, err := lang.WithMeta(v50, v51.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v35 = v52
} else {
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("case-map"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
var v56 lang.FnFunc
v56 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v57 := args[0]
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("shift-mask"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("int"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v57})
v65 := lang.Apply(v60, []any{v24, v29, v64})
return v65
})
v57 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6645), lang.NewKeyword("column"), int(31), lang.NewKeyword("end-line"), int(6645), lang.NewKeyword("end-column"), int(62))
v58, err := lang.WithMeta(v56, v57.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("int"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v55, []any{v58, v61, v3, v4})
v63 := lang.NewVector(v24, v29, v62, lang.NewKeyword("compact"))
v64 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6645), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(6645), lang.NewKeyword("end-column"), int(89))
v65, err := lang.WithMeta(v63, v64.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v35 = v65
}
v5 = v35
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// prependss
{
v0 := lang.NewSymbol("prependss").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Prepends a symbol or a seq to coll", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(5857), lang.NewKeyword("end-line"), int(5857), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("symbol?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3})
if lang.IsTruthy(v9) {
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("cons"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3, v4})
v5 = v13
} else {
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("concat"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3, v4})
v5 = v17
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// preserving-reduced
{
v0 := lang.NewSymbol("preserving-reduced").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7638), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(7638), lang.NewKeyword("end-column"), int(34), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("rf"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v6 := args[1]
v8 := lang.Apply(v3, []any{v5, v6})
var v7 any = v8
_ = v7
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduced?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v7})
if lang.IsTruthy(v14) {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("reduced"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v7})
v10 = v18
} else {
v10 = v7
}
return v10
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7640), lang.NewKeyword("column"), int(3), lang.NewKeyword("end-line"), int(7643), lang.NewKeyword("end-column"), int(12))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print
{
v0 := lang.NewSymbol("print").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "Prints the object(s) to the output stream that is the current value\n  of *out*.  print and println produce output for human consumption.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3725), lang.NewKeyword("end-line"), int(3725))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("hash-map"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*print-readably*"))
v12 := lang.Apply(v10, []any{v11, nil})
v13 := lang.Apply(v7, []any{v12})
_ = v13
var v14 any
func() {
defer func() {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, nil)
}()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("apply"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("pr"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v21, []any{v24, v3})
v14 = v25
}()
return v14
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-ctor
{
v0 := lang.NewSymbol("print-ctor").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(95), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(95), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("o"), lang.NewSymbol("print-args"), lang.NewSymbol("w"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.Apply(lang.WriteWriter, []any{v5, "#=("})
_ = v6
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("class"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
v11, ok := lang.FieldOrMethod(v10, "Name")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v10, "Name")))
}
var v12 any
switch reflect.TypeOf(v11).Kind() {
case reflect.Func:
  v12 = lang.Apply(v11, nil)
default:
  v12 = v11
}
v13 := lang.Apply(lang.WriteWriter, []any{v5, v12})
_ = v13
v14 := lang.Apply(lang.WriteWriter, []any{v5, ". "})
_ = v14
v15 := lang.Apply(v4, []any{v3, v5})
_ = v15
v16 := lang.Apply(lang.WriteWriter, []any{v5, ")"})
return v16
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-dup
{
v0 := lang.NewSymbol("print-dup").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3667), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(3667), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-initialized
{
v0 := lang.NewSymbol("print-initialized").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(520), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(520), lang.NewKeyword("end-column"), int(39), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, true, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-map
{
v0 := lang.NewSymbol("print-map").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(252), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(252), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("m"), lang.NewSymbol("print-one"), lang.NewSymbol("w"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("print-prefix-map"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{nil, v3, v4, v5})
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-meta
{
v0 := lang.NewSymbol("print-meta").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(70), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(70), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("o"), lang.NewSymbol("w"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("meta"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3})
var v5 any = v9
_ = v5
var v11 any
if lang.IsTruthy(v5) {
var v12 any = v5
_ = v12
var v14 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("pos?"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("count"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v12})
v23 := lang.Apply(v18, []any{v22})
var v15 any = v23
_ = v15
var v25 any
if lang.IsTruthy(v15) {
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("*print-dup*"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
var v26 any = v29
_ = v26
var v31 any
if lang.IsTruthy(v26) {
v31 = v26
} else {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("*print-meta*"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
var v32 any = v35
_ = v32
var v37 any
if lang.IsTruthy(v32) {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("*print-readably*"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v37 = v40
} else {
v37 = v32
}
v31 = v37
}
v25 = v31
} else {
v25 = v15
}
if lang.IsTruthy(v25) {
v15 := lang.Apply(lang.WriteWriter, []any{v4, "^"})
_ = v15
var v16 any
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("="))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("count"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v12})
v25 := lang.Apply(v20, []any{v24, int64(1)})
var v17 any = v25
_ = v17
var v27 any
if lang.IsTruthy(v17) {
v28 := lang.Apply(lang.NewKeyword("tag"), []any{v12})
v27 = v28
} else {
v27 = v17
}
if lang.IsTruthy(v27) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("pr-on"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(lang.NewKeyword("tag"), []any{v12})
v21 := lang.Apply(v19, []any{v20, v4})
v16 = v21
} else {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("pr-on"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v12, v4})
v16 = v25
}
_ = v16
v26 := lang.Apply(lang.WriteWriter, []any{v4, " "})
v14 = v26
} else {
v14 = nil
}
v11 = v14
} else {
v11 = nil
}
return v11
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-method
{
v0 := lang.NewSymbol("print-method").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3664), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(3664), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, nil, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-object
{
v0 := lang.NewSymbol("print-object").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(115), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(115), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("o"), lang.NewSymbol("w"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("print-tagged-object"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("str"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
v12 := lang.Apply(v7, []any{v3, v11, v4})
return v12
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-prefix-map
{
v0 := lang.NewSymbol("print-prefix-map").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(243), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(243), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("prefix"), lang.NewSymbol("kvs"), lang.NewSymbol("print-one"), lang.NewSymbol("w"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 4 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("print-sequential"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("str"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3, "{"})
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
var v17 any = v15
_ = v17
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("nth"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v17, int64(0), nil})
var v18 any = v22
_ = v18
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("nth"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v17, int64(1), nil})
var v23 any = v27
_ = v23
v29 := lang.Apply(v5, []any{v18, v16})
_ = v29
v30 := lang.Apply(lang.AppendWriter, []any{v16, lang.NewChar(32)})
_ = v30
v31 := lang.Apply(v5, []any{v23, v16})
return v31
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(246), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(247), lang.NewKeyword("end-column"), int(107))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17 := lang.Apply(v9, []any{v13, v16, ", ", "}", v4, v6})
return v17
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-sequential
{
v0 := lang.NewSymbol("print-sequential").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(46), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(46), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("begin"), lang.NewSymbol("print-one"), lang.NewSymbol("sep"), lang.NewSymbol("end"), lang.NewSymbol("sequence"), lang.NewSymbol("w"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 6 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := args[5]
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("hash-map"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*print-level*"))
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("not"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("*print-dup*"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v20, []any{v23})
var v17 any = v24
_ = v17
var v26 any
if lang.IsTruthy(v17) {
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("*print-level*"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
var v27 any = v30
_ = v27
var v32 any
if lang.IsTruthy(v27) {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("dec"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("*print-level*"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v35, []any{v38})
v32 = v39
} else {
v32 = v27
}
v26 = v32
} else {
v26 = v17
}
v17 := lang.Apply(v15, []any{v16, v26})
v18 := lang.Apply(v12, []any{v17})
_ = v18
var v19 any
func() {
defer func() {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, nil)
}()
var v24 any
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("*print-level*"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
var v25 any = v28
_ = v25
var v30 any
if lang.IsTruthy(v25) {
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("neg?"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("*print-level*"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v33, []any{v36})
v30 = v37
} else {
v30 = v25
}
if lang.IsTruthy(v30) {
v25 := lang.Apply(lang.WriteWriter, []any{v8, "#"})
v24 = v25
} else {
v26 := lang.Apply(lang.WriteWriter, []any{v8, v3})
_ = v26
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("seq"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v7})
var v27 any = v31
_ = v27
var v33 any
if lang.IsTruthy(v27) {
var v34 any = v27
_ = v34
var v36 any
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("not"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("*print-dup*"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v40, []any{v43})
var v37 any = v44
_ = v37
var v46 any
if lang.IsTruthy(v37) {
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("*print-length*"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v46 = v49
} else {
v46 = v37
}
if lang.IsTruthy(v46) {
var v37 any = v34
_ = v37
var v38 any = v37
_ = v38
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("seq"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v38})
var v39 any = v43
_ = v39
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("first"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v39})
var v44 any = v48
_ = v44
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("next"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v49})
var v49 any = v53
_ = v49
var v54 any = v44
_ = v54
var v55 any = v49
_ = v55
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("*print-length*"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
var v56 any = v59
_ = v56
var v61 any = v61
_ = v61
var v62 any = v62
_ = v62
var v63 any
for {
var v64 any = v61
_ = v64
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("seq"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{v64})
var v65 any = v69
_ = v65
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("first"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{v65})
var v70 any = v74
_ = v70
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("next"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.Apply(v78, []any{v75})
var v75 any = v79
_ = v75
var v80 any = v70
_ = v80
var v81 any = v75
_ = v81
var v82 any = v82
_ = v82
var v84 any
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("zero?"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.Apply(v87, []any{v82})
if lang.IsTruthy(v88) {
v89 := lang.Apply(lang.WriteWriter, []any{v8, "..."})
v84 = v89
} else {
v90 := lang.Apply(v4, []any{v80, v8})
_ = v90
var v91 any
if lang.IsTruthy(v81) {
v92 := lang.Apply(lang.WriteWriter, []any{v8, v5})
_ = v92
var v93 any = v81
v95 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v96 := v95.FindInternedVar(lang.NewSymbol("dec"))
if v96.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v96)))
}
v97 := v96.Get()
v98 := lang.Apply(v97, []any{v82})
var v94 any = v98
v61 = v93
v62 = v94
continue
} else {
v91 = nil
}
v84 = v91
}
v63 = v84
  break
}
v36 = v63
} else {
var v37 any = v34
_ = v37
var v38 any = v37
_ = v38
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("seq"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v38})
var v39 any = v43
_ = v39
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("first"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v39})
var v44 any = v48
_ = v44
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("next"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v49})
var v49 any = v53
_ = v49
var v54 any = v44
_ = v54
var v55 any = v49
_ = v55
var v57 any = v57
_ = v57
var v58 any
for {
var v59 any = v57
_ = v59
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("seq"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v59})
var v60 any = v64
_ = v60
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("first"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{v60})
var v65 any = v69
_ = v65
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("next"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{v70})
var v70 any = v74
_ = v70
var v75 any = v65
_ = v75
var v76 any = v70
_ = v76
v78 := lang.Apply(v4, []any{v75, v8})
_ = v78
var v79 any
if lang.IsTruthy(v76) {
v80 := lang.Apply(lang.WriteWriter, []any{v8, v5})
_ = v80
var v81 any = v76
v57 = v81
continue
} else {
v79 = nil
}
v58 = v79
  break
}
v36 = v58
}
v33 = v36
} else {
v33 = nil
}
_ = v33
v27 := lang.Apply(lang.WriteWriter, []any{v8, v6})
v24 = v27
}
v19 = v24
}()
return v19
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-simple
{
v0 := lang.NewSymbol("print-simple").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(81), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(81), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("o"), lang.NewSymbol("w"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("print-meta"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3, v4})
_ = v8
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("str"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3})
v13 := lang.Apply(lang.WriteWriter, []any{v4, v12})
return v13
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-str
{
v1 := reflect.TypeOf("")
v0 := lang.NewSymbol("print-str").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("xs"))), lang.NewKeyword("doc"), "print to a string, returning it", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4776), lang.NewKeyword("end-line"), int(4776))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := lang.NewList(args[0:]...)
var v5 any = "unimplemented: new with non-constant class type"
_ = v5
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("hash-map"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*out*"))
v15 := lang.Apply(v13, []any{v14, v5})
v16 := lang.Apply(v10, []any{v15})
_ = v16
var v17 any
func() {
defer func() {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, nil)
}()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("apply"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("print"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v24, []any{v27, v4})
_ = v28
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("str"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v5})
v17 = v32
}()
return v17
  }
})
v4 := reflect.TypeOf("")
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-tagged-object
{
v0 := lang.NewSymbol("print-tagged-object").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(102), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(102), lang.NewKeyword("end-column"), int(26), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("o"), lang.NewSymbol("rep"), lang.NewSymbol("w"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("instance?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{lang.IMeta, v3})
if lang.IsTruthy(v10) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("print-meta"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3, v5})
v6 = v14
} else {
v6 = nil
}
_ = v6
v15 := lang.Apply(lang.WriteWriter, []any{v5, "#object["})
_ = v15
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("class"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v3})
var v16 any = v20
_ = v16
var v22 any
if lang.IsTruthy(false) {
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("print-method"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26, ok := lang.FieldOrMethod(v16, "Name")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v16, "Name")))
}
var v27 any
switch reflect.TypeOf(v26).Kind() {
case reflect.Func:
  v27 = lang.Apply(v26, nil)
default:
  v27 = v26
}
v28 := lang.Apply(v25, []any{v27, v5})
v22 = v28
} else {
v29, ok := lang.FieldOrMethod(v16, "Name")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v16, "Name")))
}
var v30 any
switch reflect.TypeOf(v29).Kind() {
case reflect.Func:
  v30 = lang.Apply(v29, nil)
default:
  v30 = v29
}
v31 := lang.Apply(lang.WriteWriter, []any{v5, v30})
v22 = v31
}
_ = v22
v16 := lang.Apply(lang.WriteWriter, []any{v5, " "})
_ = v16
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("format"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(lang.IdentityHash, []any{v3})
v21 := lang.Apply(v19, []any{"0x%x ", v20})
v22 := lang.Apply(lang.WriteWriter, []any{v5, v21})
_ = v22
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("print-method"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v4, v5})
_ = v26
v27 := lang.Apply(lang.WriteWriter, []any{v5, "]"})
return v27
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// print-throwable
{
v0 := lang.NewSymbol("print-throwable").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(478), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(478), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("o"), lang.NewSymbol("w"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.Apply(lang.WriteWriter, []any{v4, "#error {\n :cause "})
_ = v5
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("Throwable->map"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
var v6 any = v10
_ = v6
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("seq?"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v11})
if lang.IsTruthy(v16) {
var v17 any
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("next"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v11})
if lang.IsTruthy(v21) {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("to-array"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v11})
v26 := lang.Apply(lang.NewPersistentArrayMapAsIfByAssoc, []any{v25})
v17 = v26
} else {
var v27 any
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("seq"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v11})
if lang.IsTruthy(v31) {
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("first"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v11})
v27 = v35
} else {
v27 = nil
}
v17 = v27
}
v12 = v17
} else {
v12 = v11
}
var v11 any = v12
_ = v11
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("get"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v11, lang.NewKeyword("cause")})
var v36 any = v40
_ = v36
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("get"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v11, lang.NewKeyword("data")})
var v41 any = v45
_ = v41
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("get"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v11, lang.NewKeyword("via")})
var v46 any = v50
_ = v46
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("get"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v11, lang.NewKeyword("trace")})
var v51 any = v55
_ = v51
var v57 lang.FnFunc
v57 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v58 := args[0]
v59 := lang.Apply(lang.WriteWriter, []any{v4, "{:type "})
_ = v59
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("print-method"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.Apply(lang.NewKeyword("type"), []any{v58})
v64 := lang.Apply(v62, []any{v63, v4})
_ = v64
v65 := lang.Apply(lang.WriteWriter, []any{v4, "\n   :message "})
_ = v65
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("print-method"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(lang.NewKeyword("message"), []any{v58})
v70 := lang.Apply(v68, []any{v69, v4})
_ = v70
v72 := lang.Apply(lang.NewKeyword("data"), []any{v58})
var v71 any = v72
_ = v71
var v74 any
if lang.IsTruthy(v71) {
var v75 any = v71
_ = v75
v77 := lang.Apply(lang.WriteWriter, []any{v4, "\n   :data "})
_ = v77
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("print-method"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.Apply(v80, []any{v75, v4})
v74 = v81
} else {
v74 = nil
}
_ = v74
v72 := lang.Apply(lang.NewKeyword("at"), []any{v58})
var v71 any = v72
_ = v71
var v74 any
if lang.IsTruthy(v71) {
var v75 any = v71
_ = v75
v77 := lang.Apply(lang.WriteWriter, []any{v4, "\n   :at "})
_ = v77
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("print-method"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.Apply(lang.NewKeyword("at"), []any{v58})
v82 := lang.Apply(v80, []any{v81, v4})
v74 = v82
} else {
v74 = nil
}
_ = v74
v71 := lang.Apply(lang.WriteWriter, []any{v4, "}"})
return v71
})
v58 := lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(481), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(491), lang.NewKeyword("end-column"), int(73))
v59, err := lang.WithMeta(v57, v58.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v56 any = v59
_ = v56
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("print-method"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v36, v4})
_ = v64
var v65 any
if lang.IsTruthy(v41) {
v66 := lang.Apply(lang.WriteWriter, []any{v4, "\n :data "})
_ = v66
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("print-method"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.Apply(v69, []any{v41, v4})
v65 = v70
} else {
v65 = nil
}
_ = v65
var v71 any
if lang.IsTruthy(v46) {
v72 := lang.Apply(lang.WriteWriter, []any{v4, "\n :via\n ["})
_ = v72
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("first"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.Apply(v76, []any{v46})
var v73 any = v77
_ = v73
var v79 any
if lang.IsTruthy(v73) {
var v80 any = v73
_ = v80
v82 := lang.Apply(v56, []any{v80})
_ = v82
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("seq"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("rest"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.Apply(v89, []any{v46})
v91 := lang.Apply(v86, []any{v90})
var v83 any = v91
_ = v83
var v92 any = nil
_ = v92
var v93 any = int64(0)
_ = v93
var v94 any = int64(0)
_ = v94
var v95 any
for {
var v96 any
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("<"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.Apply(v99, []any{v94, v93})
if lang.IsTruthy(v100) {
v102, _ := lang.FieldOrMethod(v92, "nth")
if reflect.TypeOf(v102).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v103 := lang.Apply(v102, []any{v94})
var v101 any = v103
_ = v101
v105 := lang.Apply(lang.WriteWriter, []any{v4, "\n  "})
_ = v105
v106 := lang.Apply(v56, []any{v101})
_ = v106
var v107 any = v83
var v108 any = v92
var v109 any = v93
v111 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v112 := v111.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v112.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v112)))
}
v113 := v112.Get()
v114 := lang.Apply(v113, []any{v94})
var v110 any = v114
v83 = v107
v92 = v108
v93 = v109
v94 = v110
continue
} else {
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("seq"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.Apply(v104, []any{v83})
var v101 any = v105
_ = v101
var v107 any
if lang.IsTruthy(v101) {
var v108 any = v101
_ = v108
var v110 any
v111 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v112 := v111.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v112.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v112)))
}
v113 := v112.Get()
v114 := lang.Apply(v113, []any{v108})
if lang.IsTruthy(v114) {
v116 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v117 := v116.FindInternedVar(lang.NewSymbol("chunk-first"))
if v117.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v117)))
}
v118 := v117.Get()
v119 := lang.Apply(v118, []any{v108})
var v115 any = v119
_ = v115
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.Apply(v124, []any{v108})
var v121 any = v125
var v126 any = v115
v128 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v129 := v128.FindInternedVar(lang.NewSymbol("int"))
if v129.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v129)))
}
v130 := v129.Get()
v131 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v132 := v131.FindInternedVar(lang.NewSymbol("count"))
if v132.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v132)))
}
v133 := v132.Get()
v134 := lang.Apply(v133, []any{v115})
v135 := lang.Apply(v130, []any{v134})
var v127 any = v135
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("int"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.Apply(v139, []any{int64(0)})
var v136 any = v140
v83 = v121
v92 = v126
v93 = v127
v94 = v136
continue
} else {
v116 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v117 := v116.FindInternedVar(lang.NewSymbol("first"))
if v117.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v117)))
}
v118 := v117.Get()
v119 := lang.Apply(v118, []any{v108})
var v115 any = v119
_ = v115
v121 := lang.Apply(lang.WriteWriter, []any{v4, "\n  "})
_ = v121
v122 := lang.Apply(v56, []any{v115})
_ = v122
v124 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v125 := v124.FindInternedVar(lang.NewSymbol("next"))
if v125.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v125)))
}
v126 := v125.Get()
v127 := lang.Apply(v126, []any{v108})
var v123 any = v127
var v128 any = nil
var v129 any = int64(0)
var v130 any = int64(0)
v83 = v123
v92 = v128
v93 = v129
v94 = v130
continue
}
v107 = v110
} else {
v107 = nil
}
v96 = v107
}
v95 = v96
  break
}
v79 = v95
} else {
v79 = nil
}
_ = v79
v73 := lang.Apply(lang.WriteWriter, []any{v4, "]"})
v71 = v73
} else {
v71 = nil
}
_ = v71
var v74 any
if lang.IsTruthy(v51) {
v75 := lang.Apply(lang.WriteWriter, []any{v4, "\n :trace\n ["})
_ = v75
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("first"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.Apply(v79, []any{v51})
var v76 any = v80
_ = v76
var v82 any
if lang.IsTruthy(v76) {
var v83 any = v76
_ = v83
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("print-method"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.Apply(v87, []any{v83, v4})
_ = v88
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("seq"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("rest"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.Apply(v95, []any{v51})
v97 := lang.Apply(v92, []any{v96})
var v89 any = v97
_ = v89
var v98 any = nil
_ = v98
var v99 any = int64(0)
_ = v99
var v100 any = int64(0)
_ = v100
var v101 any
for {
var v102 any
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("<"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.Apply(v105, []any{v100, v99})
if lang.IsTruthy(v106) {
v108, _ := lang.FieldOrMethod(v98, "nth")
if reflect.TypeOf(v108).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v109 := lang.Apply(v108, []any{v100})
var v107 any = v109
_ = v107
v111 := lang.Apply(lang.WriteWriter, []any{v4, "\n  "})
_ = v111
v112 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v113 := v112.FindInternedVar(lang.NewSymbol("print-method"))
if v113.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v113)))
}
v114 := v113.Get()
v115 := lang.Apply(v114, []any{v107, v4})
_ = v115
var v116 any = v89
var v117 any = v98
var v118 any = v99
v120 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v121 := v120.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v121.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v121)))
}
v122 := v121.Get()
v123 := lang.Apply(v122, []any{v100})
var v119 any = v123
v89 = v116
v98 = v117
v99 = v118
v100 = v119
continue
} else {
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("seq"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.Apply(v110, []any{v89})
var v107 any = v111
_ = v107
var v113 any
if lang.IsTruthy(v107) {
var v114 any = v107
_ = v114
var v116 any
v117 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v118 := v117.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v118.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v118)))
}
v119 := v118.Get()
v120 := lang.Apply(v119, []any{v114})
if lang.IsTruthy(v120) {
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("chunk-first"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.Apply(v124, []any{v114})
var v121 any = v125
_ = v121
v128 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v129 := v128.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v129.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v129)))
}
v130 := v129.Get()
v131 := lang.Apply(v130, []any{v114})
var v127 any = v131
var v132 any = v121
v134 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v135 := v134.FindInternedVar(lang.NewSymbol("int"))
if v135.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v135)))
}
v136 := v135.Get()
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("count"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.Apply(v139, []any{v121})
v141 := lang.Apply(v136, []any{v140})
var v133 any = v141
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("int"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.Apply(v145, []any{int64(0)})
var v142 any = v146
v89 = v127
v98 = v132
v99 = v133
v100 = v142
continue
} else {
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("first"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.Apply(v124, []any{v114})
var v121 any = v125
_ = v121
v127 := lang.Apply(lang.WriteWriter, []any{v4, "\n  "})
_ = v127
v128 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v129 := v128.FindInternedVar(lang.NewSymbol("print-method"))
if v129.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v129)))
}
v130 := v129.Get()
v131 := lang.Apply(v130, []any{v121, v4})
_ = v131
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("next"))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.Apply(v135, []any{v114})
var v132 any = v136
var v137 any = nil
var v138 any = int64(0)
var v139 any = int64(0)
v89 = v132
v98 = v137
v99 = v138
v100 = v139
continue
}
v113 = v116
} else {
v113 = nil
}
v102 = v113
}
v101 = v102
  break
}
v82 = v101
} else {
v82 = nil
}
_ = v82
v76 := lang.Apply(lang.WriteWriter, []any{v4, "]"})
v74 = v76
} else {
v74 = nil
}
_ = v74
v6 := lang.Apply(lang.WriteWriter, []any{v4, "}"})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// printf
{
v0 := lang.NewSymbol("printf").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("fmt"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Prints formatted output, as per format", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5725), lang.NewKeyword("end-line"), int(5725))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("print"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("apply"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("format"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v10, []any{v13, v3, v4})
v15 := lang.Apply(v7, []any{v14})
return v15
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// println
{
v0 := lang.NewSymbol("println").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "Same as print followed by (newline)", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3734), lang.NewKeyword("end-line"), int(3734))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("hash-map"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*print-readably*"))
v12 := lang.Apply(v10, []any{v11, nil})
v13 := lang.Apply(v7, []any{v12})
_ = v13
var v14 any
func() {
defer func() {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, nil)
}()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("apply"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("prn"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v21, []any{v24, v3})
v14 = v25
}()
return v14
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// println-str
{
v1 := reflect.TypeOf("")
v0 := lang.NewSymbol("println-str").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("xs"))), lang.NewKeyword("doc"), "println to a string, returning it", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4785), lang.NewKeyword("end-line"), int(4785))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := lang.NewList(args[0:]...)
var v5 any = "unimplemented: new with non-constant class type"
_ = v5
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("hash-map"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*out*"))
v15 := lang.Apply(v13, []any{v14, v5})
v16 := lang.Apply(v10, []any{v15})
_ = v16
var v17 any
func() {
defer func() {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, nil)
}()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("apply"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("println"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v24, []any{v27, v4})
_ = v28
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("str"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v5})
v17 = v32
}()
return v17
  }
})
v4 := reflect.TypeOf("")
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// prn
{
v0 := lang.NewSymbol("prn").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "Same as pr followed by (newline). Observes *flush-on-newline*", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3715), lang.NewKeyword("end-line"), int(3715))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("apply"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("pr"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{v9, v3})
_ = v10
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("newline"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, nil)
_ = v14
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("*flush-on-newline*"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
if lang.IsTruthy(v18) {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("flush"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, nil)
v15 = v22
} else {
v15 = nil
}
return v15
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// prn-str
{
v1 := reflect.TypeOf("")
v0 := lang.NewSymbol("prn-str").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("xs"))), lang.NewKeyword("doc"), "prn to a string, returning it", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4767), lang.NewKeyword("end-line"), int(4767))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := lang.NewList(args[0:]...)
var v5 any = "unimplemented: new with non-constant class type"
_ = v5
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("hash-map"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*out*"))
v15 := lang.Apply(v13, []any{v14, v5})
v16 := lang.Apply(v10, []any{v15})
_ = v16
var v17 any
func() {
defer func() {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, nil)
}()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("apply"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("prn"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v24, []any{v27, v4})
_ = v28
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("str"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v5})
v17 = v32
}()
return v17
  }
})
v4 := reflect.TypeOf("")
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// promise
{
v0 := lang.NewSymbol("promise").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Returns a promise object that can be read with deref/@, and set,\n  once only, with deliver. Calls to deref/@ prior to delivery will\n  block, unless the variant of deref with timeout is used. All\n  subsequent derefs will return the same delivered value without\n  blocking. See also - realized?.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7078), lang.NewKeyword("end-line"), int(7078))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := lang.Apply(java.util.concurrent.CountDownLatch19., []any{int64(1)})
var v3 any = v4
_ = v3
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("atom"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3})
var v5 any = v9
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("deref"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.NewVector(nil)
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7091), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(7091), lang.NewKeyword("end-column"), int(17))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v17, ok := lang.FieldOrMethod(v3, "await")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "await")))
}
var v18 any
switch reflect.TypeOf(v17).Kind() {
case reflect.Func:
  v18 = lang.Apply(v17, nil)
default:
  v18 = v17
}
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("deref"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v5})
v23 := lang.Apply(v13, []any{v16, v18, v22})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("deref"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.NewVector(nil, nil, nil)
v28 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7094), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(7094), lang.NewKeyword("end-column"), int(34))
v29, err := lang.WithMeta(v27, v28.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v30 any
v31, _ := lang.FieldOrMethod(v3, "await")
if reflect.TypeOf(v31).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("await is not a function")))
}
v32 := lang.Apply(v31, []any{nil, time9.Millisecond})
if lang.IsTruthy(v32) {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("deref"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v30 = v36
} else {
v30 = nil
}
v37 := lang.Apply(v26, []any{v29, v30})
v38 := lang.NewVector(nil)
v39 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7099), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(7099), lang.NewKeyword("end-column"), int(24))
v40, err := lang.WithMeta(v38, v39.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("zero?"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44, ok := lang.FieldOrMethod(v3, "getCount")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getCount")))
}
var v45 any
switch reflect.TypeOf(v44).Kind() {
case reflect.Func:
  v45 = lang.Apply(v44, nil)
default:
  v45 = v44
}
v46 := lang.Apply(v43, []any{v45})
v47 := lang.Apply(nil, []any{v40, v46})
v48 := lang.NewVector(nil, nil)
v49 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7103), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(7103), lang.NewKeyword("end-column"), int(14))
v50, err := lang.WithMeta(v48, v49.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v51 any
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("pos?"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56, ok := lang.FieldOrMethod(v3, "getCount")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getCount")))
}
var v57 any
switch reflect.TypeOf(v56).Kind() {
case reflect.Func:
  v57 = lang.Apply(v56, nil)
default:
  v57 = v56
}
v58 := lang.Apply(v55, []any{v57})
var v52 any = v58
_ = v52
var v60 any
if lang.IsTruthy(v52) {
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("compare-and-set!"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v5, v3, nil})
v60 = v64
} else {
v60 = v52
}
if lang.IsTruthy(v60) {
v52, ok := lang.FieldOrMethod(v3, "countDown")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "countDown")))
}
var v53 any
switch reflect.TypeOf(v52).Kind() {
case reflect.Func:
  v53 = lang.Apply(v52, nil)
default:
  v53 = v52
}
_ = v53
v51 = nil
} else {
v51 = nil
}
v54 := lang.Apply(nil, []any{v50, v51})
v55 := lang.Apply(nil, []any{lang.IDeref, v23, lang.IBlockingDeref, v37, lang.IPending, v47, glojure.lang4.IFn, v54})
return v55
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// protocol?
{
v0 := lang.NewSymbol("protocol?").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_deftype.glj", lang.NewKeyword("line"), int(110), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(110), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("maybe-p"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.IAtom, v3})
if lang.IsTruthy(v8) {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("boolean"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("deref"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3})
v16 := lang.Apply(lang.NewKeyword("on-interface"), []any{v15})
v17 := lang.Apply(v11, []any{v16})
v4 = v17
} else {
v4 = false
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// push-thread-bindings
{
v0 := lang.NewSymbol("push-thread-bindings").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"))), lang.NewKeyword("doc"), "WARNING: This is a low-level function. Prefer high-level macros like\n  binding where ever possible.\n\n  Takes a map of Var/value pairs. Binds each Var to the associated value for\n  the current thread. Each call *MUST* be accompanied by a matching call to\n  pop-thread-bindings wrapped in a try-finally!\n  \n      (push-thread-bindings bindings)\n      (try\n        ...\n        (finally\n          (pop-thread-bindings)))", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(26), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1911), lang.NewKeyword("end-line"), int(1911))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(lang.PushThreadBindings, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// pvalues
{
v0 := lang.NewSymbol("pvalues").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("exprs"))), lang.NewKeyword("doc"), "Returns a lazy sequence of the values of the exprs, which are\n  evaluated in parallel", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(7063), lang.NewKeyword("end-line"), int(7063))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol("glojure.core/pcalls")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("map"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
var v19 lang.FnFunc
v19 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v20 := args[0]
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.NewVector()
v25 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7069), lang.NewKeyword("column"), int(30), lang.NewKeyword("end-line"), int(7069), lang.NewKeyword("end-column"), int(31))
v26, err := lang.WithMeta(v24, v25.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v27 := lang.Apply(v23, []any{lang.NewSymbol("glojure.core/fn"), v26, v20})
return v27
})
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7069), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(7069), lang.NewKeyword("end-column"), int(34))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v22 := lang.Apply(v18, []any{v21, v5})
v23 := lang.Apply(v11, []any{v15, v22})
v24 := lang.Apply(v8, []any{v23})
return v24
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// qualified-ident?
{
v0 := lang.NewSymbol("qualified-ident?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a symbol or keyword with a namespace", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1618), lang.NewKeyword("end-line"), int(1618))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("boolean"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("ident?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
var v7 any = v11
_ = v7
var v13 any
if lang.IsTruthy(v7) {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("namespace"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
var v14 any = v18
_ = v14
var v20 any
if lang.IsTruthy(v14) {
v20 = true
} else {
v20 = v14
}
v13 = v20
} else {
v13 = v7
}
v7 := lang.Apply(v6, []any{v13})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// qualified-keyword?
{
v0 := lang.NewSymbol("qualified-keyword?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a keyword with a namespace", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(24), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1638), lang.NewKeyword("end-line"), int(1638))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("boolean"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("keyword?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
var v7 any = v11
_ = v7
var v13 any
if lang.IsTruthy(v7) {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("namespace"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
var v14 any = v18
_ = v14
var v20 any
if lang.IsTruthy(v14) {
v20 = true
} else {
v20 = v14
}
v13 = v20
} else {
v13 = v7
}
v7 := lang.Apply(v6, []any{v13})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// qualified-symbol?
{
v0 := lang.NewSymbol("qualified-symbol?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a symbol with a namespace", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1628), lang.NewKeyword("end-line"), int(1628))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("boolean"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("symbol?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
var v7 any = v11
_ = v7
var v13 any
if lang.IsTruthy(v7) {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("namespace"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
var v14 any = v18
_ = v14
var v20 any
if lang.IsTruthy(v14) {
v20 = true
} else {
v20 = v14
}
v13 = v20
} else {
v13 = v7
}
v7 := lang.Apply(v6, []any{v13})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// quot
{
var v1 lang.FnFunc
{ // function quot__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/quotient")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("quot").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("num"), lang.NewSymbol("div"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "quot[ient] of dividing numerator by denominator.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1266), lang.NewKeyword("end-line"), int(1266))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "quotient")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("quotient is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// rand
{
v0 := lang.NewSymbol("rand").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4935), lang.NewKeyword("end-line"), int(4935))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3 := lang.Apply(rand20.Float64, nil)
return v3
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("*"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("rand"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, nil)
v11 := lang.Apply(v6, []any{v3, v10})
return v11
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// rand-int
{
v0 := lang.NewSymbol("rand-int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Returns a random integer between 0 (inclusive) and n (exclusive).", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4943), lang.NewKeyword("end-line"), int(4943))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("int"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("rand"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
v11 := lang.Apply(v6, []any{v10})
return v11
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// rand-nth
{
v0 := lang.NewSymbol("rand-nth").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7213), lang.NewKeyword("end-line"), int(7213))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("nth"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("rand-int"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("count"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3})
v14 := lang.Apply(v9, []any{v13})
v15 := lang.Apply(v6, []any{v3, v14})
return v15
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// random-sample
{
v0 := lang.NewSymbol("random-sample").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("prob")), lang.NewVector(lang.NewSymbol("prob"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7699), lang.NewKeyword("end-line"), int(7699))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("filter"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := args[0]
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("<"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("rand"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, nil)
v16 := lang.Apply(v11, []any{v15, v3})
return v16
})
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7704), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(7704), lang.NewKeyword("end-column"), int(37))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v10 := lang.Apply(v6, []any{v9})
return v10
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("filter"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
var v8 lang.FnFunc
v8 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := args[0]
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("<"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("rand"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, nil)
v17 := lang.Apply(v12, []any{v16, v3})
return v17
})
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7706), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(7706), lang.NewKeyword("end-column"), int(37))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v11 := lang.Apply(v7, []any{v10, v4})
return v11
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// random-uuid
{
v0 := lang.NewSymbol("random-uuid").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Returns a pseudo-randomly generated java.util.UUID instance (i.e. type 4).\n\n  See: https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#randomUUID--", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6852), lang.NewKeyword("end-line"), int(6852))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := lang.Apply(nil, nil)
return v3
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// range
{
v0 := lang.NewSymbol("range").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("end")), lang.NewVector(lang.NewSymbol("start"), lang.NewSymbol("end")), lang.NewVector(lang.NewSymbol("start"), lang.NewSymbol("end"), lang.NewSymbol("step"))), lang.NewKeyword("doc"), "Returns a lazy seq of nums from start (inclusive) to end\n  (exclusive), by step, where start defaults to 0, step to 1, and end to\n  infinity. When step is equal to 0, returns an infinite sequence of\n  start. When start is equal to end, returns empty list.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3018), lang.NewKeyword("end-line"), int(3018))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v4 := v3.FindInternedVar(lang.NewSymbol("iterate"))
if v4.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v4)))
}
v5 := v4.Get()
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("inc'"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v5, []any{v8, int64(0)})
return v9
  case 1:
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("int?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v9 := lang.Apply(lang.NewLongRange, []any{int64(0), v3, int64(1)})
v4 = v9
} else {
v10 := lang.Apply(lang.NewRange, []any{int64(0), v3, int64(1)})
v4 = v10
}
return v4
  case 2:
v3 := args[0]
v4 := args[1]
var v5 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("int?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("int?"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v4})
v12 = v16
} else {
v12 = v6
}
if lang.IsTruthy(v12) {
v6 := lang.Apply(lang.NewLongRange, []any{v3, v4, int64(1)})
v5 = v6
} else {
v7 := lang.Apply(lang.NewRange, []any{v3, v4, int64(1)})
v5 = v7
}
return v5
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("int?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
var v7 any = v11
_ = v7
var v13 any
if lang.IsTruthy(v7) {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("int?"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v4})
var v14 any = v18
_ = v14
var v20 any
if lang.IsTruthy(v14) {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("int?"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v5})
v20 = v24
} else {
v20 = v14
}
v13 = v20
} else {
v13 = v7
}
if lang.IsTruthy(v13) {
v7 := lang.Apply(lang.NewLongRange, []any{v3, v4, v5})
v6 = v7
} else {
v8 := lang.Apply(lang.NewRange, []any{v3, v4, v5})
v6 = v8
}
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ratio?
{
v0 := lang.NewSymbol("ratio?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Returns true if n is a Ratio", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3577), lang.NewKeyword("end-line"), int(3577))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.*Ratio, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// rational?
{
v0 := lang.NewSymbol("rational?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Returns true if n is a rational number", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3613), lang.NewKeyword("end-line"), int(3613))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("integer?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
v10 = v4
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("ratio?"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3})
var v11 any = v15
_ = v11
var v17 any
if lang.IsTruthy(v11) {
v17 = v11
} else {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("decimal?"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v3})
v17 = v21
}
v10 = v17
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// rationalize
{
v0 := lang.NewSymbol("rationalize").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("num"))), lang.NewKeyword("doc"), "returns the rational value of num", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1282), lang.NewKeyword("end-line"), int(1282))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(lang.Numbers, "rationalize")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("rationalize is not a function")))
}
v5 := lang.Apply(v4, []any{v3})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// re-find
{
v0 := lang.NewSymbol("re-find").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("m")), lang.NewVector(lang.NewSymbol("re"), lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Returns the next regex match, if any, of string to pattern, using\n  java.util.regex.Matcher.find().  Uses re-groups to return the\n  groups.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4922), lang.NewKeyword("end-line"), int(4922))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 any
v5, _ := lang.FieldOrMethod(v3, "find")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("find is not a function")))
}
v6 := lang.Apply(v5, []any{})
if lang.IsTruthy(v6) {
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("re-groups"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
v4 = v10
} else {
v4 = nil
}
return v4
  case 2:
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("re-matcher"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3, v4})
var v5 any = v9
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("re-find"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v5})
return v14
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// re-groups
{
v0 := lang.NewSymbol("re-groups").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("m"))), lang.NewKeyword("doc"), "Returns the groups from the most recent match/find. If there are no\n  nested groups, returns a string of the entire match. If there are\n  nested groups, returns a vector of the groups, the first element\n  being the entire match.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4882), lang.NewKeyword("end-line"), int(4882))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5, _ := lang.FieldOrMethod(v3, "groupCount")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("groupCount is not a function")))
}
v6 := lang.Apply(v5, []any{})
var v4 any = v6
_ = v4
var v8 any
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("zero?"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v4})
if lang.IsTruthy(v12) {
v13, _ := lang.FieldOrMethod(v3, "group")
if reflect.TypeOf(v13).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("group is not a function")))
}
v14 := lang.Apply(v13, []any{})
v8 = v14
} else {
v16 := lang.NewVector()
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4893), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(4893), lang.NewKeyword("end-column"), int(21))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v15 any = v18
_ = v15
var v19 any = int64(0)
_ = v19
var v20 any
for {
var v21 any
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("<="))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v19, v4})
if lang.IsTruthy(v25) {
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("conj"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30, _ := lang.FieldOrMethod(v3, "groupInt")
if reflect.TypeOf(v30).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("groupInt is not a function")))
}
v31 := lang.Apply(v30, []any{v19})
v32 := lang.Apply(v29, []any{v15, v31})
var v26 any = v32
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("inc"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{v19})
var v33 any = v37
v15 = v26
v19 = v33
continue
} else {
v21 = v15
}
v20 = v21
  break
}
v8 = v20
}
return v8
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// re-matcher
{
v1 := reflect.TypeOf((*lang.RegexpMatcher)(nil))
v0 := lang.NewSymbol("re-matcher").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("re"), lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Returns an instance of java.util.regex.Matcher, for use, e.g. in\n  re-find.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4873), lang.NewKeyword("end-line"), int(4873))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(lang.NewRegexpMatcher, []any{v4, v5})
return v6
})
v4 := reflect.TypeOf((*lang.RegexpMatcher)(nil))
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// re-matches
{
v0 := lang.NewSymbol("re-matches").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("re"), lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Returns the match, if any, of string to pattern, using\n  java.util.regex.Matcher.matches().  Uses re-groups to return the\n  groups.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4910), lang.NewKeyword("end-line"), int(4910))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("re-matcher"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3, v4})
var v5 any = v9
_ = v5
var v11 any
v12, _ := lang.FieldOrMethod(v5, "matches")
if reflect.TypeOf(v12).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("matches is not a function")))
}
v13 := lang.Apply(v12, []any{})
if lang.IsTruthy(v13) {
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("re-groups"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v5})
v11 = v17
} else {
v11 = nil
}
return v11
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// re-pattern
{
v1 := reflect.TypeOf((*regexp21.Regexp)(nil))
v0 := lang.NewSymbol("re-pattern").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Returns an instance of java.util.regex.Pattern, for use, e.g. in\n  re-matcher.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4863), lang.NewKeyword("end-line"), int(4863))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("instance?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{regexp21.*Regexp, v4})
if lang.IsTruthy(v9) {
v5 = v4
} else {
v10 := lang.Apply(regexp21.MustCompile, []any{v4})
v5 = v10
}
return v5
})
v4 := reflect.TypeOf((*regexp21.Regexp)(nil))
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// re-seq
{
v0 := lang.NewSymbol("re-seq").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("re"), lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Returns a lazy sequence of successive matches of pattern in string,\n  using java.util.regex.Matcher.find(), each such match processed with\n  re-groups.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4898), lang.NewKeyword("end-line"), int(4898))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("re-matcher"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3, v4})
var v5 any = v9
_ = v5
var v11 lang.FnFunc
{ // function step
v11 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
var v13 any
v14, _ := lang.FieldOrMethod(v5, "find")
if reflect.TypeOf(v14).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("find is not a function")))
}
v15 := lang.Apply(v14, []any{})
if lang.IsTruthy(v15) {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("cons"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("re-groups"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v5})
var v23 lang.FnFunc
v23 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v24 := lang.Apply(v12, nil)
return v24
})
v24 := lang.Apply(lang.NewLazySeq, []any{v23})
v25 := lang.Apply(v18, []any{v22, v24})
v13 = v25
} else {
v13 = nil
}
return v13
})
v12 := v11
_ = v12
}
v12 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4906), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(4908), lang.NewKeyword("end-column"), int(49))
v13, err := lang.WithMeta(v11, v12.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v14 := lang.Apply(v13, nil)
return v14
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// read
{
v0 := lang.NewSymbol("read").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("stream")), lang.NewVector(lang.NewSymbol("stream"), lang.NewSymbol("eof-error?"), lang.NewSymbol("eof-value")), lang.NewVector(lang.NewSymbol("stream"), lang.NewSymbol("eof-error?"), lang.NewSymbol("eof-value"), lang.NewSymbol("recursive?")), lang.NewVector(lang.NewSymbol("opts"), lang.NewSymbol("stream"))), lang.NewKeyword("doc"), "Reads the next object from stream, which must be an instance of\n  java.io.PushbackReader or some derivee.  stream defaults to the\n  current value of *in*.\n\n  Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n  Note that read can execute code (controlled by *read-eval*),\n  and as such should be used only with trusted sources.\n\n  For data structure interop use glojure.edn/read", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3742), lang.NewKeyword("end-line"), int(3742))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v4 := v3.FindInternedVar(lang.NewSymbol("read"))
if v4.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v4)))
}
v5 := v4.Get()
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*in*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v5, []any{v8})
return v9
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("read"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3, true, nil})
return v7
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("read"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3, v4, v5, false})
return v9
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("boolean"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4})
v11, _ := lang.FieldOrMethod(glojure.lang4.LispReader, "read")
if reflect.TypeOf(v11).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("read is not a function")))
}
v12 := lang.Apply(v11, []any{v3, v10, v5, v6})
return v12
  case 2:
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(glojure.lang4.LispReader, "read")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("read is not a function")))
}
v6 := lang.Apply(v5, []any{v4, v3})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// read+string
{
v0 := lang.NewSymbol("read+string").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("stream")), lang.NewVector(lang.NewSymbol("stream"), lang.NewSymbol("eof-error?"), lang.NewSymbol("eof-value")), lang.NewVector(lang.NewSymbol("stream"), lang.NewSymbol("eof-error?"), lang.NewSymbol("eof-value"), lang.NewSymbol("recursive?")), lang.NewVector(lang.NewSymbol("opts"), lang.NewSymbol("stream"))), lang.NewKeyword("doc"), "Like read, and taking the same args. stream must be a LineNumberingPushbackReader.\n  Returns a vector containing the object read and the (whitespace-trimmed) string read.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.10", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3771), lang.NewKeyword("end-line"), int(3771))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v4 := v3.FindInternedVar(lang.NewSymbol("read+string"))
if v4.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v4)))
}
v5 := v4.Get()
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("*in*"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v5, []any{v8})
return v9
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("read+string"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3, true, nil})
return v7
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("read+string"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3, v4, v5, false})
return v9
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
var v7 any
func() {
defer func() {
if r := recover(); r != nil {
if lang.CatchMatches(r, lang.Throwable) {
v8 := r
_ = v8
v9, ok := lang.FieldOrMethod(v3, "getString")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getString")))
}
var v10 any
switch reflect.TypeOf(v9).Kind() {
case reflect.Func:
  v10 = lang.Apply(v9, nil)
default:
  v10 = v9
}
_ = v10
panic(v8)
} else {
panic(r)
}
}
}()
v8, ok := lang.FieldOrMethod(v3, "captureString")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "captureString")))
}
var v9 any
switch reflect.TypeOf(v8).Kind() {
case reflect.Func:
  v9 = lang.Apply(v8, nil)
default:
  v9 = v8
}
_ = v9
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("read"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3, v4, v5, v6})
var v10 any = v14
_ = v10
v16, ok := lang.FieldOrMethod(v3, "getString")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getString")))
}
var v17 any
switch reflect.TypeOf(v16).Kind() {
case reflect.Func:
  v17 = lang.Apply(v16, nil)
default:
  v17 = v16
}
v18, ok := lang.FieldOrMethod(v17, "trim")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v17, "trim")))
}
var v19 any
switch reflect.TypeOf(v18).Kind() {
case reflect.Func:
  v19 = lang.Apply(v18, nil)
default:
  v19 = v18
}
var v15 any = v19
_ = v15
v21 := lang.NewVector(v10, v15)
v22 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3783), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(3783), lang.NewKeyword("end-column"), int(12))
v23, err := lang.WithMeta(v21, v22.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v7 = v23
}()
return v7
  case 2:
v3 := args[0]
v4 := args[1]
var v5 any
func() {
defer func() {
if r := recover(); r != nil {
if lang.CatchMatches(r, lang.Throwable) {
v6 := r
_ = v6
v7, ok := lang.FieldOrMethod(v4, "getString")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "getString")))
}
var v8 any
switch reflect.TypeOf(v7).Kind() {
case reflect.Func:
  v8 = lang.Apply(v7, nil)
default:
  v8 = v7
}
_ = v8
panic(v6)
} else {
panic(r)
}
}
}()
v6, ok := lang.FieldOrMethod(v4, "captureString")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "captureString")))
}
var v7 any
switch reflect.TypeOf(v6).Kind() {
case reflect.Func:
  v7 = lang.Apply(v6, nil)
default:
  v7 = v6
}
_ = v7
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("read"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3, v4})
var v8 any = v12
_ = v8
v14, ok := lang.FieldOrMethod(v4, "getString")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "getString")))
}
var v15 any
switch reflect.TypeOf(v14).Kind() {
case reflect.Func:
  v15 = lang.Apply(v14, nil)
default:
  v15 = v14
}
v16, ok := lang.FieldOrMethod(v15, "trim")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v15, "trim")))
}
var v17 any
switch reflect.TypeOf(v16).Kind() {
case reflect.Func:
  v17 = lang.Apply(v16, nil)
default:
  v17 = v16
}
var v13 any = v17
_ = v13
v19 := lang.NewVector(v8, v13)
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3792), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(3792), lang.NewKeyword("end-column"), int(12))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v5 = v21
}()
return v5
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// read-line
{
v0 := lang.NewSymbol("read-line").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Reads the next line from stream that is the current value of *in* .", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3797), lang.NewKeyword("end-line"), int(3797))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
var v3 any
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*in*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{glojure.lang4.LineNumberingPushbackReader, v9})
if lang.IsTruthy(v10) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("*in*"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14, ok := lang.FieldOrMethod(v13, "readLine")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v13, "readLine")))
}
var v15 any
switch reflect.TypeOf(v14).Kind() {
case reflect.Func:
  v15 = lang.Apply(v14, nil)
default:
  v15 = v14
}
v3 = v15
} else {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("*in*"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19, ok := lang.FieldOrMethod(v18, "readLine")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v18, "readLine")))
}
var v20 any
switch reflect.TypeOf(v19).Kind() {
case reflect.Func:
  v20 = lang.Apply(v19, nil)
default:
  v20 = v19
}
v3 = v20
}
return v3
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// read-string
{
v0 := lang.NewSymbol("read-string").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s")), lang.NewVector(lang.NewSymbol("opts"), lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Reads one object from the string s. Optionally include reader\n  options, as specified in read.\n\n  Note that read-string can execute code (controlled by *read-eval*),\n  and as such should be used only with trusted sources.\n\n  For data structure interop use glojure.edn/read-string", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3806), lang.NewKeyword("end-line"), int(3806))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.Apply(runtime5.RTReadString, []any{v3})
return v4
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.Apply(runtime5.RTReadString, []any{v4, v3})
return v5
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reader-conditional
{
v0 := lang.NewSymbol("reader-conditional").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("form"), lang.NewSymbol("splicing?"))), lang.NewKeyword("doc"), "Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(24), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7782), lang.NewKeyword("end-line"), int(7782))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.Apply(nil, []any{v3, v4})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reader-conditional?
{
v0 := lang.NewSymbol("reader-conditional?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("value"))), lang.NewKeyword("doc"), "Return true if the value is the data representation of a reader conditional", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7776), lang.NewKeyword("end-line"), int(7776))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{glojure.lang4.ReaderConditional, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// realized?
{
v0 := lang.NewSymbol("realized?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7559), lang.NewKeyword("end-line"), int(7559))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "isRealized")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "isRealized")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reduce
{
v0 := lang.NewSymbol("reduce").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("val"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6860), lang.NewKeyword("end-line"), int(6860))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("instance?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{lang.IReduce, v4})
if lang.IsTruthy(v9) {
v10, _ := lang.FieldOrMethod(v4, "Reduce")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Reduce is not a function")))
}
v11 := lang.Apply(v10, []any{v3})
v5 = v11
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core.protocols"))
v13 := v12.FindInternedVar(lang.NewSymbol("coll-reduce"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v4, v3})
v5 = v15
}
return v5
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("instance?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{lang.IReduceInit, v5})
if lang.IsTruthy(v10) {
v11, _ := lang.FieldOrMethod(v5, "ReduceInit")
if reflect.TypeOf(v11).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("ReduceInit is not a function")))
}
v12 := lang.Apply(v11, []any{v3, v4})
v6 = v12
} else {
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core.protocols"))
v14 := v13.FindInternedVar(lang.NewSymbol("coll-reduce"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v5, v3, v4})
v6 = v16
}
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reduce-kv
{
v0 := lang.NewSymbol("reduce-kv").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("init"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.4", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6882), lang.NewKeyword("end-line"), int(6882))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core.protocols"))
v7 := v6.FindInternedVar(lang.NewSymbol("kv-reduce"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v5, v3, v4})
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reduce1
{
v0 := lang.NewSymbol("reduce1").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(923), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(924), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("val"), lang.NewSymbol("coll"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
var v5 any = v9
_ = v5
var v11 any
if lang.IsTruthy(v5) {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("reduce1"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v5})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("next"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v5})
v23 := lang.Apply(v14, []any{v3, v18, v22})
v11 = v23
} else {
v24 := lang.Apply(v3, nil)
v11 = v24
}
return v11
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
recur_loop_156:
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v5})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
var v13 any
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v6})
if lang.IsTruthy(v17) {
var v18 any = v3
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("chunk-first"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v6})
v24, _ := lang.FieldOrMethod(v23, "ReduceInit")
if reflect.TypeOf(v24).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("ReduceInit is not a function")))
}
v25 := lang.Apply(v24, []any{v3, v4})
var v19 any = v25
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("chunk-next"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v6})
var v26 any = v30
v3 = v18
v4 = v19
v5 = v26
goto recur_loop_156
} else {
var v31 any = v3
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("first"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v6})
v37 := lang.Apply(v3, []any{v4, v36})
var v32 any = v37
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("next"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v6})
var v38 any = v42
v3 = v31
v4 = v32
v5 = v38
goto recur_loop_156
}
v12 = v13
} else {
v12 = v4
}
return v12
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reduced
{
v0 := lang.NewSymbol("reduced").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Wraps x in a way such that a reduce will terminate with the value x", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.5", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2828), lang.NewKeyword("end-line"), int(2828))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(lang.NewReduced, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reduced?
{
var v1 lang.FnFunc
{ // function reduced?__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.IsReduced")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3})
v18 := lang.Apply(v9, []any{v13, v17})
v19 := lang.Apply(v6, []any{v18})
return v19
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("reduced?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns true if x is the result of a call to reduced", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)), lang.NewKeyword("added"), "1.5", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2834), lang.NewKeyword("end-line"), int(2834))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.IsReduced, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reductions
{
v0 := lang.NewSymbol("reductions").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("init"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7196), lang.NewKeyword("end-line"), int(7196))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
var v13 any = v6
_ = v13
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("reductions"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("first"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v13})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("rest"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v13})
v26 := lang.Apply(v17, []any{v3, v21, v25})
v12 = v26
} else {
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v3, nil)
v17 := lang.Apply(v15, []any{v16})
v12 = v17
}
return v12
})
v6 := lang.Apply(lang.NewLazySeq, []any{v5})
return v6
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("reduced?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4})
if lang.IsTruthy(v10) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("deref"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v4})
v18 := lang.Apply(v13, []any{v17})
v6 = v18
} else {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("cons"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
var v22 lang.FnFunc
v22 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("seq"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v5})
var v23 any = v27
_ = v23
var v29 any
if lang.IsTruthy(v23) {
var v30 any = v23
_ = v30
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("reductions"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("first"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v30})
v39 := lang.Apply(v3, []any{v4, v38})
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("rest"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v30})
v44 := lang.Apply(v34, []any{v3, v39, v43})
v29 = v44
} else {
v29 = nil
}
return v29
})
v23 := lang.Apply(lang.NewLazySeq, []any{v22})
v24 := lang.Apply(v21, []any{v4, v23})
v6 = v24
}
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ref
{
v0 := lang.NewSymbol("ref").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("&"), lang.NewSymbol("options"))), lang.NewKeyword("doc"), "Creates and returns a Ref with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  :min-history (default 0)\n  :max-history (default 10)\n\n  If metadata-map is supplied, it will become the metadata on the\n  ref. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception. validate-fn will be called on\n  transaction commit, when all refs have their final values.\n\n  Normally refs accumulate history dynamically as needed to deal with\n  read demands. If you know in advance you will need history you can\n  set :min-history to ensure it will be available when first needed (instead\n  of after a read fault). History is limited, and the limit can be set\n  with :max-history.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2260), lang.NewKeyword("end-line"), int(2260))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.Apply(lang.NewRef, []any{v3})
return v4
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("setup-reference"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("ref"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3})
v13 := lang.Apply(v8, []any{v12, v4})
var v5 any = v13
_ = v5
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("apply"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("hash-map"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v17, []any{v20, v4})
var v14 any = v21
_ = v14
var v23 any
v24 := lang.Apply(lang.NewKeyword("max-history"), []any{v14})
if lang.IsTruthy(v24) {
v25 := lang.Apply(lang.NewKeyword("max-history"), []any{v14})
v26, _ := lang.FieldOrMethod(v5, "setMaxHistory")
if reflect.TypeOf(v26).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setMaxHistory is not a function")))
}
v27 := lang.Apply(v26, []any{v25})
v23 = v27
} else {
v23 = nil
}
_ = v23
var v28 any
v29 := lang.Apply(lang.NewKeyword("min-history"), []any{v14})
if lang.IsTruthy(v29) {
v30 := lang.Apply(lang.NewKeyword("min-history"), []any{v14})
v31, _ := lang.FieldOrMethod(v5, "setMinHistory")
if reflect.TypeOf(v31).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setMinHistory is not a function")))
}
v32 := lang.Apply(v31, []any{v30})
v28 = v32
} else {
v28 = nil
}
_ = v28
return v5
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ref-history-count
{
v0 := lang.NewSymbol("ref-history-count").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ref"))), lang.NewKeyword("doc"), "Returns the history count of a ref", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2455), lang.NewKeyword("end-line"), int(2455))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "getHistoryCount")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getHistoryCount")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ref-max-history
{
v0 := lang.NewSymbol("ref-max-history").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ref")), lang.NewVector(lang.NewSymbol("ref"), lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Gets the max-history of a ref, or sets it and returns the ref", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2471), lang.NewKeyword("end-line"), int(2471))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "getMaxHistory")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getMaxHistory")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
  case 2:
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "setMaxHistory")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setMaxHistory is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ref-min-history
{
v0 := lang.NewSymbol("ref-min-history").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ref")), lang.NewVector(lang.NewSymbol("ref"), lang.NewSymbol("n"))), lang.NewKeyword("doc"), "Gets the min-history of a ref, or sets it and returns the ref", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2462), lang.NewKeyword("end-line"), int(2462))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "getMinHistory")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "getMinHistory")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
  case 2:
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "setMinHistory")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setMinHistory is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// ref-set
{
v0 := lang.NewSymbol("ref-set").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ref"), lang.NewSymbol("val"))), lang.NewKeyword("doc"), "Must be called in a transaction. Sets the value of ref.\n  Returns val.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2447), lang.NewKeyword("end-line"), int(2447))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "set")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("set is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// refer
{
v0 := lang.NewSymbol("refer").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("ns-sym"), lang.NewSymbol("&"), lang.NewSymbol("filters"))), lang.NewKeyword("doc"), "refers to all public vars of ns, subject to filters.\n  filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :only list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  For each public interned var in the namespace named by the symbol,\n  adds a mapping from the name of the var to the var to the current\n  namespace.  Throws an exception if name is already mapped to\n  something else in the current namespace. Filters can be used to\n  select a subset, via inclusion or exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent\n  clashes. Use :use in the ns macro in preference to calling this directly.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4216), lang.NewKeyword("end-line"), int(4216))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("find-ns"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
v12 = v6
} else {
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("str"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{"No namespace: ", v3})
v17 := lang.Apply(errors6.New, []any{v16})
panic(v17)
}
var v5 any = v12
_ = v5
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("hash-map"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v9, []any{v12, v4})
var v6 any = v13
_ = v6
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("ns-publics"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v5})
var v14 any = v18
_ = v14
v21 := lang.Apply(lang.NewKeyword("rename"), []any{v6})
var v20 any = v21
_ = v20
var v23 any
if lang.IsTruthy(v20) {
v23 = v20
} else {
v24 := lang.NewMap()
v25 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4236), lang.NewKeyword("column"), int(35), lang.NewKeyword("end-line"), int(4236), lang.NewKeyword("end-column"), int(36))
v26, err := lang.WithMeta(v24, v25.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v23 = v26
}
var v19 any = v23
_ = v19
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("set"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(lang.NewKeyword("exclude"), []any{v6})
v25 := lang.Apply(v23, []any{v24})
var v20 any = v25
_ = v20
var v27 any
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("="))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(lang.NewKeyword("refer"), []any{v6})
v32 := lang.Apply(v30, []any{lang.NewKeyword("all"), v31})
if lang.IsTruthy(v32) {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("keys"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v14})
v27 = v36
} else {
v38 := lang.Apply(lang.NewKeyword("refer"), []any{v6})
var v37 any = v38
_ = v37
var v40 any
if lang.IsTruthy(v37) {
v40 = v37
} else {
v42 := lang.Apply(lang.NewKeyword("only"), []any{v6})
var v41 any = v42
_ = v41
var v44 any
if lang.IsTruthy(v41) {
v44 = v41
} else {
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("keys"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v14})
v44 = v48
}
v40 = v44
}
v27 = v40
}
var v26 any = v27
_ = v26
var v38 any
var v39 any = v26
_ = v39
var v41 any
if lang.IsTruthy(v39) {
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("not"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("instance?"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{lang.Sequential, v26})
v49 := lang.Apply(v44, []any{v48})
v41 = v49
} else {
v41 = v39
}
if lang.IsTruthy(v41) {
v39 := lang.Apply(errors6.New, []any{":only/:refer value must be a sequential collection of symbols"})
panic(v39)
} else {
v38 = nil
}
_ = v38
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("seq"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v26})
var v40 any = v44
_ = v40
var v45 any = nil
_ = v45
var v46 any = int64(0)
_ = v46
var v47 any = int64(0)
_ = v47
var v48 any
for {
var v49 any
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("<"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v47, v46})
if lang.IsTruthy(v53) {
v55, _ := lang.FieldOrMethod(v45, "nth")
if reflect.TypeOf(v55).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v56 := lang.Apply(v55, []any{v47})
var v54 any = v56
_ = v54
var v58 any
v59 := lang.Apply(v20, []any{v54})
if lang.IsTruthy(v59) {
v58 = nil
} else {
v61 := lang.Apply(v14, []any{v54})
var v60 any = v61
_ = v60
var v63 any
if lang.IsTruthy(v60) {
v63 = nil
} else {
panic("unimplemented: new with non-constant class type")
}
_ = v63
v64 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v65 := v64.FindInternedVar(lang.NewSymbol("*ns*"))
if v65.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v65)))
}
v66 := v65.Get()
v68 := lang.Apply(v19, []any{v54})
var v67 any = v68
_ = v67
var v70 any
if lang.IsTruthy(v67) {
v70 = v67
} else {
v70 = v54
}
v67, _ := lang.FieldOrMethod(v66, "Refer")
if reflect.TypeOf(v67).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Refer is not a function")))
}
v68 := lang.Apply(v67, []any{v70, v60})
v58 = v68
}
_ = v58
var v60 any = v40
var v61 any = v45
var v62 any = v46
v64 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v65 := v64.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v65.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v65)))
}
v66 := v65.Get()
v67 := lang.Apply(v66, []any{v47})
var v63 any = v67
v40 = v60
v45 = v61
v46 = v62
v47 = v63
continue
} else {
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("seq"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{v40})
var v54 any = v58
_ = v54
var v60 any
if lang.IsTruthy(v54) {
var v61 any = v54
_ = v61
var v63 any
v64 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v65 := v64.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v65.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v65)))
}
v66 := v65.Get()
v67 := lang.Apply(v66, []any{v61})
if lang.IsTruthy(v67) {
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("chunk-first"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{v61})
var v68 any = v72
_ = v68
v75 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v76 := v75.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v76.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v76)))
}
v77 := v76.Get()
v78 := lang.Apply(v77, []any{v61})
var v74 any = v78
var v79 any = v68
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("int"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("count"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.Apply(v86, []any{v68})
v88 := lang.Apply(v83, []any{v87})
var v80 any = v88
v90 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v91 := v90.FindInternedVar(lang.NewSymbol("int"))
if v91.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v91)))
}
v92 := v91.Get()
v93 := lang.Apply(v92, []any{int64(0)})
var v89 any = v93
v40 = v74
v45 = v79
v46 = v80
v47 = v89
continue
} else {
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("first"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{v61})
var v68 any = v72
_ = v68
var v74 any
v75 := lang.Apply(v20, []any{v68})
if lang.IsTruthy(v75) {
v74 = nil
} else {
v77 := lang.Apply(v14, []any{v68})
var v76 any = v77
_ = v76
var v79 any
if lang.IsTruthy(v76) {
v79 = nil
} else {
panic("unimplemented: new with non-constant class type")
}
_ = v79
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("*ns*"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v84 := lang.Apply(v19, []any{v68})
var v83 any = v84
_ = v83
var v86 any
if lang.IsTruthy(v83) {
v86 = v83
} else {
v86 = v68
}
v83, _ := lang.FieldOrMethod(v82, "Refer")
if reflect.TypeOf(v83).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Refer is not a function")))
}
v84 := lang.Apply(v83, []any{v86, v76})
v74 = v84
}
_ = v74
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("next"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.Apply(v79, []any{v61})
var v76 any = v80
var v81 any = nil
var v82 any = int64(0)
var v83 any = int64(0)
v40 = v76
v45 = v81
v46 = v82
v47 = v83
continue
}
v60 = v63
} else {
v60 = nil
}
v49 = v60
}
v48 = v49
  break
}
return v48
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// refer-glojure
{
v0 := lang.NewSymbol("refer-glojure").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("filters"))), lang.NewKeyword("doc"), "Same as (refer 'glojure.core <filters>)", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(5800), lang.NewKeyword("end-line"), int(5800))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol("glojure.core/refer")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("seq"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("concat"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("list"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{lang.NewSymbol("quote")})
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("list"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{lang.NewSymbol("glojure.core")})
v33 := lang.Apply(v24, []any{v28, v32})
v34 := lang.Apply(v21, []any{v33})
v35 := lang.Apply(v18, []any{v34})
v36 := lang.Apply(v11, []any{v15, v35, v5})
v37 := lang.Apply(v8, []any{v36})
return v37
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// release-pending-sends
{
v0 := lang.NewSymbol("release-pending-sends").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Normally, actions sent directly or indirectly during another action\n  are held until the action completes (changes the agent's\n  state). This function can be used to dispatch any pending sent\n  actions immediately. This has no impact on actions sent during a\n  transaction, which are still held until commit. If no action is\n  occurring, does nothing. Returns the number of actions dispatched.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(27), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2131), lang.NewKeyword("end-line"), int(2131))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := lang.Apply(nil, nil)
return v3
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// rem
{
var v1 lang.FnFunc
{ // function rem__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/remainder")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("rem").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("num"), lang.NewSymbol("div"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "remainder of dividing numerator by denominator.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1274), lang.NewKeyword("end-line"), int(1274))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "remainder")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("remainder is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// remove
{
v0 := lang.NewSymbol("remove").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred")), lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2818), lang.NewKeyword("end-line"), int(2818))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("filter"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("complement"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
v11 := lang.Apply(v6, []any{v10})
return v11
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("filter"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("complement"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
v12 := lang.Apply(v7, []any{v11, v4})
return v12
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// remove-all-methods
{
v0 := lang.NewSymbol("remove-all-methods").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("multifn"))), lang.NewKeyword("doc"), "Removes all of the methods of multimethod.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(24), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1787), lang.NewKeyword("end-line"), int(1787))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "reset")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "reset")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// remove-method
{
v0 := lang.NewSymbol("remove-method").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("multifn"), lang.NewSymbol("dispatch-val"))), lang.NewKeyword("doc"), "Removes the method of multimethod associated with dispatch-value.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1794), lang.NewKeyword("end-line"), int(1794))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "removeMethod")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("removeMethod is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// remove-ns
{
v0 := lang.NewSymbol("remove-ns").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("sym"))), lang.NewKeyword("doc"), "Removes the namespace named by the symbol. Use with caution.\n  Cannot be used to remove the glojure namespace.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4139), lang.NewKeyword("end-line"), int(4139))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(lang.RemoveNamespace, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// remove-tap
{
v0 := lang.NewSymbol("remove-tap").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"))), lang.NewKeyword("doc"), "Remove f from the tap set.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.10", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7883), lang.NewKeyword("end-line"), int(7883))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("swap!"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("tapset"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("disj"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v6, []any{v9, v12, v3})
_ = v13
return nil
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// remove-watch
{
v0 := lang.NewSymbol("remove-watch").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("reference"), lang.NewSymbol("key"))), lang.NewKeyword("doc"), "Removes a watch (set by add-watch) from a reference", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2160), lang.NewKeyword("end-line"), int(2160))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "removeWatch")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("removeWatch is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// repeat
{
v0 := lang.NewSymbol("repeat").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2997), lang.NewKeyword("end-line"), int(2997))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.Apply(lang.NewRepeat, []any{v3})
return v4
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.Apply(lang.NewRepeatN, []any{v3, v4})
return v5
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// repeatedly
{
v0 := lang.NewSymbol("repeatedly").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("f"))), lang.NewKeyword("doc"), "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5167), lang.NewKeyword("end-line"), int(5167))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("cons"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v3, nil)
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("repeatedly"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3})
v13 := lang.Apply(v7, []any{v8, v12})
return v13
})
v5 := lang.Apply(lang.NewLazySeq, []any{v4})
return v5
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("take"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("repeatedly"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
v12 := lang.Apply(v7, []any{v3, v11})
return v12
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// replace
{
v0 := lang.NewSymbol("replace").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("smap")), lang.NewVector(lang.NewSymbol("smap"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5082), lang.NewKeyword("end-line"), int(5082))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("map"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := args[0]
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("find"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3, v8})
var v9 any = v13
_ = v9
var v15 any
if lang.IsTruthy(v9) {
var v16 any = v9
_ = v16
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("val"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v16})
v15 = v21
} else {
v15 = v8
}
return v15
})
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5090), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(5090), lang.NewKeyword("end-column"), int(47))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v10 := lang.Apply(v6, []any{v9})
return v10
  case 2:
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("vector?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("reduce1"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
var v13 lang.FnFunc
v13 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v14 := args[0]
v15 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("find"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("nth"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v14, v15})
v24 := lang.Apply(v19, []any{v3, v23})
var v16 any = v24
_ = v16
var v26 any
if lang.IsTruthy(v16) {
var v27 any = v16
_ = v27
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("assoc"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("val"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v27})
v36 := lang.Apply(v31, []any{v14, v15, v35})
v26 = v36
} else {
v26 = v14
}
return v26
})
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5093), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(5096), lang.NewKeyword("end-column"), int(23))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("range"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("count"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v4})
v23 := lang.Apply(v18, []any{v22})
v24 := lang.Apply(v12, []any{v15, v4, v23})
v5 = v24
} else {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("map"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
var v28 lang.FnFunc
v28 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v29 := args[0]
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("find"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3, v29})
var v30 any = v34
_ = v30
var v36 any
if lang.IsTruthy(v30) {
var v37 any = v30
_ = v37
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("val"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v37})
v36 = v42
} else {
v36 = v29
}
return v36
})
v29 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5098), lang.NewKeyword("column"), int(13), lang.NewKeyword("end-line"), int(5098), lang.NewKeyword("end-column"), int(49))
v30, err := lang.WithMeta(v28, v29.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v31 := lang.Apply(v27, []any{v30, v4})
v5 = v31
}
return v5
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// replicate
{
v0 := lang.NewSymbol("replicate").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("x"))), lang.NewKeyword("doc"), "DEPRECATED: Use 'repeat' instead.\n   Returns a lazy seq of n xs.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("deprecated"), "1.3", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3004), lang.NewKeyword("end-line"), int(3004))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("take"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("repeat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
v12 := lang.Apply(v7, []any{v3, v11})
return v12
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// require
{
v0 := lang.NewSymbol("require").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib, a prefix list that identifies\n  multiple libs whose names share a common prefix, or a flag that modifies\n  how all the identified libs are loaded. Use :require in the ns macro\n  in preference to calling this directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of Clojure code. Lib names are symbols and each lib is associated\n  with a Clojure namespace and a Java package that share its name. A lib's\n  name also locates its root directory within classpath using Java's\n  package name to classpath-relative path mapping. All resources in a lib\n  should be contained in the directory structure under its root directory.\n  All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj, or\n  <classpath>/x/y/z.cljc if <classpath>/x/y/z.clj does not exist. The\n  root resource should contain code to create the lib's\n  namespace (usually by using the ns macro) and load any additional\n  lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :as-alias takes a symbol as its argument and aliases like :as, however\n    the lib will not be loaded. If the lib has not been loaded, a new\n    empty namespace will be created (as with create-ns).\n  :refer takes a list of symbols to refer from the namespace or the :all\n    keyword to bring in all public vars.\n\n  Prefix Lists\n\n  It's common for Clojure code to depend on several libs whose names have\n  the same prefix. When specifying libs, prefix lists can be used to reduce\n  repetition. A prefix list contains the shared prefix followed by libspecs\n  with the shared prefix removed from the lib names. After removing the\n  prefix, the names that remain must not contain any periods.\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded (has no effect on libspecs using :as-alias)\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n    (has no effect on libspecs using :as-alias)\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the libraries glojure.zip and glojure.set\n  abbreviated as 's'.\n\n  (require '(glojure zip [set :as s]))", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5989), lang.NewKeyword("end-line"), int(5989))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("apply"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("load-libs"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{v9, lang.NewKeyword("require"), v3})
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// requiring-resolve
{
v0 := lang.NewSymbol("requiring-resolve").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("sym"))), lang.NewKeyword("doc"), "Resolves namespace-qualified sym per 'resolve'. If initial resolve\nfails, attempts to require sym's namespace and retries.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.10", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6068), lang.NewKeyword("end-line"), int(6068))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("qualified-symbol?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("resolve"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3})
var v9 any = v13
_ = v9
var v15 any
if lang.IsTruthy(v9) {
v15 = v9
} else {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("serialized-require"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("symbol"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("namespace"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v21, []any{v25})
v27 := lang.Apply(v18, []any{v26})
_ = v27
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("resolve"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v3})
v15 = v31
}
v4 = v15
} else {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("str"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{"Not a qualified symbol: ", v3})
v13 := lang.Apply(lang.NewIllegalArgumentError, []any{v12})
panic(v13)
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reset!
{
v0 := lang.NewSymbol("reset!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("atom"), lang.NewSymbol("newval"))), lang.NewKeyword("doc"), "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2368), lang.NewKeyword("end-line"), int(2368))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "reset")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("reset is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reset-meta!
{
v0 := lang.NewSymbol("reset-meta!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("iref"), lang.NewSymbol("metadata-map"))), lang.NewKeyword("doc"), "Atomically resets the metadata for a namespace/var/ref/agent/atom", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2408), lang.NewKeyword("end-line"), int(2408))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "ResetMeta")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("ResetMeta is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reset-vals!
{
v0 := lang.NewSymbol("reset-vals!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("atom"), lang.NewSymbol("newval"))), lang.NewKeyword("doc"), "Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2375), lang.NewKeyword("end-line"), int(2375))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "resetVals")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("resetVals is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// resolve
{
v0 := lang.NewSymbol("resolve").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("sym")), lang.NewVector(lang.NewSymbol("env"), lang.NewSymbol("sym"))), lang.NewKeyword("doc"), "same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4371), lang.NewKeyword("end-line"), int(4371))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("ns-resolve"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("*ns*"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{v9, v3})
return v10
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("ns-resolve"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("*ns*"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v7, []any{v10, v3, v4})
return v11
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// rest
{
v1 := reflect.TypeOf((*lang.ISeq)(nil)).Elem()
v0 := lang.NewSymbol("rest").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(5), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(64), lang.NewKeyword("end-line"), int(70))).(*lang.Symbol)
var v3 lang.FnFunc
{ // function rest
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v6 := lang.Apply(lang.Rest, []any{v5})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(70), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(70), lang.NewKeyword("end-column"), int(77))).(lang.FnFunc)
v4 := v3
_ = v4
}
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// restart-agent
{
v0 := lang.NewSymbol("restart-agent").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("new-state"), lang.NewSymbol("&"), lang.NewSymbol("options"))), lang.NewKeyword("doc"), "When an agent is failed, changes the agent state to new-state and\n  then un-fails the agent so that sends are allowed again.  If\n  a :clear-actions true option is given, any actions queued on the\n  agent that were being held while it was failed will be discarded,\n  otherwise those held actions will proceed.  The new-state must pass\n  the validator if any, or restart will throw an exception and the\n  agent will remain failed with its old state and error.  Watchers, if\n  any, will NOT be notified of the new state.  Throws an exception if\n  the agent is not failed.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2175), lang.NewKeyword("end-line"), int(2175))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("hash-map"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v9, []any{v12, v5})
var v6 any = v13
_ = v6
var v15 any
v16 := lang.Apply(lang.NewKeyword("clear-actions"), []any{v6})
if lang.IsTruthy(v16) {
v15 = true
} else {
v15 = false
}
v17, _ := lang.FieldOrMethod(v3, "restart")
if reflect.TypeOf(v17).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("restart is not a function")))
}
v18 := lang.Apply(v17, []any{v4, v15})
return v18
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// resultset-seq
{
v0 := lang.NewSymbol("resultset-seq").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("rs"))), lang.NewKeyword("doc"), "Creates and returns a lazy sequence of structmaps corresponding to\n  the rows in the java.sql.ResultSet rs", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5681), lang.NewKeyword("end-line"), int(5681))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5, _ := lang.FieldOrMethod(v3, "getMetaData")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("getMetaData is not a function")))
}
v6 := lang.Apply(v5, []any{})
var v4 any = v6
_ = v4
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("range"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("inc"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14, _ := lang.FieldOrMethod(v4, "getColumnCount")
if reflect.TypeOf(v14).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("getColumnCount is not a function")))
}
v15 := lang.Apply(v14, []any{})
v16 := lang.Apply(v13, []any{v15})
v17 := lang.Apply(v10, []any{int64(1), v16})
var v7 any = v17
_ = v7
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("map"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("comp"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("keyword"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
var v28 lang.FnFunc
v28 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v29 := args[0]
v30, ok := lang.FieldOrMethod(v29, "toLowerCase")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v29, "toLowerCase")))
}
var v31 any
switch reflect.TypeOf(v30).Kind() {
case reflect.Func:
  v31 = lang.Apply(v30, nil)
default:
  v31 = v30
}
return v31
})
v29 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5688), lang.NewKeyword("column"), int(35), lang.NewKeyword("end-line"), int(5688), lang.NewKeyword("end-column"), int(62))
v30, err := lang.WithMeta(v28, v29.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v31 := lang.Apply(v24, []any{v27, v30})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("map"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
var v35 lang.FnFunc
v35 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v36 := args[0]
v37, _ := lang.FieldOrMethod(v4, "getColumnLabel")
if reflect.TypeOf(v37).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("getColumnLabel is not a function")))
}
v38 := lang.Apply(v37, []any{v36})
return v38
})
v36 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5689), lang.NewKeyword("column"), int(26), lang.NewKeyword("end-line"), int(5689), lang.NewKeyword("end-column"), int(63))
v37, err := lang.WithMeta(v35, v36.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v38 := lang.Apply(v34, []any{v37, v7})
v39 := lang.Apply(v21, []any{v31, v38})
var v18 any = v39
_ = v18
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("apply"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("distinct?"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v44, []any{v47, v18})
var v41 any = v48
_ = v41
var v50 any
if lang.IsTruthy(v41) {
v50 = v41
} else {
v51 := lang.Apply(lang.NewError, []any{"ResultSet must have unique column labels"})
panic(v51)
}
var v40 any = v50
_ = v40
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("apply"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("create-struct"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v44, []any{v47, v18})
var v41 any = v48
_ = v41
var v50 lang.FnFunc
v50 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("map"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
var v54 lang.FnFunc
v54 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v55 := args[0]
v56, _ := lang.FieldOrMethod(v3, "getObject")
if reflect.TypeOf(v56).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("getObject is not a function")))
}
v57 := lang.Apply(v56, []any{v55})
return v57
})
v55 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5694), lang.NewKeyword("column"), int(34), lang.NewKeyword("end-line"), int(5694), lang.NewKeyword("end-column"), int(71))
v56, err := lang.WithMeta(v54, v55.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v57 := lang.Apply(v53, []any{v56, v7})
return v57
})
v51 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5694), lang.NewKeyword("column"), int(22), lang.NewKeyword("end-line"), int(5694), lang.NewKeyword("end-column"), int(78))
v52, err := lang.WithMeta(v50, v51.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v49 any = v52
_ = v49
var v54 lang.FnFunc
{ // function thisfn
v54 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
var v56 any
v57, _ := lang.FieldOrMethod(v3, "next")
if reflect.TypeOf(v57).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("next is not a function")))
}
v58 := lang.Apply(v57, []any{})
if lang.IsTruthy(v58) {
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("cons"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("apply"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("struct"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v49, nil)
v69 := lang.Apply(v64, []any{v67, v41, v68})
var v70 lang.FnFunc
v70 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v71 := lang.Apply(v55, nil)
return v71
})
v71 := lang.Apply(lang.NewLazySeq, []any{v70})
v72 := lang.Apply(v61, []any{v69, v71})
v56 = v72
} else {
v56 = nil
}
return v56
})
v55 := v54
_ = v55
}
v55 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5695), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(5697), lang.NewKeyword("end-column"), int(86))
v56, err := lang.WithMeta(v54, v55.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v53 any = v56
_ = v53
v58 := lang.Apply(v53, nil)
return v58
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reverse
{
v0 := lang.NewSymbol("reverse").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a seq of the items in coll in reverse order. Not lazy.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(940), lang.NewKeyword("end-line"), int(940))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("reduce1"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("conj"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{v9, lang.NewList(), v3})
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// reversible?
{
v0 := lang.NewSymbol("reversible?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns true if coll implements Reversible", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6257), lang.NewKeyword("end-line"), int(6257))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{glojure.lang4.Reversible, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// root-directory
{
v0 := lang.NewSymbol("root-directory").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("lib"))), lang.NewKeyword("doc"), "Returns the root resource path for a lib", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(5871), lang.NewKeyword("end-line"), int(5871), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("root-resource"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("subs"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(strings12.LastIndex, []any{v4, "/"})
v14 := lang.Apply(v12, []any{v4, int64(0), v13})
return v14
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// root-resource
{
v1 := reflect.TypeOf("")
v0 := lang.NewSymbol("root-resource").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("lib"))), lang.NewKeyword("doc"), "Returns the root directory path for a lib", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(5864), lang.NewKeyword("end-line"), int(5864), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("str"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("name"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
v12 := lang.Apply(strings12.ReplaceAll, []any{v11, "-", "_"})
v13 := lang.Apply(strings12.ReplaceAll, []any{v12, ".", "/"})
v14 := lang.Apply(v7, []any{lang.NewChar(47), v13})
return v14
})
v4 := reflect.TypeOf("")
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// rseq
{
v0 := lang.NewSymbol("rseq").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("rev"))), lang.NewKeyword("doc"), "Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1577), lang.NewKeyword("end-line"), int(1577))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(v3, "rseq")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("rseq is not a function")))
}
v5 := lang.Apply(v4, []any{})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// rsubseq
{
v0 := lang.NewSymbol("rsubseq").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("sc"), lang.NewSymbol("test"), lang.NewSymbol("key")), lang.NewVector(lang.NewSymbol("sc"), lang.NewSymbol("start-test"), lang.NewSymbol("start-key"), lang.NewSymbol("end-test"), lang.NewSymbol("end-key"))), lang.NewKeyword("doc"), "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5150), lang.NewKeyword("end-line"), int(5150))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("mk-bound-fn"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3, v4, v5})
var v6 any = v10
_ = v6
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("<"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("<="))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.CreatePersistentTreeSet(v15, v18)
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5158), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(5158), lang.NewKeyword("end-column"), int(17))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v22 := lang.Apply(v21, []any{v4})
if lang.IsTruthy(v22) {
v24, _ := lang.FieldOrMethod(v3, "seqFrom")
if reflect.TypeOf(v24).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("seqFrom is not a function")))
}
v25 := lang.Apply(v24, []any{v5, false})
var v23 any = v25
_ = v23
var v27 any
if lang.IsTruthy(v23) {
var v28 any = v23
_ = v28
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("nth"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v28, int64(0), nil})
var v29 any = v33
_ = v29
var v34 any = v28
_ = v34
var v36 any
v37 := lang.Apply(v6, []any{v29})
if lang.IsTruthy(v37) {
v36 = v34
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("next"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v34})
v36 = v41
}
v27 = v36
} else {
v27 = nil
}
v12 = v27
} else {
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("take-while"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26, _ := lang.FieldOrMethod(v3, "seq")
if reflect.TypeOf(v26).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("seq is not a function")))
}
v27 := lang.Apply(v26, []any{false})
v28 := lang.Apply(v25, []any{v6, v27})
v12 = v28
}
return v12
  case 5:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v9, _ := lang.FieldOrMethod(v3, "seqFrom")
if reflect.TypeOf(v9).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("seqFrom is not a function")))
}
v10 := lang.Apply(v9, []any{v7, false})
var v8 any = v10
_ = v8
var v12 any
if lang.IsTruthy(v8) {
var v13 any = v8
_ = v13
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("nth"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v13, int64(0), nil})
var v14 any = v18
_ = v14
var v19 any = v13
_ = v19
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("take-while"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("mk-bound-fn"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v3, v4, v5})
var v28 any
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("mk-bound-fn"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v3, v6, v7})
v33 := lang.Apply(v32, []any{v14})
if lang.IsTruthy(v33) {
v28 = v19
} else {
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("next"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{v19})
v28 = v37
}
v38 := lang.Apply(v23, []any{v27, v28})
v12 = v38
} else {
v12 = nil
}
return v12
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// run!
{
v0 := lang.NewSymbol("run!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("proc"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7708), lang.NewKeyword("end-line"), int(7708))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("reduce"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
var v8 lang.FnFunc
v8 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := args[0]
v10 := args[1]
v11 := lang.Apply(v3, []any{v10})
return v11
})
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7713), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(7713), lang.NewKeyword("end-column"), int(20))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v11 := lang.Apply(v7, []any{v10, nil, v4})
_ = v11
return nil
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// second
{
v0 := lang.NewSymbol("second").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Same as (first (next x))", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(91), lang.NewKeyword("end-line"), int(95))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function second
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("first"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("next"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
v12 := lang.Apply(v7, []any{v11})
return v12
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(95), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(95), lang.NewKeyword("end-column"), int(49))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// select-keys
{
v0 := lang.NewSymbol("select-keys").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("map"), lang.NewSymbol("keyseq"))), lang.NewKeyword("doc"), "Returns a map containing only those entries in map whose key is in keys", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1536), lang.NewKeyword("end-line"), int(1536))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6 := lang.NewMap()
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(1541), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(1541), lang.NewKeyword("end-column"), int(17))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v5 any = v8
_ = v5
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v4})
var v9 any = v13
_ = v9
var v14 any
for {
var v15 any
if lang.IsTruthy(v9) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("first"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v9})
v21, _ := lang.FieldOrMethod(runtime5.RT, "Find")
if reflect.TypeOf(v21).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Find is not a function")))
}
v22 := lang.Apply(v21, []any{v3, v20})
var v16 any = v22
_ = v16
var v25 any
if lang.IsTruthy(v16) {
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("conj"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v5, v16})
v25 = v29
} else {
v25 = v5
}
var v24 any = v25
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("next"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v9})
var v30 any = v34
v5 = v24
v9 = v30
continue
} else {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("with-meta"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("meta"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v3})
v23 := lang.Apply(v18, []any{v5, v22})
v15 = v23
}
v14 = v15
  break
}
return v14
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// send
{
v0 := lang.NewSymbol("send").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Dispatch an action to an agent. Returns the agent immediately.\n  Subsequently, in a thread from a thread pool, the state of the agent\n  will be set to the value of:\n\n  (apply action-fn state-of-agent args)", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2109), lang.NewKeyword("end-line"), int(2109))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("apply"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("send-via"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v8, []any{v11, nil, v3, v4, v5})
return v12
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// send-off
{
v0 := lang.NewSymbol("send-off").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Dispatch a potentially blocking action to an agent. Returns the\n  agent immediately. Subsequently, in a separate thread, the state of\n  the agent will be set to the value of:\n\n  (apply action-fn state-of-agent args)", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2120), lang.NewKeyword("end-line"), int(2120))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("apply"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("send-via"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v8, []any{v11, nil, v3, v4, v5})
return v12
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// send-via
{
v0 := lang.NewSymbol("send-via").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("executor"), lang.NewSymbol("a"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Dispatch an action to an agent. Returns the agent immediately.\n  Subsequently, in a thread supplied by executor, the state of the agent\n  will be set to the value of:\n\n  (apply action-fn state-of-agent args)", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.5", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2099), lang.NewKeyword("end-line"), int(2099))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("hash-map"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("*agent*"))
v15 := lang.Apply(v13, []any{v14, v4})
v16 := lang.Apply(v10, []any{v15})
_ = v16
var v17 any
func() {
defer func() {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, nil)
}()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("binding-conveyor-fn"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v5})
v17 = v25
}()
v7, _ := lang.FieldOrMethod(v4, "dispatch")
if reflect.TypeOf(v7).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("dispatch is not a function")))
}
v8 := lang.Apply(v7, []any{v17, v6, v3})
return v8
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// seq
{
v1 := reflect.TypeOf((*lang.ISeq)(nil)).Elem()
v0 := lang.NewSymbol("seq").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a seq on the collection. If the collection is\n    empty, returns nil.  (seq nil) returns nil. seq also works on\n    Strings, native Java arrays (of reference types) and any objects\n    that implement Iterable. Note that seqs cache values, thus seq\n    should not be used on any Iterable whose iterator repeatedly\n    returns the same mutable object.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(4), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(126), lang.NewKeyword("end-line"), int(136))).(*lang.Symbol)
var v3 lang.FnFunc
{ // function seq
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v6 := lang.Apply(lang.Seq, []any{v5})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(136), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(136), lang.NewKeyword("end-column"), int(126))).(lang.FnFunc)
v4 := v3
_ = v4
}
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// seq-to-map-for-destructuring
{
v0 := lang.NewSymbol("seq-to-map-for-destructuring").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Builds a map from a seq as described in\n  https://glojure.org/reference/special_forms#keyword-arguments", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(34), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4390), lang.NewKeyword("end-line"), int(4390))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("next"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("to-array"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3})
v13 := lang.Apply(lang.NewPersistentArrayMapAsIfByAssoc, []any{v12})
v4 = v13
} else {
var v14 any
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("seq"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
if lang.IsTruthy(v18) {
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("first"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v3})
v14 = v22
} else {
v14 = nil
}
v4 = v14
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// seq?
{
v0 := lang.NewSymbol("seq?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x implements ISeq", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(5), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(146), lang.NewKeyword("end-line"), int(150))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function seq?
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.ISeq, v4})
return v8
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(150), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(150), lang.NewKeyword("end-column"), int(87))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// seqable?
{
v0 := lang.NewSymbol("seqable?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if the seq function is supported for x", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6204), lang.NewKeyword("end-line"), int(6204))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(nil, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// seque
{
v0 := lang.NewSymbol("seque").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s")), lang.NewVector(lang.NewSymbol("n-or-q"), lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Creates a queued seq on another (presumably lazy) seq s. The queued\n  seq will produce a concrete seq in the background, and can get up to\n  n items ahead of the consumer. n-or-q can be an integer n buffer\n  size, or an instance of java.util.concurrent BlockingQueue. Note\n  that reading from a seque can block if the reader gets ahead of the\n  producer.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5419), lang.NewKeyword("end-line"), int(5419))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seque"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{int64(100), v3})
return v7
  case 2:
v3 := args[0]
v4 := args[1]
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("instance?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{nil, v3})
if lang.IsTruthy(v10) {
v6 = v3
} else {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("int"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3})
v15 := lang.Apply(LinkedBlockingQueue22., []any{v14})
v6 = v15
}
var v5 any = v6
_ = v5
v17 := lang.Apply(reflect.StructOf, []any{nil})
v18 := lang.Apply(reflect.New, []any{v17})
v19, ok := lang.FieldOrMethod(v18, "Interface")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v18, "Interface")))
}
var v20 any
switch reflect.TypeOf(v19).Kind() {
case reflect.Func:
  v20 = lang.Apply(v19, nil)
default:
  v20 = v19
}
var v16 any = v20
_ = v16
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("agent"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
var v25 lang.FnFunc
v25 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
return v4
})
v26 := lang.Apply(lang.NewLazySeq, []any{v25})
v27 := lang.Apply(v24, []any{v26})
var v21 any = v27
_ = v21
var v29 lang.FnFunc
v29 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v30 := args[0]
v31 := args[1]
var v32 any
v33, _ := lang.FieldOrMethod(v30, "offer")
if reflect.TypeOf(v33).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("offer is not a function")))
}
v34 := lang.Apply(v33, []any{v30})
if lang.IsTruthy(v34) {
panic(v31)
} else {
v32 = v31
}
return v32
})
v30 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5435), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(5438), lang.NewKeyword("end-column"), int(26))
v31, err := lang.WithMeta(v29, v30.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v28 any = v31
_ = v28
var v33 lang.FnFunc
v33 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v34 := args[0]
var v35 any
if lang.IsTruthy(v34) {
var v36 any
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("instance?"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{nil, v34})
if lang.IsTruthy(v40) {
v41 := lang.Apply(v28, []any{v5, v34})
v36 = v41
} else {
var v42 any
func() {
defer func() {
if r := recover(); r != nil {
if lang.CatchMatches(r, lang.Builtins["any"]) {
v43 := r
_ = v43
v44 := lang.Apply(v28, []any{v5, v43})
v42 = v44
} else {
panic(r)
}
}
}()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("seq"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v34})
var v43 any = v47
_ = v43
var v48 any = v43
_ = v48
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("seq"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v48})
var v49 any = v53
_ = v49
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("first"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{v49})
var v54 any = v58
_ = v54
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("next"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.Apply(v62, []any{v59})
var v59 any = v63
_ = v59
var v64 any = v54
_ = v64
var v65 any = v59
_ = v65
var v66 any = v48
_ = v66
var v68 any = v68
_ = v68
var v69 any
for {
var v70 any = v68
_ = v70
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("seq"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.Apply(v74, []any{v70})
var v71 any = v75
_ = v71
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("first"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.Apply(v79, []any{v71})
var v76 any = v80
_ = v76
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("next"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.Apply(v84, []any{v81})
var v81 any = v85
_ = v81
var v86 any = v76
_ = v86
var v87 any = v81
_ = v87
var v88 any = v70
_ = v88
var v90 any
if lang.IsTruthy(v88) {
var v91 any
var v92 any
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("nil?"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.Apply(v95, []any{v86})
if lang.IsTruthy(v96) {
v92 = v16
} else {
v92 = v86
}
v97, _ := lang.FieldOrMethod(v5, "offer")
if reflect.TypeOf(v97).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("offer is not a function")))
}
v98 := lang.Apply(v97, []any{v92})
if lang.IsTruthy(v98) {
var v99 any = v87
v68 = v99
continue
} else {
v91 = v88
}
v90 = v91
} else {
var v100 any
v101, _ := lang.FieldOrMethod(v5, "offer")
if reflect.TypeOf(v101).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("offer is not a function")))
}
v102 := lang.Apply(v101, []any{v5})
if lang.IsTruthy(v102) {
v100 = nil
} else {
v100 = lang.NewList()
}
v90 = v100
}
v69 = v90
  break
}
v42 = v69
}()
v36 = v42
}
v35 = v36
} else {
v35 = nil
}
return v35
})
v34 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5439), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(5452), lang.NewKeyword("end-column"), int(44))
v35, err := lang.WithMeta(v33, v34.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v32 any = v35
_ = v32
var v37 lang.FnFunc
{ // function drain
v37 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
var v39 lang.FnFunc
v39 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v41, ok := lang.FieldOrMethod(v5, "take")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v5, "take")))
}
var v42 any
switch reflect.TypeOf(v41).Kind() {
case reflect.Func:
  v42 = lang.Apply(v41, nil)
default:
  v42 = v41
}
var v40 any = v42
_ = v40
var v44 any
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("identical?"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v40, v5})
if lang.IsTruthy(v48) {
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("deref"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{v21})
_ = v52
v44 = nil
} else {
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("send-off"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{v21, v32})
_ = v56
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("release-pending-sends"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, nil)
_ = v60
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("cons"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
var v64 any
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("identical?"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v40, v16})
if lang.IsTruthy(v68) {
v64 = nil
} else {
v64 = v40
}
v69 := lang.Apply(v38, nil)
v70 := lang.Apply(v63, []any{v64, v69})
v44 = v70
}
return v44
})
v40 := lang.Apply(lang.NewLazySeq, []any{v39})
return v40
})
v38 := v37
_ = v38
}
v38 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5453), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(5461), lang.NewKeyword("end-column"), int(73))
v39, err := lang.WithMeta(v37, v38.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v36 any = v39
_ = v36
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("send-off"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v21, v32})
_ = v44
v45 := lang.Apply(v36, nil)
return v45
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// sequence
{
v0 := lang.NewSymbol("sequence").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("xform"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("xform"), lang.NewSymbol("coll"), lang.NewSymbol("&"), lang.NewSymbol("colls"))), lang.NewKeyword("doc"), "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2639), lang.NewKeyword("end-line"), int(2639))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v4 = v3
} else {
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("seq"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3})
var v9 any = v13
_ = v9
var v15 any
if lang.IsTruthy(v9) {
v15 = v9
} else {
v15 = lang.NewList()
}
v4 = v15
}
return v4
  case 2:
v3 := args[0]
v4 := args[1]
v6 := lang.Apply(nil, []any{v4})
v7 := lang.Apply(nil, []any{v3, v6})
v8 := lang.Apply(nil, []any{v7})
var v5 any = v8
_ = v5
var v10 any
if lang.IsTruthy(v5) {
v10 = v5
} else {
v10 = lang.NewList()
}
return v10
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("map"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
var v10 lang.FnFunc
v10 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v11 := args[0]
v12 := lang.Apply(nil, []any{v11})
return v12
})
v11 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2661), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(2661), lang.NewKeyword("end-column"), int(41))
v12, err := lang.WithMeta(v10, v11.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("cons"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v4, v5})
v17 := lang.Apply(v9, []any{v12, v16})
v18 := lang.Apply(nil, []any{v3, v17})
v19 := lang.Apply(nil, []any{v18})
var v6 any = v19
_ = v6
var v21 any
if lang.IsTruthy(v6) {
v21 = v6
} else {
v21 = lang.NewList()
}
return v21
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// sequential?
{
v0 := lang.NewSymbol("sequential?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns true if coll implements Sequential", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6229), lang.NewKeyword("end-line"), int(6229))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.Sequential, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// serialized-require
{
v0 := lang.NewSymbol("serialized-require").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Like 'require', but serializes loading.\n  Interim function preferred over 'require' for known asynchronous loads.\n  Future changes may make these equivalent.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.10", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(6059), lang.NewKeyword("end-line"), int(6059), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
var v4 any = nil
_ = v4
var v6 any
func() {
var v7 any = v4
_ = v7
v9 := lang.Apply(nil, []any{v7})
_ = v9
var v10 any
func() {
defer func() {
v11 := lang.Apply(nil, []any{v7})
}()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("apply"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("require"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v14, []any{v17, v3})
v10 = v18
}()
v6 = v10
}()
return v6
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// set
{
v0 := lang.NewSymbol("set").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a set of the distinct elements of coll.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4104), lang.NewKeyword("end-line"), int(4104))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("set?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("with-meta"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3, nil})
v4 = v12
} else {
var v13 any
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("instance?"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.IReduceInit, v3})
if lang.IsTruthy(v17) {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("persistent!"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("conj!"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("transient"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.CreatePersistentTreeSet()
v28 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4112), lang.NewKeyword("column"), int(108), lang.NewKeyword("end-line"), int(4112), lang.NewKeyword("end-column"), int(110))
v29, err := lang.WithMeta(v27, v28.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v30 := lang.Apply(v26, []any{v29})
v31, _ := lang.FieldOrMethod(v3, "ReduceInit")
if reflect.TypeOf(v31).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("ReduceInit is not a function")))
}
v32 := lang.Apply(v31, []any{v23, v30})
v33 := lang.Apply(v20, []any{v32})
v13 = v33
} else {
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("persistent!"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("reduce1"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("conj!"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("transient"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.CreatePersistentTreeSet()
v47 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4113), lang.NewKeyword("column"), int(46), lang.NewKeyword("end-line"), int(4113), lang.NewKeyword("end-column"), int(48))
v48, err := lang.WithMeta(v46, v47.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v49 := lang.Apply(v45, []any{v48})
v50 := lang.Apply(v39, []any{v42, v49, v3})
v51 := lang.Apply(v36, []any{v50})
v13 = v51
}
v4 = v13
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// set-agent-send-executor!
{
v0 := lang.NewSymbol("set-agent-send-executor!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("executor"))), lang.NewKeyword("doc"), "Sets the ExecutorService to be used by send", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.5", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(30), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2087), lang.NewKeyword("end-line"), int(2087))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
return nil
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// set-agent-send-off-executor!
{
v0 := lang.NewSymbol("set-agent-send-off-executor!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("executor"))), lang.NewKeyword("doc"), "Sets the ExecutorService to be used by send-off", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.5", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(34), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2093), lang.NewKeyword("end-line"), int(2093))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
return nil
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// set-error-handler!
{
v0 := lang.NewSymbol("set-error-handler!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("handler-fn"))), lang.NewKeyword("doc"), "Sets the error-handler of agent a to handler-fn.  If an action\n  being run by the agent throws an exception or doesn't pass the\n  validator fn, handler-fn will be called with two arguments: the\n  agent and the exception.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(24), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2192), lang.NewKeyword("end-line"), int(2192))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "setErrorHandler")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setErrorHandler is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// set-error-mode!
{
v0 := lang.NewSymbol("set-error-mode!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("mode-keyword"))), lang.NewKeyword("doc"), "Sets the error-mode of agent a to mode-keyword, which must be\n  either :fail or :continue.  If an action being run by the agent\n  throws an exception or doesn't pass the validator fn, an\n  error-handler may be called (see set-error-handler!), after which,\n  if the mode is :continue, the agent will continue as if neither the\n  action that caused the error nor the error itself ever happened.\n  \n  If the mode is :fail, the agent will become failed and will stop\n  accepting new 'send' and 'send-off' actions, and any previously\n  queued actions will be held until a 'restart-agent'.  Deref will\n  still work, returning the state of the agent before the error.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2210), lang.NewKeyword("end-line"), int(2210))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "setErrorMode")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setErrorMode is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// set-validator!
{
v0 := lang.NewSymbol("set-validator!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("iref"), lang.NewSymbol("validator-fn"))), lang.NewKeyword("doc"), "Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an exception. If the current state (root\n  value if var) is not acceptable to the new validator, an exception\n  will be thrown and the validator will not be changed.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2381), lang.NewKeyword("end-line"), int(2381))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "setValidator")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setValidator is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// set?
{
v0 := lang.NewSymbol("set?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x implements IPersistentSet", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4098), lang.NewKeyword("end-line"), int(4098))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.IPersistentSet, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// setup-reference
{
v0 := lang.NewSymbol("setup-reference").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2043), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(2044), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("r"), lang.NewSymbol("options"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("apply"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("hash-map"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v8, []any{v11, v4})
var v5 any = v12
_ = v5
var v14 any
v15 := lang.Apply(lang.NewKeyword("meta"), []any{v5})
if lang.IsTruthy(v15) {
v16 := lang.Apply(lang.NewKeyword("meta"), []any{v5})
v17, _ := lang.FieldOrMethod(v3, "ResetMeta")
if reflect.TypeOf(v17).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("ResetMeta is not a function")))
}
v18 := lang.Apply(v17, []any{v16})
v14 = v18
} else {
v14 = nil
}
_ = v14
var v19 any
v20 := lang.Apply(lang.NewKeyword("validator"), []any{v5})
if lang.IsTruthy(v20) {
v21 := lang.Apply(lang.NewKeyword("validator"), []any{v5})
v22, _ := lang.FieldOrMethod(v3, "setValidator")
if reflect.TypeOf(v22).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setValidator is not a function")))
}
v23 := lang.Apply(v22, []any{v21})
v19 = v23
} else {
v19 = nil
}
_ = v19
return v3
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// shift-mask
{
v0 := lang.NewSymbol("shift-mask").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6598), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(6598), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("shift"), lang.NewSymbol("mask"), lang.NewSymbol("x"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("bit-and"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("bit-shift-right"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v5, v3})
v13 := lang.Apply(v8, []any{v12, v4})
return v13
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// short
{
var v1 lang.FnFunc
{ // function short__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
var v30 any
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("*unchecked-math*"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
if lang.IsTruthy(v33) {
v30 = lang.NewSymbol("uncheckedShortCast")
} else {
v30 = lang.NewSymbol("shortCast")
}
v34 := lang.Apply(v29, []any{v30})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v3})
v39 := lang.Apply(v26, []any{v34, v38})
v40 := lang.Apply(v23, []any{v39})
v41 := lang.Apply(v20, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("short").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to short", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3499), lang.NewKeyword("end-line"), int(3499))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.ShortCast, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// short-array
{
var v1 lang.FnFunc
{ // function short-array__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/shortArray")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("glojure.core/unquote-splicing")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{lang.NewSymbol("glojure.core/args")})
v39 := lang.Apply(v30, []any{v34, v38})
v40 := lang.Apply(v27, []any{v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v9, []any{v13, v17, v21, v41})
v43 := lang.Apply(v6, []any{v42})
return v43
  }
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("short-array").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("size-or-seq")), lang.NewVector(lang.NewSymbol("size"), lang.NewSymbol("init-val-or-seq"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Creates an array of shorts", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("inline-arities"), lang.CreatePersistentTreeSet(int64(1)int64(2)), lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5333), lang.NewKeyword("end-line"), int(5333))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "shortArray")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("shortArray is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
  case 2:
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "shortArrayInit")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("shortArrayInit is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// shorts
{
var v1 lang.FnFunc
{ // function shorts
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.NewSymbol("glojure.core/shorts")})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("list"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v9, []any{v13, v17, v21, v25})
v27 := lang.Apply(v6, []any{v26})
return v27
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("shorts").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("xs"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Casts to shorts[]", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(12), lang.NewKeyword("line"), int(5387), lang.NewKeyword("end-line"), int(5387))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "shorts")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("shorts is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// shuffle
{
v0 := lang.NewSymbol("shuffle").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Return a random permutation of coll", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7300), lang.NewKeyword("end-line"), int(7300))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("to-array"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
v9 := lang.Apply(lang.NewArrayList, []any{v8})
var v4 any = v9
_ = v4
v11 := lang.Apply(nil, []any{v4})
_ = v11
v12, ok := lang.FieldOrMethod(v4, "toArray")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "toArray")))
}
var v13 any
switch reflect.TypeOf(v12).Kind() {
case reflect.Func:
  v13 = lang.Apply(v12, nil)
default:
  v13 = v12
}
v14 := lang.Apply(nil, []any{v13})
return v14
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// shutdown-agents
{
v0 := lang.NewSymbol("shutdown-agents").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("doc"), "Initiates a shutdown of the thread pools that back the agent\n  system. Running actions will complete, but no new actions will be\n  accepted", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2252), lang.NewKeyword("end-line"), int(2252))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := lang.Apply(lang.ShutdownAgents, nil)
return v3
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// sigs
{
v0 := lang.NewSymbol("sigs").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(223), lang.NewKeyword("column"), int(2), lang.NewKeyword("end-line"), int(224), lang.NewKeyword("end-column"), int(5), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("assert-valid-fdecl"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{v3})
_ = v7
var v9 lang.FnFunc
v9 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v10 := args[0]
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("first"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v10})
var v11 any = v15
_ = v11
var v17 any
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("first"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v16})
v22 := lang.Apply(lang.Equals, []any{lang.NewSymbol("&form"), v21})
if lang.IsTruthy(v22) {
v23 := lang.Apply(lang.Count, []any{v16})
v24 := lang.Apply(lang.Subvec, []any{v16, int64(2), v23})
v17 = v24
} else {
v17 = v16
}
var v16 any = v17
_ = v16
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("next"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v10})
var v25 any = v29
_ = v25
var v31 any
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("map?"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("first"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v25})
v39 := lang.Apply(v34, []any{v38})
if lang.IsTruthy(v39) {
var v40 any
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("next"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v25})
if lang.IsTruthy(v44) {
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("with-meta"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("conj"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
var v51 any
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("meta"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v16})
if lang.IsTruthy(v55) {
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("meta"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{v16})
v51 = v59
} else {
v60 := lang.NewMap()
v61 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(237), lang.NewKeyword("column"), int(77), lang.NewKeyword("end-line"), int(237), lang.NewKeyword("end-column"), int(78))
v62, err := lang.WithMeta(v60, v61.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v51 = v62
}
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("first"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.Apply(v65, []any{v25})
v67 := lang.Apply(v50, []any{v51, v66})
v68 := lang.Apply(v47, []any{v16, v67})
v40 = v68
} else {
v40 = v16
}
v31 = v40
} else {
v31 = v16
}
return v31
})
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(228), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(239), lang.NewKeyword("end-column"), int(25))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v8 any = v11
_ = v8
var v13 lang.FnFunc
v13 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v14 := args[0]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("meta"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v14})
var v15 any = v19
_ = v15
v21 := lang.Apply(lang.NewKeyword("tag"), []any{v15})
var v20 any = v21
_ = v20
var v23 any
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("instance?"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{lang.*Symbol, v20})
if lang.IsTruthy(v27) {
var v28 any
v29, ok := lang.FieldOrMethod(v20, "Name")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v20, "Name")))
}
var v30 any
switch reflect.TypeOf(v29).Kind() {
case reflect.Func:
  v30 = lang.Apply(v29, nil)
default:
  v30 = v29
}
v31 := lang.Apply(strings12.Index, []any{v30, "."})
v32 := lang.Apply(lang.Equiv, []any{v31, int64(-1)})
if lang.IsTruthy(v32) {
var v33 any
v34 := lang.Apply(lang.Equals, []any{nil, nil})
if lang.IsTruthy(v34) {
var v35 any = nil
_ = v35
var v37 any
if lang.IsTruthy(v35) {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("with-meta"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("assoc"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44, ok := lang.FieldOrMethod(v35, "Name")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v35, "Name")))
}
var v45 any
switch reflect.TypeOf(v44).Kind() {
case reflect.Func:
  v45 = lang.Apply(v44, nil)
default:
  v45 = v44
}
v46 := lang.Apply(lang.NewSymbol, []any{v45})
v47 := lang.Apply(v43, []any{v15, lang.NewKeyword("tag"), v46})
v48 := lang.Apply(v40, []any{v14, v47})
v37 = v48
} else {
v37 = v14
}
v33 = v37
} else {
v33 = v14
}
v28 = v33
} else {
v28 = v14
}
v23 = v28
} else {
v23 = v14
}
return v23
})
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(240), lang.NewKeyword("column"), int(22), lang.NewKeyword("end-line"), int(252), lang.NewKeyword("end-column"), int(37))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v12 any = v15
_ = v12
var v17 any
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("seq?"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v3})
v25 := lang.Apply(v20, []any{v24})
if lang.IsTruthy(v25) {
v27 := lang.NewVector()
v28 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(254), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(254), lang.NewKeyword("end-column"), int(20))
v29, err := lang.WithMeta(v27, v28.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v26 any = v29
_ = v26
var v30 any = v3
_ = v30
var v31 any
for {
var v32 any
if lang.IsTruthy(v30) {
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("conj"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("first"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v30})
v41 := lang.Apply(v8, []any{v40})
v42 := lang.Apply(v12, []any{v41})
v43 := lang.Apply(v36, []any{v26, v42})
var v33 any = v43
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("next"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v30})
var v44 any = v48
v26 = v33
v30 = v44
continue
} else {
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("seq"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{v26})
v32 = v52
}
v31 = v32
  break
}
v17 = v31
} else {
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("list"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v8, []any{v3})
v30 := lang.Apply(v12, []any{v29})
v31 := lang.Apply(v28, []any{v30})
v17 = v31
}
return v17
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(225), lang.NewKeyword("column"), int(2), lang.NewKeyword("end-line"), int(258), lang.NewKeyword("end-column"), int(43))).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// simple-ident?
{
v0 := lang.NewSymbol("simple-ident?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a symbol or keyword without a namespace", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1613), lang.NewKeyword("end-line"), int(1613))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("ident?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("nil?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("namespace"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3})
v18 := lang.Apply(v13, []any{v17})
v10 = v18
} else {
v10 = v4
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// simple-keyword?
{
v0 := lang.NewSymbol("simple-keyword?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a keyword without a namespace", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1633), lang.NewKeyword("end-line"), int(1633))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("keyword?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("nil?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("namespace"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3})
v18 := lang.Apply(v13, []any{v17})
v10 = v18
} else {
v10 = v4
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// simple-symbol?
{
v0 := lang.NewSymbol("simple-symbol?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a symbol without a namespace", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1623), lang.NewKeyword("end-line"), int(1623))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("symbol?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
var v4 any = v8
_ = v4
var v10 any
if lang.IsTruthy(v4) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("nil?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("namespace"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3})
v18 := lang.Apply(v13, []any{v17})
v10 = v18
} else {
v10 = v4
}
return v10
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// slurp
{
v1 := reflect.TypeOf("")
v0 := lang.NewSymbol("slurp").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("opts"))), lang.NewKeyword("doc"), "Opens a reader on f and reads all its contents, returning a string.\n  See glojure.java.io/reader for a complete list of supported arguments.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6982), lang.NewKeyword("end-line"), int(6982))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := lang.NewList(args[1:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("normalize-slurp-opts"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v6})
var v6 any = v10
_ = v6
var v11 any = "unimplemented: new with non-constant class type"
_ = v11
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("apply"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.go.io"))
v18 := v17.FindInternedVar(lang.NewSymbol("reader"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v16, []any{v19, v4, v6})
var v13 any = v20
_ = v13
var v22 any
func() {
defer func() {
v23, ok := lang.FieldOrMethod(v13, "close")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v13, "close")))
}
var v24 any
switch reflect.TypeOf(v23).Kind() {
case reflect.Func:
  v24 = lang.Apply(v23, nil)
default:
  v24 = v23
}
}()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.go.io"))
v26 := v25.FindInternedVar(lang.NewSymbol("copy"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v13, v11})
_ = v28
v29 := lang.Apply(lang.ToString, []any{v11})
v22 = v29
}()
return v22
  }
})
v4 := reflect.TypeOf("")
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// some
{
v0 := lang.NewSymbol("some").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2684), lang.NewKeyword("end-line"), int(2684))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
recur_loop_481:
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
var v5 any = v9
_ = v5
var v11 any
if lang.IsTruthy(v5) {
var v12 any = v5
_ = v12
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v12})
v19 := lang.Apply(v3, []any{v18})
var v14 any = v19
_ = v14
var v21 any
if lang.IsTruthy(v14) {
v21 = v14
} else {
var v22 any = v3
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("next"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v12})
var v23 any = v27
v3 = v22
v4 = v23
goto recur_loop_481
}
v11 = v21
} else {
v11 = nil
}
return v11
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// some->
{
v0 := lang.NewSymbol("some->").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("expr"), lang.NewSymbol("&"), lang.NewSymbol("forms"))), lang.NewKeyword("doc"), "When expr is not nil, threads it into the first form (via ->),\n  and when that result is not nil, through the next etc", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.5", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(7610), lang.NewKeyword("end-line"), int(7610))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("gensym"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, nil)
var v7 any = v11
_ = v7
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("map"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
var v16 lang.FnFunc
v16 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v17 := args[0]
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("seq"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("concat"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{lang.NewSymbol("if")})
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("seq"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("concat"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{lang.NewSymbol("glojure.core/nil?")})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v7})
v45 := lang.Apply(v36, []any{v40, v44})
v46 := lang.Apply(v33, []any{v45})
v47 := lang.Apply(v30, []any{v46})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{nil})
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("list"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("seq"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("concat"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("list"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{lang.NewSymbol("glojure.core/->")})
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("list"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v7})
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("list"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{v17})
v73 := lang.Apply(v60, []any{v64, v68, v72})
v74 := lang.Apply(v57, []any{v73})
v75 := lang.Apply(v54, []any{v74})
v76 := lang.Apply(v23, []any{v27, v47, v51, v75})
v77 := lang.Apply(v20, []any{v76})
return v77
})
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7616), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(7616), lang.NewKeyword("end-column"), int(64))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v19 := lang.Apply(v15, []any{v18, v6})
var v12 any = v19
_ = v12
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/let")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("apply"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("vector"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("seq"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("concat"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("list"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v7})
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("list"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v5})
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("interleave"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("repeat"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v7})
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("butlast"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v12})
v65 := lang.Apply(v56, []any{v60, v64})
v66 := lang.Apply(v45, []any{v49, v53, v65})
v67 := lang.Apply(v42, []any{v66})
v68 := lang.Apply(v36, []any{v39, v67})
v69 := lang.Apply(v33, []any{v68})
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("list"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
var v73 any
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("empty?"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.Apply(v76, []any{v12})
if lang.IsTruthy(v77) {
v73 = v7
} else {
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("last"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.Apply(v80, []any{v12})
v73 = v81
}
v82 := lang.Apply(v72, []any{v73})
v83 := lang.Apply(v26, []any{v30, v69, v82})
v84 := lang.Apply(v23, []any{v83})
return v84
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// some->>
{
v0 := lang.NewSymbol("some->>").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("expr"), lang.NewSymbol("&"), lang.NewSymbol("forms"))), lang.NewKeyword("doc"), "When expr is not nil, threads it into the first form (via ->>),\n  and when that result is not nil, through the next etc", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.5", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(7624), lang.NewKeyword("end-line"), int(7624))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("gensym"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, nil)
var v7 any = v11
_ = v7
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("map"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
var v16 lang.FnFunc
v16 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v17 := args[0]
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("seq"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("concat"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("list"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{lang.NewSymbol("if")})
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("seq"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("concat"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("list"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{lang.NewSymbol("glojure.core/nil?")})
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("list"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v7})
v45 := lang.Apply(v36, []any{v40, v44})
v46 := lang.Apply(v33, []any{v45})
v47 := lang.Apply(v30, []any{v46})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{nil})
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("list"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("seq"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("concat"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("list"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{lang.NewSymbol("glojure.core/->>")})
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("list"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v67, []any{v7})
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("list"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{v17})
v73 := lang.Apply(v60, []any{v64, v68, v72})
v74 := lang.Apply(v57, []any{v73})
v75 := lang.Apply(v54, []any{v74})
v76 := lang.Apply(v23, []any{v27, v47, v51, v75})
v77 := lang.Apply(v20, []any{v76})
return v77
})
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7630), lang.NewKeyword("column"), int(20), lang.NewKeyword("end-line"), int(7630), lang.NewKeyword("end-column"), int(65))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v19 := lang.Apply(v15, []any{v18, v6})
var v12 any = v19
_ = v12
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/let")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("apply"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("vector"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("seq"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("concat"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("list"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v7})
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("list"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.Apply(v52, []any{v5})
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("interleave"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("repeat"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v7})
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("butlast"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{v12})
v65 := lang.Apply(v56, []any{v60, v64})
v66 := lang.Apply(v45, []any{v49, v53, v65})
v67 := lang.Apply(v42, []any{v66})
v68 := lang.Apply(v36, []any{v39, v67})
v69 := lang.Apply(v33, []any{v68})
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("list"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
var v73 any
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("empty?"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.Apply(v76, []any{v12})
if lang.IsTruthy(v77) {
v73 = v7
} else {
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("last"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.Apply(v80, []any{v12})
v73 = v81
}
v82 := lang.Apply(v72, []any{v73})
v83 := lang.Apply(v26, []any{v30, v69, v82})
v84 := lang.Apply(v23, []any{v83})
return v84
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// some-fn
{
v0 := lang.NewSymbol("some-fn").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("p")), lang.NewVector(lang.NewSymbol("p1"), lang.NewSymbol("p2")), lang.NewVector(lang.NewSymbol("p1"), lang.NewSymbol("p2"), lang.NewSymbol("p3")), lang.NewVector(lang.NewSymbol("p1"), lang.NewSymbol("p2"), lang.NewSymbol("p3"), lang.NewSymbol("&"), lang.NewSymbol("ps"))), lang.NewKeyword("doc"), "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7462), lang.NewKeyword("end-line"), int(7462))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
{ // function sp1
v4 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return nil
  case 1:
v6 := args[0]
v7 := lang.Apply(v3, []any{v6})
return v7
  case 2:
v6 := args[0]
v7 := args[1]
v9 := lang.Apply(v3, []any{v6})
var v8 any = v9
_ = v8
var v11 any
if lang.IsTruthy(v8) {
v11 = v8
} else {
v12 := lang.Apply(v3, []any{v7})
v11 = v12
}
return v11
  case 3:
v6 := args[0]
v7 := args[1]
v8 := args[2]
v10 := lang.Apply(v3, []any{v6})
var v9 any = v10
_ = v9
var v12 any
if lang.IsTruthy(v9) {
v12 = v9
} else {
v14 := lang.Apply(v3, []any{v7})
var v13 any = v14
_ = v13
var v16 any
if lang.IsTruthy(v13) {
v16 = v13
} else {
v17 := lang.Apply(v3, []any{v8})
v16 = v17
}
v12 = v16
}
return v12
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v6 := args[0]
v7 := args[1]
v8 := args[2]
v9 := lang.NewList(args[3:]...)
v11 := lang.Apply(v5, []any{v6, v7, v8})
var v10 any = v11
_ = v10
var v13 any
if lang.IsTruthy(v10) {
v13 = v10
} else {
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("some"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3, v9})
v13 = v17
}
return v13
  }
})
v5 := v4
_ = v5
}
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7469), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(7475), lang.NewKeyword("end-column"), int(43))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
{ // function sp2
v5 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return nil
  case 1:
v7 := args[0]
v9 := lang.Apply(v3, []any{v7})
var v8 any = v9
_ = v8
var v11 any
if lang.IsTruthy(v8) {
v11 = v8
} else {
v12 := lang.Apply(v4, []any{v7})
v11 = v12
}
return v11
  case 2:
v7 := args[0]
v8 := args[1]
v10 := lang.Apply(v3, []any{v7})
var v9 any = v10
_ = v9
var v12 any
if lang.IsTruthy(v9) {
v12 = v9
} else {
v14 := lang.Apply(v3, []any{v8})
var v13 any = v14
_ = v13
var v16 any
if lang.IsTruthy(v13) {
v16 = v13
} else {
v18 := lang.Apply(v4, []any{v7})
var v17 any = v18
_ = v17
var v20 any
if lang.IsTruthy(v17) {
v20 = v17
} else {
v21 := lang.Apply(v4, []any{v8})
v20 = v21
}
v16 = v20
}
v12 = v16
}
return v12
  case 3:
v7 := args[0]
v8 := args[1]
v9 := args[2]
v11 := lang.Apply(v3, []any{v7})
var v10 any = v11
_ = v10
var v13 any
if lang.IsTruthy(v10) {
v13 = v10
} else {
v15 := lang.Apply(v3, []any{v8})
var v14 any = v15
_ = v14
var v17 any
if lang.IsTruthy(v14) {
v17 = v14
} else {
v19 := lang.Apply(v3, []any{v9})
var v18 any = v19
_ = v18
var v21 any
if lang.IsTruthy(v18) {
v21 = v18
} else {
v23 := lang.Apply(v4, []any{v7})
var v22 any = v23
_ = v22
var v25 any
if lang.IsTruthy(v22) {
v25 = v22
} else {
v27 := lang.Apply(v4, []any{v8})
var v26 any = v27
_ = v26
var v29 any
if lang.IsTruthy(v26) {
v29 = v26
} else {
v30 := lang.Apply(v4, []any{v9})
v29 = v30
}
v25 = v29
}
v21 = v25
}
v17 = v21
}
v13 = v17
}
return v13
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v7 := args[0]
v8 := args[1]
v9 := args[2]
v10 := lang.NewList(args[3:]...)
v12 := lang.Apply(v6, []any{v7, v8, v9})
var v11 any = v12
_ = v11
var v14 any
if lang.IsTruthy(v11) {
v14 = v11
} else {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("some"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
var v18 lang.FnFunc
v18 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v19 := args[0]
v21 := lang.Apply(v3, []any{v19})
var v20 any = v21
_ = v20
var v23 any
if lang.IsTruthy(v20) {
v23 = v20
} else {
v24 := lang.Apply(v4, []any{v19})
v23 = v24
}
return v23
})
v19 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7483), lang.NewKeyword("column"), int(34), lang.NewKeyword("end-line"), int(7483), lang.NewKeyword("end-column"), int(52))
v20, err := lang.WithMeta(v18, v19.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v21 := lang.Apply(v17, []any{v20, v10})
v14 = v21
}
return v14
  }
})
v6 := v5
_ = v6
}
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7477), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(7483), lang.NewKeyword("end-column"), int(61))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v7
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 lang.FnFunc
{ // function sp3
v6 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return nil
  case 1:
v8 := args[0]
v10 := lang.Apply(v3, []any{v8})
var v9 any = v10
_ = v9
var v12 any
if lang.IsTruthy(v9) {
v12 = v9
} else {
v14 := lang.Apply(v4, []any{v8})
var v13 any = v14
_ = v13
var v16 any
if lang.IsTruthy(v13) {
v16 = v13
} else {
v17 := lang.Apply(v5, []any{v8})
v16 = v17
}
v12 = v16
}
return v12
  case 2:
v8 := args[0]
v9 := args[1]
v11 := lang.Apply(v3, []any{v8})
var v10 any = v11
_ = v10
var v13 any
if lang.IsTruthy(v10) {
v13 = v10
} else {
v15 := lang.Apply(v3, []any{v9})
var v14 any = v15
_ = v14
var v17 any
if lang.IsTruthy(v14) {
v17 = v14
} else {
v19 := lang.Apply(v4, []any{v8})
var v18 any = v19
_ = v18
var v21 any
if lang.IsTruthy(v18) {
v21 = v18
} else {
v23 := lang.Apply(v4, []any{v9})
var v22 any = v23
_ = v22
var v25 any
if lang.IsTruthy(v22) {
v25 = v22
} else {
v27 := lang.Apply(v5, []any{v8})
var v26 any = v27
_ = v26
var v29 any
if lang.IsTruthy(v26) {
v29 = v26
} else {
v30 := lang.Apply(v5, []any{v9})
v29 = v30
}
v25 = v29
}
v21 = v25
}
v17 = v21
}
v13 = v17
}
return v13
  case 3:
v8 := args[0]
v9 := args[1]
v10 := args[2]
v12 := lang.Apply(v3, []any{v8})
var v11 any = v12
_ = v11
var v14 any
if lang.IsTruthy(v11) {
v14 = v11
} else {
v16 := lang.Apply(v3, []any{v9})
var v15 any = v16
_ = v15
var v18 any
if lang.IsTruthy(v15) {
v18 = v15
} else {
v20 := lang.Apply(v3, []any{v10})
var v19 any = v20
_ = v19
var v22 any
if lang.IsTruthy(v19) {
v22 = v19
} else {
v24 := lang.Apply(v4, []any{v8})
var v23 any = v24
_ = v23
var v26 any
if lang.IsTruthy(v23) {
v26 = v23
} else {
v28 := lang.Apply(v4, []any{v9})
var v27 any = v28
_ = v27
var v30 any
if lang.IsTruthy(v27) {
v30 = v27
} else {
v32 := lang.Apply(v4, []any{v10})
var v31 any = v32
_ = v31
var v34 any
if lang.IsTruthy(v31) {
v34 = v31
} else {
v36 := lang.Apply(v5, []any{v8})
var v35 any = v36
_ = v35
var v38 any
if lang.IsTruthy(v35) {
v38 = v35
} else {
v40 := lang.Apply(v5, []any{v9})
var v39 any = v40
_ = v39
var v42 any
if lang.IsTruthy(v39) {
v42 = v39
} else {
v43 := lang.Apply(v5, []any{v10})
v42 = v43
}
v38 = v42
}
v34 = v38
}
v30 = v34
}
v26 = v30
}
v22 = v26
}
v18 = v22
}
v14 = v18
}
return v14
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v8 := args[0]
v9 := args[1]
v10 := args[2]
v11 := lang.NewList(args[3:]...)
v13 := lang.Apply(v7, []any{v8, v9, v10})
var v12 any = v13
_ = v12
var v15 any
if lang.IsTruthy(v12) {
v15 = v12
} else {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("some"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
var v19 lang.FnFunc
v19 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v20 := args[0]
v22 := lang.Apply(v3, []any{v20})
var v21 any = v22
_ = v21
var v24 any
if lang.IsTruthy(v21) {
v24 = v21
} else {
v26 := lang.Apply(v4, []any{v20})
var v25 any = v26
_ = v25
var v28 any
if lang.IsTruthy(v25) {
v28 = v25
} else {
v29 := lang.Apply(v5, []any{v20})
v28 = v29
}
v24 = v28
}
return v24
})
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7491), lang.NewKeyword("column"), int(34), lang.NewKeyword("end-line"), int(7491), lang.NewKeyword("end-column"), int(59))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v22 := lang.Apply(v18, []any{v21, v11})
v15 = v22
}
return v15
  }
})
v7 := v6
_ = v7
}
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7485), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(7491), lang.NewKeyword("end-column"), int(68))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("list*"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3, v4, v5, v7})
var v7 any = v11
_ = v7
var v13 lang.FnFunc
{ // function spn
v13 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return nil
  case 1:
v15 := args[0]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("some"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
var v19 lang.FnFunc
v19 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v20 := args[0]
v21 := lang.Apply(v20, []any{v15})
return v21
})
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7496), lang.NewKeyword("column"), int(21), lang.NewKeyword("end-line"), int(7496), lang.NewKeyword("end-column"), int(26))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v22 := lang.Apply(v18, []any{v21, v7})
return v22
  case 2:
v15 := args[0]
v16 := args[1]
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("some"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
var v20 lang.FnFunc
v20 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v21 := args[0]
v23 := lang.Apply(v21, []any{v15})
var v22 any = v23
_ = v22
var v25 any
if lang.IsTruthy(v22) {
v25 = v22
} else {
v26 := lang.Apply(v21, []any{v16})
v25 = v26
}
return v25
})
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7497), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(7497), lang.NewKeyword("end-column"), int(39))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v23 := lang.Apply(v19, []any{v22, v7})
return v23
  case 3:
v15 := args[0]
v16 := args[1]
v17 := args[2]
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("some"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
var v21 lang.FnFunc
v21 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v22 := args[0]
v24 := lang.Apply(v22, []any{v15})
var v23 any = v24
_ = v23
var v26 any
if lang.IsTruthy(v23) {
v26 = v23
} else {
v28 := lang.Apply(v22, []any{v16})
var v27 any = v28
_ = v27
var v30 any
if lang.IsTruthy(v27) {
v30 = v27
} else {
v31 := lang.Apply(v22, []any{v17})
v30 = v31
}
v26 = v30
}
return v26
})
v22 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7498), lang.NewKeyword("column"), int(25), lang.NewKeyword("end-line"), int(7498), lang.NewKeyword("end-column"), int(47))
v23, err := lang.WithMeta(v21, v22.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v24 := lang.Apply(v20, []any{v23, v7})
return v24
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v15 := args[0]
v16 := args[1]
v17 := args[2]
v18 := lang.NewList(args[3:]...)
v20 := lang.Apply(v14, []any{v15, v16, v17})
var v19 any = v20
_ = v19
var v22 any
if lang.IsTruthy(v19) {
v22 = v19
} else {
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("some"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
var v26 lang.FnFunc
v26 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v27 := args[0]
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("some"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v27, v18})
return v31
})
v27 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7500), lang.NewKeyword("column"), int(36), lang.NewKeyword("end-line"), int(7500), lang.NewKeyword("end-column"), int(49))
v28, err := lang.WithMeta(v26, v27.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v29 := lang.Apply(v25, []any{v28, v7})
v22 = v29
}
return v22
  }
})
v14 := v13
_ = v14
}
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7494), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(7500), lang.NewKeyword("end-column"), int(56))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v15
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// some?
{
v1 := reflect.TypeOf(false)
v0 := lang.NewSymbol("some?").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x is not nil, false otherwise.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.6", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(530), lang.NewKeyword("end-line"), int(530))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("not"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("nil?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
v12 := lang.Apply(v7, []any{v11})
return v12
})
v4 := reflect.TypeOf(false)
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// sort
{
v0 := lang.NewSymbol("sort").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("comp"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a sorted sequence of the items in coll. If no comparator is\n  supplied, uses compare.  comparator must implement\n  java.util.Comparator.  Guaranteed to be stable: equal elements will\n  not be reordered.  If coll is a Java array, it will be modified.  To\n  avoid this, sort a copy of the array.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3085), lang.NewKeyword("end-line"), int(3085))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("sort"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("compare"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{v9, v3})
return v10
  case 2:
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("to-array"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v4})
var v10 any = v14
_ = v10
v16 := lang.Apply(lang.SortSlice, []any{v10, v3})
_ = v16
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("with-meta"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("seq"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v10})
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("meta"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v4})
v28 := lang.Apply(v19, []any{v23, v27})
v5 = v28
} else {
v5 = lang.NewList()
}
return v5
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// sort-by
{
v0 := lang.NewSymbol("sort-by").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("keyfn"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("keyfn"), lang.NewSymbol("comp"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a sorted sequence of the items in coll, where the sort\n  order is determined by comparing (keyfn item).  If no comparator is\n  supplied, uses compare.  comparator must implement\n  java.util.Comparator.  Guaranteed to be stable: equal elements will\n  not be reordered.  If coll is a Java array, it will be modified.  To\n  avoid this, sort a copy of the array.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3102), lang.NewKeyword("end-line"), int(3102))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("sort-by"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("compare"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v7, []any{v3, v10, v4})
return v11
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("sort"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
var v9 lang.FnFunc
v9 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v10 := args[0]
v11 := args[1]
v12 := lang.Apply(v3, []any{v10})
v13 := lang.Apply(v3, []any{v11})
v14 := lang.Apply(v4, []any{v12, v13})
return v14
})
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3114), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(3114), lang.NewKeyword("end-column"), int(46))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v12 := lang.Apply(v8, []any{v11, v5})
return v12
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// sorted-map
{
v0 := lang.NewSymbol("sorted-map").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("keyvals"))), lang.NewKeyword("doc"), "keyval => key val\n  Returns a new sorted map with supplied mappings.  If any keys are\n  equal, they are handled as if by repeated uses of assoc.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(397), lang.NewKeyword("end-line"), int(397))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.Apply(lang.CreatePersistentTreeMap, []any{v3})
return v4
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// sorted-map-by
{
v0 := lang.NewSymbol("sorted-map-by").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("comparator"), lang.NewSymbol("&"), lang.NewSymbol("keyvals"))), lang.NewKeyword("doc"), "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied\n  comparator.  If any keys are equal, they are handled as if by\n  repeated uses of assoc.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(406), lang.NewKeyword("end-line"), int(406))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v5 := lang.Apply(nil, []any{v3, v4})
return v5
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// sorted-set
{
v0 := lang.NewSymbol("sorted-set").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("keys"))), lang.NewKeyword("doc"), "Returns a new sorted set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(416), lang.NewKeyword("end-line"), int(416))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.Apply(lang.CreatePersistentTreeSet, []any{v3})
return v4
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// sorted-set-by
{
v0 := lang.NewSymbol("sorted-set-by").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("comparator"), lang.NewSymbol("&"), lang.NewSymbol("keys"))), lang.NewKeyword("doc"), "Returns a new sorted set with supplied keys, using the supplied\n  comparator.  Any equal keys are handled as if by repeated uses of\n  conj.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(424), lang.NewKeyword("end-line"), int(424))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v5 := lang.Apply(lang.CreatePersistentTreeSetWithComparator, []any{v3, v4})
return v5
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// sorted?
{
v0 := lang.NewSymbol("sorted?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns true if coll implements Sorted", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6235), lang.NewKeyword("end-line"), int(6235))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{glojure.lang4.Sorted, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// special-symbol?
{
v0 := lang.NewSymbol("special-symbol?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Returns true if s names a special form", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4992), lang.NewKeyword("end-line"), int(4992))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("contains?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7, ok := lang.FieldOrMethod(runtime5.Compiler, "specials")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", runtime5.Compiler, "specials")))
}
var v8 any
switch reflect.TypeOf(v7).Kind() {
case reflect.Func:
  v8 = lang.Apply(v7, nil)
default:
  v8 = v7
}
v9 := lang.Apply(v6, []any{v8, v3})
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// spit
{
v0 := lang.NewSymbol("spit").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("content"), lang.NewSymbol("&"), lang.NewSymbol("options"))), lang.NewKeyword("doc"), "Opposite of slurp.  Opens f with writer, writes content, then\n  closes f. Options passed to glojure.java.io/writer.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6994), lang.NewKeyword("end-line"), int(6994))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("apply"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{nil, v3, v5})
var v6 any = v10
_ = v6
var v12 any
func() {
defer func() {
v13, ok := lang.FieldOrMethod(v6, "close")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "close")))
}
var v14 any
switch reflect.TypeOf(v13).Kind() {
case reflect.Func:
  v14 = lang.Apply(v13, nil)
default:
  v14 = v13
}
}()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("str"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v4})
v19 := lang.Apply(lang.WriteWriter, []any{v6, v18})
v12 = v19
}()
return v12
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// split-at
{
v0 := lang.NewSymbol("split-at").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a vector of [(take n coll) (drop n coll)]", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2983), lang.NewKeyword("end-line"), int(2983))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("take"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3, v4})
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("drop"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3, v4})
v13 := lang.NewVector(v8, v12)
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2988), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(2988), lang.NewKeyword("end-column"), int(33))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v15
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// split-with
{
v0 := lang.NewSymbol("split-with").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2990), lang.NewKeyword("end-line"), int(2990))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("take-while"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3, v4})
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("drop-while"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3, v4})
v13 := lang.NewVector(v8, v12)
v14 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2995), lang.NewKeyword("column"), int(5), lang.NewKeyword("end-line"), int(2995), lang.NewKeyword("end-column"), int(51))
v15, err := lang.WithMeta(v13, v14.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v15
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// splitv-at
{
v0 := lang.NewSymbol("splitv-at").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a vector of [(into [] (take n) coll) (drop n coll)]", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.12", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7256), lang.NewKeyword("end-line"), int(7256))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("into"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.NewVector()
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7260), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(7260), lang.NewKeyword("end-column"), int(11))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("take"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3})
v15 := lang.Apply(v7, []any{v10, v14, v4})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("drop"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v3, v4})
v20 := lang.NewVector(v15, v19)
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7260), lang.NewKeyword("column"), int(3), lang.NewKeyword("end-line"), int(7260), lang.NewKeyword("end-column"), int(41))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v22
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// spread
{
v0 := lang.NewSymbol("spread").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("arglist"))), lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(632), lang.NewKeyword("end-line"), int(632), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("nil?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v4 = nil
} else {
var v9 any
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("nil?"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("next"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3})
v17 := lang.Apply(v12, []any{v16})
if lang.IsTruthy(v17) {
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("seq"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v3})
v25 := lang.Apply(v20, []any{v24})
v9 = v25
} else {
var v26 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("cons"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("first"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v3})
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("spread"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("next"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v3})
v41 := lang.Apply(v36, []any{v40})
v42 := lang.Apply(v29, []any{v33, v41})
v26 = v42
} else {
v26 = nil
}
v9 = v26
}
v4 = v9
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// str
{
v1 := reflect.TypeOf("")
v0 := lang.NewSymbol("str").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("&"), lang.NewSymbol("ys"))), lang.NewKeyword("doc"), "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(543), lang.NewKeyword("end-line"), int(543))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
return ""
  case 1:
v4 := args[0]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("nil?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
v5 = ""
} else {
v10 := lang.Apply(lang.ToString, []any{v4})
v5 = v10
}
return v5
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v4 := args[0]
v5 := lang.NewList(args[1:]...)
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := args[0]
v8 := args[1]
recur_loop_74:
var v9 any
if lang.IsTruthy(v8) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("str"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("first"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v8})
v18 := lang.Apply(v13, []any{v17})
v19, _ := lang.FieldOrMethod(v7, "WriteString")
if reflect.TypeOf(v19).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("WriteString is not a function")))
}
v20 := lang.Apply(v19, []any{v18})
_ = v20
var v10 any = v7
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("next"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v8})
var v21 any = v25
v7 = v10
v8 = v21
goto recur_loop_74
} else {
v26, ok := lang.FieldOrMethod(v7, "String")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v7, "String")))
}
var v27 any
switch reflect.TypeOf(v26).Kind() {
case reflect.Func:
  v27 = lang.Apply(v26, nil)
default:
  v27 = v26
}
v9 = v27
}
return v9
})
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(554), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(554), lang.NewKeyword("end-column"), int(127))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("cons"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v4, v5})
v13 := lang.Apply(v8, []any{"unimplemented: new with non-constant class type", v12})
return v13
  }
})
v4 := reflect.TypeOf("")
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// stream-into!
{
v0 := lang.NewSymbol("stream-into!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("to"), lang.NewSymbol("stream")), lang.NewVector(lang.NewSymbol("to"), lang.NewSymbol("xform"), lang.NewSymbol("stream"))), lang.NewKeyword("doc"), "Returns a new coll consisting of coll with all of the items of the\n  stream conjoined. This is a terminal operation on the stream.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.12", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6810), lang.NewKeyword("end-line"), int(6810))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("instance?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{lang.IEditableCollection, v3})
if lang.IsTruthy(v9) {
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("with-meta"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("persistent!"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("stream-reduce!"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("conj!"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("transient"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(v18, []any{v21, v25, v4})
v27 := lang.Apply(v15, []any{v26})
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("meta"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v3})
v32 := lang.Apply(v12, []any{v27, v31})
v5 = v32
} else {
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("stream-reduce!"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("conj"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v35, []any{v38, v3, v4})
v5 = v39
}
return v5
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("instance?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{lang.IEditableCollection, v3})
if lang.IsTruthy(v10) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("with-meta"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("persistent!"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("stream-transduce!"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("conj!"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("transient"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v3})
v27 := lang.Apply(v19, []any{v4, v22, v26, v5})
v28 := lang.Apply(v16, []any{v27})
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("meta"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v3})
v33 := lang.Apply(v13, []any{v28, v32})
v6 = v33
} else {
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("stream-transduce!"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("conj"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v36, []any{v4, v39, v3, v5})
v6 = v40
}
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// stream-reduce!
{
v0 := lang.NewSymbol("stream-reduce!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("s")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("init"), lang.NewSymbol("s"))), lang.NewKeyword("doc"), "Works like reduce but takes a java.util.stream.BaseStream as its source.\n  Honors 'reduced', is a terminal operation on the stream", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.12", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6784), lang.NewKeyword("end-line"), int(6784))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5, ok := lang.FieldOrMethod(v4, "iterator")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "iterator")))
}
var v6 any
switch reflect.TypeOf(v5).Kind() {
case reflect.Func:
  v6 = lang.Apply(v5, nil)
default:
  v6 = v5
}
v7 := lang.Apply(nil, []any{v6, v3})
return v7
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6, ok := lang.FieldOrMethod(v5, "iterator")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v5, "iterator")))
}
var v7 any
switch reflect.TypeOf(v6).Kind() {
case reflect.Func:
  v7 = lang.Apply(v6, nil)
default:
  v7 = v6
}
v8 := lang.Apply(nil, []any{v7, v3, v4})
return v8
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// stream-seq!
{
v0 := lang.NewSymbol("stream-seq!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("stream"))), lang.NewKeyword("doc"), "Takes a java.util.stream.BaseStream instance s and returns a seq of its\n  contents. This is a terminal operation on the stream.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.12", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6793), lang.NewKeyword("end-line"), int(6793))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("iterator-seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7, ok := lang.FieldOrMethod(v3, "iterator")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "iterator")))
}
var v8 any
switch reflect.TypeOf(v7).Kind() {
case reflect.Func:
  v8 = lang.Apply(v7, nil)
default:
  v8 = v7
}
v9 := lang.Apply(v6, []any{v8})
return v9
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// stream-transduce!
{
v0 := lang.NewSymbol("stream-transduce!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("xform"), lang.NewSymbol("f"), lang.NewSymbol("stream")), lang.NewVector(lang.NewSymbol("xform"), lang.NewSymbol("f"), lang.NewSymbol("init"), lang.NewSymbol("stream"))), lang.NewKeyword("doc"), "Works like transduce but takes a java.util.stream.BaseStream as its source.\n  This is a terminal operation on the stream.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.12", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6800), lang.NewKeyword("end-line"), int(6800))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("stream-transduce!"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v4, nil)
v10 := lang.Apply(v8, []any{v3, v4, v9, v5})
return v10
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v8 := lang.Apply(v3, []any{v7})
var v7 any = v8
_ = v7
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("stream-reduce!"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v7, v5, v6})
var v9 any = v13
_ = v9
v15 := lang.Apply(v7, []any{v9})
return v15
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// string?
{
v0 := lang.NewSymbol("string?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a String", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(8), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(160), lang.NewKeyword("end-line"), int(164))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function string?
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.Builtins["string"], v4})
return v8
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(164), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(164), lang.NewKeyword("end-column"), int(58))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// strip-ns
{
v0 := lang.NewSymbol("strip-ns").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core_print.glj", lang.NewKeyword("line"), int(255), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(255), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("private"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("named"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("symbol?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("symbol"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("name"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3})
v16 := lang.Apply(v11, []any{nil, v15})
v4 = v16
} else {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("keyword"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("name"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v3})
v24 := lang.Apply(v19, []any{nil, v23})
v4 = v24
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// struct
{
v0 := lang.NewSymbol("struct").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"), lang.NewSymbol("&"), lang.NewSymbol("vals"))), lang.NewKeyword("doc"), "Returns a new structmap instance with the keys of the\n  structure-basis. vals must be supplied for basis keys in order -\n  where values are not supplied they will default to nil.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4061), lang.NewKeyword("end-line"), int(4061))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v5 := lang.Apply(lang.ConstructPersistentStructMap, []any{v3, v4})
return v5
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// struct-map
{
v0 := lang.NewSymbol("struct-map").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"), lang.NewSymbol("&"), lang.NewSymbol("inits"))), lang.NewKeyword("doc"), "Returns a new structmap instance with the keys of the\n  structure-basis. keyvals may contain all, some or none of the basis\n  keys - where values are not supplied they will default to nil.\n  keyvals can also contain keys not in the basis.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4051), lang.NewKeyword("end-line"), int(4051))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v5 := lang.Apply(lang.CreatePersistentStructMap, []any{v3, v4})
return v5
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// subs
{
v0 := lang.NewSymbol("subs").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"), lang.NewSymbol("start")), lang.NewVector(lang.NewSymbol("s"), lang.NewSymbol("start"), lang.NewSymbol("end"))), lang.NewKeyword("doc"), "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5005), lang.NewKeyword("end-line"), int(5005))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.Apply(lang.Builtins["slice"], []any{v3, v4})
return v5
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.Apply(lang.Builtins["slice"], []any{v3, v4, v5})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// subseq
{
v0 := lang.NewSymbol("subseq").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("sc"), lang.NewSymbol("test"), lang.NewSymbol("key")), lang.NewVector(lang.NewSymbol("sc"), lang.NewSymbol("start-test"), lang.NewSymbol("start-key"), lang.NewSymbol("end-test"), lang.NewSymbol("end-key"))), lang.NewKeyword("doc"), "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5133), lang.NewKeyword("end-line"), int(5133))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("mk-bound-fn"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3, v4, v5})
var v6 any = v10
_ = v6
var v12 any
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol(">"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol(">="))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.CreatePersistentTreeSet(v15, v18)
v20 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5141), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(5141), lang.NewKeyword("end-column"), int(17))
v21, err := lang.WithMeta(v19, v20.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v22 := lang.Apply(v21, []any{v4})
if lang.IsTruthy(v22) {
v24, _ := lang.FieldOrMethod(v3, "seqFrom")
if reflect.TypeOf(v24).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("seqFrom is not a function")))
}
v25 := lang.Apply(v24, []any{v5, true})
var v23 any = v25
_ = v23
var v27 any
if lang.IsTruthy(v23) {
var v28 any = v23
_ = v28
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("nth"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v28, int64(0), nil})
var v29 any = v33
_ = v29
var v34 any = v28
_ = v34
var v36 any
v37 := lang.Apply(v6, []any{v29})
if lang.IsTruthy(v37) {
v36 = v34
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("next"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.Apply(v40, []any{v34})
v36 = v41
}
v27 = v36
} else {
v27 = nil
}
v12 = v27
} else {
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("take-while"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26, _ := lang.FieldOrMethod(v3, "seq")
if reflect.TypeOf(v26).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("seq is not a function")))
}
v27 := lang.Apply(v26, []any{true})
v28 := lang.Apply(v25, []any{v6, v27})
v12 = v28
}
return v12
  case 5:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v9, _ := lang.FieldOrMethod(v3, "seqFrom")
if reflect.TypeOf(v9).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("seqFrom is not a function")))
}
v10 := lang.Apply(v9, []any{v5, true})
var v8 any = v10
_ = v8
var v12 any
if lang.IsTruthy(v8) {
var v13 any = v8
_ = v13
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("nth"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v13, int64(0), nil})
var v14 any = v18
_ = v14
var v19 any = v13
_ = v19
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("take-while"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("mk-bound-fn"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v3, v6, v7})
var v28 any
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("mk-bound-fn"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v3, v4, v5})
v33 := lang.Apply(v32, []any{v14})
if lang.IsTruthy(v33) {
v28 = v19
} else {
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("next"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{v19})
v28 = v37
}
v38 := lang.Apply(v23, []any{v27, v28})
v12 = v38
} else {
v12 = nil
}
return v12
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// subvec
{
v0 := lang.NewSymbol("subvec").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("v"), lang.NewSymbol("start")), lang.NewVector(lang.NewSymbol("v"), lang.NewSymbol("start"), lang.NewSymbol("end"))), lang.NewKeyword("doc"), "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3819), lang.NewKeyword("end-line"), int(3819))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("subvec"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("count"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
v12 := lang.Apply(v7, []any{v3, v4, v11})
return v12
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6, _ := lang.FieldOrMethod(runtime5.RT, "Subvec")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Subvec is not a function")))
}
v7 := lang.Apply(v6, []any{v3, v4, v5})
return v7
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// supers
{
v0 := lang.NewSymbol("supers").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("class"))), lang.NewKeyword("doc"), "Returns the immediate and indirect superclasses and interfaces of c, if any", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5532), lang.NewKeyword("end-line"), int(5532))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("set"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("bases"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
v12 := lang.Apply(v7, []any{v11})
var v4 any = v12
_ = v4
var v13 any = v4
_ = v13
var v14 any
for {
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("seq"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v13})
if lang.IsTruthy(v19) {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v13})
var v20 any = v24
_ = v20
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("bases"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v20})
var v25 any = v29
_ = v25
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("into1"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v4, v25})
var v31 any = v35
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("into1"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("disj"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v13, v20})
v44 := lang.Apply(v39, []any{v43, v25})
var v36 any = v44
v4 = v31
v13 = v36
continue
} else {
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("not-empty"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v4})
v15 = v23
}
v14 = v15
  break
}
return v14
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// swap!
{
v0 := lang.NewSymbol("swap!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("atom"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2343), lang.NewKeyword("end-line"), int(2343))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6, _ := lang.FieldOrMethod(v3, "swap")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("swap is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// swap-vals!
{
v0 := lang.NewSymbol("swap-vals!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("atom"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2352), lang.NewKeyword("end-line"), int(2352))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6, _ := lang.FieldOrMethod(v3, "swapVals")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("swapVals is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// symbol
{
v1 := reflect.TypeOf((*lang.Symbol)(nil))
v0 := lang.NewSymbol("symbol").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name")), lang.NewVector(lang.NewSymbol("ns"), lang.NewSymbol("name"))), lang.NewKeyword("doc"), "Returns a Symbol with the given namespace and name. Arity-1 works\n  on strings, keywords, and vars.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(584), lang.NewKeyword("end-line"), int(584))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v4 := args[0]
var v5 any
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("symbol?"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
if lang.IsTruthy(v9) {
v5 = v4
} else {
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("instance?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.Builtins["string"], v4})
if lang.IsTruthy(v14) {
v15 := lang.Apply(lang.NewSymbol, []any{v4})
v10 = v15
} else {
var v16 any
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("instance?"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{lang.*Var, v4})
if lang.IsTruthy(v20) {
v21, ok := lang.FieldOrMethod(v4, "toSymbol")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "toSymbol")))
}
var v22 any
switch reflect.TypeOf(v21).Kind() {
case reflect.Func:
  v22 = lang.Apply(v21, nil)
default:
  v22 = v21
}
v16 = v22
} else {
var v23 any
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("instance?"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{lang.Keyword, v4})
if lang.IsTruthy(v27) {
v28, ok := lang.FieldOrMethod(v4, "sym")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "sym")))
}
var v29 any
switch reflect.TypeOf(v28).Kind() {
case reflect.Func:
  v29 = lang.Apply(v28, nil)
default:
  v29 = v28
}
v23 = v29
} else {
var v30 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v31 := lang.Apply(lang.NewIllegalArgumentError, []any{"no conversion to symbol"})
panic(v31)
} else {
v30 = nil
}
v23 = v30
}
v16 = v23
}
v10 = v16
}
v5 = v10
}
return v5
  case 2:
v4 := args[0]
v5 := args[1]
v6 := lang.Apply(lang.InternSymbol, []any{v4, v5})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v4 := reflect.TypeOf((*lang.Symbol)(nil))
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// symbol?
{
v0 := lang.NewSymbol("symbol?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a Symbol", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(557), lang.NewKeyword("end-line"), int(557))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.*Symbol, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// sync
{
v0 := lang.NewSymbol("sync").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("flags-ignored-for-now"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "transaction-flags => TBD, pass nil for now\n\n  Runs the exprs (in an implicit do) in a transaction that encompasses\n  exprs and any nested calls.  Starts a transaction if none is already\n  running on this thread. Any uncaught exception will abort the\n  transaction and flow out of sync. The exprs may be run more than\n  once, but any effects on Refs will be atomic.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(2490), lang.NewKeyword("end-line"), int(2490))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol(".")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.LockingTransaction")})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("seq"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("concat"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("list"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{lang.NewSymbol("glojure.core/RunInTransaction")})
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("list"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("seq"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("concat"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("list"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{lang.NewSymbol("glojure.core/fn")})
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("list"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("apply"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("vector"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("seq"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("concat"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v61, nil)
v63 := lang.Apply(v58, []any{v62})
v64 := lang.Apply(v52, []any{v55, v63})
v65 := lang.Apply(v49, []any{v64})
v66 := lang.Apply(v42, []any{v46, v65, v6})
v67 := lang.Apply(v39, []any{v66})
v68 := lang.Apply(v36, []any{v67})
v69 := lang.Apply(v29, []any{v33, v68})
v70 := lang.Apply(v26, []any{v69})
v71 := lang.Apply(v23, []any{v70})
v72 := lang.Apply(v12, []any{v16, v20, v71})
v73 := lang.Apply(v9, []any{v72})
return v73
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// system-newline
{
v0 := lang.NewSymbol("system-newline").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(3695), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(3695), lang.NewKeyword("end-column"), int(40), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v1 := ns.InternWithValue(v0, "\n", true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// tagged-literal
{
v0 := lang.NewSymbol("tagged-literal").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("tag"), lang.NewSymbol("form"))), lang.NewKeyword("doc"), "Construct a data representation of a tagged literal from a\n  tag symbol and a form.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7769), lang.NewKeyword("end-line"), int(7769))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.Apply(nil, []any{v3, v4})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// tagged-literal?
{
v0 := lang.NewSymbol("tagged-literal?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("value"))), lang.NewKeyword("doc"), "Return true if the value is the data representation of a tagged literal", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7763), lang.NewKeyword("end-line"), int(7763))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{glojure.lang4.TaggedLiteral, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// take
{
v0 := lang.NewSymbol("take").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2853), lang.NewKeyword("end-line"), int(2853))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("volatile!"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
var v6 any = v10
_ = v6
var v12 lang.FnFunc
v12 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v13 := lang.Apply(v5, nil)
return v13
  case 1:
v13 := args[0]
v14 := lang.Apply(v5, []any{v13})
return v14
  case 2:
v13 := args[0]
v14 := args[1]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("deref"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v6})
var v15 any = v19
_ = v15
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("dec"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24, ok := lang.FieldOrMethod(v6, "Deref")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "Deref")))
}
var v25 any
switch reflect.TypeOf(v24).Kind() {
case reflect.Func:
  v25 = lang.Apply(v24, nil)
default:
  v25 = v24
}
v26 := lang.Apply(v23, []any{v25})
v27, _ := lang.FieldOrMethod(v6, "reset")
if reflect.TypeOf(v27).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("reset is not a function")))
}
v28 := lang.Apply(v27, []any{v26})
var v20 any = v28
_ = v20
var v30 any
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("pos?"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v15})
if lang.IsTruthy(v34) {
v35 := lang.Apply(v5, []any{v29, v14})
v30 = v35
} else {
v30 = v29
}
var v29 any = v30
_ = v29
var v37 any
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("not"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("pos?"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v20})
v45 := lang.Apply(v40, []any{v44})
if lang.IsTruthy(v45) {
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("ensure-reduced"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, []any{v29})
v37 = v49
} else {
v37 = v29
}
return v37
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2862), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(2873), lang.NewKeyword("end-column"), int(28))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v14
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2860), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(2873), lang.NewKeyword("end-column"), int(30))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
var v6 any
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("pos?"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v3})
if lang.IsTruthy(v10) {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("seq"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v4})
var v11 any = v15
_ = v11
var v17 any
if lang.IsTruthy(v11) {
var v18 any = v11
_ = v18
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("cons"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("first"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v18})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("take"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("dec"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{v3})
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("rest"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.Apply(v36, []any{v18})
v38 := lang.Apply(v29, []any{v33, v37})
v39 := lang.Apply(v22, []any{v26, v38})
v17 = v39
} else {
v17 = nil
}
v6 = v17
} else {
v6 = nil
}
return v6
})
v6 := lang.Apply(lang.NewLazySeq, []any{v5})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// take-last
{
v0 := lang.NewSymbol("take-last").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2939), lang.NewKeyword("end-line"), int(2939))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v4})
var v5 any = v9
_ = v5
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("seq"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("drop"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3, v4})
v18 := lang.Apply(v13, []any{v17})
var v10 any = v18
_ = v10
var v19 any
for {
var v20 any
if lang.IsTruthy(v10) {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("next"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v5})
var v21 any = v25
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("next"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v10})
var v26 any = v30
v5 = v21
v10 = v26
continue
} else {
v20 = v5
}
v19 = v20
  break
}
return v19
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// take-nth
{
v0 := lang.NewSymbol("take-nth").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("n")), lang.NewVector(lang.NewSymbol("n"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4287), lang.NewKeyword("end-line"), int(4287))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("volatile!"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{int64(-1)})
var v6 any = v10
_ = v6
var v12 lang.FnFunc
v12 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v13 := lang.Apply(v5, nil)
return v13
  case 1:
v13 := args[0]
v14 := lang.Apply(v5, []any{v13})
return v14
  case 2:
v13 := args[0]
v14 := args[1]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("inc"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19, ok := lang.FieldOrMethod(v6, "Deref")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v6, "Deref")))
}
var v20 any
switch reflect.TypeOf(v19).Kind() {
case reflect.Func:
  v20 = lang.Apply(v19, nil)
default:
  v20 = v19
}
v21 := lang.Apply(v18, []any{v20})
v22, _ := lang.FieldOrMethod(v6, "reset")
if reflect.TypeOf(v22).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("reset is not a function")))
}
v23 := lang.Apply(v22, []any{v21})
var v15 any = v23
_ = v15
var v25 any
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("zero?"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("rem"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v15, v3})
v33 := lang.Apply(v28, []any{v32})
if lang.IsTruthy(v33) {
v34 := lang.Apply(v5, []any{v13, v14})
v25 = v34
} else {
v25 = v13
}
return v25
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4295), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(4302), lang.NewKeyword("end-column"), int(28))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v14
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4293), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(4302), lang.NewKeyword("end-column"), int(30))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
var v13 any = v6
_ = v13
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("cons"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("first"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v13})
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("take-nth"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("drop"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v3, v13})
v29 := lang.Apply(v24, []any{v3, v28})
v30 := lang.Apply(v17, []any{v21, v29})
v12 = v30
} else {
v12 = nil
}
return v12
})
v6 := lang.Apply(lang.NewLazySeq, []any{v5})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// take-while
{
v0 := lang.NewSymbol("take-while").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred")), lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a lazy sequence of successive items from coll while\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2880), lang.NewKeyword("end-line"), int(2880))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
var v4 lang.FnFunc
v4 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v5 := args[0]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v7 := lang.Apply(v5, nil)
return v7
  case 1:
v7 := args[0]
v8 := lang.Apply(v5, []any{v7})
return v8
  case 2:
v7 := args[0]
v8 := args[1]
var v9 any
v10 := lang.Apply(v3, []any{v8})
if lang.IsTruthy(v10) {
v11 := lang.Apply(v5, []any{v7, v8})
v9 = v11
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("reduced"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v7})
v9 = v15
}
return v9
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2888), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(2894), lang.NewKeyword("end-column"), int(33))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
})
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2887), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(2894), lang.NewKeyword("end-column"), int(34))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
var v5 lang.FnFunc
v5 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v9, []any{v4})
var v6 any = v10
_ = v6
var v12 any
if lang.IsTruthy(v6) {
var v13 any = v6
_ = v13
var v15 any
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("first"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v13})
v20 := lang.Apply(v3, []any{v19})
if lang.IsTruthy(v20) {
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("cons"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("first"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.Apply(v26, []any{v13})
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("take-while"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("rest"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v13})
v35 := lang.Apply(v30, []any{v3, v34})
v36 := lang.Apply(v23, []any{v27, v35})
v15 = v36
} else {
v15 = nil
}
v12 = v15
} else {
v12 = nil
}
return v12
})
v6 := lang.Apply(lang.NewLazySeq, []any{v5})
return v6
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// tapset
{
v0 := lang.NewSymbol("tapset").WithMeta(lang.NewMap(lang.NewKeyword("private"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7882), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(7882), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")))).(*lang.Symbol)
v2 := lang.NewAtom(lang.CreatePersistentTreeSet())
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// test
{
v0 := lang.NewSymbol("test").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("v"))), lang.NewKeyword("doc"), "test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4853), lang.NewKeyword("end-line"), int(4853))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("meta"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
v9 := lang.Apply(lang.NewKeyword("test"), []any{v8})
var v4 any = v9
_ = v4
var v11 any
if lang.IsTruthy(v4) {
v12 := lang.Apply(v4, nil)
_ = v12
v11 = lang.NewKeyword("ok")
} else {
v11 = lang.NewKeyword("no-test")
}
return v11
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// the-ns
{
v0 := lang.NewSymbol("the-ns").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "If passed a namespace, returns it. Else, when passed a symbol,\n  returns the namespace named by it, throwing an exception if not\n  found.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4152), lang.NewKeyword("end-line"), int(4152))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.*Namespace, v3})
if lang.IsTruthy(v8) {
v4 = v3
} else {
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("find-ns"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3})
var v9 any = v13
_ = v9
var v15 any
if lang.IsTruthy(v9) {
v15 = v9
} else {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("str"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{"No namespace: ", v3, " found"})
v20 := lang.Apply(lang.NewError, []any{v19})
panic(v20)
}
v4 = v15
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// thread-bound?
{
v0 := lang.NewSymbol("thread-bound?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("vars"))), lang.NewKeyword("doc"), "Returns true if all of the vars provided as arguments have thread-local bindings.\n   Implies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.2", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5499), lang.NewKeyword("end-line"), int(5499))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("every?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
var v7 lang.FnFunc
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v8 := args[0]
v9, ok := lang.FieldOrMethod(v8, "getThreadBinding")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v8, "getThreadBinding")))
}
var v10 any
switch reflect.TypeOf(v9).Kind() {
case reflect.Func:
  v10 = lang.Apply(v9, nil)
default:
  v10 = v9
}
return v10
})
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5505), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(5505), lang.NewKeyword("end-column"), int(78))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v10 := lang.Apply(v6, []any{v9, v3})
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// throw-if
{
v0 := lang.NewSymbol("throw-if").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("pred"), lang.NewSymbol("fmt"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Throws a CompilerException with a message if pred is true", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(8), lang.NewKeyword("line"), int(5832), lang.NewKeyword("end-line"), int(5832), lang.NewKeyword("private"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
var v6 any
if lang.IsTruthy(v3) {
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("apply"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("format"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v10, []any{v13, v4, v5})
var v7 any = v14
_ = v7
v16 := lang.Apply(lang.NewError, []any{v7})
var v15 any = v16
_ = v15
v18, ok := lang.FieldOrMethod(v15, "getStackTrace")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v15, "getStackTrace")))
}
var v19 any
switch reflect.TypeOf(v18).Kind() {
case reflect.Func:
  v19 = lang.Apply(v18, nil)
default:
  v19 = v18
}
var v17 any = v19
_ = v17
var v21 lang.FnFunc
v21 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v22 := args[0]
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("not="))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26, ok := lang.FieldOrMethod(v22, "getMethodName")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v22, "getMethodName")))
}
var v27 any
switch reflect.TypeOf(v26).Kind() {
case reflect.Func:
  v27 = lang.Apply(v26, nil)
default:
  v27 = v26
}
v28 := lang.Apply(v25, []any{v27, "doInvoke"})
return v28
})
v22 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5839), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(5839), lang.NewKeyword("end-column"), int(74))
v23, err := lang.WithMeta(v21, v22.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v20 any = v23
_ = v20
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("into-array"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("drop"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("drop-while"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v20, v17})
v35 := lang.Apply(v30, []any{int64(2), v34})
v36 := lang.Apply(v27, []any{nil, v35})
var v24 any = v36
_ = v24
v38, _ := lang.FieldOrMethod(v15, "setStackTrace")
if reflect.TypeOf(v38).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("setStackTrace is not a function")))
}
v39 := lang.Apply(v38, []any{v24})
_ = v39
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("*file*"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43, ok := lang.FieldOrMethod(nil, "Deref")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", nil, "Deref")))
}
var v44 any
switch reflect.TypeOf(v43).Kind() {
case reflect.Func:
  v44 = lang.Apply(v43, nil)
default:
  v44 = v43
}
v45, ok := lang.FieldOrMethod(nil, "Deref")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", nil, "Deref")))
}
var v46 any
switch reflect.TypeOf(v45).Kind() {
case reflect.Func:
  v46 = lang.Apply(v45, nil)
default:
  v46 = v45
}
v47 := lang.Apply(lang.NewCompilerError, []any{v42, v44, v46, v15})
panic(v47)
} else {
v6 = nil
}
return v6
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// time
{
v0 := lang.NewSymbol("time").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("expr"))), lang.NewKeyword("doc"), "Evaluates expr and prints the time it took.  Returns the value of\n expr.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(3885), lang.NewKeyword("end-line"), int(3885))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol("glojure.core/let")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("apply"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("vector"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("start__0__auto__")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("seq"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("concat"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{lang.NewSymbol(".UnixNano")})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("seq"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("concat"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{lang.NewSymbol("time.Now")})
v61 := lang.Apply(v56, []any{v60})
v62 := lang.Apply(v53, []any{v61})
v63 := lang.Apply(v50, []any{v62})
v64 := lang.Apply(v43, []any{v47, v63})
v65 := lang.Apply(v40, []any{v64})
v66 := lang.Apply(v37, []any{v65})
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("list"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.Apply(v69, []any{lang.NewSymbol("ret__1__auto__")})
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("list"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.Apply(v73, []any{v5})
v75 := lang.Apply(v30, []any{v34, v66, v70, v74})
v76 := lang.Apply(v27, []any{v75})
v77 := lang.Apply(v21, []any{v24, v76})
v78 := lang.Apply(v18, []any{v77})
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("list"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("seq"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("concat"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v89 := v88.FindInternedVar(lang.NewSymbol("list"))
if v89.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v89)))
}
v90 := v89.Get()
v91 := lang.Apply(v90, []any{lang.NewSymbol("glojure.core/prn")})
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("list"))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v96 := v95.FindInternedVar(lang.NewSymbol("seq"))
if v96.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v96)))
}
v97 := v96.Get()
v98 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v99 := v98.FindInternedVar(lang.NewSymbol("concat"))
if v99.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v99)))
}
v100 := v99.Get()
v101 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v102 := v101.FindInternedVar(lang.NewSymbol("list"))
if v102.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v102)))
}
v103 := v102.Get()
v104 := lang.Apply(v103, []any{lang.NewSymbol("glojure.core/str")})
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("list"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
v108 := lang.Apply(v107, []any{"Elapsed time: "})
v109 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v110 := v109.FindInternedVar(lang.NewSymbol("list"))
if v110.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v110)))
}
v111 := v110.Get()
v112 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v113 := v112.FindInternedVar(lang.NewSymbol("seq"))
if v113.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v113)))
}
v114 := v113.Get()
v115 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v116 := v115.FindInternedVar(lang.NewSymbol("concat"))
if v116.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v116)))
}
v117 := v116.Get()
v118 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v119 := v118.FindInternedVar(lang.NewSymbol("list"))
if v119.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v119)))
}
v120 := v119.Get()
v121 := lang.Apply(v120, []any{lang.NewSymbol("glojure.core//")})
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("list"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v126 := v125.FindInternedVar(lang.NewSymbol("seq"))
if v126.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v126)))
}
v127 := v126.Get()
v128 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v129 := v128.FindInternedVar(lang.NewSymbol("concat"))
if v129.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v129)))
}
v130 := v129.Get()
v131 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v132 := v131.FindInternedVar(lang.NewSymbol("list"))
if v132.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v132)))
}
v133 := v132.Get()
v134 := lang.Apply(v133, []any{lang.NewSymbol("glojure.core/double")})
v135 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v136 := v135.FindInternedVar(lang.NewSymbol("list"))
if v136.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v136)))
}
v137 := v136.Get()
v138 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v139 := v138.FindInternedVar(lang.NewSymbol("seq"))
if v139.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v139)))
}
v140 := v139.Get()
v141 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v142 := v141.FindInternedVar(lang.NewSymbol("concat"))
if v142.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v142)))
}
v143 := v142.Get()
v144 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v145 := v144.FindInternedVar(lang.NewSymbol("list"))
if v145.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v145)))
}
v146 := v145.Get()
v147 := lang.Apply(v146, []any{lang.NewSymbol("glojure.core/-")})
v148 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v149 := v148.FindInternedVar(lang.NewSymbol("list"))
if v149.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v149)))
}
v150 := v149.Get()
v151 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v152 := v151.FindInternedVar(lang.NewSymbol("seq"))
if v152.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v152)))
}
v153 := v152.Get()
v154 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v155 := v154.FindInternedVar(lang.NewSymbol("concat"))
if v155.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v155)))
}
v156 := v155.Get()
v157 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v158 := v157.FindInternedVar(lang.NewSymbol("list"))
if v158.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v158)))
}
v159 := v158.Get()
v160 := lang.Apply(v159, []any{lang.NewSymbol(".UnixNano")})
v161 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v162 := v161.FindInternedVar(lang.NewSymbol("list"))
if v162.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v162)))
}
v163 := v162.Get()
v164 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v165 := v164.FindInternedVar(lang.NewSymbol("seq"))
if v165.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v165)))
}
v166 := v165.Get()
v167 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v168 := v167.FindInternedVar(lang.NewSymbol("concat"))
if v168.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v168)))
}
v169 := v168.Get()
v170 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v171 := v170.FindInternedVar(lang.NewSymbol("list"))
if v171.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v171)))
}
v172 := v171.Get()
v173 := lang.Apply(v172, []any{lang.NewSymbol("time.Now")})
v174 := lang.Apply(v169, []any{v173})
v175 := lang.Apply(v166, []any{v174})
v176 := lang.Apply(v163, []any{v175})
v177 := lang.Apply(v156, []any{v160, v176})
v178 := lang.Apply(v153, []any{v177})
v179 := lang.Apply(v150, []any{v178})
v180 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v181 := v180.FindInternedVar(lang.NewSymbol("list"))
if v181.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v181)))
}
v182 := v181.Get()
v183 := lang.Apply(v182, []any{lang.NewSymbol("start__0__auto__")})
v184 := lang.Apply(v143, []any{v147, v179, v183})
v185 := lang.Apply(v140, []any{v184})
v186 := lang.Apply(v137, []any{v185})
v187 := lang.Apply(v130, []any{v134, v186})
v188 := lang.Apply(v127, []any{v187})
v189 := lang.Apply(v124, []any{v188})
v190 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v191 := v190.FindInternedVar(lang.NewSymbol("list"))
if v191.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v191)))
}
v192 := v191.Get()
v193 := lang.Apply(v192, []any{nil})
v194 := lang.Apply(v117, []any{v121, v189, v193})
v195 := lang.Apply(v114, []any{v194})
v196 := lang.Apply(v111, []any{v195})
v197 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v198 := v197.FindInternedVar(lang.NewSymbol("list"))
if v198.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v198)))
}
v199 := v198.Get()
v200 := lang.Apply(v199, []any{" msecs"})
v201 := lang.Apply(v100, []any{v104, v108, v196, v200})
v202 := lang.Apply(v97, []any{v201})
v203 := lang.Apply(v94, []any{v202})
v204 := lang.Apply(v87, []any{v91, v203})
v205 := lang.Apply(v84, []any{v204})
v206 := lang.Apply(v81, []any{v205})
v207 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v208 := v207.FindInternedVar(lang.NewSymbol("list"))
if v208.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v208)))
}
v209 := v208.Get()
v210 := lang.Apply(v209, []any{lang.NewSymbol("ret__1__auto__")})
v211 := lang.Apply(v11, []any{v15, v78, v206, v210})
v212 := lang.Apply(v8, []any{v211})
return v212
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// to-array
{
v0 := lang.NewSymbol("to-array").WithMeta(lang.NewMap(lang.NewKeyword("tag"), "[Ljava.lang.Object;", lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns an array of Objects containing the contents of coll, which\n  can be any Collection.  Maps to java.util.Collection.toArray().", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(337), lang.NewKeyword("end-line"), int(337))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(runtime5.RT, "ToArray")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("ToArray is not a function")))
}
v5 := lang.Apply(v4, []any{v3})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), "[Ljava.lang.Object;")).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// to-array-2d
{
v0 := lang.NewSymbol("to-array-2d").WithMeta(lang.NewMap(lang.NewKeyword("tag"), "[[Ljava.lang.Object;", lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a (potentially-ragged) 2-dimensional array of Objects\n  containing the contents of coll, which can be any Collection of any\n  Collection.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4002), lang.NewKeyword("end-line"), int(4002))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("make-array"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8, _ := lang.FieldOrMethod(reflect.Type, "forName")
if reflect.TypeOf(v8).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("forName is not a function")))
}
v9 := lang.Apply(v8, []any{"[Ljava.lang.Object;"})
v10, _ := lang.FieldOrMethod(v3, "size")
if reflect.TypeOf(v10).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("size is not a function")))
}
v11 := lang.Apply(v10, []any{})
v12 := lang.Apply(v7, []any{v9, v11})
var v4 any = v12
_ = v4
var v14 any = int64(0)
_ = v14
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("seq"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v3})
var v15 any = v19
_ = v15
var v20 any
for {
var v21 any
if lang.IsTruthy(v15) {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("aset"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("to-array"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("first"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v15})
v32 := lang.Apply(v27, []any{v31})
v33 := lang.Apply(v24, []any{v4, v14, v32})
_ = v33
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("inc"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v14})
var v34 any = v38
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("next"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v15})
var v39 any = v43
v14 = v34
v15 = v39
continue
} else {
v21 = nil
}
v20 = v21
  break
}
_ = v20
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), "[[Ljava.lang.Object;")).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// trampoline
{
v0 := lang.NewSymbol("trampoline").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6293), lang.NewKeyword("end-line"), int(6293))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 1:
v3 := args[0]
recur_loop_1073:
v5 := lang.Apply(v3, nil)
var v4 any = v5
_ = v4
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("fn?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v4})
if lang.IsTruthy(v11) {
var v12 any = v4
v3 = v12
goto recur_loop_1073
} else {
v7 = v4
}
return v7
  default:
    if len(args) < 1 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := lang.NewList(args[1:]...)
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("trampoline"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
var v8 lang.FnFunc
v8 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("apply"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3, v4})
return v12
})
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6309), lang.NewKeyword("column"), int(18), lang.NewKeyword("end-line"), int(6309), lang.NewKeyword("end-column"), int(32))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v11 := lang.Apply(v7, []any{v10})
return v11
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// transduce
{
v0 := lang.NewSymbol("transduce").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("xform"), lang.NewSymbol("f"), lang.NewSymbol("coll")), lang.NewVector(lang.NewSymbol("xform"), lang.NewSymbol("f"), lang.NewSymbol("init"), lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6905), lang.NewKeyword("end-line"), int(6905))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("transduce"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v4, nil)
v10 := lang.Apply(v8, []any{v3, v4, v9, v5})
return v10
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v8 := lang.Apply(v3, []any{v7})
var v7 any = v8
_ = v7
var v10 any
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("instance?"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.IReduceInit, v6})
if lang.IsTruthy(v14) {
v15, _ := lang.FieldOrMethod(v6, "ReduceInit")
if reflect.TypeOf(v15).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("ReduceInit is not a function")))
}
v16 := lang.Apply(v15, []any{v7, v5})
v10 = v16
} else {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core.protocols"))
v18 := v17.FindInternedVar(lang.NewSymbol("coll-reduce"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v6, v7, v5})
v10 = v20
}
var v9 any = v10
_ = v9
v22 := lang.Apply(v7, []any{v9})
return v22
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// transient
{
v0 := lang.NewSymbol("transient").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Returns a new, transient version of the collection, in constant time.\n\n  Transients support a parallel set of 'changing' operations, with similar names\n  followed by ! - assoc!, conj! etc. These do the same things as their persistent\n  counterparts except the return values are themselves transient.\n\n  Note in particular that transients are not designed to be bashed in-place. You\n  must capture and use the return value in the next call. In this way, they support\n  the same code structure as the functional persistent code they replace.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3335), lang.NewKeyword("end-line"), int(3335))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, ok := lang.FieldOrMethod(v3, "AsTransient")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v3, "AsTransient")))
}
var v5 any
switch reflect.TypeOf(v4).Kind() {
case reflect.Func:
  v5 = lang.Apply(v4, nil)
default:
  v5 = v4
}
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// tree-seq
{
v0 := lang.NewSymbol("tree-seq").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("branch?"), lang.NewSymbol("children"), lang.NewSymbol("root"))), lang.NewKeyword("doc"), "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4955), lang.NewKeyword("end-line"), int(4955))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := args[2]
var v7 lang.FnFunc
{ // function walk
v7 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v9 := args[0]
var v10 lang.FnFunc
v10 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 0 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("cons"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 any
v15 := lang.Apply(v3, []any{v9})
if lang.IsTruthy(v15) {
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("mapcat"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v4, []any{v9})
v20 := lang.Apply(v18, []any{v8, v19})
v14 = v20
} else {
v14 = nil
}
v21 := lang.Apply(v13, []any{v9, v14})
return v21
})
v11 := lang.Apply(lang.NewLazySeq, []any{v10})
return v11
})
v8 := v7
_ = v8
}
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(4965), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(4969), lang.NewKeyword("end-column"), int(53))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v6 any = v9
_ = v6
v11 := lang.Apply(v6, []any{v5})
return v11
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// true?
{
v1 := reflect.TypeOf(false)
v0 := lang.NewSymbol("true?").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x is the value true, false otherwise.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(511), lang.NewKeyword("end-line"), int(511))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.Identical, []any{v4, true})
return v5
})
v4 := reflect.TypeOf(false)
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// type
{
v0 := lang.NewSymbol("type").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns the :type metadata of x, or its Class if none", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3467), lang.NewKeyword("end-line"), int(3467))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("get"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("meta"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v3})
v12 := lang.Apply(v7, []any{v11, lang.NewKeyword("type")})
var v4 any = v12
_ = v4
var v14 any
if lang.IsTruthy(v4) {
v14 = v4
} else {
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("class"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v14 = v18
}
return v14
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-add
{
var v1 lang.FnFunc
{ // function unchecked-add__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/unchecked_add")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-add").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the sum of x and y, both long.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1203), lang.NewKeyword("end-line"), int(1203))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_add")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_add is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-add-int
{
var v1 lang.FnFunc
{ // function unchecked-add-int__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/unchecked_int_add")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-add-int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the sum of x and y, both int.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1196), lang.NewKeyword("end-line"), int(1196))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_int_add")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_int_add is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-byte
{
var v1 lang.FnFunc
{ // function unchecked-byte__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/UncheckedByteCast")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-byte").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to byte. Subject to rounding or truncation.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3517), lang.NewKeyword("end-line"), int(3517))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.UncheckedByteCast, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-char
{
var v1 lang.FnFunc
{ // function unchecked-char__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/UncheckedCharCast")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-char").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to char. Subject to rounding or truncation.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3529), lang.NewKeyword("end-line"), int(3529))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(runtime5.RT, "UncheckedCharCast")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("UncheckedCharCast is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-dec
{
var v1 lang.FnFunc
{ // function unchecked-dec__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/unchecked_dec")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-dec").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns a number one less than x, a long.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1175), lang.NewKeyword("end-line"), int(1175))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_dec")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_dec is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-dec-int
{
var v1 lang.FnFunc
{ // function unchecked-dec-int__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/unchecked_int_dec")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-dec-int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns a number one less than x, an int.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1168), lang.NewKeyword("end-line"), int(1168))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_int_dec")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_int_dec is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-divide-int
{
var v1 lang.FnFunc
{ // function unchecked-divide-int__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/unchecked_int_divide")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-divide-int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the division of x by y, both int.\n  Note - uses a primitive operator subject to truncation.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(26), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1238), lang.NewKeyword("end-line"), int(1238))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_int_divide")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_int_divide is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-double
{
var v1 lang.FnFunc
{ // function unchecked-double__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/UncheckedDoubleCast")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-double").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to double. Subject to rounding.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3553), lang.NewKeyword("end-line"), int(3553))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.AsFloat64, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-float
{
var v1 lang.FnFunc
{ // function unchecked-float__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/UncheckedFloatCast")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-float").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to float. Subject to rounding.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3547), lang.NewKeyword("end-line"), int(3547))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.UncheckedFloatCast, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-inc
{
var v1 lang.FnFunc
{ // function unchecked-inc__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/unchecked_inc")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-inc").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns a number one greater than x, a long.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1161), lang.NewKeyword("end-line"), int(1161))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_inc")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_inc is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-inc-int
{
var v1 lang.FnFunc
{ // function unchecked-inc-int__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/unchecked_int_inc")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-inc-int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns a number one greater than x, an int.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1154), lang.NewKeyword("end-line"), int(1154))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_int_inc")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_int_inc is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-int
{
var v1 lang.FnFunc
{ // function unchecked-int__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/UncheckedIntCast")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to int. Subject to rounding or truncation.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3535), lang.NewKeyword("end-line"), int(3535))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.UncheckedIntCast, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-long
{
var v1 lang.FnFunc
{ // function unchecked-long__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/UncheckedLongCast")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-long").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to long. Subject to rounding or truncation.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3541), lang.NewKeyword("end-line"), int(3541))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.UncheckedLongCast, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-multiply
{
var v1 lang.FnFunc
{ // function unchecked-multiply__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/unchecked_multiply")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-multiply").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the product of x and y, both long.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(24), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1231), lang.NewKeyword("end-line"), int(1231))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_multiply")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_multiply is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-multiply-int
{
var v1 lang.FnFunc
{ // function unchecked-multiply-int__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/unchecked_int_multiply")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-multiply-int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the product of x and y, both int.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(28), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1224), lang.NewKeyword("end-line"), int(1224))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_int_multiply")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_int_multiply is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-negate
{
var v1 lang.FnFunc
{ // function unchecked-negate__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/unchecked_minus")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-negate").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the negation of x, a long.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1189), lang.NewKeyword("end-line"), int(1189))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "Unchecked_negate")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Unchecked_negate is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-negate-int
{
var v1 lang.FnFunc
{ // function unchecked-negate-int__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/unchecked_int_negate")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-negate-int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the negation of x, an int.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(26), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1182), lang.NewKeyword("end-line"), int(1182))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_int_negate")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_int_negate is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-remainder-int
{
var v1 lang.FnFunc
{ // function unchecked-remainder-int__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/unchecked_int_remainder")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-remainder-int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the remainder of division of x by y, both int.\n  Note - uses a primitive operator subject to truncation.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(29), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1245), lang.NewKeyword("end-line"), int(1245))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_int_remainder")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_int_remainder is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-short
{
var v1 lang.FnFunc
{ // function unchecked-short__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$runtime.RT")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/UncheckedShortCast")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-short").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Coerce to short. Subject to rounding or truncation.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(3523), lang.NewKeyword("end-line"), int(3523))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.UncheckedShortCast, []any{v4})
return v5
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-subtract
{
var v1 lang.FnFunc
{ // function unchecked-subtract__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/unchecked_minus")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-subtract").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the difference of x and y, both long.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(24), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1217), lang.NewKeyword("end-line"), int(1217))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_minus")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_minus is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unchecked-subtract-int
{
var v1 lang.FnFunc
{ // function unchecked-subtract-int__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/unchecked_int_subtract")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unchecked-subtract-int").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("y"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns the difference of x and y, both int.\n  Note - uses a primitive operator subject to overflow.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(28), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1210), lang.NewKeyword("end-line"), int(1210))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "unchecked_int_subtract")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unchecked_int_subtract is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// underive
{
v0 := lang.NewSymbol("underive").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("tag"), lang.NewSymbol("parent")), lang.NewVector(lang.NewSymbol("h"), lang.NewSymbol("tag"), lang.NewSymbol("parent"))), lang.NewKeyword("doc"), "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(5643), lang.NewKeyword("end-line"), int(5643))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("alter-var-root"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("global-hierarchy"))
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("underive"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v7, []any{v8, v11, v3, v4})
_ = v12
return nil
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v7 := lang.Apply(lang.NewKeyword("parents"), []any{v3})
var v6 any = v7
_ = v6
var v9 any
v10 := lang.Apply(v6, []any{v4})
if lang.IsTruthy(v10) {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("disj"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v6, []any{v4})
v15 := lang.Apply(v13, []any{v14, v5})
v9 = v15
} else {
v16 := lang.CreatePersistentTreeSet()
v17 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5652), lang.NewKeyword("column"), int(36), lang.NewKeyword("end-line"), int(5652), lang.NewKeyword("end-column"), int(38))
v18, err := lang.WithMeta(v16, v17.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v9 = v18
}
var v8 any = v9
_ = v8
var v20 any
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("not-empty"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v8})
if lang.IsTruthy(v24) {
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("assoc"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v6, v4, v8})
v20 = v28
} else {
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("dissoc"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v6, v4})
v20 = v32
}
var v19 any = v20
_ = v19
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("flatten"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("map"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
var v40 lang.FnFunc
v40 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v41 := args[0]
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("cons"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("key"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{v41})
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("interpose"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("key"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v41})
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("val"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.Apply(v58, []any{v41})
v60 := lang.Apply(v51, []any{v55, v59})
v61 := lang.Apply(v44, []any{v48, v60})
return v61
})
v41 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5656), lang.NewKeyword("column"), int(28), lang.NewKeyword("end-line"), int(5656), lang.NewKeyword("end-column"), int(70))
v42, err := lang.WithMeta(v40, v41.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("seq"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v19})
v47 := lang.Apply(v39, []any{v42, v46})
v48 := lang.Apply(v36, []any{v47})
var v33 any = v48
_ = v33
var v50 any
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("contains?"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.Apply(v6, []any{v4})
v55 := lang.Apply(v53, []any{v54, v5})
if lang.IsTruthy(v55) {
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("reduce1"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
var v59 lang.FnFunc
v59 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v60 := args[0]
v61 := args[1]
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("apply"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("derive"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.Apply(v64, []any{v67, v60, v61})
return v68
})
v60 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5659), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(5659), lang.NewKeyword("end-column"), int(31))
v61, err := lang.WithMeta(v59, v60.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("make-hierarchy"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, nil)
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("partition"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{int64(2), v33})
v70 := lang.Apply(v58, []any{v61, v65, v69})
v50 = v70
} else {
v50 = v3
}
return v50
  default:
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unquote
{
v0 := lang.NewSymbol("unquote").WithMeta(lang.NewMap()).(*lang.Symbol)
v1 := ns.Intern(v0)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unquote-splicing
{
v0 := lang.NewSymbol("unquote-splicing").WithMeta(lang.NewMap()).(*lang.Symbol)
v1 := ns.Intern(v0)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unreduced
{
v0 := lang.NewSymbol("unreduced").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "If x is reduced?, returns (deref x), else returns x", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2847), lang.NewKeyword("end-line"), int(2847))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("reduced?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("deref"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3})
v4 = v12
} else {
v4 = v3
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// unsigned-bit-shift-right
{
var v1 lang.FnFunc
{ // function unsigned-bit-shift-right__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("seq"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("concat"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("list"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{lang.NewSymbol(".")})
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("list"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("list"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("seq"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("concat"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("glojure.core/unsignedShiftRight")})
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v3})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.Apply(v38, []any{v4})
v40 := lang.Apply(v27, []any{v31, v35, v39})
v41 := lang.Apply(v24, []any{v40})
v42 := lang.Apply(v21, []any{v41})
v43 := lang.Apply(v10, []any{v14, v18, v42})
v44 := lang.Apply(v7, []any{v43})
return v44
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("unsigned-bit-shift-right").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("n"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Bitwise shift right, without sign-extension.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.6", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(30), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1373), lang.NewKeyword("end-line"), int(1373))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(lang.Numbers, "unsignedShiftRight")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("unsignedShiftRight is not a function")))
}
v7 := lang.Apply(v6, []any{v4, v5})
return v7
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// update
{
v0 := lang.NewSymbol("update").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("m"), lang.NewSymbol("k"), lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("m"), lang.NewSymbol("k"), lang.NewSymbol("f"), lang.NewSymbol("x")), lang.NewVector(lang.NewSymbol("m"), lang.NewSymbol("k"), lang.NewSymbol("f"), lang.NewSymbol("x"), lang.NewSymbol("y")), lang.NewVector(lang.NewSymbol("m"), lang.NewSymbol("k"), lang.NewSymbol("f"), lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("z")), lang.NewVector(lang.NewSymbol("m"), lang.NewSymbol("k"), lang.NewSymbol("f"), lang.NewSymbol("x"), lang.NewSymbol("y"), lang.NewSymbol("z"), lang.NewSymbol("&"), lang.NewSymbol("more"))), lang.NewKeyword("doc"), "'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6174), lang.NewKeyword("end-line"), int(6174))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("assoc"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("get"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v3, v4})
v13 := lang.Apply(v5, []any{v12})
v14 := lang.Apply(v8, []any{v3, v4, v13})
return v14
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("assoc"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("get"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{v3, v4})
v14 := lang.Apply(v5, []any{v13, v6})
v15 := lang.Apply(v9, []any{v3, v4, v14})
return v15
  case 5:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("assoc"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("get"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, []any{v3, v4})
v15 := lang.Apply(v5, []any{v14, v6, v7})
v16 := lang.Apply(v10, []any{v3, v4, v15})
return v16
  case 6:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := args[5]
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("assoc"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("get"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3, v4})
v16 := lang.Apply(v5, []any{v15, v6, v7, v8})
v17 := lang.Apply(v11, []any{v3, v4, v16})
return v17
  default:
    if len(args) < 6 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := args[5]
v9 := lang.NewList(args[6:]...)
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("assoc"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("apply"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("get"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v3, v4})
v20 := lang.Apply(v15, []any{v5, v19, v6, v7, v8, v9})
v21 := lang.Apply(v12, []any{v3, v4, v20})
return v21
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// update-in
{
v0 := lang.NewSymbol("update-in").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("m"), lang.NewSymbol("ks"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6158), lang.NewKeyword("end-line"), int(6158))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v8 lang.FnFunc
{ // function up
v8 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 4 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v10 := args[0]
v11 := args[1]
v12 := args[2]
v13 := args[3]
var v14 any = v11
_ = v14
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("seq"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v18, []any{v14})
var v15 any = v19
_ = v15
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("first"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{v15})
var v20 any = v24
_ = v20
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("next"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v25})
var v25 any = v29
_ = v25
var v30 any = v20
_ = v30
var v31 any = v25
_ = v31
var v33 any
if lang.IsTruthy(v31) {
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("assoc"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("get"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v10, v30})
v41 := lang.Apply(v9, []any{v40, v31, v12, v13})
v42 := lang.Apply(v36, []any{v10, v30, v41})
v33 = v42
} else {
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("assoc"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("apply"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("get"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{v10, v30})
v53 := lang.Apply(v48, []any{v12, v52, v13})
v54 := lang.Apply(v45, []any{v10, v30, v53})
v33 = v54
}
return v33
})
v9 := v8
_ = v9
}
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6167), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(6171), lang.NewKeyword("end-column"), int(59))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v7 any = v10
_ = v7
v12 := lang.Apply(v7, []any{v3, v4, v5, v6})
return v12
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// update-keys
{
v0 := lang.NewSymbol("update-keys").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("m"), lang.NewSymbol("f"))), lang.NewKeyword("doc"), "m f => {(f k) v ...}\n\n  Given a map m and a function f of 1-argument, returns a new map whose\n  keys are the result of applying f to the keys of m, mapped to the\n  corresponding values of m.\n  f must return a unique key for each key of m, else the behavior is undefined.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7906), lang.NewKeyword("end-line"), int(7906))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("persistent!"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("reduce-kv"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
var v12 lang.FnFunc
v12 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v13 := args[0]
v14 := args[1]
v15 := args[2]
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("assoc!"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.Apply(v4, []any{v14})
v20 := lang.Apply(v18, []any{v13, v19, v15})
return v20
})
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7916), lang.NewKeyword("column"), int(25), lang.NewKeyword("end-line"), int(7916), lang.NewKeyword("end-column"), int(59))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("transient"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.NewMap()
v19 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7917), lang.NewKeyword("column"), int(36), lang.NewKeyword("end-line"), int(7917), lang.NewKeyword("end-column"), int(37))
v20, err := lang.WithMeta(v18, v19.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v21 := lang.Apply(v17, []any{v20})
v22 := lang.Apply(v11, []any{v14, v21, v3})
v23 := lang.Apply(v8, []any{v22})
var v5 any = v23
_ = v5
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("with-meta"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("meta"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{v3})
v32 := lang.Apply(v27, []any{v5, v31})
return v32
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// update-vals
{
v0 := lang.NewSymbol("update-vals").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("m"), lang.NewSymbol("f"))), lang.NewKeyword("doc"), "m f => {k (f v) ...}\n\n  Given a map m and a function f of 1-argument, returns a new map where the keys of m\n  are mapped to result of applying f to the corresponding values of m.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.11", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7890), lang.NewKeyword("end-line"), int(7890))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("with-meta"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("persistent!"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("reduce-kv"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
var v14 lang.FnFunc
v14 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 3 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v15 := args[0]
v16 := args[1]
v17 := args[2]
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("assoc!"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v4, []any{v17})
v22 := lang.Apply(v20, []any{v15, v16, v21})
return v22
})
v15 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7899), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(7899), lang.NewKeyword("end-column"), int(51))
v16, err := lang.WithMeta(v14, v15.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v17 any
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("instance?"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{lang.IEditableCollection, v3})
if lang.IsTruthy(v21) {
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("transient"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v17 = v25
} else {
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("transient"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.NewMap()
v30 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7902), lang.NewKeyword("column"), int(30), lang.NewKeyword("end-line"), int(7902), lang.NewKeyword("end-column"), int(31))
v31, err := lang.WithMeta(v29, v30.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v32 := lang.Apply(v28, []any{v31})
v17 = v32
}
v33 := lang.Apply(v13, []any{v16, v17, v3})
v34 := lang.Apply(v10, []any{v33})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("meta"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.Apply(v37, []any{v3})
v39 := lang.Apply(v7, []any{v34, v38})
return v39
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// uri?
{
v0 := lang.NewSymbol("uri?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a java.net.URI", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7877), lang.NewKeyword("end-line"), int(7877))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{java.net23.URI, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// use
{
v0 := lang.NewSymbol("use").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Like 'require, but also refers to each lib's namespace using\n  glojure.core/refer. Use :use in the ns macro in preference to calling\n  this directly.\n\n  'use accepts additional options in libspecs: :exclude, :only, :rename.\n  The arguments and semantics for :exclude, :only, and :rename are the same\n  as those documented for glojure.core/refer.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6079), lang.NewKeyword("end-line"), int(6079))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 0 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := lang.NewList(args[0:]...)
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("apply"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("load-libs"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.Apply(v6, []any{v9, lang.NewKeyword("require"), lang.NewKeyword("use"), v3})
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// uuid?
{
v0 := lang.NewSymbol("uuid?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x is a java.util.UUID", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.9", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6847), lang.NewKeyword("end-line"), int(6847))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{java.util16.UUID, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// val
{
v0 := lang.NewSymbol("val").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("e"))), lang.NewKeyword("doc"), "Returns the value in the map entry.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1570), lang.NewKeyword("end-line"), int(1570))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(v3, "GetValue")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("GetValue is not a function")))
}
v5 := lang.Apply(v4, []any{})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// vals
{
v0 := lang.NewSymbol("vals").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("map"))), lang.NewKeyword("doc"), "Returns a sequence of the map's values, in the same order as (seq map).", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1557), lang.NewKeyword("end-line"), int(1557))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.Apply(lang.Vals, []any{v3})
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// var-get
{
v0 := lang.NewSymbol("var-get").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Gets the value in the var object", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4326), lang.NewKeyword("end-line"), int(4326))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4, _ := lang.FieldOrMethod(v3, "Get")
if reflect.TypeOf(v4).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Get is not a function")))
}
v5 := lang.Apply(v4, []any{})
return v5
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// var-set
{
v0 := lang.NewSymbol("var-set").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"), lang.NewSymbol("val"))), lang.NewKeyword("doc"), "Sets the value in the var object to val. The var must be\n thread-locally bound.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4332), lang.NewKeyword("end-line"), int(4332))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "Set")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("Set is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// var?
{
v0 := lang.NewSymbol("var?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("v"))), lang.NewKeyword("doc"), "Returns true if v is of type glojure.lang.Var", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4999), lang.NewKeyword("end-line"), int(4999))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.*Var, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// vary-meta
{
v0 := lang.NewSymbol("vary-meta").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("obj"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(668), lang.NewKeyword("end-line"), int(668))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("with-meta"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("apply"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("meta"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v3})
v16 := lang.Apply(v11, []any{v4, v15, v5})
v17 := lang.Apply(v8, []any{v3, v16})
return v17
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// vec
{
v0 := lang.NewSymbol("vec").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("coll"))), lang.NewKeyword("doc"), "Creates a new vector containing the contents of coll. Java arrays\n  will be aliased and should not be modified.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(366), lang.NewKeyword("end-line"), int(366))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
var v4 any
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("vector?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{v3})
if lang.IsTruthy(v8) {
var v9 any
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("instance?"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.IObj, v3})
if lang.IsTruthy(v13) {
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("with-meta"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3, nil})
v9 = v17
} else {
v18 := lang.Apply(lang.CreateLazilyPersistentVector, []any{v3})
v9 = v18
}
v4 = v9
} else {
v19 := lang.Apply(lang.CreateLazilyPersistentVector, []any{v3})
v4 = v19
}
return v4
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// vector
{
v0 := lang.NewSymbol("vector").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(), lang.NewVector(lang.NewSymbol("a")), lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("b")), lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("b"), lang.NewSymbol("c")), lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("b"), lang.NewSymbol("c"), lang.NewSymbol("d")), lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("b"), lang.NewSymbol("c"), lang.NewSymbol("d"), lang.NewSymbol("e")), lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("b"), lang.NewSymbol("c"), lang.NewSymbol("d"), lang.NewSymbol("e"), lang.NewSymbol("f")), lang.NewVector(lang.NewSymbol("a"), lang.NewSymbol("b"), lang.NewSymbol("c"), lang.NewSymbol("d"), lang.NewSymbol("e"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Creates a new vector containing the args.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(352), lang.NewKeyword("end-line"), int(352))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  case 0:
v3 := lang.NewVector()
v4 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(356), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(356), lang.NewKeyword("end-column"), int(8))
v5, err := lang.WithMeta(v3, v4.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v5
  case 1:
v3 := args[0]
v4 := lang.NewVector(v3)
v5 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(357), lang.NewKeyword("column"), int(8), lang.NewKeyword("end-line"), int(357), lang.NewKeyword("end-column"), int(10))
v6, err := lang.WithMeta(v4, v5.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v6
  case 2:
v3 := args[0]
v4 := args[1]
v5 := lang.NewVector(v3, v4)
v6 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(358), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(358), lang.NewKeyword("end-column"), int(14))
v7, err := lang.WithMeta(v5, v6.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v7
  case 3:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewVector(v3, v4, v5)
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(359), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(359), lang.NewKeyword("end-column"), int(18))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v8
  case 4:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.NewVector(v3, v4, v5, v6)
v8 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(360), lang.NewKeyword("column"), int(14), lang.NewKeyword("end-line"), int(360), lang.NewKeyword("end-column"), int(22))
v9, err := lang.WithMeta(v7, v8.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v9
  case 5:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := lang.NewVector(v3, v4, v5, v6, v7)
v9 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(361), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(361), lang.NewKeyword("end-column"), int(25))
v10, err := lang.WithMeta(v8, v9.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v10
  case 6:
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := args[5]
v9 := lang.NewVector(v3, v4, v5, v6, v7, v8)
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(362), lang.NewKeyword("column"), int(17), lang.NewKeyword("end-line"), int(362), lang.NewKeyword("end-column"), int(29))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
return v11
  default:
    if len(args) < 6 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := args[4]
v8 := args[5]
v9 := lang.NewList(args[6:]...)
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("cons"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("cons"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("cons"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("cons"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("cons"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("cons"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{v8, v9})
v29 := lang.Apply(v24, []any{v7, v28})
v30 := lang.Apply(v21, []any{v6, v29})
v31 := lang.Apply(v18, []any{v5, v30})
v32 := lang.Apply(v15, []any{v4, v31})
v33 := lang.Apply(v12, []any{v3, v32})
v34 := lang.Apply(lang.CreateLazilyPersistentVector, []any{v33})
return v34
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// vector?
{
v0 := lang.NewSymbol("vector?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Return true if x implements IPersistentVector", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(8), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(174), lang.NewKeyword("end-line"), int(178))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function vector?
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v6 := v5.FindInternedVar(lang.NewSymbol("instance?"))
if v6.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v6)))
}
v7 := v6.Get()
v8 := lang.Apply(v7, []any{lang.IPersistentVector, v4})
return v8
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(178), lang.NewKeyword("column"), int(10), lang.NewKeyword("end-line"), int(178), lang.NewKeyword("end-column"), int(106))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// volatile!
{
v1 := reflect.TypeOf((*lang.Volatile)(nil)).Elem()
v0 := lang.NewSymbol("volatile!").WithMeta(lang.NewMap(lang.NewKeyword("tag"), v1, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("val"))), lang.NewKeyword("doc"), "Creates and returns a Volatile with an initial value of val.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2517), lang.NewKeyword("end-line"), int(2517))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := lang.Apply(lang.NewVolatile, []any{v4})
return v5
})
v4 := reflect.TypeOf((*lang.Volatile)(nil)).Elem()
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), v4)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// volatile?
{
v0 := lang.NewSymbol("volatile?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("x"))), lang.NewKeyword("doc"), "Returns true if x is a volatile.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2540), lang.NewKeyword("end-line"), int(2540))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("instance?"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.Apply(v6, []any{lang.Volatile, v3})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// vreset!
{
v0 := lang.NewSymbol("vreset!").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("vol"), lang.NewSymbol("newval"))), lang.NewKeyword("doc"), "Sets the value of volatile to newval without regard for the\n   current value. Returns newval.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(2524), lang.NewKeyword("end-line"), int(2524))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v5, _ := lang.FieldOrMethod(v3, "reset")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("reset is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// vswap!
{
v0 := lang.NewSymbol("vswap!").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("vol"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.7", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(2531), lang.NewKeyword("end-line"), int(2531))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 4 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := args[3]
v7 := lang.NewList(args[4:]...)
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("with-meta"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.NewMap(lang.NewKeyword("tag"), lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Volatile"))
v13 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(2537), lang.NewKeyword("column"), int(26), lang.NewKeyword("end-line"), int(2537), lang.NewKeyword("end-column"), int(81))
v14, err := lang.WithMeta(v12, v13.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v15 := lang.Apply(v11, []any{v5, v14})
var v8 any = v15
_ = v8
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("concat"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("list"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{lang.NewSymbol(".reset")})
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{v8})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{v6})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("seq"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("concat"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("list"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{lang.NewSymbol(".Deref")})
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v8})
v61 := lang.Apply(v52, []any{v56, v60})
v62 := lang.Apply(v49, []any{v61})
v63 := lang.Apply(v46, []any{v62})
v64 := lang.Apply(v39, []any{v43, v63, v7})
v65 := lang.Apply(v36, []any{v64})
v66 := lang.Apply(v33, []any{v65})
v67 := lang.Apply(v22, []any{v26, v30, v66})
v68 := lang.Apply(v19, []any{v67})
return v68
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// when
{
v0 := lang.NewSymbol("when").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("test"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Evaluates test. If logical true, evaluates body in an implicit do.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(14), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(492), lang.NewKeyword("end-line"), int(492))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("list"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("cons"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol("do"), v6})
v14 := lang.Apply(v9, []any{lang.NewSymbol("if"), v5, v13})
return v14
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// when-first
{
v0 := lang.NewSymbol("when-first").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "bindings => x xs\n\n  Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4622), lang.NewKeyword("end-line"), int(4622))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("vector?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
if lang.IsTruthy(v11) {
v7 = nil
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("str"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("*ns*"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(lang.NewKeyword("line"), []any{v25})
v27 := lang.Apply(v14, []any{v18, " requires ", "a vector for its binding", " in ", v21, ":", v26})
v28 := lang.Apply(lang.NewIllegalArgumentError, []any{v27})
panic(v28)
}
_ = v7
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("="))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v37 := lang.Apply(v32, []any{int64(2), v36})
if lang.IsTruthy(v37) {
v29 = nil
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("first"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("*ns*"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("meta"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(lang.NewKeyword("line"), []any{v51})
v53 := lang.Apply(v40, []any{v44, " requires ", "exactly 2 forms in binding vector", " in ", v47, ":", v52})
v54 := lang.Apply(lang.NewIllegalArgumentError, []any{v53})
panic(v54)
}
_ = v29
_ = nil
var v55 any = v5
_ = v55
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("nth"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{v55, int64(0), nil})
var v56 any = v60
_ = v56
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("nth"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{v55, int64(1), nil})
var v61 any = v65
_ = v61
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("seq"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("concat"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("list"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.Apply(v75, []any{lang.NewSymbol("glojure.core/when-let")})
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("list"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("apply"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("vector"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("seq"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("concat"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("list"))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.Apply(v94, []any{lang.NewSymbol("xs__0__auto__")})
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("list"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("seq"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("concat"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("list"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
v108 := lang.Apply(v107, []any{lang.NewSymbol("glojure.core/seq")})
v109 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v110 := v109.FindInternedVar(lang.NewSymbol("list"))
if v110.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v110)))
}
v111 := v110.Get()
v112 := lang.Apply(v111, []any{v61})
v113 := lang.Apply(v104, []any{v108, v112})
v114 := lang.Apply(v101, []any{v113})
v115 := lang.Apply(v98, []any{v114})
v116 := lang.Apply(v91, []any{v95, v115})
v117 := lang.Apply(v88, []any{v116})
v118 := lang.Apply(v82, []any{v85, v117})
v119 := lang.Apply(v79, []any{v118})
v120 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v121 := v120.FindInternedVar(lang.NewSymbol("list"))
if v121.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v121)))
}
v122 := v121.Get()
v123 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v124 := v123.FindInternedVar(lang.NewSymbol("seq"))
if v124.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v124)))
}
v125 := v124.Get()
v126 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v127 := v126.FindInternedVar(lang.NewSymbol("concat"))
if v127.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v127)))
}
v128 := v127.Get()
v129 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v130 := v129.FindInternedVar(lang.NewSymbol("list"))
if v130.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v130)))
}
v131 := v130.Get()
v132 := lang.Apply(v131, []any{lang.NewSymbol("glojure.core/let")})
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("list"))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v137 := v136.FindInternedVar(lang.NewSymbol("apply"))
if v137.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v137)))
}
v138 := v137.Get()
v139 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v140 := v139.FindInternedVar(lang.NewSymbol("vector"))
if v140.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v140)))
}
v141 := v140.Get()
v142 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v143 := v142.FindInternedVar(lang.NewSymbol("seq"))
if v143.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v143)))
}
v144 := v143.Get()
v145 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v146 := v145.FindInternedVar(lang.NewSymbol("concat"))
if v146.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v146)))
}
v147 := v146.Get()
v148 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v149 := v148.FindInternedVar(lang.NewSymbol("list"))
if v149.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v149)))
}
v150 := v149.Get()
v151 := lang.Apply(v150, []any{v56})
v152 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v153 := v152.FindInternedVar(lang.NewSymbol("list"))
if v153.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v153)))
}
v154 := v153.Get()
v155 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v156 := v155.FindInternedVar(lang.NewSymbol("seq"))
if v156.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v156)))
}
v157 := v156.Get()
v158 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v159 := v158.FindInternedVar(lang.NewSymbol("concat"))
if v159.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v159)))
}
v160 := v159.Get()
v161 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v162 := v161.FindInternedVar(lang.NewSymbol("list"))
if v162.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v162)))
}
v163 := v162.Get()
v164 := lang.Apply(v163, []any{lang.NewSymbol("glojure.core/first")})
v165 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v166 := v165.FindInternedVar(lang.NewSymbol("list"))
if v166.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v166)))
}
v167 := v166.Get()
v168 := lang.Apply(v167, []any{lang.NewSymbol("xs__0__auto__")})
v169 := lang.Apply(v160, []any{v164, v168})
v170 := lang.Apply(v157, []any{v169})
v171 := lang.Apply(v154, []any{v170})
v172 := lang.Apply(v147, []any{v151, v171})
v173 := lang.Apply(v144, []any{v172})
v174 := lang.Apply(v138, []any{v141, v173})
v175 := lang.Apply(v135, []any{v174})
v176 := lang.Apply(v128, []any{v132, v175, v6})
v177 := lang.Apply(v125, []any{v176})
v178 := lang.Apply(v122, []any{v177})
v179 := lang.Apply(v72, []any{v76, v119, v178})
v180 := lang.Apply(v69, []any{v179})
return v180
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// when-let
{
v0 := lang.NewSymbol("when-let").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "bindings => binding-form test\n\n  When test is true, evaluates body with binding-form bound to the value of test", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1859), lang.NewKeyword("end-line"), int(1859))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("vector?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
if lang.IsTruthy(v11) {
v7 = nil
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("str"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("*ns*"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(lang.NewKeyword("line"), []any{v25})
v27 := lang.Apply(v14, []any{v18, " requires ", "a vector for its binding", " in ", v21, ":", v26})
v28 := lang.Apply(lang.NewIllegalArgumentError, []any{v27})
panic(v28)
}
_ = v7
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("="))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v37 := lang.Apply(v32, []any{int64(2), v36})
if lang.IsTruthy(v37) {
v29 = nil
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("first"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("*ns*"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("meta"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(lang.NewKeyword("line"), []any{v51})
v53 := lang.Apply(v40, []any{v44, " requires ", "exactly 2 forms in binding vector", " in ", v47, ":", v52})
v54 := lang.Apply(lang.NewIllegalArgumentError, []any{v53})
panic(v54)
}
_ = v29
_ = nil
v56 := lang.Apply(v5, []any{int64(0)})
var v55 any = v56
_ = v55
v58 := lang.Apply(v5, []any{int64(1)})
var v57 any = v58
_ = v57
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("seq"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("concat"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("list"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{lang.NewSymbol("glojure.core/let")})
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("list"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("apply"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("vector"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("seq"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("concat"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("list"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.Apply(v87, []any{lang.NewSymbol("temp__0__auto__")})
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("list"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.Apply(v91, []any{v57})
v93 := lang.Apply(v84, []any{v88, v92})
v94 := lang.Apply(v81, []any{v93})
v95 := lang.Apply(v75, []any{v78, v94})
v96 := lang.Apply(v72, []any{v95})
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("list"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("seq"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("concat"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("list"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{lang.NewSymbol("glojure.core/when")})
v110 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v111 := v110.FindInternedVar(lang.NewSymbol("list"))
if v111.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v111)))
}
v112 := v111.Get()
v113 := lang.Apply(v112, []any{lang.NewSymbol("temp__0__auto__")})
v114 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v115 := v114.FindInternedVar(lang.NewSymbol("list"))
if v115.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v115)))
}
v116 := v115.Get()
v117 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v118 := v117.FindInternedVar(lang.NewSymbol("seq"))
if v118.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v118)))
}
v119 := v118.Get()
v120 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v121 := v120.FindInternedVar(lang.NewSymbol("concat"))
if v121.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v121)))
}
v122 := v121.Get()
v123 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v124 := v123.FindInternedVar(lang.NewSymbol("list"))
if v124.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v124)))
}
v125 := v124.Get()
v126 := lang.Apply(v125, []any{lang.NewSymbol("glojure.core/let")})
v127 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v128 := v127.FindInternedVar(lang.NewSymbol("list"))
if v128.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v128)))
}
v129 := v128.Get()
v130 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v131 := v130.FindInternedVar(lang.NewSymbol("apply"))
if v131.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v131)))
}
v132 := v131.Get()
v133 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v134 := v133.FindInternedVar(lang.NewSymbol("vector"))
if v134.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v134)))
}
v135 := v134.Get()
v136 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v137 := v136.FindInternedVar(lang.NewSymbol("seq"))
if v137.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v137)))
}
v138 := v137.Get()
v139 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v140 := v139.FindInternedVar(lang.NewSymbol("concat"))
if v140.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v140)))
}
v141 := v140.Get()
v142 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v143 := v142.FindInternedVar(lang.NewSymbol("list"))
if v143.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v143)))
}
v144 := v143.Get()
v145 := lang.Apply(v144, []any{v55})
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("list"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.Apply(v148, []any{lang.NewSymbol("temp__0__auto__")})
v150 := lang.Apply(v141, []any{v145, v149})
v151 := lang.Apply(v138, []any{v150})
v152 := lang.Apply(v132, []any{v135, v151})
v153 := lang.Apply(v129, []any{v152})
v154 := lang.Apply(v122, []any{v126, v153, v6})
v155 := lang.Apply(v119, []any{v154})
v156 := lang.Apply(v116, []any{v155})
v157 := lang.Apply(v105, []any{v109, v113, v156})
v158 := lang.Apply(v102, []any{v157})
v159 := lang.Apply(v99, []any{v158})
v160 := lang.Apply(v65, []any{v69, v96, v159})
v161 := lang.Apply(v62, []any{v160})
return v161
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// when-not
{
v0 := lang.NewSymbol("when-not").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("test"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Evaluates test. If logical false, evaluates body in an implicit do.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(498), lang.NewKeyword("end-line"), int(498))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("list"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("cons"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol("do"), v6})
v14 := lang.Apply(v9, []any{lang.NewSymbol("if"), v5, nil, v13})
return v14
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// when-some
{
v0 := lang.NewSymbol("when-some").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "bindings => binding-form test\n\n   When test is not nil, evaluates body with binding-form bound to the\n   value of test", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.6", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1894), lang.NewKeyword("end-line"), int(1894))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("vector?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
if lang.IsTruthy(v11) {
v7 = nil
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("str"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("*ns*"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(lang.NewKeyword("line"), []any{v25})
v27 := lang.Apply(v14, []any{v18, " requires ", "a vector for its binding", " in ", v21, ":", v26})
v28 := lang.Apply(lang.NewIllegalArgumentError, []any{v27})
panic(v28)
}
_ = v7
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("="))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v37 := lang.Apply(v32, []any{int64(2), v36})
if lang.IsTruthy(v37) {
v29 = nil
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("first"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("*ns*"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("meta"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(lang.NewKeyword("line"), []any{v51})
v53 := lang.Apply(v40, []any{v44, " requires ", "exactly 2 forms in binding vector", " in ", v47, ":", v52})
v54 := lang.Apply(lang.NewIllegalArgumentError, []any{v53})
panic(v54)
}
_ = v29
_ = nil
v56 := lang.Apply(v5, []any{int64(0)})
var v55 any = v56
_ = v55
v58 := lang.Apply(v5, []any{int64(1)})
var v57 any = v58
_ = v57
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("seq"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("concat"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("list"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.Apply(v68, []any{lang.NewSymbol("glojure.core/let")})
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("list"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("apply"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v77 := v76.FindInternedVar(lang.NewSymbol("vector"))
if v77.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v77)))
}
v78 := v77.Get()
v79 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v80 := v79.FindInternedVar(lang.NewSymbol("seq"))
if v80.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v80)))
}
v81 := v80.Get()
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("concat"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("list"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.Apply(v87, []any{lang.NewSymbol("temp__0__auto__")})
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("list"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.Apply(v91, []any{v57})
v93 := lang.Apply(v84, []any{v88, v92})
v94 := lang.Apply(v81, []any{v93})
v95 := lang.Apply(v75, []any{v78, v94})
v96 := lang.Apply(v72, []any{v95})
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("list"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("seq"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("concat"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("list"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.Apply(v108, []any{lang.NewSymbol("if")})
v110 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v111 := v110.FindInternedVar(lang.NewSymbol("list"))
if v111.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v111)))
}
v112 := v111.Get()
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("seq"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v117 := v116.FindInternedVar(lang.NewSymbol("concat"))
if v117.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v117)))
}
v118 := v117.Get()
v119 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v120 := v119.FindInternedVar(lang.NewSymbol("list"))
if v120.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v120)))
}
v121 := v120.Get()
v122 := lang.Apply(v121, []any{lang.NewSymbol("glojure.core/nil?")})
v123 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v124 := v123.FindInternedVar(lang.NewSymbol("list"))
if v124.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v124)))
}
v125 := v124.Get()
v126 := lang.Apply(v125, []any{lang.NewSymbol("temp__0__auto__")})
v127 := lang.Apply(v118, []any{v122, v126})
v128 := lang.Apply(v115, []any{v127})
v129 := lang.Apply(v112, []any{v128})
v130 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v131 := v130.FindInternedVar(lang.NewSymbol("list"))
if v131.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v131)))
}
v132 := v131.Get()
v133 := lang.Apply(v132, []any{nil})
v134 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v135 := v134.FindInternedVar(lang.NewSymbol("list"))
if v135.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v135)))
}
v136 := v135.Get()
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("seq"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("concat"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("list"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.Apply(v145, []any{lang.NewSymbol("glojure.core/let")})
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("list"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v151 := v150.FindInternedVar(lang.NewSymbol("apply"))
if v151.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v151)))
}
v152 := v151.Get()
v153 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v154 := v153.FindInternedVar(lang.NewSymbol("vector"))
if v154.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v154)))
}
v155 := v154.Get()
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("seq"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
v159 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v160 := v159.FindInternedVar(lang.NewSymbol("concat"))
if v160.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v160)))
}
v161 := v160.Get()
v162 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v163 := v162.FindInternedVar(lang.NewSymbol("list"))
if v163.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v163)))
}
v164 := v163.Get()
v165 := lang.Apply(v164, []any{v55})
v166 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v167 := v166.FindInternedVar(lang.NewSymbol("list"))
if v167.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v167)))
}
v168 := v167.Get()
v169 := lang.Apply(v168, []any{lang.NewSymbol("temp__0__auto__")})
v170 := lang.Apply(v161, []any{v165, v169})
v171 := lang.Apply(v158, []any{v170})
v172 := lang.Apply(v152, []any{v155, v171})
v173 := lang.Apply(v149, []any{v172})
v174 := lang.Apply(v142, []any{v146, v173, v6})
v175 := lang.Apply(v139, []any{v174})
v176 := lang.Apply(v136, []any{v175})
v177 := lang.Apply(v105, []any{v109, v129, v133, v176})
v178 := lang.Apply(v102, []any{v177})
v179 := lang.Apply(v99, []any{v178})
v180 := lang.Apply(v65, []any{v69, v96, v179})
v181 := lang.Apply(v62, []any{v180})
return v181
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// while
{
v0 := lang.NewSymbol("while").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("test"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Repeatedly executes body while test expression is true. Presumes\n  some side-effect will cause test to become false/nil. Returns nil", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(6327), lang.NewKeyword("end-line"), int(6327))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("glojure.core/loop")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("apply"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("vector"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, nil)
v33 := lang.Apply(v28, []any{v32})
v34 := lang.Apply(v22, []any{v25, v33})
v35 := lang.Apply(v19, []any{v34})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("seq"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("concat"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("list"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{lang.NewSymbol("glojure.core/when")})
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("list"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.Apply(v51, []any{v5})
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("list"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("seq"))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("concat"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("list"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{lang.NewSymbol("recur")})
v66 := lang.Apply(v61, []any{v65})
v67 := lang.Apply(v58, []any{v66})
v68 := lang.Apply(v55, []any{v67})
v69 := lang.Apply(v44, []any{v48, v52, v6, v68})
v70 := lang.Apply(v41, []any{v69})
v71 := lang.Apply(v38, []any{v70})
v72 := lang.Apply(v12, []any{v16, v35, v71})
v73 := lang.Apply(v9, []any{v72})
return v73
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// with-bindings
{
v0 := lang.NewSymbol("with-bindings").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("binding-map"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Takes a map of Var/value pairs. Installs for the given Vars the associated\n  values as thread-local bindings. Then executes body. Pops the installed\n  bindings after body was evaluated. Returns the value of body.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(1984), lang.NewKeyword("end-line"), int(1984))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("glojure.core/with-bindings*")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v19, []any{v5})
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("seq"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("concat"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("list"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.Apply(v32, []any{lang.NewSymbol("glojure.core/fn")})
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("list"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("apply"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("vector"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("seq"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v47 := v46.FindInternedVar(lang.NewSymbol("concat"))
if v47.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v47)))
}
v48 := v47.Get()
v49 := lang.Apply(v48, nil)
v50 := lang.Apply(v45, []any{v49})
v51 := lang.Apply(v39, []any{v42, v50})
v52 := lang.Apply(v36, []any{v51})
v53 := lang.Apply(v29, []any{v33, v52, v6})
v54 := lang.Apply(v26, []any{v53})
v55 := lang.Apply(v23, []any{v54})
v56 := lang.Apply(v12, []any{v16, v20, v55})
v57 := lang.Apply(v9, []any{v56})
return v57
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// with-bindings*
{
v0 := lang.NewSymbol("with-bindings*").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("binding-map"), lang.NewSymbol("f"), lang.NewSymbol("&"), lang.NewSymbol("args"))), lang.NewKeyword("doc"), "Takes a map of Var/value pairs. Installs for the given Vars the associated\n  values as thread-local bindings. Then calls f with the supplied arguments.\n  Pops the installed bindings after f returned. Returns whatever f returns.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.1", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(1971), lang.NewKeyword("end-line"), int(1971))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("push-thread-bindings"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.Apply(v8, []any{v3})
_ = v9
var v10 any
func() {
defer func() {
v11 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v12 := v11.FindInternedVar(lang.NewSymbol("pop-thread-bindings"))
if v12.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v12)))
}
v13 := v12.Get()
v14 := lang.Apply(v13, nil)
}()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("apply"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v4, v5})
v10 = v18
}()
return v10
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// with-in-str
{
v0 := lang.NewSymbol("with-in-str").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("s"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Evaluates body in a context in which *in* is bound to a fresh\n  StringReader initialized with the string s.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4749), lang.NewKeyword("end-line"), int(4749))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("glojure.core/with-open")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("apply"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("vector"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("seq"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("concat"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("list"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{lang.NewSymbol("s__0__auto__")})
v36 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v37 := v36.FindInternedVar(lang.NewSymbol("list"))
if v37.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v37)))
}
v38 := v37.Get()
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("seq"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("concat"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("list"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.Apply(v47, []any{lang.NewSymbol("glojure.core/->")})
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("list"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("seq"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("concat"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("list"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.Apply(v60, []any{lang.NewSymbol("java.io.StringReader.")})
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("list"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.Apply(v64, []any{v5})
v66 := lang.Apply(v57, []any{v61, v65})
v67 := lang.Apply(v54, []any{v66})
v68 := lang.Apply(v51, []any{v67})
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("list"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, []any{lang.NewSymbol("glojure.lang.LineNumberingPushbackReader.")})
v73 := lang.Apply(v44, []any{v48, v68, v72})
v74 := lang.Apply(v41, []any{v73})
v75 := lang.Apply(v38, []any{v74})
v76 := lang.Apply(v31, []any{v35, v75})
v77 := lang.Apply(v28, []any{v76})
v78 := lang.Apply(v22, []any{v25, v77})
v79 := lang.Apply(v19, []any{v78})
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("list"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("seq"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("concat"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("list"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.Apply(v91, []any{lang.NewSymbol("glojure.core/binding")})
v93 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v94 := v93.FindInternedVar(lang.NewSymbol("list"))
if v94.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v94)))
}
v95 := v94.Get()
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("apply"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("vector"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("seq"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("concat"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("list"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.Apply(v110, []any{lang.NewSymbol("glojure.core/*in*")})
v112 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v113 := v112.FindInternedVar(lang.NewSymbol("list"))
if v113.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v113)))
}
v114 := v113.Get()
v115 := lang.Apply(v114, []any{lang.NewSymbol("s__0__auto__")})
v116 := lang.Apply(v107, []any{v111, v115})
v117 := lang.Apply(v104, []any{v116})
v118 := lang.Apply(v98, []any{v101, v117})
v119 := lang.Apply(v95, []any{v118})
v120 := lang.Apply(v88, []any{v92, v119, v6})
v121 := lang.Apply(v85, []any{v120})
v122 := lang.Apply(v82, []any{v121})
v123 := lang.Apply(v12, []any{v16, v79, v122})
v124 := lang.Apply(v9, []any{v123})
return v124
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// with-loading-context
{
v0 := lang.NewSymbol("with-loading-context").WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5734), lang.NewKeyword("column"), int(11), lang.NewKeyword("end-line"), int(5734), lang.NewKeyword("end-column"), int(30), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("macro"), true)).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("seq"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("concat"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("list"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.Apply(v23, []any{lang.NewSymbol("glojure.core/fn")})
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("list"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.Apply(v27, []any{lang.NewSymbol("loading__0__auto__")})
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("list"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("apply"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("vector"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("seq"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("concat"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, nil)
v45 := lang.Apply(v40, []any{v44})
v46 := lang.Apply(v34, []any{v37, v45})
v47 := lang.Apply(v31, []any{v46})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("seq"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v55 := v54.FindInternedVar(lang.NewSymbol("concat"))
if v55.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v55)))
}
v56 := v55.Get()
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.Apply(v59, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.PushThreadBindings")})
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("list"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v65 := v64.FindInternedVar(lang.NewSymbol("apply"))
if v65.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v65)))
}
v66 := v65.Get()
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("hash-map"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("seq"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("concat"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.Apply(v75, nil)
v77 := lang.Apply(v72, []any{v76})
v78 := lang.Apply(v66, []any{v69, v77})
v79 := lang.Apply(v63, []any{v78})
v80 := lang.Apply(v56, []any{v60, v79})
v81 := lang.Apply(v53, []any{v80})
v82 := lang.Apply(v50, []any{v81})
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("list"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v87 := v86.FindInternedVar(lang.NewSymbol("seq"))
if v87.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v87)))
}
v88 := v87.Get()
v89 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v90 := v89.FindInternedVar(lang.NewSymbol("concat"))
if v90.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v90)))
}
v91 := v90.Get()
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("list"))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.Apply(v94, []any{lang.NewSymbol("try")})
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("list"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("seq"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("concat"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("list"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
v108 := lang.Apply(v107, []any{lang.NewSymbol("finally")})
v109 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v110 := v109.FindInternedVar(lang.NewSymbol("list"))
if v110.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v110)))
}
v111 := v110.Get()
v112 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v113 := v112.FindInternedVar(lang.NewSymbol("seq"))
if v113.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v113)))
}
v114 := v113.Get()
v115 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v116 := v115.FindInternedVar(lang.NewSymbol("concat"))
if v116.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v116)))
}
v117 := v116.Get()
v118 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v119 := v118.FindInternedVar(lang.NewSymbol("list"))
if v119.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v119)))
}
v120 := v119.Get()
v121 := lang.Apply(v120, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.PopThreadBindings")})
v122 := lang.Apply(v117, []any{v121})
v123 := lang.Apply(v114, []any{v122})
v124 := lang.Apply(v111, []any{v123})
v125 := lang.Apply(v104, []any{v108, v124})
v126 := lang.Apply(v101, []any{v125})
v127 := lang.Apply(v98, []any{v126})
v128 := lang.Apply(v91, []any{v95, v5, v127})
v129 := lang.Apply(v88, []any{v128})
v130 := lang.Apply(v85, []any{v129})
v131 := lang.Apply(v20, []any{v24, v28, v47, v82, v130})
v132 := lang.Apply(v17, []any{v131})
v133 := lang.Apply(v14, []any{v132})
v134 := lang.Apply(v11, []any{v133})
v135 := lang.Apply(v8, []any{v134})
return v135
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// with-local-vars
{
v0 := lang.NewSymbol("with-local-vars").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("name-vals-vec"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "varbinding=> symbol init-expr\n\n  Executes the exprs in a context in which the symbols are bound to\n  vars with per-thread bindings to the init-exprs.  The symbols refer\n  to the var objects themselves, and must be accessed with var-get and\n  var-set", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4339), lang.NewKeyword("end-line"), int(4339))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("vector?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
if lang.IsTruthy(v11) {
v7 = nil
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("str"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("*ns*"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(lang.NewKeyword("line"), []any{v25})
v27 := lang.Apply(v14, []any{v18, " requires ", "a vector for its binding", " in ", v21, ":", v26})
v28 := lang.Apply(lang.NewIllegalArgumentError, []any{v27})
panic(v28)
}
_ = v7
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("even?"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v37 := lang.Apply(v32, []any{v36})
if lang.IsTruthy(v37) {
v29 = nil
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("first"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("*ns*"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("meta"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(lang.NewKeyword("line"), []any{v51})
v53 := lang.Apply(v40, []any{v44, " requires ", "an even number of forms in binding vector", " in ", v47, ":", v52})
v54 := lang.Apply(lang.NewIllegalArgumentError, []any{v53})
panic(v54)
}
_ = v29
_ = nil
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("seq"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("concat"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v62 := v61.FindInternedVar(lang.NewSymbol("list"))
if v62.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v62)))
}
v63 := v62.Get()
v64 := lang.Apply(v63, []any{lang.NewSymbol("glojure.core/let")})
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("list"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("apply"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v72 := v71.FindInternedVar(lang.NewSymbol("vector"))
if v72.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v72)))
}
v73 := v72.Get()
v74 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v75 := v74.FindInternedVar(lang.NewSymbol("seq"))
if v75.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v75)))
}
v76 := v75.Get()
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("concat"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v81 := v80.FindInternedVar(lang.NewSymbol("interleave"))
if v81.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v81)))
}
v82 := v81.Get()
v83 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v84 := v83.FindInternedVar(lang.NewSymbol("take-nth"))
if v84.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v84)))
}
v85 := v84.Get()
v86 := lang.Apply(v85, []any{int64(2), v5})
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("repeat"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.Apply(v89, []any{lang.NewList(lang.NewSymbol(".."), lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.*Var"), lang.NewSymbol("create"), lang.NewSymbol("setDynamic"))})
v91 := lang.Apply(v82, []any{v86, v90})
v92 := lang.Apply(v79, []any{v91})
v93 := lang.Apply(v76, []any{v92})
v94 := lang.Apply(v70, []any{v73, v93})
v95 := lang.Apply(v67, []any{v94})
v96 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v97 := v96.FindInternedVar(lang.NewSymbol("list"))
if v97.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v97)))
}
v98 := v97.Get()
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("seq"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("concat"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("list"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
v108 := lang.Apply(v107, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.PushThreadBindings")})
v109 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v110 := v109.FindInternedVar(lang.NewSymbol("list"))
if v110.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v110)))
}
v111 := v110.Get()
v112 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v113 := v112.FindInternedVar(lang.NewSymbol("apply"))
if v113.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v113)))
}
v114 := v113.Get()
v115 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v116 := v115.FindInternedVar(lang.NewSymbol("hash-map"))
if v116.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v116)))
}
v117 := v116.Get()
v118 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v119 := v118.FindInternedVar(lang.NewSymbol("seq"))
if v119.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v119)))
}
v120 := v119.Get()
v121 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v122 := v121.FindInternedVar(lang.NewSymbol("concat"))
if v122.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v122)))
}
v123 := v122.Get()
v124 := lang.Apply(v123, nil)
v125 := lang.Apply(v120, []any{v124})
v126 := lang.Apply(v114, []any{v117, v125})
v127 := lang.Apply(v111, []any{v126})
v128 := lang.Apply(v104, []any{v108, v127})
v129 := lang.Apply(v101, []any{v128})
v130 := lang.Apply(v98, []any{v129})
v131 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v132 := v131.FindInternedVar(lang.NewSymbol("list"))
if v132.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v132)))
}
v133 := v132.Get()
v134 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v135 := v134.FindInternedVar(lang.NewSymbol("seq"))
if v135.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v135)))
}
v136 := v135.Get()
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("concat"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("list"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.Apply(v142, []any{lang.NewSymbol("try")})
v144 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v145 := v144.FindInternedVar(lang.NewSymbol("list"))
if v145.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v145)))
}
v146 := v145.Get()
v147 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v148 := v147.FindInternedVar(lang.NewSymbol("seq"))
if v148.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v148)))
}
v149 := v148.Get()
v150 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v151 := v150.FindInternedVar(lang.NewSymbol("concat"))
if v151.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v151)))
}
v152 := v151.Get()
v153 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v154 := v153.FindInternedVar(lang.NewSymbol("list"))
if v154.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v154)))
}
v155 := v154.Get()
v156 := lang.Apply(v155, []any{lang.NewSymbol("finally")})
v157 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v158 := v157.FindInternedVar(lang.NewSymbol("list"))
if v158.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v158)))
}
v159 := v158.Get()
v160 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v161 := v160.FindInternedVar(lang.NewSymbol("seq"))
if v161.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v161)))
}
v162 := v161.Get()
v163 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v164 := v163.FindInternedVar(lang.NewSymbol("concat"))
if v164.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v164)))
}
v165 := v164.Get()
v166 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v167 := v166.FindInternedVar(lang.NewSymbol("list"))
if v167.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v167)))
}
v168 := v167.Get()
v169 := lang.Apply(v168, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.PopThreadBindings")})
v170 := lang.Apply(v165, []any{v169})
v171 := lang.Apply(v162, []any{v170})
v172 := lang.Apply(v159, []any{v171})
v173 := lang.Apply(v152, []any{v156, v172})
v174 := lang.Apply(v149, []any{v173})
v175 := lang.Apply(v146, []any{v174})
v176 := lang.Apply(v139, []any{v143, v6, v175})
v177 := lang.Apply(v136, []any{v176})
v178 := lang.Apply(v133, []any{v177})
v179 := lang.Apply(v60, []any{v64, v95, v130, v178})
v180 := lang.Apply(v57, []any{v179})
return v180
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// with-meta
{
v0 := lang.NewSymbol("with-meta").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("obj"), lang.NewSymbol("m"))), lang.NewKeyword("doc"), "Returns an object of the same type and value as obj, with\n    map m as its metadata.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(10), lang.NewKeyword("column"), int(2), lang.NewKeyword("line"), int(211), lang.NewKeyword("end-line"), int(216))).(*lang.Symbol)
var v2 lang.FnFunc
{ // function with-meta
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5 := args[1]
v6, _ := lang.FieldOrMethod(v4, "WithMeta")
if reflect.TypeOf(v6).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("WithMeta is not a function")))
}
v7 := lang.Apply(v6, []any{v5})
return v7
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(216), lang.NewKeyword("column"), int(12), lang.NewKeyword("end-line"), int(217), lang.NewKeyword("end-column"), int(32))).(lang.FnFunc)
v3 := v2
_ = v3
}
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// with-open
{
v0 := lang.NewSymbol("with-open").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "bindings => [name init ...]\n\n  Evaluates body in a try expression with names bound to the values\n  of the inits, and a finally clause that calls (.close name) on each\n  name in reverse order.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(19), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(3832), lang.NewKeyword("end-line"), int(3832))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v7 any
v8 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v9 := v8.FindInternedVar(lang.NewSymbol("vector?"))
if v9.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v9)))
}
v10 := v9.Get()
v11 := lang.Apply(v10, []any{v5})
if lang.IsTruthy(v11) {
v7 = nil
} else {
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("str"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v16 := v15.FindInternedVar(lang.NewSymbol("first"))
if v16.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v16)))
}
v17 := v16.Get()
v18 := lang.Apply(v17, []any{v3})
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("*ns*"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("meta"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.Apply(v24, []any{v3})
v26 := lang.Apply(lang.NewKeyword("line"), []any{v25})
v27 := lang.Apply(v14, []any{v18, " requires ", "a vector for its binding", " in ", v21, ":", v26})
v28 := lang.Apply(lang.NewIllegalArgumentError, []any{v27})
panic(v28)
}
_ = v7
var v29 any
v30 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v31 := v30.FindInternedVar(lang.NewSymbol("even?"))
if v31.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v31)))
}
v32 := v31.Get()
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("count"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v5})
v37 := lang.Apply(v32, []any{v36})
if lang.IsTruthy(v37) {
v29 = nil
} else {
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("str"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("first"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.Apply(v43, []any{v3})
v45 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v46 := v45.FindInternedVar(lang.NewSymbol("*ns*"))
if v46.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v46)))
}
v47 := v46.Get()
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("meta"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v3})
v52 := lang.Apply(lang.NewKeyword("line"), []any{v51})
v53 := lang.Apply(v40, []any{v44, " requires ", "an even number of forms in binding vector", " in ", v47, ":", v52})
v54 := lang.Apply(lang.NewIllegalArgumentError, []any{v53})
panic(v54)
}
_ = v29
_ = nil
var v55 any
v56 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v57 := v56.FindInternedVar(lang.NewSymbol("="))
if v57.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v57)))
}
v58 := v57.Get()
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("count"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.Apply(v61, []any{v5})
v63 := lang.Apply(v58, []any{v62, int64(0)})
if lang.IsTruthy(v63) {
v64 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v65 := v64.FindInternedVar(lang.NewSymbol("seq"))
if v65.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v65)))
}
v66 := v65.Get()
v67 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v68 := v67.FindInternedVar(lang.NewSymbol("concat"))
if v68.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v68)))
}
v69 := v68.Get()
v70 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v71 := v70.FindInternedVar(lang.NewSymbol("list"))
if v71.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v71)))
}
v72 := v71.Get()
v73 := lang.Apply(v72, []any{lang.NewSymbol("do")})
v74 := lang.Apply(v69, []any{v73, v6})
v75 := lang.Apply(v66, []any{v74})
v55 = v75
} else {
var v76 any
v77 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v78 := v77.FindInternedVar(lang.NewSymbol("symbol?"))
if v78.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v78)))
}
v79 := v78.Get()
v80 := lang.Apply(v5, []any{int64(0)})
v81 := lang.Apply(v79, []any{v80})
if lang.IsTruthy(v81) {
v82 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v83 := v82.FindInternedVar(lang.NewSymbol("seq"))
if v83.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v83)))
}
v84 := v83.Get()
v85 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v86 := v85.FindInternedVar(lang.NewSymbol("concat"))
if v86.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v86)))
}
v87 := v86.Get()
v88 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v89 := v88.FindInternedVar(lang.NewSymbol("list"))
if v89.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v89)))
}
v90 := v89.Get()
v91 := lang.Apply(v90, []any{lang.NewSymbol("glojure.core/let")})
v92 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v93 := v92.FindInternedVar(lang.NewSymbol("list"))
if v93.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v93)))
}
v94 := v93.Get()
v95 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v96 := v95.FindInternedVar(lang.NewSymbol("subvec"))
if v96.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v96)))
}
v97 := v96.Get()
v98 := lang.Apply(v97, []any{v5, int64(0), int64(2)})
v99 := lang.Apply(v94, []any{v98})
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("list"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("seq"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v107 := v106.FindInternedVar(lang.NewSymbol("concat"))
if v107.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v107)))
}
v108 := v107.Get()
v109 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v110 := v109.FindInternedVar(lang.NewSymbol("list"))
if v110.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v110)))
}
v111 := v110.Get()
v112 := lang.Apply(v111, []any{lang.NewSymbol("try")})
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("list"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v117 := v116.FindInternedVar(lang.NewSymbol("seq"))
if v117.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v117)))
}
v118 := v117.Get()
v119 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v120 := v119.FindInternedVar(lang.NewSymbol("concat"))
if v120.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v120)))
}
v121 := v120.Get()
v122 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v123 := v122.FindInternedVar(lang.NewSymbol("list"))
if v123.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v123)))
}
v124 := v123.Get()
v125 := lang.Apply(v124, []any{lang.NewSymbol("glojure.core/with-open")})
v126 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v127 := v126.FindInternedVar(lang.NewSymbol("list"))
if v127.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v127)))
}
v128 := v127.Get()
v129 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v130 := v129.FindInternedVar(lang.NewSymbol("subvec"))
if v130.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v130)))
}
v131 := v130.Get()
v132 := lang.Apply(v131, []any{v5, int64(2)})
v133 := lang.Apply(v128, []any{v132})
v134 := lang.Apply(v121, []any{v125, v133, v6})
v135 := lang.Apply(v118, []any{v134})
v136 := lang.Apply(v115, []any{v135})
v137 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v138 := v137.FindInternedVar(lang.NewSymbol("list"))
if v138.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v138)))
}
v139 := v138.Get()
v140 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v141 := v140.FindInternedVar(lang.NewSymbol("seq"))
if v141.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v141)))
}
v142 := v141.Get()
v143 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v144 := v143.FindInternedVar(lang.NewSymbol("concat"))
if v144.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v144)))
}
v145 := v144.Get()
v146 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v147 := v146.FindInternedVar(lang.NewSymbol("list"))
if v147.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v147)))
}
v148 := v147.Get()
v149 := lang.Apply(v148, []any{lang.NewSymbol("finally")})
v150 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v151 := v150.FindInternedVar(lang.NewSymbol("list"))
if v151.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v151)))
}
v152 := v151.Get()
v153 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v154 := v153.FindInternedVar(lang.NewSymbol("seq"))
if v154.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v154)))
}
v155 := v154.Get()
v156 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v157 := v156.FindInternedVar(lang.NewSymbol("concat"))
if v157.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v157)))
}
v158 := v157.Get()
v159 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v160 := v159.FindInternedVar(lang.NewSymbol("list"))
if v160.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v160)))
}
v161 := v160.Get()
v162 := lang.Apply(v161, []any{lang.NewSymbol(".")})
v163 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v164 := v163.FindInternedVar(lang.NewSymbol("list"))
if v164.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v164)))
}
v165 := v164.Get()
v166 := lang.Apply(v5, []any{int64(0)})
v167 := lang.Apply(v165, []any{v166})
v168 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v169 := v168.FindInternedVar(lang.NewSymbol("list"))
if v169.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v169)))
}
v170 := v169.Get()
v171 := lang.Apply(v170, []any{lang.NewSymbol("close")})
v172 := lang.Apply(v158, []any{v162, v167, v171})
v173 := lang.Apply(v155, []any{v172})
v174 := lang.Apply(v152, []any{v173})
v175 := lang.Apply(v145, []any{v149, v174})
v176 := lang.Apply(v142, []any{v175})
v177 := lang.Apply(v139, []any{v176})
v178 := lang.Apply(v108, []any{v112, v136, v177})
v179 := lang.Apply(v105, []any{v178})
v180 := lang.Apply(v102, []any{v179})
v181 := lang.Apply(v87, []any{v91, v99, v180})
v182 := lang.Apply(v84, []any{v181})
v76 = v182
} else {
var v183 any
if lang.IsTruthy(lang.NewKeyword("else")) {
v184 := lang.Apply(lang.NewIllegalArgumentError, []any{"with-open only allows Symbols in bindings"})
panic(v184)
} else {
v183 = nil
}
v76 = v183
}
v55 = v76
}
return v55
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// with-out-str
{
v0 := lang.NewSymbol("with-out-str").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "Evaluates exprs in a context in which *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(4738), lang.NewKeyword("end-line"), int(4738))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 2 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := lang.NewList(args[2:]...)
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("seq"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("concat"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("list"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{lang.NewSymbol("glojure.core/let")})
v16 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v17 := v16.FindInternedVar(lang.NewSymbol("list"))
if v17.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
}
v18 := v17.Get()
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("apply"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v23 := v22.FindInternedVar(lang.NewSymbol("vector"))
if v23.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
}
v24 := v23.Get()
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{lang.NewSymbol("s__0__auto__")})
v35 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v36 := v35.FindInternedVar(lang.NewSymbol("list"))
if v36.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v36)))
}
v37 := v36.Get()
v38 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v39 := v38.FindInternedVar(lang.NewSymbol("seq"))
if v39.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v39)))
}
v40 := v39.Get()
v41 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v42 := v41.FindInternedVar(lang.NewSymbol("concat"))
if v42.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v42)))
}
v43 := v42.Get()
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{lang.NewSymbol("new")})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{lang.NewSymbol("strings.Builder")})
v52 := lang.Apply(v43, []any{v47, v51})
v53 := lang.Apply(v40, []any{v52})
v54 := lang.Apply(v37, []any{v53})
v55 := lang.Apply(v30, []any{v34, v54})
v56 := lang.Apply(v27, []any{v55})
v57 := lang.Apply(v21, []any{v24, v56})
v58 := lang.Apply(v18, []any{v57})
v59 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v60 := v59.FindInternedVar(lang.NewSymbol("list"))
if v60.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v60)))
}
v61 := v60.Get()
v62 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v63 := v62.FindInternedVar(lang.NewSymbol("seq"))
if v63.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v63)))
}
v64 := v63.Get()
v65 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v66 := v65.FindInternedVar(lang.NewSymbol("concat"))
if v66.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v66)))
}
v67 := v66.Get()
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("list"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{lang.NewSymbol("glojure.core/binding")})
v72 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v73 := v72.FindInternedVar(lang.NewSymbol("list"))
if v73.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v73)))
}
v74 := v73.Get()
v75 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v76 := v75.FindInternedVar(lang.NewSymbol("apply"))
if v76.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v76)))
}
v77 := v76.Get()
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("vector"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("seq"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("concat"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v88 := v87.FindInternedVar(lang.NewSymbol("list"))
if v88.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v88)))
}
v89 := v88.Get()
v90 := lang.Apply(v89, []any{lang.NewSymbol("glojure.core/*out*")})
v91 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v92 := v91.FindInternedVar(lang.NewSymbol("list"))
if v92.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v92)))
}
v93 := v92.Get()
v94 := lang.Apply(v93, []any{lang.NewSymbol("s__0__auto__")})
v95 := lang.Apply(v86, []any{v90, v94})
v96 := lang.Apply(v83, []any{v95})
v97 := lang.Apply(v77, []any{v80, v96})
v98 := lang.Apply(v74, []any{v97})
v99 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v100 := v99.FindInternedVar(lang.NewSymbol("list"))
if v100.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v100)))
}
v101 := v100.Get()
v102 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v103 := v102.FindInternedVar(lang.NewSymbol("seq"))
if v103.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v103)))
}
v104 := v103.Get()
v105 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v106 := v105.FindInternedVar(lang.NewSymbol("concat"))
if v106.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v106)))
}
v107 := v106.Get()
v108 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v109 := v108.FindInternedVar(lang.NewSymbol("list"))
if v109.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v109)))
}
v110 := v109.Get()
v111 := lang.Apply(v110, []any{lang.NewSymbol("glojure.core/str")})
v112 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v113 := v112.FindInternedVar(lang.NewSymbol("list"))
if v113.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v113)))
}
v114 := v113.Get()
v115 := lang.Apply(v114, []any{lang.NewSymbol("s__0__auto__")})
v116 := lang.Apply(v107, []any{v111, v115})
v117 := lang.Apply(v104, []any{v116})
v118 := lang.Apply(v101, []any{v117})
v119 := lang.Apply(v67, []any{v71, v98, v5, v118})
v120 := lang.Apply(v64, []any{v119})
v121 := lang.Apply(v61, []any{v120})
v122 := lang.Apply(v11, []any{v15, v58, v121})
v123 := lang.Apply(v8, []any{v122})
return v123
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// with-precision
{
v0 := lang.NewSymbol("with-precision").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("precision"), lang.NewSymbol("&"), lang.NewSymbol("exprs"))), lang.NewKeyword("doc"), "Sets the precision and rounding mode to be used for BigDecimal operations.\n\n  Usage: (with-precision 10 (/ 1M 3))\n  or:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))\n\n  The rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,\n  HALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(24), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(5110), lang.NewKeyword("end-line"), int(5110))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
var v8 any
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("="))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v13 := v12.FindInternedVar(lang.NewSymbol("first"))
if v13.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v13)))
}
v14 := v13.Get()
v15 := lang.Apply(v14, []any{v6})
v16 := lang.Apply(v11, []any{v15, lang.NewKeyword("rounding")})
if lang.IsTruthy(v16) {
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("next"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("next"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.Apply(v22, []any{v6})
v24 := lang.Apply(v19, []any{v23})
v25 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v26 := v25.FindInternedVar(lang.NewSymbol("seq"))
if v26.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
}
v27 := v26.Get()
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("concat"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("seq"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("concat"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v41 := v40.FindInternedVar(lang.NewSymbol("list"))
if v41.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
}
v42 := v41.Get()
v43 := lang.Apply(v42, []any{lang.NewSymbol(".")})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{lang.NewSymbol("java.math.RoundingMode")})
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("list"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v52 := v51.FindInternedVar(lang.NewSymbol("second"))
if v52.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v52)))
}
v53 := v52.Get()
v54 := lang.Apply(v53, []any{v6})
v55 := lang.Apply(v50, []any{v54})
v56 := lang.Apply(v39, []any{v43, v47, v55})
v57 := lang.Apply(v36, []any{v56})
v58 := lang.Apply(v33, []any{v57})
v59 := lang.Apply(v30, []any{v58})
v60 := lang.Apply(v27, []any{v59})
v61 := lang.NewVector(v24, v60)
v62 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5121), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(5122), lang.NewKeyword("end-column"), int(69))
v63, err := lang.WithMeta(v61, v62.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v8 = v63
} else {
v64 := lang.NewVector(v6, nil)
v65 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(5123), lang.NewKeyword("column"), int(23), lang.NewKeyword("end-line"), int(5123), lang.NewKeyword("end-column"), int(33))
v66, err := lang.WithMeta(v64, v65.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v8 = v66
}
var v7 any = v8
_ = v7
v68 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v69 := v68.FindInternedVar(lang.NewSymbol("nth"))
if v69.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v69)))
}
v70 := v69.Get()
v71 := lang.Apply(v70, []any{v7, int64(0), nil})
var v67 any = v71
_ = v67
v73 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v74 := v73.FindInternedVar(lang.NewSymbol("nth"))
if v74.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v74)))
}
v75 := v74.Get()
v76 := lang.Apply(v75, []any{v7, int64(1), nil})
var v72 any = v76
_ = v72
v78 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v79 := v78.FindInternedVar(lang.NewSymbol("seq"))
if v79.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v79)))
}
v80 := v79.Get()
v81 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v82 := v81.FindInternedVar(lang.NewSymbol("concat"))
if v82.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v82)))
}
v83 := v82.Get()
v84 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v85 := v84.FindInternedVar(lang.NewSymbol("list"))
if v85.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v85)))
}
v86 := v85.Get()
v87 := lang.Apply(v86, []any{lang.NewSymbol("glojure.core/binding")})
v88 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v89 := v88.FindInternedVar(lang.NewSymbol("list"))
if v89.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v89)))
}
v90 := v89.Get()
v91 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v92 := v91.FindInternedVar(lang.NewSymbol("apply"))
if v92.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v92)))
}
v93 := v92.Get()
v94 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v95 := v94.FindInternedVar(lang.NewSymbol("vector"))
if v95.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v95)))
}
v96 := v95.Get()
v97 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v98 := v97.FindInternedVar(lang.NewSymbol("seq"))
if v98.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v98)))
}
v99 := v98.Get()
v100 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v101 := v100.FindInternedVar(lang.NewSymbol("concat"))
if v101.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v101)))
}
v102 := v101.Get()
v103 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v104 := v103.FindInternedVar(lang.NewSymbol("list"))
if v104.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v104)))
}
v105 := v104.Get()
v106 := lang.Apply(v105, []any{lang.NewSymbol("glojure.core/*math-context*")})
v107 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v108 := v107.FindInternedVar(lang.NewSymbol("list"))
if v108.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v108)))
}
v109 := v108.Get()
v110 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v111 := v110.FindInternedVar(lang.NewSymbol("seq"))
if v111.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v111)))
}
v112 := v111.Get()
v113 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v114 := v113.FindInternedVar(lang.NewSymbol("concat"))
if v114.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v114)))
}
v115 := v114.Get()
v116 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v117 := v116.FindInternedVar(lang.NewSymbol("list"))
if v117.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v117)))
}
v118 := v117.Get()
v119 := lang.Apply(v118, []any{lang.NewSymbol("java.math.MathContext.")})
v120 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v121 := v120.FindInternedVar(lang.NewSymbol("list"))
if v121.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v121)))
}
v122 := v121.Get()
v123 := lang.Apply(v122, []any{v5})
v124 := lang.Apply(v115, []any{v119, v123, v72})
v125 := lang.Apply(v112, []any{v124})
v126 := lang.Apply(v109, []any{v125})
v127 := lang.Apply(v102, []any{v106, v126})
v128 := lang.Apply(v99, []any{v127})
v129 := lang.Apply(v93, []any{v96, v128})
v130 := lang.Apply(v90, []any{v129})
v131 := lang.Apply(v83, []any{v87, v130, v67})
v132 := lang.Apply(v80, []any{v131})
return v132
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// with-redefs
{
v0 := lang.NewSymbol("with-redefs").WithMeta(lang.NewMap(lang.NewKeyword("macro"), true, lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("bindings"), lang.NewSymbol("&"), lang.NewSymbol("body"))), lang.NewKeyword("doc"), "binding => var-symbol temp-value-expr\n\n  Temporarily redefines Vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its Var.  After the body is\n  executed, the root values of all the Vars will be set back to their\n  old values.  These temporary changes will be visible in all threads.\n  Useful for mocking out functions during testing.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(21), lang.NewKeyword("column"), int(11), lang.NewKeyword("line"), int(7544), lang.NewKeyword("end-line"), int(7544))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  switch len(args) {
  default:
    if len(args) < 3 {
      panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
    }
v3 := args[0]
v4 := args[1]
v5 := args[2]
v6 := lang.NewList(args[3:]...)
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("seq"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("concat"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("list"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{lang.NewSymbol("glojure.core/with-redefs-fn")})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("list"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v21 := v20.FindInternedVar(lang.NewSymbol("zipmap"))
if v21.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v21)))
}
v22 := v21.Get()
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("map"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
var v26 lang.FnFunc
v26 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v27 := args[0]
v28 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v29 := v28.FindInternedVar(lang.NewSymbol("list"))
if v29.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v29)))
}
v30 := v29.Get()
v31 := lang.Apply(v30, []any{lang.NewSymbol("var"), v27})
return v31
})
v27 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7555), lang.NewKeyword("column"), int(34), lang.NewKeyword("end-line"), int(7555), lang.NewKeyword("end-column"), int(47))
v28, err := lang.WithMeta(v26, v27.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("take-nth"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{int64(2), v5})
v33 := lang.Apply(v25, []any{v28, v32})
v34 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v35 := v34.FindInternedVar(lang.NewSymbol("take-nth"))
if v35.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
}
v36 := v35.Get()
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("next"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v5})
v41 := lang.Apply(v36, []any{int64(2), v40})
v42 := lang.Apply(v22, []any{v33, v41})
v43 := lang.Apply(v19, []any{v42})
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("list"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("seq"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v51 := v50.FindInternedVar(lang.NewSymbol("concat"))
if v51.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v51)))
}
v52 := v51.Get()
v53 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v54 := v53.FindInternedVar(lang.NewSymbol("list"))
if v54.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v54)))
}
v55 := v54.Get()
v56 := lang.Apply(v55, []any{lang.NewSymbol("glojure.core/fn")})
v57 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v58 := v57.FindInternedVar(lang.NewSymbol("list"))
if v58.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v58)))
}
v59 := v58.Get()
v60 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v61 := v60.FindInternedVar(lang.NewSymbol("apply"))
if v61.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v61)))
}
v62 := v61.Get()
v63 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v64 := v63.FindInternedVar(lang.NewSymbol("vector"))
if v64.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v64)))
}
v65 := v64.Get()
v66 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v67 := v66.FindInternedVar(lang.NewSymbol("seq"))
if v67.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v67)))
}
v68 := v67.Get()
v69 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v70 := v69.FindInternedVar(lang.NewSymbol("concat"))
if v70.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v70)))
}
v71 := v70.Get()
v72 := lang.Apply(v71, nil)
v73 := lang.Apply(v68, []any{v72})
v74 := lang.Apply(v62, []any{v65, v73})
v75 := lang.Apply(v59, []any{v74})
v76 := lang.Apply(v52, []any{v56, v75, v6})
v77 := lang.Apply(v49, []any{v76})
v78 := lang.Apply(v46, []any{v77})
v79 := lang.Apply(v12, []any{v16, v43, v78})
v80 := lang.Apply(v9, []any{v79})
return v80
  }
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// with-redefs-fn
{
v0 := lang.NewSymbol("with-redefs-fn").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("binding-map"), lang.NewSymbol("func"))), lang.NewKeyword("doc"), "Temporarily redefines Vars during a call to func.  Each val of\n  binding-map will replace the root value of its key which must be\n  a Var.  After func is called with no args, the root values of all\n  the Vars will be set back to their old values.  These temporary\n  changes will be visible in all threads.  Useful for mocking out\n  functions during testing.", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.3", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(7524), lang.NewKeyword("end-line"), int(7524))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
var v6 lang.FnFunc
v6 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v7 := args[0]
v9 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v10 := v9.FindInternedVar(lang.NewSymbol("seq"))
if v10.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v10)))
}
v11 := v10.Get()
v12 := lang.Apply(v11, []any{v7})
var v8 any = v12
_ = v8
var v13 any = nil
_ = v13
var v14 any = int64(0)
_ = v14
var v15 any = int64(0)
_ = v15
var v16 any
for {
var v17 any
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("<"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.Apply(v20, []any{v15, v14})
if lang.IsTruthy(v21) {
v23, _ := lang.FieldOrMethod(v13, "nth")
if reflect.TypeOf(v23).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("nth is not a function")))
}
v24 := lang.Apply(v23, []any{v15})
var v22 any = v24
_ = v22
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("nth"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.Apply(v28, []any{v22, int64(0), nil})
var v25 any = v29
_ = v25
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("nth"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v22, int64(1), nil})
var v30 any = v34
_ = v30
v36, _ := lang.FieldOrMethod(v25, "bindRoot")
if reflect.TypeOf(v36).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("bindRoot is not a function")))
}
v37 := lang.Apply(v36, []any{v30})
_ = v37
var v38 any = v8
var v39 any = v13
var v40 any = v14
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("unchecked-inc"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v15})
var v41 any = v45
v8 = v38
v13 = v39
v14 = v40
v15 = v41
continue
} else {
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("seq"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v8})
var v22 any = v26
_ = v22
var v28 any
if lang.IsTruthy(v22) {
var v29 any = v22
_ = v29
var v31 any
v32 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v33 := v32.FindInternedVar(lang.NewSymbol("chunked-seq?"))
if v33.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v33)))
}
v34 := v33.Get()
v35 := lang.Apply(v34, []any{v29})
if lang.IsTruthy(v35) {
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("chunk-first"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v29})
var v36 any = v40
_ = v36
v43 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v44 := v43.FindInternedVar(lang.NewSymbol("chunk-rest"))
if v44.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
}
v45 := v44.Get()
v46 := lang.Apply(v45, []any{v29})
var v42 any = v46
var v47 any = v36
v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v50 := v49.FindInternedVar(lang.NewSymbol("int"))
if v50.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
}
v51 := v50.Get()
v52 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v53 := v52.FindInternedVar(lang.NewSymbol("count"))
if v53.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
}
v54 := v53.Get()
v55 := lang.Apply(v54, []any{v36})
v56 := lang.Apply(v51, []any{v55})
var v48 any = v56
v58 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v59 := v58.FindInternedVar(lang.NewSymbol("int"))
if v59.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v59)))
}
v60 := v59.Get()
v61 := lang.Apply(v60, []any{int64(0)})
var v57 any = v61
v8 = v42
v13 = v47
v14 = v48
v15 = v57
continue
} else {
v37 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v38 := v37.FindInternedVar(lang.NewSymbol("first"))
if v38.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v38)))
}
v39 := v38.Get()
v40 := lang.Apply(v39, []any{v29})
var v36 any = v40
_ = v36
v42 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v43 := v42.FindInternedVar(lang.NewSymbol("nth"))
if v43.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v43)))
}
v44 := v43.Get()
v45 := lang.Apply(v44, []any{v36, int64(0), nil})
var v41 any = v45
_ = v41
v47 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v48 := v47.FindInternedVar(lang.NewSymbol("nth"))
if v48.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v48)))
}
v49 := v48.Get()
v50 := lang.Apply(v49, []any{v36, int64(1), nil})
var v46 any = v50
_ = v46
v52, _ := lang.FieldOrMethod(v41, "bindRoot")
if reflect.TypeOf(v52).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("bindRoot is not a function")))
}
v53 := lang.Apply(v52, []any{v46})
_ = v53
v55 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v56 := v55.FindInternedVar(lang.NewSymbol("next"))
if v56.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v56)))
}
v57 := v56.Get()
v58 := lang.Apply(v57, []any{v29})
var v54 any = v58
var v59 any = nil
var v60 any = int64(0)
var v61 any = int64(0)
v8 = v54
v13 = v59
v14 = v60
v15 = v61
continue
}
v28 = v31
} else {
v28 = nil
}
v17 = v28
}
v16 = v17
  break
}
return v16
})
v7 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7533), lang.NewKeyword("column"), int(19), lang.NewKeyword("end-line"), int(7535), lang.NewKeyword("end-column"), int(93))
v8, err := lang.WithMeta(v6, v7.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
var v5 any = v8
_ = v5
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("zipmap"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v14 := v13.FindInternedVar(lang.NewSymbol("keys"))
if v14.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
}
v15 := v14.Get()
v16 := lang.Apply(v15, []any{v3})
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("map"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
var v20 lang.FnFunc
v20 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v21 := args[0]
v22, ok := lang.FieldOrMethod(v21, "getRawRoot")
if !ok {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v21, "getRawRoot")))
}
var v23 any
switch reflect.TypeOf(v22).Kind() {
case reflect.Func:
  v23 = lang.Apply(v22, nil)
default:
  v23 = v22
}
return v23
})
v21 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(7537), lang.NewKeyword("column"), int(31), lang.NewKeyword("end-line"), int(7537), lang.NewKeyword("end-column"), int(92))
v22, err := lang.WithMeta(v20, v21.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v23 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v24 := v23.FindInternedVar(lang.NewSymbol("keys"))
if v24.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v24)))
}
v25 := v24.Get()
v26 := lang.Apply(v25, []any{v3})
v27 := lang.Apply(v19, []any{v22, v26})
v28 := lang.Apply(v12, []any{v16, v27})
var v9 any = v28
_ = v9
var v30 any
func() {
defer func() {
v31 := lang.Apply(v5, []any{v9})
}()
v32 := lang.Apply(v5, []any{v3})
_ = v32
v33 := lang.Apply(v4, nil)
v30 = v33
}()
return v30
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// xml-seq
{
v0 := lang.NewSymbol("xml-seq").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("root"))), lang.NewKeyword("doc"), "A tree seq on the xml elements as per xml/parse", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(4982), lang.NewKeyword("end-line"), int(4982))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("tree-seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("complement"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("string?"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v9, []any{v12})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("comp"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v18 := v17.FindInternedVar(lang.NewSymbol("seq"))
if v18.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v18)))
}
v19 := v18.Get()
v20 := lang.Apply(v16, []any{v19, lang.NewKeyword("content")})
v21 := lang.Apply(v6, []any{v13, v20, v3})
return v21
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// zero?
{
var v1 lang.FnFunc
{ // function zero?__inliner
v1 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v5 := v4.FindInternedVar(lang.NewSymbol("seq"))
if v5.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
}
v6 := v5.Get()
v7 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v8 := v7.FindInternedVar(lang.NewSymbol("concat"))
if v8.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
}
v9 := v8.Get()
v10 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v11 := v10.FindInternedVar(lang.NewSymbol("list"))
if v11.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v11)))
}
v12 := v11.Get()
v13 := lang.Apply(v12, []any{lang.NewSymbol(".")})
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("list"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{lang.NewSymbol("github.com$glojurelang$glojure$pkg$lang.Numbers")})
v18 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v19 := v18.FindInternedVar(lang.NewSymbol("list"))
if v19.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v19)))
}
v20 := v19.Get()
v21 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v22 := v21.FindInternedVar(lang.NewSymbol("seq"))
if v22.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v22)))
}
v23 := v22.Get()
v24 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v25 := v24.FindInternedVar(lang.NewSymbol("concat"))
if v25.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v25)))
}
v26 := v25.Get()
v27 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v28 := v27.FindInternedVar(lang.NewSymbol("list"))
if v28.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v28)))
}
v29 := v28.Get()
v30 := lang.Apply(v29, []any{lang.NewSymbol("glojure.core/isZero")})
v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v32 := v31.FindInternedVar(lang.NewSymbol("list"))
if v32.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
}
v33 := v32.Get()
v34 := lang.Apply(v33, []any{v3})
v35 := lang.Apply(v26, []any{v30, v34})
v36 := lang.Apply(v23, []any{v35})
v37 := lang.Apply(v20, []any{v36})
v38 := lang.Apply(v9, []any{v13, v17, v37})
v39 := lang.Apply(v6, []any{v38})
return v39
})
v2 := v1
_ = v2
}
v0 := lang.NewSymbol("zero?").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("num"))), lang.NewKeyword("inline"), v1, lang.NewKeyword("doc"), "Returns true if num is zero, else false", lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(860), lang.NewKeyword("end-line"), int(860))).(*lang.Symbol)
var v3 lang.FnFunc
v3 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 1 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v4 := args[0]
v5, _ := lang.FieldOrMethod(lang.Numbers, "isZero")
if reflect.TypeOf(v5).Kind() != reflect.Func {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("isZero is not a function")))
}
v6 := lang.Apply(v5, []any{v4})
return v6
})
v3 = v3.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v2 := ns.InternWithValue(v0, v3, true)
if v0.Meta() != nil {
	v2.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
// zipmap
{
v0 := lang.NewSymbol("zipmap").WithMeta(lang.NewMap(lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("keys"), lang.NewSymbol("vals"))), lang.NewKeyword("doc"), "Returns a map with the keys mapped to the corresponding vals.", lang.NewKeyword("static"), true, lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("added"), "1.0", lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("glojure.core")), lang.NewKeyword("end-column"), int(12), lang.NewKeyword("column"), int(7), lang.NewKeyword("line"), int(6583), lang.NewKeyword("end-line"), int(6583))).(*lang.Symbol)
var v2 lang.FnFunc
v2 = lang.NewFnFunc(func(args ...any) any {
  if len(args) != 2 {
    panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
  }
v3 := args[0]
v4 := args[1]
v6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v7 := v6.FindInternedVar(lang.NewSymbol("transient"))
if v7.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v7)))
}
v8 := v7.Get()
v9 := lang.NewMap()
v10 := lang.NewMap(lang.NewKeyword("file"), "glojure/core.glj", lang.NewKeyword("line"), int(6588), lang.NewKeyword("column"), int(27), lang.NewKeyword("end-line"), int(6588), lang.NewKeyword("end-column"), int(28))
v11, err := lang.WithMeta(v9, v10.(lang.IPersistentMap))
if err != nil {
  panic(err)
}
v12 := lang.Apply(v8, []any{v11})
var v5 any = v12
_ = v5
v14 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v15 := v14.FindInternedVar(lang.NewSymbol("seq"))
if v15.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v15)))
}
v16 := v15.Get()
v17 := lang.Apply(v16, []any{v3})
var v13 any = v17
_ = v13
v19 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v20 := v19.FindInternedVar(lang.NewSymbol("seq"))
if v20.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v20)))
}
v21 := v20.Get()
v22 := lang.Apply(v21, []any{v4})
var v18 any = v22
_ = v18
var v23 any
for {
var v24 any
var v25 any = v13
_ = v25
var v27 any
if lang.IsTruthy(v25) {
v27 = v18
} else {
v27 = v25
}
if lang.IsTruthy(v27) {
v26 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v27 := v26.FindInternedVar(lang.NewSymbol("assoc!"))
if v27.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v27)))
}
v28 := v27.Get()
v29 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v30 := v29.FindInternedVar(lang.NewSymbol("first"))
if v30.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v30)))
}
v31 := v30.Get()
v32 := lang.Apply(v31, []any{v13})
v33 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v34 := v33.FindInternedVar(lang.NewSymbol("first"))
if v34.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v34)))
}
v35 := v34.Get()
v36 := lang.Apply(v35, []any{v18})
v37 := lang.Apply(v28, []any{v5, v32, v36})
var v25 any = v37
v39 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v40 := v39.FindInternedVar(lang.NewSymbol("next"))
if v40.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v40)))
}
v41 := v40.Get()
v42 := lang.Apply(v41, []any{v13})
var v38 any = v42
v44 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v45 := v44.FindInternedVar(lang.NewSymbol("next"))
if v45.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v45)))
}
v46 := v45.Get()
v47 := lang.Apply(v46, []any{v18})
var v43 any = v47
v5 = v25
v13 = v38
v18 = v43
continue
} else {
v48 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
v49 := v48.FindInternedVar(lang.NewSymbol("persistent!"))
if v49.IsMacro() {
  panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v49)))
}
v50 := v49.Get()
v51 := lang.Apply(v50, []any{v5})
v24 = v51
}
v23 = v24
  break
}
return v23
})
v2 = v2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
v1 := ns.InternWithValue(v0, v2, true)
if v0.Meta() != nil {
	v1.SetMeta(v0.Meta().(lang.IPersistentMap))
}
}
}
