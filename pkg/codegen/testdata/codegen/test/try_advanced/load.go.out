// Code generated by glojure codegen. DO NOT EDIT.

package try_advanced

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

// LoadNS initializes the namespace "codegen.test.try-advanced"
func LoadNS() {
	checkDerefMacro := func(v *lang.Var) {
		if v.IsMacro() {
			panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
		}
	}
	_ = checkDerefMacro
	// var codegen.test.try-advanced/catch-binding-scope
	codegen_DOT_test_DOT_try_advanced_catch_binding_scope := lang.InternVarName(lang.NewSymbol("codegen.test.try-advanced"), lang.NewSymbol("catch-binding-scope"))
	// var codegen.test.try-advanced/catch-binding-scope-2
	codegen_DOT_test_DOT_try_advanced_catch_binding_scope_2 := lang.InternVarName(lang.NewSymbol("codegen.test.try-advanced"), lang.NewSymbol("catch-binding-scope-2"))
	// var codegen.test.try-advanced/finally-with-return
	codegen_DOT_test_DOT_try_advanced_finally_with_return := lang.InternVarName(lang.NewSymbol("codegen.test.try-advanced"), lang.NewSymbol("finally-with-return"))
	// var codegen.test.try-advanced/try-custom-value
	codegen_DOT_test_DOT_try_advanced_try_custom_value := lang.InternVarName(lang.NewSymbol("codegen.test.try-advanced"), lang.NewSymbol("try-custom-value"))
	// var glojure.core/=
	glojure_DOT_core__EQ_ := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("="))
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), "advanced tests passed", lang.NewKeyword("file"), "codegen/test/try_advanced.glj", lang.NewKeyword("line"), int(30), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(30), lang.NewKeyword("end-column"), int(55), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			checkDerefMacro(glojure_DOT_core__EQ_)
			tmp4 := glojure_DOT_core__EQ_.Get()
			checkDerefMacro(codegen_DOT_test_DOT_try_advanced_try_custom_value)
			tmp5 := codegen_DOT_test_DOT_try_advanced_try_custom_value.Get()
			tmp6 := lang.Apply(tmp5, nil)
			tmp7 := lang.Apply(tmp4, []any{tmp6, "custom error"})
			if lang.IsTruthy(tmp7) {
			} else {
				panic("try-custom-value failed")
			}
			_ = tmp3
			var tmp8 any
			checkDerefMacro(glojure_DOT_core__EQ_)
			tmp9 := glojure_DOT_core__EQ_.Get()
			checkDerefMacro(codegen_DOT_test_DOT_try_advanced_catch_binding_scope)
			tmp10 := codegen_DOT_test_DOT_try_advanced_catch_binding_scope.Get()
			tmp11 := lang.Apply(tmp10, nil)
			tmp12 := lang.Apply(tmp9, []any{tmp11, "test"})
			if lang.IsTruthy(tmp12) {
			} else {
				panic("catch-binding-scope failed")
			}
			_ = tmp8
			var tmp13 any
			checkDerefMacro(glojure_DOT_core__EQ_)
			tmp14 := glojure_DOT_core__EQ_.Get()
			checkDerefMacro(codegen_DOT_test_DOT_try_advanced_catch_binding_scope_2)
			tmp15 := codegen_DOT_test_DOT_try_advanced_catch_binding_scope_2.Get()
			tmp16 := lang.Apply(tmp15, nil)
			tmp17 := lang.Apply(tmp14, []any{tmp16, "outer"})
			if lang.IsTruthy(tmp17) {
			} else {
				panic("catch-binding-scope-2 failed")
			}
			_ = tmp13
			var tmp18 any
			checkDerefMacro(glojure_DOT_core__EQ_)
			tmp19 := glojure_DOT_core__EQ_.Get()
			checkDerefMacro(codegen_DOT_test_DOT_try_advanced_finally_with_return)
			tmp20 := codegen_DOT_test_DOT_try_advanced_finally_with_return.Get()
			tmp21 := lang.Apply(tmp20, nil)
			tmp22 := lang.Apply(tmp19, []any{tmp21, int64(42)})
			if lang.IsTruthy(tmp22) {
			} else {
				panic("finally-with-return failed")
			}
			_ = tmp18
			return "advanced tests passed"
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// catch-binding-scope
	{
		tmp0 := lang.NewSymbol("catch-binding-scope").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_advanced.glj", lang.NewKeyword("line"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(9), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			{ // let
				// let binding "e"
				var v4 any = "outer"
				_ = v4
				var tmp5 any
				func() {
					defer func() {
						if r := recover(); r != nil {
							if lang.CatchMatches(r, lang.Builtins["any"]) {
								v6 := r
								_ = v6
								tmp5 = v6
							} else {
								panic(r)
							}
						}
					}()
					panic("test")
				}()
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// catch-binding-scope-2
	{
		tmp0 := lang.NewSymbol("catch-binding-scope-2").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_advanced.glj", lang.NewKeyword("line"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(16), lang.NewKeyword("end-column"), int(27), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			{ // let
				// let binding "e"
				var v4 any = "outer"
				_ = v4
				var tmp5 any
				func() {
					defer func() {
						if r := recover(); r != nil {
							if lang.CatchMatches(r, lang.Builtins["any"]) {
								v6 := r
								_ = v6
								tmp5 = v6
							} else {
								panic(r)
							}
						}
					}()
					panic("test")
				}()
				_ = tmp5
				tmp3 = v4
			} // end let
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// finally-with-return
	{
		tmp0 := lang.NewSymbol("finally-with-return").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_advanced.glj", lang.NewKeyword("line"), int(24), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(24), lang.NewKeyword("end-column"), int(25), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
					_ = int64(100)
				}()
				tmp3 = int64(42)
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// try-custom-value
	{
		tmp0 := lang.NewSymbol("try-custom-value").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_advanced.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-advanced")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = v4
						} else {
							panic(r)
						}
					}
				}()
				panic("custom error")
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
