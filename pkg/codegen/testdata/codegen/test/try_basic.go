// Code generated by glojure codegen. DO NOT EDIT.

package generated

import (
	"fmt"
	"github.com/glojurelang/glojure/pkg/lang"
)

func init() {
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic"))
	_ = ns
	// try-catch-finally
	{
		v0 := lang.NewSymbol("try-catch-finally").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(26), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(26), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()))).(*lang.Symbol)
		v2 := lang.IFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var v3 any
			func() {
				defer func() {
				}()
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							v3 = "caught"
						} else {
							panic(r)
						}
					}
				}()
				panic("error")
			}()
			return v3
		})
		// Note: metadata on functions is not yet supported in generated code
		// Original metadata: lang.NewMap(lang.NewKeyword("rettag"), nil)
		v1 := ns.InternWithValue(v0, v2, true)
		if v0.Meta() != nil {
			v1.SetMeta(v0.Meta().(lang.IPersistentMap))
		}
	}
	// -main
	{
		v0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), "all tests passed", lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(43), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(43), lang.NewKeyword("end-column"), int(50), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()))).(*lang.Symbol)
		v2 := lang.IFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var v3 any
			v4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			v5 := v4.FindInternedVar(lang.NewSymbol("="))
			if v5.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v5)))
			}
			v6 := v5.Get()
			v7 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			v8 := v7.FindInternedVar(lang.NewSymbol("basic-try"))
			if v8.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v8)))
			}
			v9 := v8.Get()
			v10 := lang.Apply(v9, nil)
			v11 := lang.Apply(v6, []any{v10, "success"})
			if lang.IsTruthy(v11) {
				v3 = nil
			} else {
				panic("basic-try failed")
			}
			_ = v3
			var v12 any
			v13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			v14 := v13.FindInternedVar(lang.NewSymbol("="))
			if v14.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v14)))
			}
			v15 := v14.Get()
			v16 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			v17 := v16.FindInternedVar(lang.NewSymbol("try-with-throw"))
			if v17.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v17)))
			}
			v18 := v17.Get()
			v19 := lang.Apply(v18, nil)
			v20 := lang.Apply(v15, []any{v19, "caught exception"})
			if lang.IsTruthy(v20) {
				v12 = nil
			} else {
				panic("try-with-throw failed")
			}
			_ = v12
			var v21 any
			v22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			v23 := v22.FindInternedVar(lang.NewSymbol("="))
			if v23.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v23)))
			}
			v24 := v23.Get()
			v25 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			v26 := v25.FindInternedVar(lang.NewSymbol("try-no-catch"))
			if v26.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v26)))
			}
			v27 := v26.Get()
			v28 := lang.Apply(v27, nil)
			v29 := lang.Apply(v24, []any{v28, "just body"})
			if lang.IsTruthy(v29) {
				v21 = nil
			} else {
				panic("try-no-catch failed")
			}
			_ = v21
			var v30 any
			v31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			v32 := v31.FindInternedVar(lang.NewSymbol("="))
			if v32.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v32)))
			}
			v33 := v32.Get()
			v34 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			v35 := v34.FindInternedVar(lang.NewSymbol("try-finally-only"))
			if v35.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v35)))
			}
			v36 := v35.Get()
			v37 := lang.Apply(v36, nil)
			v38 := lang.Apply(v33, []any{v37, "body"})
			if lang.IsTruthy(v38) {
				v30 = nil
			} else {
				panic("try-finally-only failed")
			}
			_ = v30
			var v39 any
			v40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			v41 := v40.FindInternedVar(lang.NewSymbol("="))
			if v41.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v41)))
			}
			v42 := v41.Get()
			v43 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			v44 := v43.FindInternedVar(lang.NewSymbol("try-catch-finally"))
			if v44.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v44)))
			}
			v45 := v44.Get()
			v46 := lang.Apply(v45, nil)
			v47 := lang.Apply(v42, []any{v46, "caught"})
			if lang.IsTruthy(v47) {
				v39 = nil
			} else {
				panic("try-catch-finally failed")
			}
			_ = v39
			var v48 any
			v49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			v50 := v49.FindInternedVar(lang.NewSymbol("="))
			if v50.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v50)))
			}
			v51 := v50.Get()
			v52 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			v53 := v52.FindInternedVar(lang.NewSymbol("nested-try"))
			if v53.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v53)))
			}
			v54 := v53.Get()
			v55 := lang.Apply(v54, nil)
			v56 := lang.Apply(v51, []any{v55, "inner caught"})
			if lang.IsTruthy(v56) {
				v48 = nil
			} else {
				panic("nested-try failed")
			}
			_ = v48
			return "all tests passed"
		})
		// Note: metadata on functions is not yet supported in generated code
		// Original metadata: lang.NewMap(lang.NewKeyword("rettag"), nil)
		v1 := ns.InternWithValue(v0, v2, true)
		if v0.Meta() != nil {
			v1.SetMeta(v0.Meta().(lang.IPersistentMap))
		}
	}
	// try-with-throw
	{
		v0 := lang.NewSymbol("try-with-throw").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(9), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()))).(*lang.Symbol)
		v2 := lang.IFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var v3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							v3 = "caught exception"
						} else {
							panic(r)
						}
					}
				}()
				panic("test error")
				v3 = "not reached"
			}()
			return v3
		})
		// Note: metadata on functions is not yet supported in generated code
		// Original metadata: lang.NewMap(lang.NewKeyword("rettag"), nil)
		v1 := ns.InternWithValue(v0, v2, true)
		if v0.Meta() != nil {
			v1.SetMeta(v0.Meta().(lang.IPersistentMap))
		}
	}
	// try-finally-only
	{
		v0 := lang.NewSymbol("try-finally-only").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(20), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()))).(*lang.Symbol)
		v2 := lang.IFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var v3 any
			func() {
				defer func() {
				}()
				v3 = "body"
			}()
			return v3
		})
		// Note: metadata on functions is not yet supported in generated code
		// Original metadata: lang.NewMap(lang.NewKeyword("rettag"), nil)
		v1 := ns.InternWithValue(v0, v2, true)
		if v0.Meta() != nil {
			v1.SetMeta(v0.Meta().(lang.IPersistentMap))
		}
	}
	// nested-try
	{
		v0 := lang.NewSymbol("nested-try").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(34), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(34), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()))).(*lang.Symbol)
		v2 := lang.IFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var v3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							v3 = "outer caught"
						} else {
							panic(r)
						}
					}
				}()
				var v4 any
				func() {
					defer func() {
						if r := recover(); r != nil {
							if lang.CatchMatches(r, lang.Builtins["any"]) {
								v5 := r
								_ = v5
								v4 = "inner caught"
							} else {
								panic(r)
							}
						}
					}()
					panic("inner")
				}()
				v3 = v4
			}()
			return v3
		})
		// Note: metadata on functions is not yet supported in generated code
		// Original metadata: lang.NewMap(lang.NewKeyword("rettag"), nil)
		v1 := ns.InternWithValue(v0, v2, true)
		if v0.Meta() != nil {
			v1.SetMeta(v0.Meta().(lang.IPersistentMap))
		}
	}
	// basic-try
	{
		v0 := lang.NewSymbol("basic-try").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()))).(*lang.Symbol)
		v2 := lang.IFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var v3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							v3 = "caught"
						} else {
							panic(r)
						}
					}
				}()
				v3 = "success"
			}()
			return v3
		})
		// Note: metadata on functions is not yet supported in generated code
		// Original metadata: lang.NewMap(lang.NewKeyword("rettag"), nil)
		v1 := ns.InternWithValue(v0, v2, true)
		if v0.Meta() != nil {
			v1.SetMeta(v0.Meta().(lang.IPersistentMap))
		}
	}
	// try-no-catch
	{
		v0 := lang.NewSymbol("try-no-catch").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(16), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()))).(*lang.Symbol)
		v2 := lang.IFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var v3 any
			func() {
				v3 = "just body"
			}()
			return v3
		})
		// Note: metadata on functions is not yet supported in generated code
		// Original metadata: lang.NewMap(lang.NewKeyword("rettag"), nil)
		v1 := ns.InternWithValue(v0, v2, true)
		if v0.Meta() != nil {
			v1.SetMeta(v0.Meta().(lang.IPersistentMap))
		}
	}
}
