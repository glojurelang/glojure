// Code generated by glojure codegen. DO NOT EDIT.

package generated

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

func init() {
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), "all tests passed", lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(43), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(43), lang.NewKeyword("end-column"), int(50), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			tmp4 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp5 := tmp4.FindInternedVar(lang.NewSymbol("="))
			if tmp5.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp5)))
			}
			tmp6 := tmp5.Get()
			tmp7 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			tmp8 := tmp7.FindInternedVar(lang.NewSymbol("basic-try"))
			if tmp8.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp8)))
			}
			tmp9 := tmp8.Get()
			tmp10 := lang.Apply(tmp9, nil)
			tmp11 := lang.Apply(tmp6, []any{tmp10, "success"})
			if lang.IsTruthy(tmp11) {
			} else {
				panic("basic-try failed")
			}
			_ = tmp3
			var tmp12 any
			tmp13 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp14 := tmp13.FindInternedVar(lang.NewSymbol("="))
			if tmp14.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp14)))
			}
			tmp15 := tmp14.Get()
			tmp16 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			tmp17 := tmp16.FindInternedVar(lang.NewSymbol("try-with-throw"))
			if tmp17.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp17)))
			}
			tmp18 := tmp17.Get()
			tmp19 := lang.Apply(tmp18, nil)
			tmp20 := lang.Apply(tmp15, []any{tmp19, "caught exception"})
			if lang.IsTruthy(tmp20) {
			} else {
				panic("try-with-throw failed")
			}
			_ = tmp12
			var tmp21 any
			tmp22 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp23 := tmp22.FindInternedVar(lang.NewSymbol("="))
			if tmp23.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp23)))
			}
			tmp24 := tmp23.Get()
			tmp25 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			tmp26 := tmp25.FindInternedVar(lang.NewSymbol("try-no-catch"))
			if tmp26.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp26)))
			}
			tmp27 := tmp26.Get()
			tmp28 := lang.Apply(tmp27, nil)
			tmp29 := lang.Apply(tmp24, []any{tmp28, "just body"})
			if lang.IsTruthy(tmp29) {
			} else {
				panic("try-no-catch failed")
			}
			_ = tmp21
			var tmp30 any
			tmp31 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp32 := tmp31.FindInternedVar(lang.NewSymbol("="))
			if tmp32.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp32)))
			}
			tmp33 := tmp32.Get()
			tmp34 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			tmp35 := tmp34.FindInternedVar(lang.NewSymbol("try-finally-only"))
			if tmp35.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp35)))
			}
			tmp36 := tmp35.Get()
			tmp37 := lang.Apply(tmp36, nil)
			tmp38 := lang.Apply(tmp33, []any{tmp37, "body"})
			if lang.IsTruthy(tmp38) {
			} else {
				panic("try-finally-only failed")
			}
			_ = tmp30
			var tmp39 any
			tmp40 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp41 := tmp40.FindInternedVar(lang.NewSymbol("="))
			if tmp41.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp41)))
			}
			tmp42 := tmp41.Get()
			tmp43 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			tmp44 := tmp43.FindInternedVar(lang.NewSymbol("try-catch-finally"))
			if tmp44.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp44)))
			}
			tmp45 := tmp44.Get()
			tmp46 := lang.Apply(tmp45, nil)
			tmp47 := lang.Apply(tmp42, []any{tmp46, "caught"})
			if lang.IsTruthy(tmp47) {
			} else {
				panic("try-catch-finally failed")
			}
			_ = tmp39
			var tmp48 any
			tmp49 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp50 := tmp49.FindInternedVar(lang.NewSymbol("="))
			if tmp50.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp50)))
			}
			tmp51 := tmp50.Get()
			tmp52 := lang.FindNamespace(lang.NewSymbol("codegen.test.try-basic"))
			tmp53 := tmp52.FindInternedVar(lang.NewSymbol("nested-try"))
			if tmp53.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp53)))
			}
			tmp54 := tmp53.Get()
			tmp55 := lang.Apply(tmp54, nil)
			tmp56 := lang.Apply(tmp51, []any{tmp55, "inner caught"})
			if lang.IsTruthy(tmp56) {
			} else {
				panic("nested-try failed")
			}
			_ = tmp48
			return "all tests passed"
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// basic-try
	{
		tmp0 := lang.NewSymbol("basic-try").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(15), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = "caught"
						} else {
							panic(r)
						}
					}
				}()
				tmp3 = "success"
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// nested-try
	{
		tmp0 := lang.NewSymbol("nested-try").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(34), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(34), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = "outer caught"
						} else {
							panic(r)
						}
					}
				}()
				var tmp4 any
				func() {
					defer func() {
						if r := recover(); r != nil {
							if lang.CatchMatches(r, lang.Builtins["any"]) {
								v5 := r
								_ = v5
								tmp4 = "inner caught"
							} else {
								panic(r)
							}
						}
					}()
					panic("inner")
				}()
				tmp3 = tmp4
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// try-catch-finally
	{
		tmp0 := lang.NewSymbol("try-catch-finally").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(26), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(26), lang.NewKeyword("end-column"), int(23), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
				}()
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = "caught"
						} else {
							panic(r)
						}
					}
				}()
				panic("error")
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// try-finally-only
	{
		tmp0 := lang.NewSymbol("try-finally-only").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(20), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(20), lang.NewKeyword("end-column"), int(22), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
				}()
				tmp3 = "body"
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// try-no-catch
	{
		tmp0 := lang.NewSymbol("try-no-catch").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(16), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(16), lang.NewKeyword("end-column"), int(18), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				tmp3 = "just body"
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// try-with-throw
	{
		tmp0 := lang.NewSymbol("try-with-throw").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/try_basic.glj", lang.NewKeyword("line"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(9), lang.NewKeyword("end-column"), int(20), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.try-basic")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = "caught exception"
						} else {
							panic(r)
						}
					}
				}()
				panic("test error")
				tmp3 = "not reached"
			}()
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
