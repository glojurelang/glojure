// Code generated by glojure codegen. DO NOT EDIT.

package loop_DASH_simple

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}
func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "codegen.test.loop-simple"
func LoadNS() {
	sym__DASH_main := lang.NewSymbol("-main")
	sym__LT_ := lang.NewSymbol("<")
	sym_codegen_DOT_test_DOT_loop_DASH_simple := lang.NewSymbol("codegen.test.loop-simple")
	sym_glojure_DOT_core := lang.NewSymbol("glojure.core")
	sym_inc := lang.NewSymbol("inc")
	sym_simple_DASH_loop := lang.NewSymbol("simple-loop")
	kw_arglists := lang.NewKeyword("arglists")
	kw_column := lang.NewKeyword("column")
	kw_end_DASH_column := lang.NewKeyword("end-column")
	kw_end_DASH_line := lang.NewKeyword("end-line")
	kw_expected_DASH_output := lang.NewKeyword("expected-output")
	kw_file := lang.NewKeyword("file")
	kw_line := lang.NewKeyword("line")
	kw_ns := lang.NewKeyword("ns")
	kw_rettag := lang.NewKeyword("rettag")
	// var codegen.test.loop-simple/simple-loop
	var_codegen_DOT_test_DOT_loop_DASH_simple_simple_DASH_loop := lang.InternVarName(sym_codegen_DOT_test_DOT_loop_DASH_simple, sym_simple_DASH_loop)
	// var glojure.core/<
	var_glojure_DOT_core__LT_ := lang.InternVarName(sym_glojure_DOT_core, sym__LT_)
	// var glojure.core/inc
	var_glojure_DOT_core_inc := lang.InternVarName(sym_glojure_DOT_core, sym_inc)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_loop_DASH_simple)
	_ = ns
	// -main
	{
		tmp0 := sym__DASH_main.WithMeta(lang.NewMap(kw_expected_DASH_output, int64(10), kw_file, "codegen/test/loop_simple.glj", kw_line, int(9), kw_column, int(7), kw_end_DASH_line, int(10), kw_end_DASH_column, int(7), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_loop_DASH_simple))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			tmp3 := checkDerefVar(var_codegen_DOT_test_DOT_loop_DASH_simple_simple_DASH_loop)
			tmp4 := lang.Apply(tmp3, nil)
			return tmp4
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// simple-loop
	{
		tmp0 := sym_simple_DASH_loop.WithMeta(lang.NewMap(kw_file, "codegen/test/loop_simple.glj", kw_line, int(3), kw_column, int(7), kw_end_DASH_line, int(3), kw_end_DASH_column, int(17), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_loop_DASH_simple))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			var tmp3 any
			{ // let
				// let binding "i"
				var v4 any = int64(0)
				_ = v4
				for {
					var tmp5 any
					tmp6 := checkDerefVar(var_glojure_DOT_core__LT_)
					tmp7 := lang.Apply(tmp6, []any{v4, int64(10)})
					if lang.IsTruthy(tmp7) {
						tmp9 := checkDerefVar(var_glojure_DOT_core_inc)
						tmp10 := lang.Apply(tmp9, []any{v4})
						var tmp8 any = tmp10
						v4 = tmp8
						continue
					} else {
						tmp5 = v4
					}
					tmp3 = tmp5
					break
				}
			} // end let
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
