// Code generated by glojure codegen. DO NOT EDIT.

package loop_simple

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

// LoadNS initializes the namespace "codegen.test.loop-simple"
func LoadNS() {
	checkDerefMacro := func(v *lang.Var) {
		if v.IsMacro() {
			panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
		}
	}
	_ = checkDerefMacro
	// var codegen.test.loop-simple/simple-loop
	codegen_DOT_test_DOT_loop_simple_simple_loop := lang.InternVarName(lang.NewSymbol("codegen.test.loop-simple"), lang.NewSymbol("simple-loop"))
	// var glojure.core/<
	glojure_DOT_core__LT_ := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("<"))
	// var glojure.core/inc
	glojure_DOT_core_inc := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("inc"))
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.loop-simple"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), int64(10), lang.NewKeyword("file"), "codegen/test/loop_simple.glj", lang.NewKeyword("line"), int(9), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(10), lang.NewKeyword("end-column"), int(7), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.loop-simple")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			checkDerefMacro(codegen_DOT_test_DOT_loop_simple_simple_loop)
			tmp3 := codegen_DOT_test_DOT_loop_simple_simple_loop.Get()
			tmp4 := lang.Apply(tmp3, nil)
			return tmp4
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// simple-loop
	{
		tmp0 := lang.NewSymbol("simple-loop").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/loop_simple.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.loop-simple")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			var tmp3 any
			{ // let
				// let binding "i"
				var v4 any = int64(0)
				_ = v4
				for {
					var tmp5 any
					checkDerefMacro(glojure_DOT_core__LT_)
					tmp6 := glojure_DOT_core__LT_.Get()
					tmp7 := lang.Apply(tmp6, []any{v4, int64(10)})
					if lang.IsTruthy(tmp7) {
						checkDerefMacro(glojure_DOT_core_inc)
						tmp9 := glojure_DOT_core_inc.Get()
						tmp10 := lang.Apply(tmp9, []any{v4})
						var tmp8 any = tmp10
						v4 = tmp8
						continue
					} else {
						tmp5 = v4
					}
					tmp3 = tmp5
					break
				}
			} // end let
			return tmp3
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
