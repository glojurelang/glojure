// Code generated by glojure codegen. DO NOT EDIT.

package maybe_class

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	strings2 "strings"
)

// LoadNS initializes the namespace "codegen.test.maybe-class"
func LoadNS() {
	checkDerefMacro := func(v *lang.Var) {
		if v.IsMacro() {
			panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
		}
	}
	_ = checkDerefMacro
	// var glojure.core/vec
	glojure_DOT_core_vec := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("vec"))
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.maybe-class"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), lang.NewVector("1", "2", "3"), lang.NewKeyword("file"), "codegen/test/maybe_class.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(45), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.maybe-class")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			checkDerefMacro(glojure_DOT_core_vec)
			tmp3 := glojure_DOT_core_vec.Get()
			tmp4 := lang.Apply(strings2.Split, []any{"1,2,3", ","})
			tmp5 := lang.Apply(tmp3, []any{tmp4})
			return tmp5
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
