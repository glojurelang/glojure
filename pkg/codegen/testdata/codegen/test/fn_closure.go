// Code generated by glojure codegen. DO NOT EDIT.

package generated

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

func init() {
	// Closed-over values
	var closed0 any
	{
		closed0 = int64(42)
	}
	var closed1 any
	{
		tmp0 := lang.NewAtom(int64(0))
		closed1 = tmp0
	}

	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-closure"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), lang.NewVector(int64(42), int64(1)), lang.NewKeyword("file"), "codegen/test/fn_closure.glj", lang.NewKeyword("line"), int(13), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(13), lang.NewKeyword("end-column"), int(38), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-closure")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			tmp3 := lang.FindNamespace(lang.NewSymbol("codegen.test.fn-closure"))
			tmp4 := tmp3.FindInternedVar(lang.NewSymbol("inc-atom"))
			if tmp4.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp4)))
			}
			tmp5 := tmp4.Get()
			tmp6 := lang.Apply(tmp5, nil)
			_ = tmp6
			tmp7 := lang.FindNamespace(lang.NewSymbol("codegen.test.fn-closure"))
			tmp8 := tmp7.FindInternedVar(lang.NewSymbol("closed"))
			if tmp8.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp8)))
			}
			tmp9 := tmp8.Get()
			tmp10 := lang.Apply(tmp9, nil)
			tmp11 := lang.FindNamespace(lang.NewSymbol("codegen.test.fn-closure"))
			tmp12 := tmp11.FindInternedVar(lang.NewSymbol("get-atom"))
			if tmp12.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp12)))
			}
			tmp13 := tmp12.Get()
			tmp14 := lang.Apply(tmp13, nil)
			tmp15 := lang.NewVector(tmp10, tmp14)
			tmp16 := lang.NewMap(lang.NewKeyword("file"), "codegen/test/fn_closure.glj", lang.NewKeyword("line"), int(15), lang.NewKeyword("column"), int(3), lang.NewKeyword("end-line"), int(16), lang.NewKeyword("end-column"), int(14))
			tmp17, err := lang.WithMeta(tmp15, tmp16.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			return tmp17
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// closed
	{
		tmp0 := lang.NewSymbol("closed").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/fn_closure.glj", lang.NewKeyword("line"), int(5), lang.NewKeyword("column"), int(6), lang.NewKeyword("end-line"), int(5), lang.NewKeyword("end-column"), int(11), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-closure")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			return closed0
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/fn_closure.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(32), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(49))).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// gen-closure
	{
		tmp0 := lang.NewSymbol("gen-closure").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/fn_closure.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(17), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector(lang.NewSymbol("the-result"))), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-closure")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 1 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			v3 := args[0]
			_ = v3
			var tmp4 lang.FnFunc
			tmp4 = lang.NewFnFunc(func(args ...any) any {
				if len(args) != 0 {
					panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
				}
				return v3
			})
			tmp5 := lang.NewMap(lang.NewKeyword("file"), "codegen/test/fn_closure.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(32), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(49))
			tmp6, err := lang.WithMeta(tmp4, tmp5.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			return tmp6
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// get-atom
	{
		tmp0 := lang.NewSymbol("get-atom").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/fn_closure.glj", lang.NewKeyword("line"), int(10), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(10), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-closure")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			tmp3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp4 := tmp3.FindInternedVar(lang.NewSymbol("deref"))
			if tmp4.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp4)))
			}
			tmp5 := tmp4.Get()
			tmp6 := lang.Apply(tmp5, []any{closed1})
			return tmp6
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// inc-atom
	{
		tmp0 := lang.NewSymbol("inc-atom").WithMeta(lang.NewMap(lang.NewKeyword("file"), "codegen/test/fn_closure.glj", lang.NewKeyword("line"), int(8), lang.NewKeyword("column"), int(9), lang.NewKeyword("end-line"), int(8), lang.NewKeyword("end-column"), int(16), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.fn-closure")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			tmp3 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp4 := tmp3.FindInternedVar(lang.NewSymbol("swap!"))
			if tmp4.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp4)))
			}
			tmp5 := tmp4.Get()
			tmp6 := lang.FindNamespace(lang.NewSymbol("glojure.core"))
			tmp7 := tmp6.FindInternedVar(lang.NewSymbol("inc"))
			if tmp7.IsMacro() {
				panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", tmp7)))
			}
			tmp8 := tmp7.Get()
			tmp9 := lang.Apply(tmp5, []any{closed1, tmp8})
			return tmp9
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
