// Code generated by glojure codegen. DO NOT EDIT.

package with_meta

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
)

// LoadNS initializes the namespace "codegen.test.with-meta"
func LoadNS() {
	checkDerefMacro := func(v *lang.Var) {
		if v.IsMacro() {
			panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
		}
	}
	_ = checkDerefMacro
	// var glojure.core/meta
	glojure_DOT_core_meta := lang.InternVarName(lang.NewSymbol("glojure.core"), lang.NewSymbol("meta"))
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	ns := lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.with-meta"))
	_ = ns
	// -main
	{
		tmp0 := lang.NewSymbol("-main").WithMeta(lang.NewMap(lang.NewKeyword("expected-output"), lang.NewKeyword("bar"), lang.NewKeyword("file"), "codegen/test/with_meta.glj", lang.NewKeyword("line"), int(3), lang.NewKeyword("column"), int(7), lang.NewKeyword("end-line"), int(3), lang.NewKeyword("end-column"), int(36), lang.NewKeyword("arglists"), lang.NewList(lang.NewVector()), lang.NewKeyword("ns"), lang.FindOrCreateNamespace(lang.NewSymbol("codegen.test.with-meta")))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			if len(args) != 0 {
				panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
			}
			checkDerefMacro(glojure_DOT_core_meta)
			tmp3 := glojure_DOT_core_meta.Get()
			tmp4 := lang.NewVector()
			tmp5 := lang.NewMap(lang.NewKeyword("foo"), lang.NewKeyword("bar"), lang.NewKeyword("file"), "codegen/test/with_meta.glj", lang.NewKeyword("line"), int(4), lang.NewKeyword("column"), int(15), lang.NewKeyword("end-line"), int(4), lang.NewKeyword("end-column"), int(28))
			tmp6 := lang.NewMap(lang.NewKeyword("file"), "codegen/test/with_meta.glj", lang.NewKeyword("line"), int(4), lang.NewKeyword("column"), int(16), lang.NewKeyword("end-line"), int(4), lang.NewKeyword("end-column"), int(26))
			tmp7, err := lang.WithMeta(tmp5, tmp6.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp8, err := lang.WithMeta(tmp4, tmp7.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp9 := lang.Apply(tmp3, []any{tmp8})
			tmp10 := lang.Apply(lang.NewKeyword("foo"), []any{tmp9})
			return tmp10
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(lang.NewKeyword("rettag"), nil)).(lang.FnFunc)
		tmp1 := ns.InternWithValue(tmp0, tmp2, true)
		if tmp0.Meta() != nil {
			tmp1.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
