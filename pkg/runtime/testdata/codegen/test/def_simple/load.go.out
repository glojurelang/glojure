// Code generated by glojure codegen. DO NOT EDIT.

package def_DASH_simple

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	runtime "github.com/glojurelang/glojure/pkg/runtime"
	reflect "reflect"
)

func init() {
	runtime.RegisterNSLoader("codegen/test/def_simple", LoadNS)
}

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}

func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

func checkArityGTE(args []any, min int) {
	if len(args) < min {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "codegen.test.def-simple"
func LoadNS() {
	sym__DASH_main := lang.NewSymbol("-main")
	sym_clojure_DOT_core := lang.NewSymbol("clojure.core")
	sym_codegen_DOT_test_DOT_def_DASH_simple := lang.NewSymbol("codegen.test.def-simple")
	sym_deftest := lang.NewSymbol("deftest")
	sym_deref := lang.NewSymbol("deref")
	sym_no_DASH_init := lang.NewSymbol("no-init")
	sym_str := lang.NewSymbol("str")
	sym_val := lang.NewSymbol("val")
	sym_with_DASH_init := lang.NewSymbol("with-init")
	kw_arglists := lang.NewKeyword("arglists")
	kw_column := lang.NewKeyword("column")
	kw_end_DASH_column := lang.NewKeyword("end-column")
	kw_end_DASH_line := lang.NewKeyword("end-line")
	kw_expected_DASH_output := lang.NewKeyword("expected-output")
	kw_file := lang.NewKeyword("file")
	kw_line := lang.NewKeyword("line")
	kw_ns := lang.NewKeyword("ns")
	kw_rettag := lang.NewKeyword("rettag")
	// var clojure.core/deref
	var_clojure_DOT_core_deref := lang.InternVarName(sym_clojure_DOT_core, sym_deref)
	// var clojure.core/str
	var_clojure_DOT_core_str := lang.InternVarName(sym_clojure_DOT_core, sym_str)
	// var codegen.test.def-simple/-main
	var_codegen_DOT_test_DOT_def_DASH_simple__DASH_main := lang.InternVarName(sym_codegen_DOT_test_DOT_def_DASH_simple, sym__DASH_main)
	// var codegen.test.def-simple/deftest
	var_codegen_DOT_test_DOT_def_DASH_simple_deftest := lang.InternVarName(sym_codegen_DOT_test_DOT_def_DASH_simple, sym_deftest)
	// var codegen.test.def-simple/no-init
	var_codegen_DOT_test_DOT_def_DASH_simple_no_DASH_init := lang.InternVarName(sym_codegen_DOT_test_DOT_def_DASH_simple, sym_no_DASH_init)
	// var codegen.test.def-simple/with-init
	var_codegen_DOT_test_DOT_def_DASH_simple_with_DASH_init := lang.InternVarName(sym_codegen_DOT_test_DOT_def_DASH_simple, sym_with_DASH_init)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	// reference reflect to avoid unused import error
	_ = reflect.TypeOf
	ns := lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_def_DASH_simple)
	_ = ns
	// deftest
	{
		tmp0 := sym_deftest.WithMeta(lang.NewMap(kw_file, "codegen/test/def_simple.glj", kw_line, int(3), kw_column, int(7), kw_end_DASH_line, int(3), kw_end_DASH_column, int(13), kw_arglists, lang.NewList(lang.NewVector(sym_val)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_def_DASH_simple))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			tmp3 := lang.NewMap(kw_file, "codegen/test/def_simple.glj", kw_line, int(4), kw_column, int(8), kw_end_DASH_line, int(4), kw_end_DASH_column, int(14))
			var_codegen_DOT_test_DOT_def_DASH_simple_no_DASH_init.SetMeta(tmp3.(lang.IPersistentMap))
			if runtime.RT.BooleanCast(lang.Get(tmp3, lang.KWDynamic)) {
				var_codegen_DOT_test_DOT_def_DASH_simple_no_DASH_init.SetDynamic()
			}
			_ = var_codegen_DOT_test_DOT_def_DASH_simple_no_DASH_init
			tmp4 := lang.NewMap(kw_file, "codegen/test/def_simple.glj", kw_line, int(5), kw_column, int(8), kw_end_DASH_line, int(5), kw_end_DASH_column, int(16))
			var_codegen_DOT_test_DOT_def_DASH_simple_with_DASH_init.SetMeta(tmp4.(lang.IPersistentMap))
			if runtime.RT.BooleanCast(lang.Get(tmp4, lang.KWDynamic)) {
				var_codegen_DOT_test_DOT_def_DASH_simple_with_DASH_init.SetDynamic()
			}
			var_codegen_DOT_test_DOT_def_DASH_simple_with_DASH_init.BindRoot(v2)
			return var_codegen_DOT_test_DOT_def_DASH_simple_with_DASH_init
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_def_DASH_simple_deftest = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_def_DASH_simple_deftest.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// no-init
	{
		tmp0 := sym_no_DASH_init.WithMeta(lang.NewMap()).(*lang.Symbol)
		var_codegen_DOT_test_DOT_def_DASH_simple_no_DASH_init = ns.Intern(tmp0)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_def_DASH_simple_no_DASH_init.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// with-init
	{
		tmp0 := sym_with_DASH_init.WithMeta(lang.NewMap()).(*lang.Symbol)
		var_codegen_DOT_test_DOT_def_DASH_simple_with_DASH_init = ns.Intern(tmp0)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_def_DASH_simple_with_DASH_init.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// -main
	{
		tmp0 := sym__DASH_main.WithMeta(lang.NewMap(kw_expected_DASH_output, lang.NewVector("Unbound: #'codegen.test.def-simple/no-init", int64(42)), kw_file, "codegen/test/def_simple.glj", kw_line, int(8), kw_column, int(3), kw_end_DASH_line, int(9), kw_end_DASH_column, int(7), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_def_DASH_simple))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			tmp2 := checkDerefVar(var_codegen_DOT_test_DOT_def_DASH_simple_deftest)
			tmp3 := lang.Apply(tmp2, []any{int64(42)})
			_ = tmp3
			tmp4 := checkDerefVar(var_clojure_DOT_core_str)
			tmp5 := checkDerefVar(var_clojure_DOT_core_deref)
			tmp6 := lang.InternVarName(sym_codegen_DOT_test_DOT_def_DASH_simple, sym_no_DASH_init)
			tmp7 := lang.Apply(tmp5, []any{tmp6})
			tmp8 := lang.Apply(tmp4, []any{tmp7})
			tmp9 := checkDerefVar(var_codegen_DOT_test_DOT_def_DASH_simple_with_DASH_init)
			tmp10 := lang.NewVector(tmp8, tmp9)
			tmp11 := lang.NewMap(kw_file, "codegen/test/def_simple.glj", kw_line, int(11), kw_column, int(3), kw_end_DASH_line, int(11), kw_end_DASH_column, int(37))
			tmp12, err := lang.WithMeta(tmp10, tmp11.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			return tmp12
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_def_DASH_simple__DASH_main = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_def_DASH_simple__DASH_main.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
