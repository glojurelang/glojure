// Code generated by glojure codegen. DO NOT EDIT.

package def_DASH_simple

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	runtime "github.com/glojurelang/glojure/pkg/runtime"
	reflect "reflect"
)

func init() {
	runtime.RegisterNSLoader("codegen/test/def_simple", LoadNS)
}

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}

func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

func checkArityGTE(args []any, min int) {
	if len(args) < min {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "codegen.test.def-simple"
func LoadNS() {
	sym_codegen_DOT_test_DOT_def_DASH_simple := lang.NewSymbol("codegen.test.def-simple")
	sym_foo := lang.NewSymbol("foo")
	// var codegen.test.def-simple/foo
	var_codegen_DOT_test_DOT_def_DASH_simple_foo := lang.InternVarName(sym_codegen_DOT_test_DOT_def_DASH_simple, sym_foo)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	// reference reflect to avoid unused import error
	_ = reflect.TypeOf
	ns := lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_def_DASH_simple)
	_ = ns
	// foo
	{
		tmp0 := sym_foo.WithMeta(lang.NewMap()).(*lang.Symbol)
		var_codegen_DOT_test_DOT_def_DASH_simple_foo = ns.Intern(tmp0)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_def_DASH_simple_foo.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
