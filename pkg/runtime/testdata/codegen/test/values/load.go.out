// Code generated by glojure codegen. DO NOT EDIT.

package values

import (
	hex4 "encoding/hex"
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	runtime "github.com/glojurelang/glojure/pkg/runtime"
	big5 "math/big"
	reflect "reflect"
)

func init() {
	runtime.RegisterNSLoader("codegen/test/values", LoadNS)
}

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}

func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "codegen.test.values"
func LoadNS() {
	sym__DASH_main := lang.NewSymbol("-main")
	sym_big_DASH_decimal := lang.NewSymbol("big-decimal")
	sym_big_DASH_decimal_DASH_type := lang.NewSymbol("big-decimal-type")
	sym_codegen_DOT_test_DOT_values := lang.NewSymbol("codegen.test.values")
	kw_arglists := lang.NewKeyword("arglists")
	kw_column := lang.NewKeyword("column")
	kw_end_DASH_column := lang.NewKeyword("end-column")
	kw_end_DASH_line := lang.NewKeyword("end-line")
	kw_expected_DASH_output := lang.NewKeyword("expected-output")
	kw_file := lang.NewKeyword("file")
	kw_line := lang.NewKeyword("line")
	kw_ns := lang.NewKeyword("ns")
	kw_rettag := lang.NewKeyword("rettag")
	// var codegen.test.values/-main
	var_codegen_DOT_test_DOT_values__DASH_main := lang.InternVarName(sym_codegen_DOT_test_DOT_values, sym__DASH_main)
	// var codegen.test.values/big-decimal
	var_codegen_DOT_test_DOT_values_big_DASH_decimal := lang.InternVarName(sym_codegen_DOT_test_DOT_values, sym_big_DASH_decimal)
	// var codegen.test.values/big-decimal-type
	var_codegen_DOT_test_DOT_values_big_DASH_decimal_DASH_type := lang.InternVarName(sym_codegen_DOT_test_DOT_values, sym_big_DASH_decimal_DASH_type)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	// reference reflect to avoid unused import error
	_ = reflect.TypeOf
	ns := lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_values)
	_ = ns
	// big-decimal
	{
		tmp0 := sym_big_DASH_decimal.WithMeta(lang.NewMap(kw_file, "codegen/test/values.glj", kw_line, int(3), kw_column, int(6), kw_end_DASH_line, int(3), kw_end_DASH_column, int(16), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_values))).(*lang.Symbol)
		tmp1 := lang.NewBigDecimalFromBigFloat((func() *big5.Float {
			var z big5.Float
			b, _ := hex4.DecodeString("010a0000004000000004a000000000000000")
			if err := z.GobDecode(b); err != nil {
				panic(err)
			}
			return &z
		})())
		var_codegen_DOT_test_DOT_values_big_DASH_decimal = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_values_big_DASH_decimal.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// big-decimal-type
	{
		tmp0 := sym_big_DASH_decimal_DASH_type.WithMeta(lang.NewMap(kw_file, "codegen/test/values.glj", kw_line, int(4), kw_column, int(6), kw_end_DASH_line, int(4), kw_end_DASH_column, int(21), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_values))).(*lang.Symbol)
		tmp1 := reflect.TypeOf((*lang.BigDecimal)(nil))
		var_codegen_DOT_test_DOT_values_big_DASH_decimal_DASH_type = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_values_big_DASH_decimal_DASH_type.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// -main
	{
		tmp1 := lang.NewBigDecimalFromBigFloat((func() *big5.Float {
			var z big5.Float
			b, _ := hex4.DecodeString("010a0000004000000004a000000000000000")
			if err := z.GobDecode(b); err != nil {
				panic(err)
			}
			return &z
		})())
		tmp2 := reflect.TypeOf((*lang.BigDecimal)(nil))
		tmp0 := sym__DASH_main.WithMeta(lang.NewMap(kw_expected_DASH_output, lang.NewVector(tmp1, tmp2), kw_file, "codegen/test/values.glj", kw_line, int(6), kw_column, int(7), kw_end_DASH_line, int(6), kw_end_DASH_column, int(56), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_values))).(*lang.Symbol)
		var tmp3 lang.FnFunc
		tmp3 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			tmp4 := checkDerefVar(var_codegen_DOT_test_DOT_values_big_DASH_decimal)
			tmp5 := checkDerefVar(var_codegen_DOT_test_DOT_values_big_DASH_decimal_DASH_type)
			tmp6 := lang.NewVector(tmp4, tmp5)
			tmp7 := lang.NewMap(kw_file, "codegen/test/values.glj", kw_line, int(7), kw_column, int(3), kw_end_DASH_line, int(7), kw_end_DASH_column, int(32))
			tmp8, err := lang.WithMeta(tmp6, tmp7.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			return tmp8
		})
		tmp3 = tmp3.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_values__DASH_main = ns.InternWithValue(tmp0, tmp3, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_values__DASH_main.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
