// Code generated by glojure codegen. DO NOT EDIT.

package case_DASH_switch

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	runtime "github.com/glojurelang/glojure/pkg/runtime"
	reflect "reflect"
)

func init() {
	runtime.RegisterNSLoader("codegen/test/case_switch", LoadNS)
}

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}

func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

func checkArityGTE(args []any, min int) {
	if len(args) < min {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "codegen.test.case-switch"
func LoadNS() {
	sym__DASH_main := lang.NewSymbol("-main")
	sym_case_DASH_test := lang.NewSymbol("case-test")
	sym_case_DASH_test_DASH_throw := lang.NewSymbol("case-test-throw")
	sym_codegen_DOT_test_DOT_case_DASH_switch := lang.NewSymbol("codegen.test.case-switch")
	sym_glojure_DOT_core := lang.NewSymbol("glojure.core")
	sym_str := lang.NewSymbol("str")
	sym_x := lang.NewSymbol("x")
	kw_arglists := lang.NewKeyword("arglists")
	kw_caught := lang.NewKeyword("caught")
	kw_column := lang.NewKeyword("column")
	kw_end_DASH_column := lang.NewKeyword("end-column")
	kw_end_DASH_line := lang.NewKeyword("end-line")
	kw_expected_DASH_output := lang.NewKeyword("expected-output")
	kw_file := lang.NewKeyword("file")
	kw_line := lang.NewKeyword("line")
	kw_nope := lang.NewKeyword("nope")
	kw_ns := lang.NewKeyword("ns")
	kw_one := lang.NewKeyword("one")
	kw_other := lang.NewKeyword("other")
	kw_rettag := lang.NewKeyword("rettag")
	kw_three := lang.NewKeyword("three")
	kw_two := lang.NewKeyword("two")
	// var codegen.test.case-switch/-main
	var_codegen_DOT_test_DOT_case_DASH_switch__DASH_main := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_switch, sym__DASH_main)
	// var codegen.test.case-switch/case-test
	var_codegen_DOT_test_DOT_case_DASH_switch_case_DASH_test := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_switch, sym_case_DASH_test)
	// var codegen.test.case-switch/case-test-throw
	var_codegen_DOT_test_DOT_case_DASH_switch_case_DASH_test_DASH_throw := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_switch, sym_case_DASH_test_DASH_throw)
	// var glojure.core/str
	var_glojure_DOT_core_str := lang.InternVarName(sym_glojure_DOT_core, sym_str)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	// reference reflect to avoid unused import error
	_ = reflect.TypeOf
	ns := lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_switch)
	_ = ns
	// case-test
	{
		tmp0 := sym_case_DASH_test.WithMeta(lang.NewMap(kw_file, "codegen/test/case_switch.glj", kw_line, int(3), kw_column, int(7), kw_end_DASH_line, int(3), kw_end_DASH_column, int(15), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_switch))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__1"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				// case clause 0
				if lang.Equals(v4, int(1)) {
					tmp5 = kw_one
					// case clause 1
				} else if lang.Equals(v4, int(2)) {
					tmp5 = kw_two
					// case clause 2
				} else if lang.Equals(v4, int(3)) {
					tmp5 = kw_three
				} else {
					tmp5 = kw_other
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_switch_case_DASH_test = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_switch_case_DASH_test.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// -main
	{
		tmp0 := sym__DASH_main.WithMeta(lang.NewMap(kw_expected_DASH_output, lang.NewVector(kw_two, kw_other, kw_caught), kw_file, "codegen/test/case_switch.glj", kw_line, int(17), kw_column, int(7), kw_end_DASH_line, int(17), kw_end_DASH_column, int(53), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_switch))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			tmp2 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_switch_case_DASH_test)
			tmp3 := lang.Apply(tmp2, []any{int64(2)})
			tmp4 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_switch_case_DASH_test)
			tmp5 := lang.Apply(tmp4, []any{int64(42)})
			tmp6 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_switch_case_DASH_test_DASH_throw)
			tmp7 := lang.Apply(tmp6, []any{int64(42)})
			tmp8 := lang.NewVector(tmp3, tmp5, tmp7)
			tmp9 := lang.NewMap(kw_file, "codegen/test/case_switch.glj", kw_line, int(18), kw_column, int(3), kw_end_DASH_line, int(18), kw_end_DASH_column, int(53))
			tmp10, err := lang.WithMeta(tmp8, tmp9.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			return tmp10
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_switch__DASH_main = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_switch__DASH_main.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// case-test-throw
	{
		tmp0 := sym_case_DASH_test_DASH_throw.WithMeta(lang.NewMap(kw_file, "codegen/test/case_switch.glj", kw_line, int(10), kw_column, int(7), kw_end_DASH_line, int(10), kw_end_DASH_column, int(21), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_switch))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = kw_caught
						} else {
							panic(r)
						}
					}
				}()
				var tmp4 any
				{ // let
					// let binding "G__2"
					var v5 any = v2
					_ = v5
					// case
					var tmp6 any
					// case clause 0
					if lang.Equals(v5, int(1)) {
						tmp6 = kw_nope
					} else {
						tmp7 := checkDerefVar(var_glojure_DOT_core_str)
						tmp8 := lang.Apply(tmp7, []any{"No matching clause: ", v5})
						tmp9 := lang.Apply(lang.NewIllegalArgumentError, []any{tmp8})
						panic(tmp9)
					}
					tmp4 = tmp6
				} // end let
				tmp3 = tmp4
			}()
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_switch_case_DASH_test_DASH_throw = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_switch_case_DASH_test_DASH_throw.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
