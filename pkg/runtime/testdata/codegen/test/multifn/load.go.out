// Code generated by glojure codegen. DO NOT EDIT.

package multifn

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	runtime "github.com/glojurelang/glojure/pkg/runtime"
	reflect "reflect"
)

func init() {
	runtime.RegisterNSLoader("codegen/test/multifn", LoadNS)
}

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}

func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "codegen.test.multifn"
func LoadNS() {
	sym__PLUS_ := lang.NewSymbol("+")
	sym__DASH_main := lang.NewSymbol("-main")
	sym_add := lang.NewSymbol("add")
	sym_codegen_DOT_test_DOT_multifn := lang.NewSymbol("codegen.test.multifn")
	sym_global_DASH_hierarchy := lang.NewSymbol("global-hierarchy")
	sym_glojure_DOT_core := lang.NewSymbol("glojure.core")
	sym_str := lang.NewSymbol("str")
	sym_type := lang.NewSymbol("type")
	kw_arglists := lang.NewKeyword("arglists")
	kw_column := lang.NewKeyword("column")
	kw_default := lang.NewKeyword("default")
	kw_doc := lang.NewKeyword("doc")
	kw_end_DASH_column := lang.NewKeyword("end-column")
	kw_end_DASH_line := lang.NewKeyword("end-line")
	kw_expected_DASH_output := lang.NewKeyword("expected-output")
	kw_file := lang.NewKeyword("file")
	kw_line := lang.NewKeyword("line")
	kw_ns := lang.NewKeyword("ns")
	kw_rettag := lang.NewKeyword("rettag")
	// var codegen.test.multifn/-main
	var_codegen_DOT_test_DOT_multifn__DASH_main := lang.InternVarName(sym_codegen_DOT_test_DOT_multifn, sym__DASH_main)
	// var codegen.test.multifn/add
	var_codegen_DOT_test_DOT_multifn_add := lang.InternVarName(sym_codegen_DOT_test_DOT_multifn, sym_add)
	// var glojure.core/+
	var_glojure_DOT_core__PLUS_ := lang.InternVarName(sym_glojure_DOT_core, sym__PLUS_)
	// var glojure.core/str
	var_glojure_DOT_core_str := lang.InternVarName(sym_glojure_DOT_core, sym_str)
	// var glojure.core/type
	var_glojure_DOT_core_type := lang.InternVarName(sym_glojure_DOT_core, sym_type)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	// reference reflect to avoid unused import error
	_ = reflect.TypeOf
	ns := lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_multifn)
	_ = ns
	// -main
	{
		tmp0 := sym__DASH_main.WithMeta(lang.NewMap(kw_expected_DASH_output, "int64: 7 float64: 8.0 default: 3 4", kw_file, "codegen/test/multifn.glj", kw_line, int(8), kw_column, int(7), kw_end_DASH_line, int(8), kw_end_DASH_column, int(68), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_multifn))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			tmp2 := checkDerefVar(var_glojure_DOT_core_str)
			tmp3 := checkDerefVar(var_codegen_DOT_test_DOT_multifn_add)
			tmp4 := lang.Apply(tmp3, []any{int64(3), int64(4)})
			tmp5 := checkDerefVar(var_codegen_DOT_test_DOT_multifn_add)
			tmp6 := lang.Apply(tmp5, []any{float64(3.5), float64(4.5)})
			tmp7 := checkDerefVar(var_codegen_DOT_test_DOT_multifn_add)
			tmp8 := lang.Apply(tmp7, []any{"3", "4"})
			tmp9 := lang.Apply(tmp2, []any{tmp4, " ", tmp6, " ", tmp8})
			return tmp9
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_multifn__DASH_main = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_multifn__DASH_main.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// add
	{
		tmp0 := sym_add.WithMeta(lang.NewMap(kw_file, "codegen/test/multifn.glj", kw_line, int(3), kw_column, int(11), kw_end_DASH_line, int(3), kw_end_DASH_column, int(13), kw_doc, "a multimethod for addition", kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_multifn))).(*lang.Symbol)
		var tmp2 lang.FnFunc
		tmp2 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 2)
			v3 := args[0]
			_ = v3
			v4 := args[1]
			_ = v4
			tmp5 := checkDerefVar(var_glojure_DOT_core_type)
			tmp6 := lang.Apply(tmp5, []any{v3})
			return tmp6
		})
		tmp2 = tmp2.WithMeta(lang.NewMap(kw_file, "codegen/test/multifn.glj", kw_line, int(3), kw_column, int(44), kw_end_DASH_line, int(3), kw_end_DASH_column, int(62))).(lang.FnFunc)
		tmp1 := lang.NewMultiFn("add", tmp2, kw_default, lang.FindOrCreateNamespace(sym_glojure_DOT_core).FindInternedVar(sym_global_DASH_hierarchy))
		tmp3 := reflect.TypeOf(int64(0))
		var tmp4 lang.FnFunc
		tmp4 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 2)
			v5 := args[0]
			_ = v5
			v6 := args[1]
			_ = v6
			tmp7 := checkDerefVar(var_glojure_DOT_core_str)
			tmp8 := checkDerefVar(var_glojure_DOT_core__PLUS_)
			tmp9 := lang.Apply(tmp8, []any{v5, v6})
			tmp10 := lang.Apply(tmp7, []any{"int64: ", tmp9})
			return tmp10
		})
		tmp1.AddMethod(tmp3, tmp4)
		tmp5 := reflect.TypeOf(float64(0))
		var tmp6 lang.FnFunc
		tmp6 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 2)
			v7 := args[0]
			_ = v7
			v8 := args[1]
			_ = v8
			tmp9 := checkDerefVar(var_glojure_DOT_core_str)
			tmp10 := checkDerefVar(var_glojure_DOT_core__PLUS_)
			tmp11 := lang.Apply(tmp10, []any{v7, v8})
			tmp12 := lang.Apply(tmp9, []any{"float64: ", tmp11})
			return tmp12
		})
		tmp1.AddMethod(tmp5, tmp6)
		var tmp7 lang.FnFunc
		tmp7 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 2)
			v8 := args[0]
			_ = v8
			v9 := args[1]
			_ = v9
			tmp10 := checkDerefVar(var_glojure_DOT_core_str)
			tmp11 := lang.Apply(tmp10, []any{"default: ", v8, " ", v9})
			return tmp11
		})
		tmp1.AddMethod(kw_default, tmp7)
		var_codegen_DOT_test_DOT_multifn_add = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_multifn_add.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
