// Code generated by glojure codegen. DO NOT EDIT.

package set_DASH_bang

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	runtime "github.com/glojurelang/glojure/pkg/runtime"
	http5 "net/http"
	reflect "reflect"
	time4 "time"
)

func init() {
	runtime.RegisterNSLoader("codegen/test/set_bang", LoadNS)
}

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}

func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

func checkArityGTE(args []any, min int) {
	if len(args) < min {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "codegen.test.set-bang"
func LoadNS() {
	sym__PLUS_ := lang.NewSymbol("+")
	sym__DASH_main := lang.NewSymbol("-main")
	sym_codegen_DOT_test_DOT_set_DASH_bang := lang.NewSymbol("codegen.test.set-bang")
	sym_glojure_DOT_core := lang.NewSymbol("glojure.core")
	sym_hash_DASH_map := lang.NewSymbol("hash-map")
	sym_pop_DASH_thread_DASH_bindings := lang.NewSymbol("pop-thread-bindings")
	sym_push_DASH_thread_DASH_bindings := lang.NewSymbol("push-thread-bindings")
	sym_set_BANG__DASH_host := lang.NewSymbol("set!-host")
	sym_set_BANG__DASH_var := lang.NewSymbol("set!-var")
	sym_x := lang.NewSymbol("x")
	kw_arglists := lang.NewKeyword("arglists")
	kw_column := lang.NewKeyword("column")
	kw_dynamic := lang.NewKeyword("dynamic")
	kw_end_DASH_column := lang.NewKeyword("end-column")
	kw_end_DASH_line := lang.NewKeyword("end-line")
	kw_expected_DASH_output := lang.NewKeyword("expected-output")
	kw_file := lang.NewKeyword("file")
	kw_line := lang.NewKeyword("line")
	kw_ns := lang.NewKeyword("ns")
	kw_rettag := lang.NewKeyword("rettag")
	// var codegen.test.set-bang/-main
	var_codegen_DOT_test_DOT_set_DASH_bang__DASH_main := lang.InternVarName(sym_codegen_DOT_test_DOT_set_DASH_bang, sym__DASH_main)
	// var codegen.test.set-bang/set!-host
	var_codegen_DOT_test_DOT_set_DASH_bang_set_BANG__DASH_host := lang.InternVarName(sym_codegen_DOT_test_DOT_set_DASH_bang, sym_set_BANG__DASH_host)
	// var codegen.test.set-bang/set!-var
	var_codegen_DOT_test_DOT_set_DASH_bang_set_BANG__DASH_var := lang.InternVarName(sym_codegen_DOT_test_DOT_set_DASH_bang, sym_set_BANG__DASH_var)
	// var codegen.test.set-bang/x
	var_codegen_DOT_test_DOT_set_DASH_bang_x := lang.InternVarName(sym_codegen_DOT_test_DOT_set_DASH_bang, sym_x)
	// var glojure.core/+
	var_glojure_DOT_core__PLUS_ := lang.InternVarName(sym_glojure_DOT_core, sym__PLUS_)
	// var glojure.core/hash-map
	var_glojure_DOT_core_hash_DASH_map := lang.InternVarName(sym_glojure_DOT_core, sym_hash_DASH_map)
	// var glojure.core/pop-thread-bindings
	var_glojure_DOT_core_pop_DASH_thread_DASH_bindings := lang.InternVarName(sym_glojure_DOT_core, sym_pop_DASH_thread_DASH_bindings)
	// var glojure.core/push-thread-bindings
	var_glojure_DOT_core_push_DASH_thread_DASH_bindings := lang.InternVarName(sym_glojure_DOT_core, sym_push_DASH_thread_DASH_bindings)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	// reference reflect to avoid unused import error
	_ = reflect.TypeOf
	ns := lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_set_DASH_bang)
	_ = ns
	// set!-host
	{
		tmp0 := sym_set_BANG__DASH_host.WithMeta(lang.NewMap(kw_file, "codegen/test/set_bang.glj", kw_line, int(11), kw_column, int(7), kw_end_DASH_line, int(11), kw_end_DASH_column, int(15), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_set_DASH_bang))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			var tmp2 any
			{ // let
				// let binding "c"
				tmp3 := new(http5.Client)
				var v4 any = tmp3
				_ = v4
				tmp5 := reflect.TypeOf(time4.Duration(0))
				tmp6 := lang.Apply(tmp5, []any{int64(1000)})
				// set! host field
				var tmp7 any
				{
					targetV := reflect.ValueOf(v4)
					if targetV.Kind() == reflect.Ptr {
						targetV = targetV.Elem()
					}
					fieldVal := targetV.FieldByName("Timeout")
					if !fieldVal.IsValid() {
						panic(fmt.Errorf("no such field Timeout"))
					}
					if !fieldVal.CanSet() {
						panic(fmt.Errorf("cannot set field Timeout"))
					}
					valV := reflect.ValueOf(tmp6)
					if !valV.IsValid() {
						switch fieldVal.Kind() {
						case reflect.Chan, reflect.Func, reflect.Interface, reflect.Map, reflect.Pointer, reflect.Slice, reflect.UnsafePointer:
							fieldVal.Set(reflect.Zero(fieldVal.Type()))
						default:
							panic(fmt.Errorf("cannot set field Timeout to nil"))
						}
					} else {
						fieldVal.Set(valV)
					}
					tmp7 = tmp6
				}
				_ = tmp7
				tmp8, ok := lang.FieldOrMethod(v4, "Timeout")
				if !ok {
					panic(lang.NewIllegalArgumentError(fmt.Sprintf("no such field or method on %T: %s", v4, "Timeout")))
				}
				var tmp9 any
				switch reflect.TypeOf(tmp8).Kind() {
				case reflect.Func:
					tmp9 = lang.Apply(tmp8, nil)
				default:
					tmp9 = tmp8
				}
				tmp2 = tmp9
			} // end let
			return tmp2
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_set_DASH_bang_set_BANG__DASH_host = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_set_DASH_bang_set_BANG__DASH_host.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// x
	{
		tmp0 := sym_x.WithMeta(lang.NewMap(kw_dynamic, true, kw_file, "codegen/test/set_bang.glj", kw_line, int(3), kw_column, int(6), kw_end_DASH_line, int(3), kw_end_DASH_column, int(16), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_set_DASH_bang))).(*lang.Symbol)
		var_codegen_DOT_test_DOT_set_DASH_bang_x = ns.InternWithValue(tmp0, int64(10), true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_set_DASH_bang_x.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
		var_codegen_DOT_test_DOT_set_DASH_bang_x.SetDynamic()
	}
	// -main
	{
		tmp0 := sym__DASH_main.WithMeta(lang.NewMap(kw_expected_DASH_output, lang.NewVector(int64(25), time4.Duration(1000)), kw_file, "codegen/test/set_bang.glj", kw_line, int(16), kw_column, int(7), kw_end_DASH_line, int(16), kw_end_DASH_column, int(57), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_set_DASH_bang))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			tmp2 := checkDerefVar(var_codegen_DOT_test_DOT_set_DASH_bang_set_BANG__DASH_var)
			tmp3 := lang.Apply(tmp2, nil)
			tmp4 := checkDerefVar(var_codegen_DOT_test_DOT_set_DASH_bang_set_BANG__DASH_host)
			tmp5 := lang.Apply(tmp4, nil)
			tmp6 := lang.NewVector(tmp3, tmp5)
			tmp7 := lang.NewMap(kw_file, "codegen/test/set_bang.glj", kw_line, int(17), kw_column, int(3), kw_end_DASH_line, int(17), kw_end_DASH_column, int(26))
			tmp8, err := lang.WithMeta(tmp6, tmp7.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			return tmp8
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_set_DASH_bang__DASH_main = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_set_DASH_bang__DASH_main.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// set!-var
	{
		tmp0 := sym_set_BANG__DASH_var.WithMeta(lang.NewMap(kw_file, "codegen/test/set_bang.glj", kw_line, int(5), kw_column, int(7), kw_end_DASH_line, int(5), kw_end_DASH_column, int(14), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_set_DASH_bang))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			var tmp2 any
			{ // let
				tmp3 := checkDerefVar(var_glojure_DOT_core_push_DASH_thread_DASH_bindings)
				tmp4 := checkDerefVar(var_glojure_DOT_core_hash_DASH_map)
				tmp5 := lang.InternVarName(sym_codegen_DOT_test_DOT_set_DASH_bang, sym_x)
				tmp6 := lang.Apply(tmp4, []any{tmp5, int64(15)})
				tmp7 := lang.Apply(tmp3, []any{tmp6})
				_ = tmp7
				var tmp8 any
				func() {
					defer func() {
						tmp9 := checkDerefVar(var_glojure_DOT_core_pop_DASH_thread_DASH_bindings)
						tmp10 := lang.Apply(tmp9, nil)
						_ = tmp10
					}()
					tmp11 := var_codegen_DOT_test_DOT_set_DASH_bang_x.Set(int64(20))
					_ = tmp11
					tmp12 := checkDerefVar(var_glojure_DOT_core__PLUS_)
					tmp13 := checkDerefVar(var_codegen_DOT_test_DOT_set_DASH_bang_x)
					tmp14 := lang.Apply(tmp12, []any{tmp13, int64(5)})
					tmp15 := var_codegen_DOT_test_DOT_set_DASH_bang_x.Set(tmp14)
					_ = tmp15
					tmp16 := checkDerefVar(var_codegen_DOT_test_DOT_set_DASH_bang_x)
					tmp8 = tmp16
				}()
				tmp2 = tmp8
			} // end let
			return tmp2
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_set_DASH_bang_set_BANG__DASH_var = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_set_DASH_bang_set_BANG__DASH_var.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
