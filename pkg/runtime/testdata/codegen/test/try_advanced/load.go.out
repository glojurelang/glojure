// Code generated by glojure codegen. DO NOT EDIT.

package try_DASH_advanced

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	runtime "github.com/glojurelang/glojure/pkg/runtime"
	reflect "reflect"
)

func init() {
	runtime.RegisterNSLoader("codegen/test/try_advanced", LoadNS)
}

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}

func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

func checkArityGTE(args []any, min int) {
	if len(args) < min {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "codegen.test.try-advanced"
func LoadNS() {
	sym__DASH_main := lang.NewSymbol("-main")
	sym__EQ_ := lang.NewSymbol("=")
	sym_catch_DASH_binding_DASH_scope := lang.NewSymbol("catch-binding-scope")
	sym_catch_DASH_binding_DASH_scope_DASH_2 := lang.NewSymbol("catch-binding-scope-2")
	sym_codegen_DOT_test_DOT_try_DASH_advanced := lang.NewSymbol("codegen.test.try-advanced")
	sym_finally_DASH_with_DASH_return := lang.NewSymbol("finally-with-return")
	sym_glojure_DOT_core := lang.NewSymbol("glojure.core")
	sym_try_DASH_custom_DASH_value := lang.NewSymbol("try-custom-value")
	kw_arglists := lang.NewKeyword("arglists")
	kw_column := lang.NewKeyword("column")
	kw_end_DASH_column := lang.NewKeyword("end-column")
	kw_end_DASH_line := lang.NewKeyword("end-line")
	kw_expected_DASH_output := lang.NewKeyword("expected-output")
	kw_file := lang.NewKeyword("file")
	kw_line := lang.NewKeyword("line")
	kw_ns := lang.NewKeyword("ns")
	kw_rettag := lang.NewKeyword("rettag")
	// var codegen.test.try-advanced/-main
	var_codegen_DOT_test_DOT_try_DASH_advanced__DASH_main := lang.InternVarName(sym_codegen_DOT_test_DOT_try_DASH_advanced, sym__DASH_main)
	// var codegen.test.try-advanced/catch-binding-scope
	var_codegen_DOT_test_DOT_try_DASH_advanced_catch_DASH_binding_DASH_scope := lang.InternVarName(sym_codegen_DOT_test_DOT_try_DASH_advanced, sym_catch_DASH_binding_DASH_scope)
	// var codegen.test.try-advanced/catch-binding-scope-2
	var_codegen_DOT_test_DOT_try_DASH_advanced_catch_DASH_binding_DASH_scope_DASH_2 := lang.InternVarName(sym_codegen_DOT_test_DOT_try_DASH_advanced, sym_catch_DASH_binding_DASH_scope_DASH_2)
	// var codegen.test.try-advanced/finally-with-return
	var_codegen_DOT_test_DOT_try_DASH_advanced_finally_DASH_with_DASH_return := lang.InternVarName(sym_codegen_DOT_test_DOT_try_DASH_advanced, sym_finally_DASH_with_DASH_return)
	// var codegen.test.try-advanced/try-custom-value
	var_codegen_DOT_test_DOT_try_DASH_advanced_try_DASH_custom_DASH_value := lang.InternVarName(sym_codegen_DOT_test_DOT_try_DASH_advanced, sym_try_DASH_custom_DASH_value)
	// var glojure.core/=
	var_glojure_DOT_core__EQ_ := lang.InternVarName(sym_glojure_DOT_core, sym__EQ_)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	// reference reflect to avoid unused import error
	_ = reflect.TypeOf
	ns := lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_try_DASH_advanced)
	_ = ns
	// catch-binding-scope
	{
		tmp0 := sym_catch_DASH_binding_DASH_scope.WithMeta(lang.NewMap(kw_file, "codegen/test/try_advanced.glj", kw_line, int(9), kw_column, int(7), kw_end_DASH_line, int(9), kw_end_DASH_column, int(25), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_try_DASH_advanced))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			var tmp2 any
			{ // let
				// let binding "e"
				var v3 any = "outer"
				_ = v3
				var tmp4 any
				func() {
					defer func() {
						if r := recover(); r != nil {
							if lang.CatchMatches(r, lang.Builtins["any"]) {
								v5 := r
								_ = v5
								tmp4 = v5
							} else {
								panic(r)
							}
						}
					}()
					panic("test")
				}()
				tmp2 = tmp4
			} // end let
			return tmp2
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_try_DASH_advanced_catch_DASH_binding_DASH_scope = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_try_DASH_advanced_catch_DASH_binding_DASH_scope.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// catch-binding-scope-2
	{
		tmp0 := sym_catch_DASH_binding_DASH_scope_DASH_2.WithMeta(lang.NewMap(kw_file, "codegen/test/try_advanced.glj", kw_line, int(16), kw_column, int(7), kw_end_DASH_line, int(16), kw_end_DASH_column, int(27), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_try_DASH_advanced))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			var tmp2 any
			{ // let
				// let binding "e"
				var v3 any = "outer"
				_ = v3
				var tmp4 any
				func() {
					defer func() {
						if r := recover(); r != nil {
							if lang.CatchMatches(r, lang.Builtins["any"]) {
								v5 := r
								_ = v5
								tmp4 = v5
							} else {
								panic(r)
							}
						}
					}()
					panic("test")
				}()
				_ = tmp4
				tmp2 = v3
			} // end let
			return tmp2
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_try_DASH_advanced_catch_DASH_binding_DASH_scope_DASH_2 = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_try_DASH_advanced_catch_DASH_binding_DASH_scope_DASH_2.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// finally-with-return
	{
		tmp0 := sym_finally_DASH_with_DASH_return.WithMeta(lang.NewMap(kw_file, "codegen/test/try_advanced.glj", kw_line, int(24), kw_column, int(7), kw_end_DASH_line, int(24), kw_end_DASH_column, int(25), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_try_DASH_advanced))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			var tmp2 any
			func() {
				defer func() {
					_ = int64(100)
				}()
				tmp2 = int64(42)
			}()
			return tmp2
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_try_DASH_advanced_finally_DASH_with_DASH_return = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_try_DASH_advanced_finally_DASH_with_DASH_return.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// try-custom-value
	{
		tmp0 := sym_try_DASH_custom_DASH_value.WithMeta(lang.NewMap(kw_file, "codegen/test/try_advanced.glj", kw_line, int(3), kw_column, int(7), kw_end_DASH_line, int(3), kw_end_DASH_column, int(22), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_try_DASH_advanced))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			var tmp2 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v3 := r
							_ = v3
							tmp2 = v3
						} else {
							panic(r)
						}
					}
				}()
				panic("custom error")
			}()
			return tmp2
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_try_DASH_advanced_try_DASH_custom_DASH_value = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_try_DASH_advanced_try_DASH_custom_DASH_value.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// -main
	{
		tmp0 := sym__DASH_main.WithMeta(lang.NewMap(kw_expected_DASH_output, "advanced tests passed", kw_file, "codegen/test/try_advanced.glj", kw_line, int(30), kw_column, int(7), kw_end_DASH_line, int(30), kw_end_DASH_column, int(55), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_try_DASH_advanced))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			var tmp2 any
			tmp3 := checkDerefVar(var_glojure_DOT_core__EQ_)
			tmp4 := checkDerefVar(var_codegen_DOT_test_DOT_try_DASH_advanced_try_DASH_custom_DASH_value)
			tmp5 := lang.Apply(tmp4, nil)
			tmp6 := lang.Apply(tmp3, []any{tmp5, "custom error"})
			if lang.IsTruthy(tmp6) {
			} else {
				panic("try-custom-value failed")
			}
			_ = tmp2
			var tmp7 any
			tmp8 := checkDerefVar(var_glojure_DOT_core__EQ_)
			tmp9 := checkDerefVar(var_codegen_DOT_test_DOT_try_DASH_advanced_catch_DASH_binding_DASH_scope)
			tmp10 := lang.Apply(tmp9, nil)
			tmp11 := lang.Apply(tmp8, []any{tmp10, "test"})
			if lang.IsTruthy(tmp11) {
			} else {
				panic("catch-binding-scope failed")
			}
			_ = tmp7
			var tmp12 any
			tmp13 := checkDerefVar(var_glojure_DOT_core__EQ_)
			tmp14 := checkDerefVar(var_codegen_DOT_test_DOT_try_DASH_advanced_catch_DASH_binding_DASH_scope_DASH_2)
			tmp15 := lang.Apply(tmp14, nil)
			tmp16 := lang.Apply(tmp13, []any{tmp15, "outer"})
			if lang.IsTruthy(tmp16) {
			} else {
				panic("catch-binding-scope-2 failed")
			}
			_ = tmp12
			var tmp17 any
			tmp18 := checkDerefVar(var_glojure_DOT_core__EQ_)
			tmp19 := checkDerefVar(var_codegen_DOT_test_DOT_try_DASH_advanced_finally_DASH_with_DASH_return)
			tmp20 := lang.Apply(tmp19, nil)
			tmp21 := lang.Apply(tmp18, []any{tmp20, int64(42)})
			if lang.IsTruthy(tmp21) {
			} else {
				panic("finally-with-return failed")
			}
			_ = tmp17
			return "advanced tests passed"
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_try_DASH_advanced__DASH_main = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_try_DASH_advanced__DASH_main.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
