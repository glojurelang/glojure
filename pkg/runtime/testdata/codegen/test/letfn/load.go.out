// Code generated by glojure codegen. DO NOT EDIT.

package letfn

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	runtime "github.com/glojurelang/glojure/pkg/runtime"
	reflect "reflect"
)

func init() {
	runtime.RegisterNSLoader("codegen/test/letfn", LoadNS)
}

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}

func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

func checkArityGTE(args []any, min int) {
	if len(args) < min {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "codegen.test.letfn"
func LoadNS() {
	sym__PLUS_ := lang.NewSymbol("+")
	sym__DASH_ := lang.NewSymbol("-")
	sym__DASH_main := lang.NewSymbol("-main")
	sym__LT__EQ_ := lang.NewSymbol("<=")
	sym_clojure_DOT_core := lang.NewSymbol("clojure.core")
	sym_codegen_DOT_test_DOT_letfn := lang.NewSymbol("codegen.test.letfn")
	kw_arglists := lang.NewKeyword("arglists")
	kw_column := lang.NewKeyword("column")
	kw_end_DASH_column := lang.NewKeyword("end-column")
	kw_end_DASH_line := lang.NewKeyword("end-line")
	kw_expected_DASH_output := lang.NewKeyword("expected-output")
	kw_file := lang.NewKeyword("file")
	kw_line := lang.NewKeyword("line")
	kw_ns := lang.NewKeyword("ns")
	kw_rettag := lang.NewKeyword("rettag")
	// var clojure.core/-
	var_clojure_DOT_core__DASH_ := lang.InternVarName(sym_clojure_DOT_core, sym__DASH_)
	// var clojure.core/<=
	var_clojure_DOT_core__LT__EQ_ := lang.InternVarName(sym_clojure_DOT_core, sym__LT__EQ_)
	// var clojure.core/+
	var_clojure_DOT_core__PLUS_ := lang.InternVarName(sym_clojure_DOT_core, sym__PLUS_)
	// var codegen.test.letfn/-main
	var_codegen_DOT_test_DOT_letfn__DASH_main := lang.InternVarName(sym_codegen_DOT_test_DOT_letfn, sym__DASH_main)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	// reference reflect to avoid unused import error
	_ = reflect.TypeOf
	ns := lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_letfn)
	_ = ns
	// -main
	{
		tmp0 := sym__DASH_main.WithMeta(lang.NewMap(kw_expected_DASH_output, int64(55), kw_file, "codegen/test/letfn.glj", kw_line, int(4), kw_column, int(3), kw_end_DASH_line, int(5), kw_end_DASH_column, int(7), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_letfn))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			var tmp2 any
			{ // letfn
				// letfn binding "fib"
				var v3 lang.FnFunc
				var tmp4 lang.FnFunc
				{ // function fib
					var v5 lang.FnFunc
					tmp4 = lang.NewFnFunc(func(args ...any) any {
						checkArity(args, 1)
						v6 := args[0]
						_ = v6
						var tmp7 any
						tmp8 := checkDerefVar(var_clojure_DOT_core__LT__EQ_)
						tmp9 := lang.Apply(tmp8, []any{v6, int64(1)})
						if lang.IsTruthy(tmp9) {
							tmp7 = v6
						} else {
							tmp10 := checkDerefVar(var_clojure_DOT_core__PLUS_)
							tmp11 := checkDerefVar(var_clojure_DOT_core__DASH_)
							tmp12 := lang.Apply(tmp11, []any{v6, int64(1)})
							tmp13 := lang.Apply(v5, []any{tmp12})
							tmp14 := checkDerefVar(var_clojure_DOT_core__DASH_)
							tmp15 := lang.Apply(tmp14, []any{v6, int64(2)})
							tmp16 := lang.Apply(v5, []any{tmp15})
							tmp17 := lang.Apply(tmp10, []any{tmp13, tmp16})
							tmp7 = tmp17
						}
						return tmp7
					})
					v5 = tmp4
					_ = v5
				}
				v3 = tmp4
				_ = v3
				tmp5 := lang.Apply(v3, []any{int64(10)})
				tmp2 = tmp5
			} // end letfn
			return tmp2
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_letfn__DASH_main = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_letfn__DASH_main.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
