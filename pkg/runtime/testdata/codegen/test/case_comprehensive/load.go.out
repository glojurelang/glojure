// Code generated by glojure codegen. DO NOT EDIT.

package case_DASH_comprehensive

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	runtime "github.com/glojurelang/glojure/pkg/runtime"
	reflect "reflect"
)

func init() {
	runtime.RegisterNSLoader("codegen/test/case_comprehensive", LoadNS)
}

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}

func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

func checkArityGTE(args []any, min int) {
	if len(args) < min {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "codegen.test.case-comprehensive"
func LoadNS() {
	sym__DASH_main := lang.NewSymbol("-main")
	sym__EQ_ := lang.NewSymbol("=")
	sym_bar := lang.NewSymbol("bar")
	sym_baz := lang.NewSymbol("baz")
	sym_clojure_DOT_core := lang.NewSymbol("clojure.core")
	sym_codegen_DOT_test_DOT_case_DASH_comprehensive := lang.NewSymbol("codegen.test.case-comprehensive")
	sym_foo := lang.NewSymbol("foo")
	sym_one := lang.NewSymbol("one")
	sym_quote := lang.NewSymbol("quote")
	sym_qux := lang.NewSymbol("qux")
	sym_str := lang.NewSymbol("str")
	sym_test_DASH_char_DASH_case := lang.NewSymbol("test-char-case")
	sym_test_DASH_collision_DASH_case := lang.NewSymbol("test-collision-case")
	sym_test_DASH_compact_DASH_case := lang.NewSymbol("test-compact-case")
	sym_test_DASH_default_DASH_case := lang.NewSymbol("test-default-case")
	sym_test_DASH_int_DASH_case := lang.NewSymbol("test-int-case")
	sym_test_DASH_keyword_DASH_case := lang.NewSymbol("test-keyword-case")
	sym_test_DASH_mixed_DASH_case := lang.NewSymbol("test-mixed-case")
	sym_test_DASH_no_DASH_default := lang.NewSymbol("test-no-default")
	sym_test_DASH_sparse_DASH_case := lang.NewSymbol("test-sparse-case")
	sym_test_DASH_sparse_DASH_case_DASH_2 := lang.NewSymbol("test-sparse-case-2")
	sym_test_DASH_string_DASH_case := lang.NewSymbol("test-string-case")
	sym_test_DASH_symbol_DASH_case := lang.NewSymbol("test-symbol-case")
	sym_test_DASH_vector_DASH_list_DASH_case := lang.NewSymbol("test-vector-list-case")
	sym_x := lang.NewSymbol("x")
	kw_affirmative := lang.NewKeyword("affirmative")
	kw_arglists := lang.NewKeyword("arglists")
	kw_bar := lang.NewKeyword("bar")
	kw_baz := lang.NewKeyword("baz")
	kw_boolean_DASH_false := lang.NewKeyword("boolean-false")
	kw_boolean_DASH_true := lang.NewKeyword("boolean-true")
	kw_char_DASH_tests := lang.NewKeyword("char-tests")
	kw_collision_DASH_tests := lang.NewKeyword("collision-tests")
	kw_column := lang.NewKeyword("column")
	kw_compact_DASH_tests := lang.NewKeyword("compact-tests")
	kw_default := lang.NewKeyword("default")
	kw_default_DASH_tests := lang.NewKeyword("default-tests")
	kw_end_DASH_column := lang.NewKeyword("end-column")
	kw_end_DASH_line := lang.NewKeyword("end-line")
	kw_expected_DASH_output := lang.NewKeyword("expected-output")
	kw_farewell := lang.NewKeyword("farewell")
	kw_file := lang.NewKeyword("file")
	kw_five := lang.NewKeyword("five")
	kw_foo := lang.NewKeyword("foo")
	kw_found_DASH_specific := lang.NewKeyword("found-specific")
	kw_four := lang.NewKeyword("four")
	kw_got_DASH_bar := lang.NewKeyword("got-bar")
	kw_got_DASH_baz := lang.NewKeyword("got-baz")
	kw_got_DASH_foo := lang.NewKeyword("got-foo")
	kw_greeting := lang.NewKeyword("greeting")
	kw_hundred := lang.NewKeyword("hundred")
	kw_int_DASH_tests := lang.NewKeyword("int-tests")
	kw_keyword_DASH_one := lang.NewKeyword("keyword-one")
	kw_keyword_DASH_tests := lang.NewKeyword("keyword-tests")
	kw_letter_DASH_a := lang.NewKeyword("letter-a")
	kw_letter_DASH_b := lang.NewKeyword("letter-b")
	kw_line := lang.NewKeyword("line")
	kw_mixed_DASH_tests := lang.NewKeyword("mixed-tests")
	kw_negative := lang.NewKeyword("negative")
	kw_newline_DASH_char := lang.NewKeyword("newline-char")
	kw_nil_DASH_value := lang.NewKeyword("nil-value")
	kw_no_DASH_default_DASH_tests := lang.NewKeyword("no-default-tests")
	kw_no_DASH_match_DASH_error := lang.NewKeyword("no-match-error")
	kw_not_DASH_found := lang.NewKeyword("not-found")
	kw_ns := lang.NewKeyword("ns")
	kw_number_DASH_one := lang.NewKeyword("number-one")
	kw_one := lang.NewKeyword("one")
	kw_one_DASH_twenty_DASH_nine := lang.NewKeyword("one-twenty-nine")
	kw_one_DASH_two := lang.NewKeyword("one-two")
	kw_other := lang.NewKeyword("other")
	kw_other_DASH_char := lang.NewKeyword("other-char")
	kw_qux := lang.NewKeyword("qux")
	kw_rettag := lang.NewKeyword("rettag")
	kw_seventeen := lang.NewKeyword("seventeen")
	kw_space_DASH_char := lang.NewKeyword("space-char")
	kw_sparse_DASH_tests := lang.NewKeyword("sparse-tests")
	kw_sparse_DASH_tests_DASH_2 := lang.NewKeyword("sparse-tests-2")
	kw_specific := lang.NewKeyword("specific")
	kw_string_DASH_one := lang.NewKeyword("string-one")
	kw_string_DASH_tests := lang.NewKeyword("string-tests")
	kw_symbol_DASH_one := lang.NewKeyword("symbol-one")
	kw_symbol_DASH_tests := lang.NewKeyword("symbol-tests")
	kw_ten := lang.NewKeyword("ten")
	kw_ten_DASH_thousand := lang.NewKeyword("ten-thousand")
	kw_thirty_DASH_three := lang.NewKeyword("thirty-three")
	kw_thousand := lang.NewKeyword("thousand")
	kw_three := lang.NewKeyword("three")
	kw_three_DASH_four_DASH_five := lang.NewKeyword("three-four-five")
	kw_two := lang.NewKeyword("two")
	kw_unknown := lang.NewKeyword("unknown")
	kw_vector_DASH_list_DASH_tests := lang.NewKeyword("vector-list-tests")
	kw_zero := lang.NewKeyword("zero")
	// var clojure.core/=
	var_clojure_DOT_core__EQ_ := lang.InternVarName(sym_clojure_DOT_core, sym__EQ_)
	// var clojure.core/str
	var_clojure_DOT_core_str := lang.InternVarName(sym_clojure_DOT_core, sym_str)
	// var codegen.test.case-comprehensive/-main
	var_codegen_DOT_test_DOT_case_DASH_comprehensive__DASH_main := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym__DASH_main)
	// var codegen.test.case-comprehensive/test-char-case
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_char_DASH_case := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_char_DASH_case)
	// var codegen.test.case-comprehensive/test-collision-case
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_collision_DASH_case := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_collision_DASH_case)
	// var codegen.test.case-comprehensive/test-compact-case
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_compact_DASH_case := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_compact_DASH_case)
	// var codegen.test.case-comprehensive/test-default-case
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_default_DASH_case := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_default_DASH_case)
	// var codegen.test.case-comprehensive/test-int-case
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_int_DASH_case := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_int_DASH_case)
	// var codegen.test.case-comprehensive/test-keyword-case
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_keyword_DASH_case := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_keyword_DASH_case)
	// var codegen.test.case-comprehensive/test-mixed-case
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_mixed_DASH_case := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_mixed_DASH_case)
	// var codegen.test.case-comprehensive/test-no-default
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_no_DASH_default := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_no_DASH_default)
	// var codegen.test.case-comprehensive/test-sparse-case
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_sparse_DASH_case)
	// var codegen.test.case-comprehensive/test-sparse-case-2
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case_DASH_2 := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_sparse_DASH_case_DASH_2)
	// var codegen.test.case-comprehensive/test-string-case
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_string_DASH_case := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_string_DASH_case)
	// var codegen.test.case-comprehensive/test-symbol-case
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_symbol_DASH_case := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_symbol_DASH_case)
	// var codegen.test.case-comprehensive/test-vector-list-case
	var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_vector_DASH_list_DASH_case := lang.InternVarName(sym_codegen_DOT_test_DOT_case_DASH_comprehensive, sym_test_DASH_vector_DASH_list_DASH_case)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	// reference reflect to avoid unused import error
	_ = reflect.TypeOf
	ns := lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive)
	_ = ns
	// test-char-case
	{
		tmp0 := sym_test_DASH_char_DASH_case.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(102), kw_column, int(7), kw_end_DASH_line, int(102), kw_end_DASH_column, int(20), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__379"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				tmp6 = int64(lang.Hash(v4))
				// case entry 0 (key=97, collision=false)
				if tmp6 == 97 {
					if lang.Equals(v4, lang.NewChar(97)) {
						tmp5 = kw_letter_DASH_a
					} else {
						tmp5 = kw_other_DASH_char
					}
					// case entry 1 (key=98, collision=false)
				} else if tmp6 == 98 {
					if lang.Equals(v4, lang.NewChar(98)) {
						tmp5 = kw_letter_DASH_b
					} else {
						tmp5 = kw_other_DASH_char
					}
					// case entry 2 (key=32, collision=false)
				} else if tmp6 == 32 {
					if lang.Equals(v4, lang.NewChar(32)) {
						tmp5 = kw_space_DASH_char
					} else {
						tmp5 = kw_other_DASH_char
					}
					// case entry 3 (key=10, collision=false)
				} else if tmp6 == 10 {
					if lang.Equals(v4, lang.NewChar(10)) {
						tmp5 = kw_newline_DASH_char
					} else {
						tmp5 = kw_other_DASH_char
					}
				} else {
					tmp5 = kw_other_DASH_char
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_char_DASH_case = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_char_DASH_case.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-compact-case
	{
		tmp0 := sym_test_DASH_compact_DASH_case.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(14), kw_column, int(7), kw_end_DASH_line, int(14), kw_end_DASH_column, int(23), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__367"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				switch v := v4.(type) {
				case int64:
					tmp6 = v
				case int:
					tmp6 = int64(v)
				case int32:
					tmp6 = int64(v)
				case int16:
					tmp6 = int64(v)
				case int8:
					tmp6 = int64(v)
				default:
					tmp6 = -1 // won't match any case
				}
				// case entry 0 (key=0, collision=false)
				if tmp6 == 0 {
					tmp5 = kw_zero
					// case entry 1 (key=1, collision=false)
				} else if tmp6 == 1 {
					tmp5 = kw_one
					// case entry 2 (key=2, collision=false)
				} else if tmp6 == 2 {
					tmp5 = kw_two
					// case entry 3 (key=3, collision=false)
				} else if tmp6 == 3 {
					tmp5 = kw_three
					// case entry 4 (key=4, collision=false)
				} else if tmp6 == 4 {
					tmp5 = kw_four
					// case entry 5 (key=5, collision=false)
				} else if tmp6 == 5 {
					tmp5 = kw_five
				} else {
					tmp5 = kw_not_DASH_found
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_compact_DASH_case = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_compact_DASH_case.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-default-case
	{
		tmp0 := sym_test_DASH_default_DASH_case.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(87), kw_column, int(7), kw_end_DASH_line, int(87), kw_end_DASH_column, int(23), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__377"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				tmp6 = int64(lang.IdentityHash(v4))
				// case entry 0 (key=3020174793, collision=false)
				if tmp6 == 3020174793 {
					if v4 == kw_specific {
						tmp5 = kw_found_DASH_specific
					} else {
						tmp5 = kw_default
					}
				} else {
					tmp5 = kw_default
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_default_DASH_case = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_default_DASH_case.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-int-case
	{
		tmp0 := sym_test_DASH_int_DASH_case.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(4), kw_column, int(7), kw_end_DASH_line, int(4), kw_end_DASH_column, int(19), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__366"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				switch v := v4.(type) {
				case int64:
					tmp6 = v
				case int:
					tmp6 = int64(v)
				case int32:
					tmp6 = int64(v)
				case int16:
					tmp6 = int64(v)
				case int8:
					tmp6 = int64(v)
				default:
					tmp6 = -1 // won't match any case
				}
				// case entry 0 (key=1, collision=false)
				if tmp6 == 1 {
					tmp5 = kw_one
					// case entry 1 (key=2, collision=false)
				} else if tmp6 == 2 {
					tmp5 = kw_two
					// case entry 2 (key=3, collision=false)
				} else if tmp6 == 3 {
					tmp5 = kw_three
					// case entry 3 (key=10, collision=false)
				} else if tmp6 == 10 {
					tmp5 = kw_ten
					// case entry 4 (key=100, collision=false)
				} else if tmp6 == 100 {
					tmp5 = kw_hundred
				} else {
					tmp5 = kw_default
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_int_DASH_case = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_int_DASH_case.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-keyword-case
	{
		tmp0 := sym_test_DASH_keyword_DASH_case.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(45), kw_column, int(7), kw_end_DASH_line, int(45), kw_end_DASH_column, int(23), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__370"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				tmp6 = int64(uint32(lang.IdentityHash(v4)>>2) & uint32(3))
				// case entry 0 (key=1, collision=false)
				if tmp6 == 1 {
					if v4 == kw_foo {
						tmp5 = kw_got_DASH_foo
					} else {
						tmp5 = kw_default
					}
					// case entry 1 (key=2, collision=false)
				} else if tmp6 == 2 {
					if v4 == kw_bar {
						tmp5 = kw_got_DASH_bar
					} else {
						tmp5 = kw_default
					}
					// case entry 2 (key=0, collision=false)
				} else if tmp6 == 0 {
					if v4 == kw_baz {
						tmp5 = kw_got_DASH_baz
					} else {
						tmp5 = kw_default
					}
				} else {
					tmp5 = kw_default
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_keyword_DASH_case = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_keyword_DASH_case.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-mixed-case
	{
		tmp0 := sym_test_DASH_mixed_DASH_case.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(70), kw_column, int(7), kw_end_DASH_line, int(70), kw_end_DASH_column, int(21), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__373"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				tmp6 = int64(uint32(lang.Hash(v4)>>12) & uint32(7))
				// case entry 0 (key=7, collision=false)
				if tmp6 == 7 {
					if lang.Equals(v4, int64(1)) {
						tmp5 = kw_number_DASH_one
					} else {
						tmp5 = kw_default
					}
					// case entry 1 (key=1, collision=false)
				} else if tmp6 == 1 {
					if lang.Equals(v4, "one") {
						tmp5 = kw_string_DASH_one
					} else {
						tmp5 = kw_default
					}
					// case entry 2 (key=5, collision=false)
				} else if tmp6 == 5 {
					if lang.Equals(v4, kw_one) {
						tmp5 = kw_keyword_DASH_one
					} else {
						tmp5 = kw_default
					}
					// case entry 3 (key=0, collision=false)
				} else if tmp6 == 0 {
					if lang.Equals(v4, sym_quote) {
						tmp5 = kw_symbol_DASH_one
					} else {
						tmp5 = kw_default
					}
					// case entry 4 (key=3, collision=false)
				} else if tmp6 == 3 {
					if lang.Equals(v4, sym_one) {
						tmp5 = kw_symbol_DASH_one
					} else {
						tmp5 = kw_default
					}
				} else {
					tmp5 = kw_default
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_mixed_DASH_case = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_mixed_DASH_case.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-sparse-case
	{
		tmp0 := sym_test_DASH_sparse_DASH_case.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(26), kw_column, int(7), kw_end_DASH_line, int(26), kw_end_DASH_column, int(22), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__368"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				switch v := v4.(type) {
				case int64:
					tmp6 = v
				case int:
					tmp6 = int64(v)
				case int32:
					tmp6 = int64(v)
				case int16:
					tmp6 = int64(v)
				case int8:
					tmp6 = int64(v)
				default:
					tmp6 = -1 // won't match any case
				}
				tmp6 = int64(uint32(tmp6>>2) & uint32(7))
				// case entry 0 (key=0, collision=false)
				if tmp6 == 0 {
					tmp5 = kw_one
					// case entry 1 (key=1, collision=false)
				} else if tmp6 == 1 {
					tmp5 = kw_hundred
					// case entry 2 (key=2, collision=false)
				} else if tmp6 == 2 {
					tmp5 = kw_thousand
					// case entry 3 (key=4, collision=false)
				} else if tmp6 == 4 {
					tmp5 = kw_ten_DASH_thousand
				} else {
					tmp5 = kw_not_DASH_found
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-sparse-case-2
	{
		tmp0 := sym_test_DASH_sparse_DASH_case_DASH_2.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(36), kw_column, int(7), kw_end_DASH_line, int(36), kw_end_DASH_column, int(24), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__369"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				switch v := v4.(type) {
				case int64:
					tmp6 = v
				case int:
					tmp6 = int64(v)
				case int32:
					tmp6 = int64(v)
				case int16:
					tmp6 = int64(v)
				case int8:
					tmp6 = int64(v)
				default:
					tmp6 = -1 // won't match any case
				}
				// case entry 0 (key=5, collision=false)
				if tmp6 == 5 {
					tmp5 = kw_five
					// case entry 1 (key=17, collision=false)
				} else if tmp6 == 17 {
					tmp5 = kw_seventeen
					// case entry 2 (key=33, collision=false)
				} else if tmp6 == 33 {
					tmp5 = kw_thirty_DASH_three
					// case entry 3 (key=129, collision=false)
				} else if tmp6 == 129 {
					tmp5 = kw_one_DASH_twenty_DASH_nine
				} else {
					tmp5 = kw_not_DASH_found
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case_DASH_2 = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case_DASH_2.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-string-case
	{
		tmp0 := sym_test_DASH_string_DASH_case.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(53), kw_column, int(7), kw_end_DASH_line, int(53), kw_end_DASH_column, int(22), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__371"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				tmp6 = int64(uint32(lang.Hash(v4)>>5) & uint32(3))
				// case entry 0 (key=1, collision=false)
				if tmp6 == 1 {
					if lang.Equals(v4, "hello") {
						tmp5 = kw_greeting
					} else {
						tmp5 = kw_unknown
					}
					// case entry 1 (key=2, collision=false)
				} else if tmp6 == 2 {
					if lang.Equals(v4, "goodbye") {
						tmp5 = kw_farewell
					} else {
						tmp5 = kw_unknown
					}
					// case entry 2 (key=0, collision=false)
				} else if tmp6 == 0 {
					if lang.Equals(v4, "yes") {
						tmp5 = kw_affirmative
					} else {
						tmp5 = kw_unknown
					}
					// case entry 3 (key=3, collision=false)
				} else if tmp6 == 3 {
					if lang.Equals(v4, "no") {
						tmp5 = kw_negative
					} else {
						tmp5 = kw_unknown
					}
				} else {
					tmp5 = kw_unknown
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_string_DASH_case = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_string_DASH_case.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-symbol-case
	{
		tmp0 := sym_test_DASH_symbol_DASH_case.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(62), kw_column, int(7), kw_end_DASH_line, int(62), kw_end_DASH_column, int(22), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__372"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				tmp6 = int64(uint32(lang.Hash(v4)>>3) & uint32(3))
				// case entry 0 (key=0, collision=false)
				if tmp6 == 0 {
					if lang.Equals(v4, sym_foo) {
						tmp5 = kw_got_DASH_foo
					} else {
						tmp5 = kw_default
					}
					// case entry 1 (key=3, collision=false)
				} else if tmp6 == 3 {
					if lang.Equals(v4, sym_bar) {
						tmp5 = kw_got_DASH_bar
					} else {
						tmp5 = kw_default
					}
					// case entry 2 (key=2, collision=false)
				} else if tmp6 == 2 {
					if lang.Equals(v4, sym_baz) {
						tmp5 = kw_got_DASH_baz
					} else {
						tmp5 = kw_default
					}
				} else {
					tmp5 = kw_default
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_symbol_DASH_case = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_symbol_DASH_case.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-vector-list-case
	{
		tmp0 := sym_test_DASH_vector_DASH_list_DASH_case.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(111), kw_column, int(7), kw_end_DASH_line, int(111), kw_end_DASH_column, int(27), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__380"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				tmp6 = int64(uint32(lang.Hash(v4)>>3) & uint32(1))
				// case entry 0 (key=0, collision=false)
				if tmp6 == 0 {
					if lang.Equals(v4, lang.NewVector(int64(1), int64(2))) {
						tmp5 = kw_one_DASH_two
					} else {
						tmp5 = kw_other
					}
					// case entry 1 (key=1, collision=false)
				} else if tmp6 == 1 {
					if lang.Equals(v4, lang.NewVector(int64(3), int64(4), int64(5))) {
						tmp5 = kw_three_DASH_four_DASH_five
					} else {
						tmp5 = kw_other
					}
				} else {
					tmp5 = kw_other
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_vector_DASH_list_DASH_case = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_vector_DASH_list_DASH_case.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// -main
	{
		tmp0 := sym__DASH_main.WithMeta(lang.NewMap(kw_expected_DASH_output, lang.NewMap(kw_vector_DASH_list_DASH_tests, lang.NewVector(kw_one_DASH_two, kw_three_DASH_four_DASH_five, kw_other), kw_default_DASH_tests, lang.NewVector(kw_found_DASH_specific, kw_default), kw_int_DASH_tests, lang.NewVector(kw_one, kw_ten, kw_default), kw_string_DASH_tests, lang.NewVector(kw_greeting, kw_farewell, kw_unknown), kw_mixed_DASH_tests, lang.NewVector(kw_number_DASH_one, kw_string_DASH_one, kw_keyword_DASH_one, kw_symbol_DASH_one, kw_default), kw_symbol_DASH_tests, lang.NewVector(kw_got_DASH_foo, kw_got_DASH_bar, kw_default), kw_sparse_DASH_tests, lang.NewVector(kw_one, kw_thousand, kw_not_DASH_found), kw_keyword_DASH_tests, lang.NewVector(kw_got_DASH_foo, kw_got_DASH_bar, kw_default), kw_char_DASH_tests, lang.NewVector(kw_letter_DASH_a, kw_space_DASH_char, kw_other_DASH_char), kw_sparse_DASH_tests_DASH_2, lang.NewVector(kw_five, kw_seventeen, kw_thirty_DASH_three, kw_one_DASH_twenty_DASH_nine, kw_not_DASH_found), kw_no_DASH_default_DASH_tests, lang.NewVector(kw_one, kw_no_DASH_match_DASH_error), kw_collision_DASH_tests, lang.NewVector(kw_boolean_DASH_false, kw_nil_DASH_value, kw_boolean_DASH_true, kw_default), kw_compact_DASH_tests, lang.NewVector(kw_zero, kw_five, kw_not_DASH_found)), kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(117), kw_column, int(7), kw_end_DASH_line, int(131), kw_end_DASH_column, int(7), kw_arglists, lang.NewList(lang.NewVector()), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 0)
			tmp2 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_vector_DASH_list_DASH_case)
			tmp3 := lang.Apply(tmp2, []any{lang.NewList(int64(1), int64(2))})
			tmp4 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_vector_DASH_list_DASH_case)
			tmp5 := lang.Apply(tmp4, []any{lang.NewList(int64(3), int64(4), int64(5))})
			tmp6 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_vector_DASH_list_DASH_case)
			tmp7 := lang.Apply(tmp6, []any{lang.NewList(int64(6), int64(7))})
			tmp8 := lang.NewVector(tmp3, tmp5, tmp7)
			tmp9 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(147), kw_column, int(23), kw_end_DASH_line, int(149), kw_end_DASH_column, int(54))
			tmp10, err := lang.WithMeta(tmp8, tmp9.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp11 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_default_DASH_case)
			tmp12 := lang.Apply(tmp11, []any{kw_specific})
			tmp13 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_default_DASH_case)
			tmp14 := lang.Apply(tmp13, []any{kw_other})
			tmp15 := lang.NewVector(tmp12, tmp14)
			tmp16 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(144), kw_column, int(19), kw_end_DASH_line, int(144), kw_end_DASH_column, int(76))
			tmp17, err := lang.WithMeta(tmp15, tmp16.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp18 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_int_DASH_case)
			tmp19 := lang.Apply(tmp18, []any{int64(1)})
			tmp20 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_int_DASH_case)
			tmp21 := lang.Apply(tmp20, []any{int64(10)})
			tmp22 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_int_DASH_case)
			tmp23 := lang.Apply(tmp22, []any{int64(999)})
			tmp24 := lang.NewVector(tmp19, tmp21, tmp23)
			tmp25 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(132), kw_column, int(15), kw_end_DASH_line, int(132), kw_end_DASH_column, int(72))
			tmp26, err := lang.WithMeta(tmp24, tmp25.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp27 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_string_DASH_case)
			tmp28 := lang.Apply(tmp27, []any{"hello"})
			tmp29 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_string_DASH_case)
			tmp30 := lang.Apply(tmp29, []any{"goodbye"})
			tmp31 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_string_DASH_case)
			tmp32 := lang.Apply(tmp31, []any{"unknown"})
			tmp33 := lang.NewVector(tmp28, tmp30, tmp32)
			tmp34 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(138), kw_column, int(18), kw_end_DASH_line, int(138), kw_end_DASH_column, int(103))
			tmp35, err := lang.WithMeta(tmp33, tmp34.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp36 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_mixed_DASH_case)
			tmp37 := lang.Apply(tmp36, []any{int64(1)})
			tmp38 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_mixed_DASH_case)
			tmp39 := lang.Apply(tmp38, []any{"one"})
			tmp40 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_mixed_DASH_case)
			tmp41 := lang.Apply(tmp40, []any{kw_one})
			tmp42 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_mixed_DASH_case)
			tmp43 := lang.Apply(tmp42, []any{sym_one})
			tmp44 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_mixed_DASH_case)
			tmp45 := lang.Apply(tmp44, []any{float64(2)})
			tmp46 := lang.NewVector(tmp37, tmp39, tmp41, tmp43, tmp45)
			tmp47 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(140), kw_column, int(17), kw_end_DASH_line, int(141), kw_end_DASH_column, int(62))
			tmp48, err := lang.WithMeta(tmp46, tmp47.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp49 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_symbol_DASH_case)
			tmp50 := lang.Apply(tmp49, []any{sym_foo})
			tmp51 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_symbol_DASH_case)
			tmp52 := lang.Apply(tmp51, []any{sym_bar})
			tmp53 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_symbol_DASH_case)
			tmp54 := lang.Apply(tmp53, []any{sym_qux})
			tmp55 := lang.NewVector(tmp50, tmp52, tmp54)
			tmp56 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(139), kw_column, int(18), kw_end_DASH_line, int(139), kw_end_DASH_column, int(90))
			tmp57, err := lang.WithMeta(tmp55, tmp56.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp58 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case)
			tmp59 := lang.Apply(tmp58, []any{int64(1)})
			tmp60 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case)
			tmp61 := lang.Apply(tmp60, []any{int64(1000)})
			tmp62 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case)
			tmp63 := lang.Apply(tmp62, []any{int64(999)})
			tmp64 := lang.NewVector(tmp59, tmp61, tmp63)
			tmp65 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(134), kw_column, int(18), kw_end_DASH_line, int(134), kw_end_DASH_column, int(86))
			tmp66, err := lang.WithMeta(tmp64, tmp65.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp67 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_keyword_DASH_case)
			tmp68 := lang.Apply(tmp67, []any{kw_foo})
			tmp69 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_keyword_DASH_case)
			tmp70 := lang.Apply(tmp69, []any{kw_bar})
			tmp71 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_keyword_DASH_case)
			tmp72 := lang.Apply(tmp71, []any{kw_qux})
			tmp73 := lang.NewVector(tmp68, tmp70, tmp72)
			tmp74 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(137), kw_column, int(19), kw_end_DASH_line, int(137), kw_end_DASH_column, int(94))
			tmp75, err := lang.WithMeta(tmp73, tmp74.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp76 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_char_DASH_case)
			tmp77 := lang.Apply(tmp76, []any{lang.NewChar(97)})
			tmp78 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_char_DASH_case)
			tmp79 := lang.Apply(tmp78, []any{lang.NewChar(32)})
			tmp80 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_char_DASH_case)
			tmp81 := lang.Apply(tmp80, []any{lang.NewChar(122)})
			tmp82 := lang.NewVector(tmp77, tmp79, tmp81)
			tmp83 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(146), kw_column, int(16), kw_end_DASH_line, int(146), kw_end_DASH_column, int(80))
			tmp84, err := lang.WithMeta(tmp82, tmp83.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp85 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case_DASH_2)
			tmp86 := lang.Apply(tmp85, []any{int64(5)})
			tmp87 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case_DASH_2)
			tmp88 := lang.Apply(tmp87, []any{int64(17)})
			tmp89 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case_DASH_2)
			tmp90 := lang.Apply(tmp89, []any{int64(33)})
			tmp91 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case_DASH_2)
			tmp92 := lang.Apply(tmp91, []any{int64(129)})
			tmp93 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_sparse_DASH_case_DASH_2)
			tmp94 := lang.Apply(tmp93, []any{int64(1000)})
			tmp95 := lang.NewVector(tmp86, tmp88, tmp90, tmp92, tmp94)
			tmp96 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(135), kw_column, int(20), kw_end_DASH_line, int(136), kw_end_DASH_column, int(95))
			tmp97, err := lang.WithMeta(tmp95, tmp96.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp98 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_no_DASH_default)
			tmp99 := lang.Apply(tmp98, []any{int64(1)})
			tmp100 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_no_DASH_default)
			tmp101 := lang.Apply(tmp100, []any{int64(3)})
			tmp102 := lang.NewVector(tmp99, tmp101)
			tmp103 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(145), kw_column, int(22), kw_end_DASH_line, int(145), kw_end_DASH_column, int(62))
			tmp104, err := lang.WithMeta(tmp102, tmp103.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp105 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_collision_DASH_case)
			tmp106 := lang.Apply(tmp105, []any{false})
			tmp107 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_collision_DASH_case)
			tmp108 := lang.Apply(tmp107, []any{nil})
			tmp109 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_collision_DASH_case)
			tmp110 := lang.Apply(tmp109, []any{true})
			tmp111 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_collision_DASH_case)
			tmp112 := lang.Apply(tmp111, []any{"other"})
			tmp113 := lang.NewVector(tmp106, tmp108, tmp110, tmp112)
			tmp114 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(142), kw_column, int(21), kw_end_DASH_line, int(143), kw_end_DASH_column, int(78))
			tmp115, err := lang.WithMeta(tmp113, tmp114.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp116 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_compact_DASH_case)
			tmp117 := lang.Apply(tmp116, []any{int64(0)})
			tmp118 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_compact_DASH_case)
			tmp119 := lang.Apply(tmp118, []any{int64(5)})
			tmp120 := checkDerefVar(var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_compact_DASH_case)
			tmp121 := lang.Apply(tmp120, []any{int64(10)})
			tmp122 := lang.NewVector(tmp117, tmp119, tmp121)
			tmp123 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(133), kw_column, int(19), kw_end_DASH_line, int(133), kw_end_DASH_column, int(86))
			tmp124, err := lang.WithMeta(tmp122, tmp123.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			tmp125 := lang.NewMap(kw_vector_DASH_list_DASH_tests, tmp10, kw_default_DASH_tests, tmp17, kw_int_DASH_tests, tmp26, kw_string_DASH_tests, tmp35, kw_mixed_DASH_tests, tmp48, kw_symbol_DASH_tests, tmp57, kw_sparse_DASH_tests, tmp66, kw_keyword_DASH_tests, tmp75, kw_char_DASH_tests, tmp84, kw_sparse_DASH_tests_DASH_2, tmp97, kw_no_DASH_default_DASH_tests, tmp104, kw_collision_DASH_tests, tmp115, kw_compact_DASH_tests, tmp124)
			tmp126 := lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(132), kw_column, int(3), kw_end_DASH_line, int(149), kw_end_DASH_column, int(55))
			tmp127, err := lang.WithMeta(tmp125, tmp126.(lang.IPersistentMap))
			if err != nil {
				panic(err)
			}
			return tmp127
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive__DASH_main = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive__DASH_main.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-collision-case
	{
		tmp0 := sym_test_DASH_collision_DASH_case.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(79), kw_column, int(7), kw_end_DASH_line, int(79), kw_end_DASH_column, int(25), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			{ // let
				// let binding "G__374"
				var v4 any = v2
				_ = v4
				// case
				var tmp5 any
				var tmp6 int64
				tmp6 = int64(uint32(lang.Hash(v4)>>3) & uint32(1))
				// case entry 0 (key=1, collision=true)
				if tmp6 == 1 {
					var tmp7 any
					{ // let
						// let binding "pred__375"
						tmp8 := checkDerefVar(var_clojure_DOT_core__EQ_)
						var v9 any = tmp8
						_ = v9
						// let binding "expr__376"
						var v10 any = v4
						_ = v10
						var tmp11 any
						tmp12 := lang.Apply(v9, []any{false, v10})
						if lang.IsTruthy(tmp12) {
							tmp11 = kw_boolean_DASH_false
						} else {
							var tmp13 any
							tmp14 := lang.Apply(v9, []any{nil, v10})
							if lang.IsTruthy(tmp14) {
								tmp13 = kw_nil_DASH_value
							} else {
								tmp13 = kw_default
							}
							tmp11 = tmp13
						}
						tmp7 = tmp11
					} // end let
					tmp5 = tmp7
					// case entry 1 (key=0, collision=true)
				} else if tmp6 == 0 {
					tmp5 = kw_boolean_DASH_true
				} else {
					tmp5 = kw_default
				}
				tmp3 = tmp5
			} // end let
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_collision_DASH_case = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_collision_DASH_case.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
	// test-no-default
	{
		tmp0 := sym_test_DASH_no_DASH_default.WithMeta(lang.NewMap(kw_file, "codegen/test/case_comprehensive.glj", kw_line, int(93), kw_column, int(7), kw_end_DASH_line, int(93), kw_end_DASH_column, int(21), kw_arglists, lang.NewList(lang.NewVector(sym_x)), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_case_DASH_comprehensive))).(*lang.Symbol)
		var tmp1 lang.FnFunc
		tmp1 = lang.NewFnFunc(func(args ...any) any {
			checkArity(args, 1)
			v2 := args[0]
			_ = v2
			var tmp3 any
			func() {
				defer func() {
					if r := recover(); r != nil {
						if lang.CatchMatches(r, lang.Builtins["any"]) {
							v4 := r
							_ = v4
							tmp3 = kw_no_DASH_match_DASH_error
						} else {
							panic(r)
						}
					}
				}()
				var tmp4 any
				{ // let
					// let binding "G__378"
					var v5 any = v2
					_ = v5
					// case
					var tmp6 any
					var tmp7 int64
					switch v := v5.(type) {
					case int64:
						tmp7 = v
					case int:
						tmp7 = int64(v)
					case int32:
						tmp7 = int64(v)
					case int16:
						tmp7 = int64(v)
					case int8:
						tmp7 = int64(v)
					default:
						tmp7 = -1 // won't match any case
					}
					// case entry 0 (key=1, collision=false)
					if tmp7 == 1 {
						tmp6 = kw_one
						// case entry 1 (key=2, collision=false)
					} else if tmp7 == 2 {
						tmp6 = kw_two
					} else {
						tmp8 := checkDerefVar(var_clojure_DOT_core_str)
						tmp9 := lang.Apply(tmp8, []any{"No matching clause: ", v5})
						tmp10 := lang.Apply(lang.NewIllegalArgumentError, []any{tmp9})
						panic(tmp10)
					}
					tmp4 = tmp6
				} // end let
				tmp3 = tmp4
			}()
			return tmp3
		})
		tmp1 = tmp1.WithMeta(lang.NewMap(kw_rettag, nil)).(lang.FnFunc)
		var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_no_DASH_default = ns.InternWithValue(tmp0, tmp1, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_case_DASH_comprehensive_test_DASH_no_DASH_default.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
