// Code generated by glojure codegen. DO NOT EDIT.

package const_DASH_keyword

import (
	fmt "fmt"
	lang "github.com/glojurelang/glojure/pkg/lang"
	runtime "github.com/glojurelang/glojure/pkg/runtime"
	reflect "reflect"
)

func init() {
	runtime.RegisterNSLoader("codegen/test/const_keyword", LoadNS)
}

func checkDerefVar(v *lang.Var) any {
	if v.IsMacro() {
		panic(lang.NewIllegalArgumentError(fmt.Sprintf("can't take value of macro: %v", v)))
	}
	return v.Get()
}

func checkArity(args []any, expected int) {
	if len(args) != expected {
		panic(lang.NewIllegalArgumentError("wrong number of arguments (" + fmt.Sprint(len(args)) + ")"))
	}
}

// LoadNS initializes the namespace "codegen.test.const-keyword"
func LoadNS() {
	sym_codegen_DOT_test_DOT_const_DASH_keyword := lang.NewSymbol("codegen.test.const-keyword")
	sym_const_DASH_keyword := lang.NewSymbol("const-keyword")
	kw_column := lang.NewKeyword("column")
	kw_end_DASH_column := lang.NewKeyword("end-column")
	kw_end_DASH_line := lang.NewKeyword("end-line")
	kw_file := lang.NewKeyword("file")
	kw_foo := lang.NewKeyword("foo")
	kw_line := lang.NewKeyword("line")
	kw_ns := lang.NewKeyword("ns")
	// var codegen.test.const-keyword/const-keyword
	var_codegen_DOT_test_DOT_const_DASH_keyword_const_DASH_keyword := lang.InternVarName(sym_codegen_DOT_test_DOT_const_DASH_keyword, sym_const_DASH_keyword)
	// reference fmt to avoid unused import error
	_ = fmt.Printf
	// reference reflect to avoid unused import error
	_ = reflect.TypeOf
	ns := lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_const_DASH_keyword)
	_ = ns
	// const-keyword
	{
		tmp0 := sym_const_DASH_keyword.WithMeta(lang.NewMap(kw_file, "codegen/test/const_keyword.glj", kw_line, int(3), kw_column, int(6), kw_end_DASH_line, int(3), kw_end_DASH_column, int(18), kw_ns, lang.FindOrCreateNamespace(sym_codegen_DOT_test_DOT_const_DASH_keyword))).(*lang.Symbol)
		var_codegen_DOT_test_DOT_const_DASH_keyword_const_DASH_keyword = ns.InternWithValue(tmp0, kw_foo, true)
		if tmp0.Meta() != nil {
			var_codegen_DOT_test_DOT_const_DASH_keyword_const_DASH_keyword.SetMeta(tmp0.Meta().(lang.IPersistentMap))
		}
	}
}
