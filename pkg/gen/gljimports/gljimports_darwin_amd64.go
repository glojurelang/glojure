//go:build amd64 && darwin

// GENERATED FILE. DO NOT EDIT.
package gljimports

import (
	archive_tar "archive/tar"
	archive_zip "archive/zip"
	bufio "bufio"
	bytes "bytes"
	compress_bzip2 "compress/bzip2"
	compress_flate "compress/flate"
	compress_gzip "compress/gzip"
	compress_lzw "compress/lzw"
	compress_zlib "compress/zlib"
	container_heap "container/heap"
	container_list "container/list"
	container_ring "container/ring"
	context "context"
	crypto "crypto"
	crypto_aes "crypto/aes"
	crypto_cipher "crypto/cipher"
	crypto_des "crypto/des"
	crypto_dsa "crypto/dsa"
	crypto_ecdsa "crypto/ecdsa"
	crypto_ed25519 "crypto/ed25519"
	crypto_elliptic "crypto/elliptic"
	crypto_hmac "crypto/hmac"
	crypto_md5 "crypto/md5"
	crypto_rand "crypto/rand"
	crypto_rc4 "crypto/rc4"
	crypto_rsa "crypto/rsa"
	crypto_sha1 "crypto/sha1"
	crypto_sha256 "crypto/sha256"
	crypto_sha512 "crypto/sha512"
	crypto_subtle "crypto/subtle"
	crypto_tls "crypto/tls"
	crypto_x509 "crypto/x509"
	crypto_x509_pkix "crypto/x509/pkix"
	database_sql "database/sql"
	database_sql_driver "database/sql/driver"
	debug_buildinfo "debug/buildinfo"
	debug_dwarf "debug/dwarf"
	debug_elf "debug/elf"
	debug_gosym "debug/gosym"
	debug_macho "debug/macho"
	debug_pe "debug/pe"
	debug_plan9obj "debug/plan9obj"
	embed "embed"
	encoding "encoding"
	encoding_ascii85 "encoding/ascii85"
	encoding_asn1 "encoding/asn1"
	encoding_base32 "encoding/base32"
	encoding_base64 "encoding/base64"
	encoding_binary "encoding/binary"
	encoding_csv "encoding/csv"
	encoding_gob "encoding/gob"
	encoding_hex "encoding/hex"
	encoding_json "encoding/json"
	encoding_pem "encoding/pem"
	encoding_xml "encoding/xml"
	errors "errors"
	expvar "expvar"
	flag "flag"
	fmt "fmt"
	github_com_glojurelang_glojure_pkg_lang "github.com/glojurelang/glojure/pkg/lang"
	github_com_glojurelang_glojure_pkg_runtime "github.com/glojurelang/glojure/pkg/runtime"
	go_ast "go/ast"
	go_build "go/build"
	go_build_constraint "go/build/constraint"
	go_constant "go/constant"
	go_doc "go/doc"
	go_doc_comment "go/doc/comment"
	go_format "go/format"
	go_importer "go/importer"
	go_parser "go/parser"
	go_printer "go/printer"
	go_scanner "go/scanner"
	go_token "go/token"
	go_types "go/types"
	hash "hash"
	hash_adler32 "hash/adler32"
	hash_crc32 "hash/crc32"
	hash_crc64 "hash/crc64"
	hash_fnv "hash/fnv"
	hash_maphash "hash/maphash"
	html "html"
	html_template "html/template"
	image "image"
	image_color "image/color"
	image_color_palette "image/color/palette"
	image_draw "image/draw"
	image_gif "image/gif"
	image_jpeg "image/jpeg"
	image_png "image/png"
	index_suffixarray "index/suffixarray"
	io "io"
	io_fs "io/fs"
	io_ioutil "io/ioutil"
	log "log"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	math_cmplx "math/cmplx"
	math_rand "math/rand"
	mime "mime"
	mime_multipart "mime/multipart"
	mime_quotedprintable "mime/quotedprintable"
	net "net"
	net_http "net/http"
	net_http_cgi "net/http/cgi"
	net_http_cookiejar "net/http/cookiejar"
	net_http_fcgi "net/http/fcgi"
	net_http_httptest "net/http/httptest"
	net_http_httptrace "net/http/httptrace"
	net_http_pprof "net/http/pprof"
	net_mail "net/mail"
	net_netip "net/netip"
	net_rpc "net/rpc"
	net_rpc_jsonrpc "net/rpc/jsonrpc"
	net_smtp "net/smtp"
	net_textproto "net/textproto"
	net_url "net/url"
	os "os"
	os_exec "os/exec"
	os_signal "os/signal"
	os_user "os/user"
	path "path"
	path_filepath "path/filepath"
	plugin "plugin"
	reflect "reflect"
	regexp "regexp"
	regexp_syntax "regexp/syntax"
	runtime "runtime"
	runtime_debug "runtime/debug"
	runtime_metrics "runtime/metrics"
	runtime_pprof "runtime/pprof"
	runtime_trace "runtime/trace"
	sort "sort"
	strconv "strconv"
	strings "strings"
	sync "sync"
	sync_atomic "sync/atomic"
	syscall "syscall"
	testing "testing"
	testing_fstest "testing/fstest"
	testing_iotest "testing/iotest"
	testing_quick "testing/quick"
	text_scanner "text/scanner"
	text_tabwriter "text/tabwriter"
	text_template "text/template"
	text_template_parse "text/template/parse"
	time "time"
	unicode "unicode"
	unicode_utf16 "unicode/utf16"
	unicode_utf8 "unicode/utf8"
	unsafe "unsafe"
)

func RegisterImports(_register func(string, interface{})) {
	// package archive/tar
	////////////////////////////////////////
	_register("archive/tar.ErrFieldTooLong", archive_tar.ErrFieldTooLong)
	_register("archive/tar.ErrHeader", archive_tar.ErrHeader)
	_register("archive/tar.ErrWriteAfterClose", archive_tar.ErrWriteAfterClose)
	_register("archive/tar.ErrWriteTooLong", archive_tar.ErrWriteTooLong)
	_register("archive/tar.FileInfoHeader", archive_tar.FileInfoHeader)
	_register("archive/tar.Format", reflect.TypeOf((*archive_tar.Format)(nil)).Elem())
	_register("archive/tar.FormatGNU", archive_tar.FormatGNU)
	_register("archive/tar.FormatPAX", archive_tar.FormatPAX)
	_register("archive/tar.FormatUSTAR", archive_tar.FormatUSTAR)
	_register("archive/tar.FormatUnknown", archive_tar.FormatUnknown)
	_register("archive/tar.Header", reflect.TypeOf((*archive_tar.Header)(nil)).Elem())
	_register("archive/tar.NewReader", archive_tar.NewReader)
	_register("archive/tar.NewWriter", archive_tar.NewWriter)
	_register("archive/tar.Reader", reflect.TypeOf((*archive_tar.Reader)(nil)).Elem())
	_register("archive/tar.TypeBlock", archive_tar.TypeBlock)
	_register("archive/tar.TypeChar", archive_tar.TypeChar)
	_register("archive/tar.TypeCont", archive_tar.TypeCont)
	_register("archive/tar.TypeDir", archive_tar.TypeDir)
	_register("archive/tar.TypeFifo", archive_tar.TypeFifo)
	_register("archive/tar.TypeGNULongLink", archive_tar.TypeGNULongLink)
	_register("archive/tar.TypeGNULongName", archive_tar.TypeGNULongName)
	_register("archive/tar.TypeGNUSparse", archive_tar.TypeGNUSparse)
	_register("archive/tar.TypeLink", archive_tar.TypeLink)
	_register("archive/tar.TypeReg", archive_tar.TypeReg)
	_register("archive/tar.TypeRegA", archive_tar.TypeRegA)
	_register("archive/tar.TypeSymlink", archive_tar.TypeSymlink)
	_register("archive/tar.TypeXGlobalHeader", archive_tar.TypeXGlobalHeader)
	_register("archive/tar.TypeXHeader", archive_tar.TypeXHeader)
	_register("archive/tar.Writer", reflect.TypeOf((*archive_tar.Writer)(nil)).Elem())

	// package archive/zip
	////////////////////////////////////////
	_register("archive/zip.Compressor", reflect.TypeOf((*archive_zip.Compressor)(nil)).Elem())
	_register("archive/zip.Decompressor", reflect.TypeOf((*archive_zip.Decompressor)(nil)).Elem())
	_register("archive/zip.Deflate", archive_zip.Deflate)
	_register("archive/zip.ErrAlgorithm", archive_zip.ErrAlgorithm)
	_register("archive/zip.ErrChecksum", archive_zip.ErrChecksum)
	_register("archive/zip.ErrFormat", archive_zip.ErrFormat)
	_register("archive/zip.File", reflect.TypeOf((*archive_zip.File)(nil)).Elem())
	_register("archive/zip.FileHeader", reflect.TypeOf((*archive_zip.FileHeader)(nil)).Elem())
	_register("archive/zip.FileInfoHeader", archive_zip.FileInfoHeader)
	_register("archive/zip.NewReader", archive_zip.NewReader)
	_register("archive/zip.NewWriter", archive_zip.NewWriter)
	_register("archive/zip.OpenReader", archive_zip.OpenReader)
	_register("archive/zip.ReadCloser", reflect.TypeOf((*archive_zip.ReadCloser)(nil)).Elem())
	_register("archive/zip.Reader", reflect.TypeOf((*archive_zip.Reader)(nil)).Elem())
	_register("archive/zip.RegisterCompressor", archive_zip.RegisterCompressor)
	_register("archive/zip.RegisterDecompressor", archive_zip.RegisterDecompressor)
	_register("archive/zip.Store", archive_zip.Store)
	_register("archive/zip.Writer", reflect.TypeOf((*archive_zip.Writer)(nil)).Elem())

	// package bufio
	////////////////////////////////////////
	_register("bufio.ErrAdvanceTooFar", bufio.ErrAdvanceTooFar)
	_register("bufio.ErrBadReadCount", bufio.ErrBadReadCount)
	_register("bufio.ErrBufferFull", bufio.ErrBufferFull)
	_register("bufio.ErrFinalToken", bufio.ErrFinalToken)
	_register("bufio.ErrInvalidUnreadByte", bufio.ErrInvalidUnreadByte)
	_register("bufio.ErrInvalidUnreadRune", bufio.ErrInvalidUnreadRune)
	_register("bufio.ErrNegativeAdvance", bufio.ErrNegativeAdvance)
	_register("bufio.ErrNegativeCount", bufio.ErrNegativeCount)
	_register("bufio.ErrTooLong", bufio.ErrTooLong)
	_register("bufio.MaxScanTokenSize", bufio.MaxScanTokenSize)
	_register("bufio.NewReadWriter", bufio.NewReadWriter)
	_register("bufio.NewReader", bufio.NewReader)
	_register("bufio.NewReaderSize", bufio.NewReaderSize)
	_register("bufio.NewScanner", bufio.NewScanner)
	_register("bufio.NewWriter", bufio.NewWriter)
	_register("bufio.NewWriterSize", bufio.NewWriterSize)
	_register("bufio.ReadWriter", reflect.TypeOf((*bufio.ReadWriter)(nil)).Elem())
	_register("bufio.Reader", reflect.TypeOf((*bufio.Reader)(nil)).Elem())
	_register("bufio.ScanBytes", bufio.ScanBytes)
	_register("bufio.ScanLines", bufio.ScanLines)
	_register("bufio.ScanRunes", bufio.ScanRunes)
	_register("bufio.ScanWords", bufio.ScanWords)
	_register("bufio.Scanner", reflect.TypeOf((*bufio.Scanner)(nil)).Elem())
	_register("bufio.SplitFunc", reflect.TypeOf((*bufio.SplitFunc)(nil)).Elem())
	_register("bufio.Writer", reflect.TypeOf((*bufio.Writer)(nil)).Elem())

	// package bytes
	////////////////////////////////////////
	_register("bytes.Buffer", reflect.TypeOf((*bytes.Buffer)(nil)).Elem())
	_register("bytes.Compare", bytes.Compare)
	_register("bytes.Contains", bytes.Contains)
	_register("bytes.ContainsAny", bytes.ContainsAny)
	_register("bytes.ContainsRune", bytes.ContainsRune)
	_register("bytes.Count", bytes.Count)
	_register("bytes.Cut", bytes.Cut)
	_register("bytes.Equal", bytes.Equal)
	_register("bytes.EqualFold", bytes.EqualFold)
	_register("bytes.ErrTooLarge", bytes.ErrTooLarge)
	_register("bytes.Fields", bytes.Fields)
	_register("bytes.FieldsFunc", bytes.FieldsFunc)
	_register("bytes.HasPrefix", bytes.HasPrefix)
	_register("bytes.HasSuffix", bytes.HasSuffix)
	_register("bytes.Index", bytes.Index)
	_register("bytes.IndexAny", bytes.IndexAny)
	_register("bytes.IndexByte", bytes.IndexByte)
	_register("bytes.IndexFunc", bytes.IndexFunc)
	_register("bytes.IndexRune", bytes.IndexRune)
	_register("bytes.Join", bytes.Join)
	_register("bytes.LastIndex", bytes.LastIndex)
	_register("bytes.LastIndexAny", bytes.LastIndexAny)
	_register("bytes.LastIndexByte", bytes.LastIndexByte)
	_register("bytes.LastIndexFunc", bytes.LastIndexFunc)
	_register("bytes.Map", bytes.Map)
	_register("bytes.MinRead", bytes.MinRead)
	_register("bytes.NewBuffer", bytes.NewBuffer)
	_register("bytes.NewBufferString", bytes.NewBufferString)
	_register("bytes.NewReader", bytes.NewReader)
	_register("bytes.Reader", reflect.TypeOf((*bytes.Reader)(nil)).Elem())
	_register("bytes.Repeat", bytes.Repeat)
	_register("bytes.Replace", bytes.Replace)
	_register("bytes.ReplaceAll", bytes.ReplaceAll)
	_register("bytes.Runes", bytes.Runes)
	_register("bytes.Split", bytes.Split)
	_register("bytes.SplitAfter", bytes.SplitAfter)
	_register("bytes.SplitAfterN", bytes.SplitAfterN)
	_register("bytes.SplitN", bytes.SplitN)
	_register("bytes.Title", bytes.Title)
	_register("bytes.ToLower", bytes.ToLower)
	_register("bytes.ToLowerSpecial", bytes.ToLowerSpecial)
	_register("bytes.ToTitle", bytes.ToTitle)
	_register("bytes.ToTitleSpecial", bytes.ToTitleSpecial)
	_register("bytes.ToUpper", bytes.ToUpper)
	_register("bytes.ToUpperSpecial", bytes.ToUpperSpecial)
	_register("bytes.ToValidUTF8", bytes.ToValidUTF8)
	_register("bytes.Trim", bytes.Trim)
	_register("bytes.TrimFunc", bytes.TrimFunc)
	_register("bytes.TrimLeft", bytes.TrimLeft)
	_register("bytes.TrimLeftFunc", bytes.TrimLeftFunc)
	_register("bytes.TrimPrefix", bytes.TrimPrefix)
	_register("bytes.TrimRight", bytes.TrimRight)
	_register("bytes.TrimRightFunc", bytes.TrimRightFunc)
	_register("bytes.TrimSpace", bytes.TrimSpace)
	_register("bytes.TrimSuffix", bytes.TrimSuffix)

	// package compress/bzip2
	////////////////////////////////////////
	_register("compress/bzip2.NewReader", compress_bzip2.NewReader)
	_register("compress/bzip2.StructuralError", reflect.TypeOf((*compress_bzip2.StructuralError)(nil)).Elem())

	// package compress/flate
	////////////////////////////////////////
	_register("compress/flate.BestCompression", compress_flate.BestCompression)
	_register("compress/flate.BestSpeed", compress_flate.BestSpeed)
	_register("compress/flate.CorruptInputError", reflect.TypeOf((*compress_flate.CorruptInputError)(nil)).Elem())
	_register("compress/flate.DefaultCompression", compress_flate.DefaultCompression)
	_register("compress/flate.HuffmanOnly", compress_flate.HuffmanOnly)
	_register("compress/flate.InternalError", reflect.TypeOf((*compress_flate.InternalError)(nil)).Elem())
	_register("compress/flate.NewReader", compress_flate.NewReader)
	_register("compress/flate.NewReaderDict", compress_flate.NewReaderDict)
	_register("compress/flate.NewWriter", compress_flate.NewWriter)
	_register("compress/flate.NewWriterDict", compress_flate.NewWriterDict)
	_register("compress/flate.NoCompression", compress_flate.NoCompression)
	_register("compress/flate.ReadError", reflect.TypeOf((*compress_flate.ReadError)(nil)).Elem())
	_register("compress/flate.Reader", reflect.TypeOf((*compress_flate.Reader)(nil)).Elem())
	_register("compress/flate.Resetter", reflect.TypeOf((*compress_flate.Resetter)(nil)).Elem())
	_register("compress/flate.WriteError", reflect.TypeOf((*compress_flate.WriteError)(nil)).Elem())
	_register("compress/flate.Writer", reflect.TypeOf((*compress_flate.Writer)(nil)).Elem())

	// package compress/gzip
	////////////////////////////////////////
	_register("compress/gzip.BestCompression", compress_gzip.BestCompression)
	_register("compress/gzip.BestSpeed", compress_gzip.BestSpeed)
	_register("compress/gzip.DefaultCompression", compress_gzip.DefaultCompression)
	_register("compress/gzip.ErrChecksum", compress_gzip.ErrChecksum)
	_register("compress/gzip.ErrHeader", compress_gzip.ErrHeader)
	_register("compress/gzip.Header", reflect.TypeOf((*compress_gzip.Header)(nil)).Elem())
	_register("compress/gzip.HuffmanOnly", compress_gzip.HuffmanOnly)
	_register("compress/gzip.NewReader", compress_gzip.NewReader)
	_register("compress/gzip.NewWriter", compress_gzip.NewWriter)
	_register("compress/gzip.NewWriterLevel", compress_gzip.NewWriterLevel)
	_register("compress/gzip.NoCompression", compress_gzip.NoCompression)
	_register("compress/gzip.Reader", reflect.TypeOf((*compress_gzip.Reader)(nil)).Elem())
	_register("compress/gzip.Writer", reflect.TypeOf((*compress_gzip.Writer)(nil)).Elem())

	// package compress/lzw
	////////////////////////////////////////
	_register("compress/lzw.LSB", compress_lzw.LSB)
	_register("compress/lzw.MSB", compress_lzw.MSB)
	_register("compress/lzw.NewReader", compress_lzw.NewReader)
	_register("compress/lzw.NewWriter", compress_lzw.NewWriter)
	_register("compress/lzw.Order", reflect.TypeOf((*compress_lzw.Order)(nil)).Elem())
	_register("compress/lzw.Reader", reflect.TypeOf((*compress_lzw.Reader)(nil)).Elem())
	_register("compress/lzw.Writer", reflect.TypeOf((*compress_lzw.Writer)(nil)).Elem())

	// package compress/zlib
	////////////////////////////////////////
	_register("compress/zlib.BestCompression", compress_zlib.BestCompression)
	_register("compress/zlib.BestSpeed", compress_zlib.BestSpeed)
	_register("compress/zlib.DefaultCompression", compress_zlib.DefaultCompression)
	_register("compress/zlib.ErrChecksum", compress_zlib.ErrChecksum)
	_register("compress/zlib.ErrDictionary", compress_zlib.ErrDictionary)
	_register("compress/zlib.ErrHeader", compress_zlib.ErrHeader)
	_register("compress/zlib.HuffmanOnly", compress_zlib.HuffmanOnly)
	_register("compress/zlib.NewReader", compress_zlib.NewReader)
	_register("compress/zlib.NewReaderDict", compress_zlib.NewReaderDict)
	_register("compress/zlib.NewWriter", compress_zlib.NewWriter)
	_register("compress/zlib.NewWriterLevel", compress_zlib.NewWriterLevel)
	_register("compress/zlib.NewWriterLevelDict", compress_zlib.NewWriterLevelDict)
	_register("compress/zlib.NoCompression", compress_zlib.NoCompression)
	_register("compress/zlib.Resetter", reflect.TypeOf((*compress_zlib.Resetter)(nil)).Elem())
	_register("compress/zlib.Writer", reflect.TypeOf((*compress_zlib.Writer)(nil)).Elem())

	// package container/heap
	////////////////////////////////////////
	_register("container/heap.Fix", container_heap.Fix)
	_register("container/heap.Init", container_heap.Init)
	_register("container/heap.Interface", reflect.TypeOf((*container_heap.Interface)(nil)).Elem())
	_register("container/heap.Pop", container_heap.Pop)
	_register("container/heap.Push", container_heap.Push)
	_register("container/heap.Remove", container_heap.Remove)

	// package container/list
	////////////////////////////////////////
	_register("container/list.Element", reflect.TypeOf((*container_list.Element)(nil)).Elem())
	_register("container/list.List", reflect.TypeOf((*container_list.List)(nil)).Elem())
	_register("container/list.New", container_list.New)

	// package container/ring
	////////////////////////////////////////
	_register("container/ring.New", container_ring.New)
	_register("container/ring.Ring", reflect.TypeOf((*container_ring.Ring)(nil)).Elem())

	// package context
	////////////////////////////////////////
	_register("context.Background", context.Background)
	_register("context.CancelFunc", reflect.TypeOf((*context.CancelFunc)(nil)).Elem())
	_register("context.Canceled", context.Canceled)
	_register("context.Context", reflect.TypeOf((*context.Context)(nil)).Elem())
	_register("context.DeadlineExceeded", context.DeadlineExceeded)
	_register("context.TODO", context.TODO)
	_register("context.WithCancel", context.WithCancel)
	_register("context.WithDeadline", context.WithDeadline)
	_register("context.WithTimeout", context.WithTimeout)
	_register("context.WithValue", context.WithValue)

	// package crypto
	////////////////////////////////////////
	_register("crypto.BLAKE2b_256", crypto.BLAKE2b_256)
	_register("crypto.BLAKE2b_384", crypto.BLAKE2b_384)
	_register("crypto.BLAKE2b_512", crypto.BLAKE2b_512)
	_register("crypto.BLAKE2s_256", crypto.BLAKE2s_256)
	_register("crypto.Decrypter", reflect.TypeOf((*crypto.Decrypter)(nil)).Elem())
	_register("crypto.DecrypterOpts", reflect.TypeOf((*crypto.DecrypterOpts)(nil)).Elem())
	_register("crypto.Hash", reflect.TypeOf((*crypto.Hash)(nil)).Elem())
	_register("crypto.MD4", crypto.MD4)
	_register("crypto.MD5", crypto.MD5)
	_register("crypto.MD5SHA1", crypto.MD5SHA1)
	_register("crypto.PrivateKey", reflect.TypeOf((*crypto.PrivateKey)(nil)).Elem())
	_register("crypto.PublicKey", reflect.TypeOf((*crypto.PublicKey)(nil)).Elem())
	_register("crypto.RIPEMD160", crypto.RIPEMD160)
	_register("crypto.RegisterHash", crypto.RegisterHash)
	_register("crypto.SHA1", crypto.SHA1)
	_register("crypto.SHA224", crypto.SHA224)
	_register("crypto.SHA256", crypto.SHA256)
	_register("crypto.SHA384", crypto.SHA384)
	_register("crypto.SHA3_224", crypto.SHA3_224)
	_register("crypto.SHA3_256", crypto.SHA3_256)
	_register("crypto.SHA3_384", crypto.SHA3_384)
	_register("crypto.SHA3_512", crypto.SHA3_512)
	_register("crypto.SHA512", crypto.SHA512)
	_register("crypto.SHA512_224", crypto.SHA512_224)
	_register("crypto.SHA512_256", crypto.SHA512_256)
	_register("crypto.Signer", reflect.TypeOf((*crypto.Signer)(nil)).Elem())
	_register("crypto.SignerOpts", reflect.TypeOf((*crypto.SignerOpts)(nil)).Elem())

	// package crypto/aes
	////////////////////////////////////////
	_register("crypto/aes.BlockSize", crypto_aes.BlockSize)
	_register("crypto/aes.KeySizeError", reflect.TypeOf((*crypto_aes.KeySizeError)(nil)).Elem())
	_register("crypto/aes.NewCipher", crypto_aes.NewCipher)

	// package crypto/cipher
	////////////////////////////////////////
	_register("crypto/cipher.AEAD", reflect.TypeOf((*crypto_cipher.AEAD)(nil)).Elem())
	_register("crypto/cipher.Block", reflect.TypeOf((*crypto_cipher.Block)(nil)).Elem())
	_register("crypto/cipher.BlockMode", reflect.TypeOf((*crypto_cipher.BlockMode)(nil)).Elem())
	_register("crypto/cipher.NewCBCDecrypter", crypto_cipher.NewCBCDecrypter)
	_register("crypto/cipher.NewCBCEncrypter", crypto_cipher.NewCBCEncrypter)
	_register("crypto/cipher.NewCFBDecrypter", crypto_cipher.NewCFBDecrypter)
	_register("crypto/cipher.NewCFBEncrypter", crypto_cipher.NewCFBEncrypter)
	_register("crypto/cipher.NewCTR", crypto_cipher.NewCTR)
	_register("crypto/cipher.NewGCM", crypto_cipher.NewGCM)
	_register("crypto/cipher.NewGCMWithNonceSize", crypto_cipher.NewGCMWithNonceSize)
	_register("crypto/cipher.NewGCMWithTagSize", crypto_cipher.NewGCMWithTagSize)
	_register("crypto/cipher.NewOFB", crypto_cipher.NewOFB)
	_register("crypto/cipher.Stream", reflect.TypeOf((*crypto_cipher.Stream)(nil)).Elem())
	_register("crypto/cipher.StreamReader", reflect.TypeOf((*crypto_cipher.StreamReader)(nil)).Elem())
	_register("crypto/cipher.StreamWriter", reflect.TypeOf((*crypto_cipher.StreamWriter)(nil)).Elem())

	// package crypto/des
	////////////////////////////////////////
	_register("crypto/des.BlockSize", crypto_des.BlockSize)
	_register("crypto/des.KeySizeError", reflect.TypeOf((*crypto_des.KeySizeError)(nil)).Elem())
	_register("crypto/des.NewCipher", crypto_des.NewCipher)
	_register("crypto/des.NewTripleDESCipher", crypto_des.NewTripleDESCipher)

	// package crypto/dsa
	////////////////////////////////////////
	_register("crypto/dsa.ErrInvalidPublicKey", crypto_dsa.ErrInvalidPublicKey)
	_register("crypto/dsa.GenerateKey", crypto_dsa.GenerateKey)
	_register("crypto/dsa.GenerateParameters", crypto_dsa.GenerateParameters)
	_register("crypto/dsa.L1024N160", crypto_dsa.L1024N160)
	_register("crypto/dsa.L2048N224", crypto_dsa.L2048N224)
	_register("crypto/dsa.L2048N256", crypto_dsa.L2048N256)
	_register("crypto/dsa.L3072N256", crypto_dsa.L3072N256)
	_register("crypto/dsa.ParameterSizes", reflect.TypeOf((*crypto_dsa.ParameterSizes)(nil)).Elem())
	_register("crypto/dsa.Parameters", reflect.TypeOf((*crypto_dsa.Parameters)(nil)).Elem())
	_register("crypto/dsa.PrivateKey", reflect.TypeOf((*crypto_dsa.PrivateKey)(nil)).Elem())
	_register("crypto/dsa.PublicKey", reflect.TypeOf((*crypto_dsa.PublicKey)(nil)).Elem())
	_register("crypto/dsa.Sign", crypto_dsa.Sign)
	_register("crypto/dsa.Verify", crypto_dsa.Verify)

	// package crypto/ecdsa
	////////////////////////////////////////
	_register("crypto/ecdsa.GenerateKey", crypto_ecdsa.GenerateKey)
	_register("crypto/ecdsa.PrivateKey", reflect.TypeOf((*crypto_ecdsa.PrivateKey)(nil)).Elem())
	_register("crypto/ecdsa.PublicKey", reflect.TypeOf((*crypto_ecdsa.PublicKey)(nil)).Elem())
	_register("crypto/ecdsa.Sign", crypto_ecdsa.Sign)
	_register("crypto/ecdsa.SignASN1", crypto_ecdsa.SignASN1)
	_register("crypto/ecdsa.Verify", crypto_ecdsa.Verify)
	_register("crypto/ecdsa.VerifyASN1", crypto_ecdsa.VerifyASN1)

	// package crypto/ed25519
	////////////////////////////////////////
	_register("crypto/ed25519.GenerateKey", crypto_ed25519.GenerateKey)
	_register("crypto/ed25519.NewKeyFromSeed", crypto_ed25519.NewKeyFromSeed)
	_register("crypto/ed25519.PrivateKey", reflect.TypeOf((*crypto_ed25519.PrivateKey)(nil)).Elem())
	_register("crypto/ed25519.PrivateKeySize", crypto_ed25519.PrivateKeySize)
	_register("crypto/ed25519.PublicKey", reflect.TypeOf((*crypto_ed25519.PublicKey)(nil)).Elem())
	_register("crypto/ed25519.PublicKeySize", crypto_ed25519.PublicKeySize)
	_register("crypto/ed25519.SeedSize", crypto_ed25519.SeedSize)
	_register("crypto/ed25519.Sign", crypto_ed25519.Sign)
	_register("crypto/ed25519.SignatureSize", crypto_ed25519.SignatureSize)
	_register("crypto/ed25519.Verify", crypto_ed25519.Verify)

	// package crypto/elliptic
	////////////////////////////////////////
	_register("crypto/elliptic.Curve", reflect.TypeOf((*crypto_elliptic.Curve)(nil)).Elem())
	_register("crypto/elliptic.CurveParams", reflect.TypeOf((*crypto_elliptic.CurveParams)(nil)).Elem())
	_register("crypto/elliptic.GenerateKey", crypto_elliptic.GenerateKey)
	_register("crypto/elliptic.Marshal", crypto_elliptic.Marshal)
	_register("crypto/elliptic.MarshalCompressed", crypto_elliptic.MarshalCompressed)
	_register("crypto/elliptic.P224", crypto_elliptic.P224)
	_register("crypto/elliptic.P256", crypto_elliptic.P256)
	_register("crypto/elliptic.P384", crypto_elliptic.P384)
	_register("crypto/elliptic.P521", crypto_elliptic.P521)
	_register("crypto/elliptic.Unmarshal", crypto_elliptic.Unmarshal)
	_register("crypto/elliptic.UnmarshalCompressed", crypto_elliptic.UnmarshalCompressed)

	// package crypto/hmac
	////////////////////////////////////////
	_register("crypto/hmac.Equal", crypto_hmac.Equal)
	_register("crypto/hmac.New", crypto_hmac.New)

	// package crypto/md5
	////////////////////////////////////////
	_register("crypto/md5.BlockSize", crypto_md5.BlockSize)
	_register("crypto/md5.New", crypto_md5.New)
	_register("crypto/md5.Size", crypto_md5.Size)
	_register("crypto/md5.Sum", crypto_md5.Sum)

	// package crypto/rand
	////////////////////////////////////////
	_register("crypto/rand.Int", crypto_rand.Int)
	_register("crypto/rand.Prime", crypto_rand.Prime)
	_register("crypto/rand.Read", crypto_rand.Read)
	_register("crypto/rand.Reader", crypto_rand.Reader)

	// package crypto/rc4
	////////////////////////////////////////
	_register("crypto/rc4.Cipher", reflect.TypeOf((*crypto_rc4.Cipher)(nil)).Elem())
	_register("crypto/rc4.KeySizeError", reflect.TypeOf((*crypto_rc4.KeySizeError)(nil)).Elem())
	_register("crypto/rc4.NewCipher", crypto_rc4.NewCipher)

	// package crypto/rsa
	////////////////////////////////////////
	_register("crypto/rsa.CRTValue", reflect.TypeOf((*crypto_rsa.CRTValue)(nil)).Elem())
	_register("crypto/rsa.DecryptOAEP", crypto_rsa.DecryptOAEP)
	_register("crypto/rsa.DecryptPKCS1v15", crypto_rsa.DecryptPKCS1v15)
	_register("crypto/rsa.DecryptPKCS1v15SessionKey", crypto_rsa.DecryptPKCS1v15SessionKey)
	_register("crypto/rsa.EncryptOAEP", crypto_rsa.EncryptOAEP)
	_register("crypto/rsa.EncryptPKCS1v15", crypto_rsa.EncryptPKCS1v15)
	_register("crypto/rsa.ErrDecryption", crypto_rsa.ErrDecryption)
	_register("crypto/rsa.ErrMessageTooLong", crypto_rsa.ErrMessageTooLong)
	_register("crypto/rsa.ErrVerification", crypto_rsa.ErrVerification)
	_register("crypto/rsa.GenerateKey", crypto_rsa.GenerateKey)
	_register("crypto/rsa.GenerateMultiPrimeKey", crypto_rsa.GenerateMultiPrimeKey)
	_register("crypto/rsa.OAEPOptions", reflect.TypeOf((*crypto_rsa.OAEPOptions)(nil)).Elem())
	_register("crypto/rsa.PKCS1v15DecryptOptions", reflect.TypeOf((*crypto_rsa.PKCS1v15DecryptOptions)(nil)).Elem())
	_register("crypto/rsa.PSSOptions", reflect.TypeOf((*crypto_rsa.PSSOptions)(nil)).Elem())
	_register("crypto/rsa.PSSSaltLengthAuto", crypto_rsa.PSSSaltLengthAuto)
	_register("crypto/rsa.PSSSaltLengthEqualsHash", crypto_rsa.PSSSaltLengthEqualsHash)
	_register("crypto/rsa.PrecomputedValues", reflect.TypeOf((*crypto_rsa.PrecomputedValues)(nil)).Elem())
	_register("crypto/rsa.PrivateKey", reflect.TypeOf((*crypto_rsa.PrivateKey)(nil)).Elem())
	_register("crypto/rsa.PublicKey", reflect.TypeOf((*crypto_rsa.PublicKey)(nil)).Elem())
	_register("crypto/rsa.SignPKCS1v15", crypto_rsa.SignPKCS1v15)
	_register("crypto/rsa.SignPSS", crypto_rsa.SignPSS)
	_register("crypto/rsa.VerifyPKCS1v15", crypto_rsa.VerifyPKCS1v15)
	_register("crypto/rsa.VerifyPSS", crypto_rsa.VerifyPSS)

	// package crypto/sha1
	////////////////////////////////////////
	_register("crypto/sha1.BlockSize", crypto_sha1.BlockSize)
	_register("crypto/sha1.New", crypto_sha1.New)
	_register("crypto/sha1.Size", crypto_sha1.Size)
	_register("crypto/sha1.Sum", crypto_sha1.Sum)

	// package crypto/sha256
	////////////////////////////////////////
	_register("crypto/sha256.BlockSize", crypto_sha256.BlockSize)
	_register("crypto/sha256.New", crypto_sha256.New)
	_register("crypto/sha256.New224", crypto_sha256.New224)
	_register("crypto/sha256.Size", crypto_sha256.Size)
	_register("crypto/sha256.Size224", crypto_sha256.Size224)
	_register("crypto/sha256.Sum224", crypto_sha256.Sum224)
	_register("crypto/sha256.Sum256", crypto_sha256.Sum256)

	// package crypto/sha512
	////////////////////////////////////////
	_register("crypto/sha512.BlockSize", crypto_sha512.BlockSize)
	_register("crypto/sha512.New", crypto_sha512.New)
	_register("crypto/sha512.New384", crypto_sha512.New384)
	_register("crypto/sha512.New512_224", crypto_sha512.New512_224)
	_register("crypto/sha512.New512_256", crypto_sha512.New512_256)
	_register("crypto/sha512.Size", crypto_sha512.Size)
	_register("crypto/sha512.Size224", crypto_sha512.Size224)
	_register("crypto/sha512.Size256", crypto_sha512.Size256)
	_register("crypto/sha512.Size384", crypto_sha512.Size384)
	_register("crypto/sha512.Sum384", crypto_sha512.Sum384)
	_register("crypto/sha512.Sum512", crypto_sha512.Sum512)
	_register("crypto/sha512.Sum512_224", crypto_sha512.Sum512_224)
	_register("crypto/sha512.Sum512_256", crypto_sha512.Sum512_256)

	// package crypto/subtle
	////////////////////////////////////////
	_register("crypto/subtle.ConstantTimeByteEq", crypto_subtle.ConstantTimeByteEq)
	_register("crypto/subtle.ConstantTimeCompare", crypto_subtle.ConstantTimeCompare)
	_register("crypto/subtle.ConstantTimeCopy", crypto_subtle.ConstantTimeCopy)
	_register("crypto/subtle.ConstantTimeEq", crypto_subtle.ConstantTimeEq)
	_register("crypto/subtle.ConstantTimeLessOrEq", crypto_subtle.ConstantTimeLessOrEq)
	_register("crypto/subtle.ConstantTimeSelect", crypto_subtle.ConstantTimeSelect)

	// package crypto/tls
	////////////////////////////////////////
	_register("crypto/tls.Certificate", reflect.TypeOf((*crypto_tls.Certificate)(nil)).Elem())
	_register("crypto/tls.CertificateRequestInfo", reflect.TypeOf((*crypto_tls.CertificateRequestInfo)(nil)).Elem())
	_register("crypto/tls.CipherSuite", reflect.TypeOf((*crypto_tls.CipherSuite)(nil)).Elem())
	_register("crypto/tls.CipherSuiteName", crypto_tls.CipherSuiteName)
	_register("crypto/tls.CipherSuites", crypto_tls.CipherSuites)
	_register("crypto/tls.Client", crypto_tls.Client)
	_register("crypto/tls.ClientAuthType", reflect.TypeOf((*crypto_tls.ClientAuthType)(nil)).Elem())
	_register("crypto/tls.ClientHelloInfo", reflect.TypeOf((*crypto_tls.ClientHelloInfo)(nil)).Elem())
	_register("crypto/tls.ClientSessionCache", reflect.TypeOf((*crypto_tls.ClientSessionCache)(nil)).Elem())
	_register("crypto/tls.ClientSessionState", reflect.TypeOf((*crypto_tls.ClientSessionState)(nil)).Elem())
	_register("crypto/tls.Config", reflect.TypeOf((*crypto_tls.Config)(nil)).Elem())
	_register("crypto/tls.Conn", reflect.TypeOf((*crypto_tls.Conn)(nil)).Elem())
	_register("crypto/tls.ConnectionState", reflect.TypeOf((*crypto_tls.ConnectionState)(nil)).Elem())
	_register("crypto/tls.CurveID", reflect.TypeOf((*crypto_tls.CurveID)(nil)).Elem())
	_register("crypto/tls.CurveP256", crypto_tls.CurveP256)
	_register("crypto/tls.CurveP384", crypto_tls.CurveP384)
	_register("crypto/tls.CurveP521", crypto_tls.CurveP521)
	_register("crypto/tls.Dial", crypto_tls.Dial)
	_register("crypto/tls.DialWithDialer", crypto_tls.DialWithDialer)
	_register("crypto/tls.Dialer", reflect.TypeOf((*crypto_tls.Dialer)(nil)).Elem())
	_register("crypto/tls.ECDSAWithP256AndSHA256", crypto_tls.ECDSAWithP256AndSHA256)
	_register("crypto/tls.ECDSAWithP384AndSHA384", crypto_tls.ECDSAWithP384AndSHA384)
	_register("crypto/tls.ECDSAWithP521AndSHA512", crypto_tls.ECDSAWithP521AndSHA512)
	_register("crypto/tls.ECDSAWithSHA1", crypto_tls.ECDSAWithSHA1)
	_register("crypto/tls.Ed25519", crypto_tls.Ed25519)
	_register("crypto/tls.InsecureCipherSuites", crypto_tls.InsecureCipherSuites)
	_register("crypto/tls.Listen", crypto_tls.Listen)
	_register("crypto/tls.LoadX509KeyPair", crypto_tls.LoadX509KeyPair)
	_register("crypto/tls.NewLRUClientSessionCache", crypto_tls.NewLRUClientSessionCache)
	_register("crypto/tls.NewListener", crypto_tls.NewListener)
	_register("crypto/tls.NoClientCert", crypto_tls.NoClientCert)
	_register("crypto/tls.PKCS1WithSHA1", crypto_tls.PKCS1WithSHA1)
	_register("crypto/tls.PKCS1WithSHA256", crypto_tls.PKCS1WithSHA256)
	_register("crypto/tls.PKCS1WithSHA384", crypto_tls.PKCS1WithSHA384)
	_register("crypto/tls.PKCS1WithSHA512", crypto_tls.PKCS1WithSHA512)
	_register("crypto/tls.PSSWithSHA256", crypto_tls.PSSWithSHA256)
	_register("crypto/tls.PSSWithSHA384", crypto_tls.PSSWithSHA384)
	_register("crypto/tls.PSSWithSHA512", crypto_tls.PSSWithSHA512)
	_register("crypto/tls.RecordHeaderError", reflect.TypeOf((*crypto_tls.RecordHeaderError)(nil)).Elem())
	_register("crypto/tls.RenegotiateFreelyAsClient", crypto_tls.RenegotiateFreelyAsClient)
	_register("crypto/tls.RenegotiateNever", crypto_tls.RenegotiateNever)
	_register("crypto/tls.RenegotiateOnceAsClient", crypto_tls.RenegotiateOnceAsClient)
	_register("crypto/tls.RenegotiationSupport", reflect.TypeOf((*crypto_tls.RenegotiationSupport)(nil)).Elem())
	_register("crypto/tls.RequestClientCert", crypto_tls.RequestClientCert)
	_register("crypto/tls.RequireAndVerifyClientCert", crypto_tls.RequireAndVerifyClientCert)
	_register("crypto/tls.RequireAnyClientCert", crypto_tls.RequireAnyClientCert)
	_register("crypto/tls.Server", crypto_tls.Server)
	_register("crypto/tls.SignatureScheme", reflect.TypeOf((*crypto_tls.SignatureScheme)(nil)).Elem())
	_register("crypto/tls.TLS_AES_128_GCM_SHA256", crypto_tls.TLS_AES_128_GCM_SHA256)
	_register("crypto/tls.TLS_AES_256_GCM_SHA384", crypto_tls.TLS_AES_256_GCM_SHA384)
	_register("crypto/tls.TLS_CHACHA20_POLY1305_SHA256", crypto_tls.TLS_CHACHA20_POLY1305_SHA256)
	_register("crypto/tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", crypto_tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA)
	_register("crypto/tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", crypto_tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256)
	_register("crypto/tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", crypto_tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
	_register("crypto/tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", crypto_tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA)
	_register("crypto/tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", crypto_tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384)
	_register("crypto/tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305", crypto_tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305)
	_register("crypto/tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", crypto_tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256)
	_register("crypto/tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", crypto_tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA)
	_register("crypto/tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", crypto_tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA)
	_register("crypto/tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", crypto_tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA)
	_register("crypto/tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", crypto_tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256)
	_register("crypto/tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", crypto_tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256)
	_register("crypto/tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", crypto_tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA)
	_register("crypto/tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", crypto_tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384)
	_register("crypto/tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305", crypto_tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305)
	_register("crypto/tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", crypto_tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256)
	_register("crypto/tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA", crypto_tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA)
	_register("crypto/tls.TLS_FALLBACK_SCSV", crypto_tls.TLS_FALLBACK_SCSV)
	_register("crypto/tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA", crypto_tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA)
	_register("crypto/tls.TLS_RSA_WITH_AES_128_CBC_SHA", crypto_tls.TLS_RSA_WITH_AES_128_CBC_SHA)
	_register("crypto/tls.TLS_RSA_WITH_AES_128_CBC_SHA256", crypto_tls.TLS_RSA_WITH_AES_128_CBC_SHA256)
	_register("crypto/tls.TLS_RSA_WITH_AES_128_GCM_SHA256", crypto_tls.TLS_RSA_WITH_AES_128_GCM_SHA256)
	_register("crypto/tls.TLS_RSA_WITH_AES_256_CBC_SHA", crypto_tls.TLS_RSA_WITH_AES_256_CBC_SHA)
	_register("crypto/tls.TLS_RSA_WITH_AES_256_GCM_SHA384", crypto_tls.TLS_RSA_WITH_AES_256_GCM_SHA384)
	_register("crypto/tls.TLS_RSA_WITH_RC4_128_SHA", crypto_tls.TLS_RSA_WITH_RC4_128_SHA)
	_register("crypto/tls.VerifyClientCertIfGiven", crypto_tls.VerifyClientCertIfGiven)
	_register("crypto/tls.VersionSSL30", crypto_tls.VersionSSL30)
	_register("crypto/tls.VersionTLS10", crypto_tls.VersionTLS10)
	_register("crypto/tls.VersionTLS11", crypto_tls.VersionTLS11)
	_register("crypto/tls.VersionTLS12", crypto_tls.VersionTLS12)
	_register("crypto/tls.VersionTLS13", crypto_tls.VersionTLS13)
	_register("crypto/tls.X25519", crypto_tls.X25519)
	_register("crypto/tls.X509KeyPair", crypto_tls.X509KeyPair)

	// package crypto/x509
	////////////////////////////////////////
	_register("crypto/x509.CANotAuthorizedForExtKeyUsage", crypto_x509.CANotAuthorizedForExtKeyUsage)
	_register("crypto/x509.CANotAuthorizedForThisName", crypto_x509.CANotAuthorizedForThisName)
	_register("crypto/x509.CertPool", reflect.TypeOf((*crypto_x509.CertPool)(nil)).Elem())
	_register("crypto/x509.Certificate", reflect.TypeOf((*crypto_x509.Certificate)(nil)).Elem())
	_register("crypto/x509.CertificateInvalidError", reflect.TypeOf((*crypto_x509.CertificateInvalidError)(nil)).Elem())
	_register("crypto/x509.CertificateRequest", reflect.TypeOf((*crypto_x509.CertificateRequest)(nil)).Elem())
	_register("crypto/x509.ConstraintViolationError", reflect.TypeOf((*crypto_x509.ConstraintViolationError)(nil)).Elem())
	_register("crypto/x509.CreateCertificate", crypto_x509.CreateCertificate)
	_register("crypto/x509.CreateCertificateRequest", crypto_x509.CreateCertificateRequest)
	_register("crypto/x509.CreateRevocationList", crypto_x509.CreateRevocationList)
	_register("crypto/x509.DSA", crypto_x509.DSA)
	_register("crypto/x509.DSAWithSHA1", crypto_x509.DSAWithSHA1)
	_register("crypto/x509.DSAWithSHA256", crypto_x509.DSAWithSHA256)
	_register("crypto/x509.DecryptPEMBlock", crypto_x509.DecryptPEMBlock)
	_register("crypto/x509.ECDSA", crypto_x509.ECDSA)
	_register("crypto/x509.ECDSAWithSHA1", crypto_x509.ECDSAWithSHA1)
	_register("crypto/x509.ECDSAWithSHA256", crypto_x509.ECDSAWithSHA256)
	_register("crypto/x509.ECDSAWithSHA384", crypto_x509.ECDSAWithSHA384)
	_register("crypto/x509.ECDSAWithSHA512", crypto_x509.ECDSAWithSHA512)
	_register("crypto/x509.Ed25519", crypto_x509.Ed25519)
	_register("crypto/x509.EncryptPEMBlock", crypto_x509.EncryptPEMBlock)
	_register("crypto/x509.ErrUnsupportedAlgorithm", crypto_x509.ErrUnsupportedAlgorithm)
	_register("crypto/x509.Expired", crypto_x509.Expired)
	_register("crypto/x509.ExtKeyUsage", reflect.TypeOf((*crypto_x509.ExtKeyUsage)(nil)).Elem())
	_register("crypto/x509.ExtKeyUsageAny", crypto_x509.ExtKeyUsageAny)
	_register("crypto/x509.ExtKeyUsageClientAuth", crypto_x509.ExtKeyUsageClientAuth)
	_register("crypto/x509.ExtKeyUsageCodeSigning", crypto_x509.ExtKeyUsageCodeSigning)
	_register("crypto/x509.ExtKeyUsageEmailProtection", crypto_x509.ExtKeyUsageEmailProtection)
	_register("crypto/x509.ExtKeyUsageIPSECEndSystem", crypto_x509.ExtKeyUsageIPSECEndSystem)
	_register("crypto/x509.ExtKeyUsageIPSECTunnel", crypto_x509.ExtKeyUsageIPSECTunnel)
	_register("crypto/x509.ExtKeyUsageIPSECUser", crypto_x509.ExtKeyUsageIPSECUser)
	_register("crypto/x509.ExtKeyUsageMicrosoftCommercialCodeSigning", crypto_x509.ExtKeyUsageMicrosoftCommercialCodeSigning)
	_register("crypto/x509.ExtKeyUsageMicrosoftKernelCodeSigning", crypto_x509.ExtKeyUsageMicrosoftKernelCodeSigning)
	_register("crypto/x509.ExtKeyUsageMicrosoftServerGatedCrypto", crypto_x509.ExtKeyUsageMicrosoftServerGatedCrypto)
	_register("crypto/x509.ExtKeyUsageNetscapeServerGatedCrypto", crypto_x509.ExtKeyUsageNetscapeServerGatedCrypto)
	_register("crypto/x509.ExtKeyUsageOCSPSigning", crypto_x509.ExtKeyUsageOCSPSigning)
	_register("crypto/x509.ExtKeyUsageServerAuth", crypto_x509.ExtKeyUsageServerAuth)
	_register("crypto/x509.ExtKeyUsageTimeStamping", crypto_x509.ExtKeyUsageTimeStamping)
	_register("crypto/x509.HostnameError", reflect.TypeOf((*crypto_x509.HostnameError)(nil)).Elem())
	_register("crypto/x509.IncompatibleUsage", crypto_x509.IncompatibleUsage)
	_register("crypto/x509.IncorrectPasswordError", crypto_x509.IncorrectPasswordError)
	_register("crypto/x509.InsecureAlgorithmError", reflect.TypeOf((*crypto_x509.InsecureAlgorithmError)(nil)).Elem())
	_register("crypto/x509.InvalidReason", reflect.TypeOf((*crypto_x509.InvalidReason)(nil)).Elem())
	_register("crypto/x509.IsEncryptedPEMBlock", crypto_x509.IsEncryptedPEMBlock)
	_register("crypto/x509.KeyUsage", reflect.TypeOf((*crypto_x509.KeyUsage)(nil)).Elem())
	_register("crypto/x509.KeyUsageCRLSign", crypto_x509.KeyUsageCRLSign)
	_register("crypto/x509.KeyUsageCertSign", crypto_x509.KeyUsageCertSign)
	_register("crypto/x509.KeyUsageContentCommitment", crypto_x509.KeyUsageContentCommitment)
	_register("crypto/x509.KeyUsageDataEncipherment", crypto_x509.KeyUsageDataEncipherment)
	_register("crypto/x509.KeyUsageDecipherOnly", crypto_x509.KeyUsageDecipherOnly)
	_register("crypto/x509.KeyUsageDigitalSignature", crypto_x509.KeyUsageDigitalSignature)
	_register("crypto/x509.KeyUsageEncipherOnly", crypto_x509.KeyUsageEncipherOnly)
	_register("crypto/x509.KeyUsageKeyAgreement", crypto_x509.KeyUsageKeyAgreement)
	_register("crypto/x509.KeyUsageKeyEncipherment", crypto_x509.KeyUsageKeyEncipherment)
	_register("crypto/x509.MD2WithRSA", crypto_x509.MD2WithRSA)
	_register("crypto/x509.MD5WithRSA", crypto_x509.MD5WithRSA)
	_register("crypto/x509.MarshalECPrivateKey", crypto_x509.MarshalECPrivateKey)
	_register("crypto/x509.MarshalPKCS1PrivateKey", crypto_x509.MarshalPKCS1PrivateKey)
	_register("crypto/x509.MarshalPKCS1PublicKey", crypto_x509.MarshalPKCS1PublicKey)
	_register("crypto/x509.MarshalPKCS8PrivateKey", crypto_x509.MarshalPKCS8PrivateKey)
	_register("crypto/x509.MarshalPKIXPublicKey", crypto_x509.MarshalPKIXPublicKey)
	_register("crypto/x509.NameConstraintsWithoutSANs", crypto_x509.NameConstraintsWithoutSANs)
	_register("crypto/x509.NameMismatch", crypto_x509.NameMismatch)
	_register("crypto/x509.NewCertPool", crypto_x509.NewCertPool)
	_register("crypto/x509.NotAuthorizedToSign", crypto_x509.NotAuthorizedToSign)
	_register("crypto/x509.PEMCipher", reflect.TypeOf((*crypto_x509.PEMCipher)(nil)).Elem())
	_register("crypto/x509.PEMCipher3DES", crypto_x509.PEMCipher3DES)
	_register("crypto/x509.PEMCipherAES128", crypto_x509.PEMCipherAES128)
	_register("crypto/x509.PEMCipherAES192", crypto_x509.PEMCipherAES192)
	_register("crypto/x509.PEMCipherAES256", crypto_x509.PEMCipherAES256)
	_register("crypto/x509.PEMCipherDES", crypto_x509.PEMCipherDES)
	_register("crypto/x509.ParseCRL", crypto_x509.ParseCRL)
	_register("crypto/x509.ParseCertificate", crypto_x509.ParseCertificate)
	_register("crypto/x509.ParseCertificateRequest", crypto_x509.ParseCertificateRequest)
	_register("crypto/x509.ParseCertificates", crypto_x509.ParseCertificates)
	_register("crypto/x509.ParseDERCRL", crypto_x509.ParseDERCRL)
	_register("crypto/x509.ParseECPrivateKey", crypto_x509.ParseECPrivateKey)
	_register("crypto/x509.ParsePKCS1PrivateKey", crypto_x509.ParsePKCS1PrivateKey)
	_register("crypto/x509.ParsePKCS1PublicKey", crypto_x509.ParsePKCS1PublicKey)
	_register("crypto/x509.ParsePKCS8PrivateKey", crypto_x509.ParsePKCS8PrivateKey)
	_register("crypto/x509.ParsePKIXPublicKey", crypto_x509.ParsePKIXPublicKey)
	_register("crypto/x509.ParseRevocationList", crypto_x509.ParseRevocationList)
	_register("crypto/x509.PublicKeyAlgorithm", reflect.TypeOf((*crypto_x509.PublicKeyAlgorithm)(nil)).Elem())
	_register("crypto/x509.PureEd25519", crypto_x509.PureEd25519)
	_register("crypto/x509.RSA", crypto_x509.RSA)
	_register("crypto/x509.RevocationList", reflect.TypeOf((*crypto_x509.RevocationList)(nil)).Elem())
	_register("crypto/x509.SHA1WithRSA", crypto_x509.SHA1WithRSA)
	_register("crypto/x509.SHA256WithRSA", crypto_x509.SHA256WithRSA)
	_register("crypto/x509.SHA256WithRSAPSS", crypto_x509.SHA256WithRSAPSS)
	_register("crypto/x509.SHA384WithRSA", crypto_x509.SHA384WithRSA)
	_register("crypto/x509.SHA384WithRSAPSS", crypto_x509.SHA384WithRSAPSS)
	_register("crypto/x509.SHA512WithRSA", crypto_x509.SHA512WithRSA)
	_register("crypto/x509.SHA512WithRSAPSS", crypto_x509.SHA512WithRSAPSS)
	_register("crypto/x509.SignatureAlgorithm", reflect.TypeOf((*crypto_x509.SignatureAlgorithm)(nil)).Elem())
	_register("crypto/x509.SystemCertPool", crypto_x509.SystemCertPool)
	_register("crypto/x509.SystemRootsError", reflect.TypeOf((*crypto_x509.SystemRootsError)(nil)).Elem())
	_register("crypto/x509.TooManyConstraints", crypto_x509.TooManyConstraints)
	_register("crypto/x509.TooManyIntermediates", crypto_x509.TooManyIntermediates)
	_register("crypto/x509.UnconstrainedName", crypto_x509.UnconstrainedName)
	_register("crypto/x509.UnhandledCriticalExtension", reflect.TypeOf((*crypto_x509.UnhandledCriticalExtension)(nil)).Elem())
	_register("crypto/x509.UnknownAuthorityError", reflect.TypeOf((*crypto_x509.UnknownAuthorityError)(nil)).Elem())
	_register("crypto/x509.UnknownPublicKeyAlgorithm", crypto_x509.UnknownPublicKeyAlgorithm)
	_register("crypto/x509.UnknownSignatureAlgorithm", crypto_x509.UnknownSignatureAlgorithm)
	_register("crypto/x509.VerifyOptions", reflect.TypeOf((*crypto_x509.VerifyOptions)(nil)).Elem())

	// package crypto/x509/pkix
	////////////////////////////////////////
	_register("crypto/x509/pkix.AlgorithmIdentifier", reflect.TypeOf((*crypto_x509_pkix.AlgorithmIdentifier)(nil)).Elem())
	_register("crypto/x509/pkix.AttributeTypeAndValue", reflect.TypeOf((*crypto_x509_pkix.AttributeTypeAndValue)(nil)).Elem())
	_register("crypto/x509/pkix.AttributeTypeAndValueSET", reflect.TypeOf((*crypto_x509_pkix.AttributeTypeAndValueSET)(nil)).Elem())
	_register("crypto/x509/pkix.CertificateList", reflect.TypeOf((*crypto_x509_pkix.CertificateList)(nil)).Elem())
	_register("crypto/x509/pkix.Extension", reflect.TypeOf((*crypto_x509_pkix.Extension)(nil)).Elem())
	_register("crypto/x509/pkix.Name", reflect.TypeOf((*crypto_x509_pkix.Name)(nil)).Elem())
	_register("crypto/x509/pkix.RDNSequence", reflect.TypeOf((*crypto_x509_pkix.RDNSequence)(nil)).Elem())
	_register("crypto/x509/pkix.RelativeDistinguishedNameSET", reflect.TypeOf((*crypto_x509_pkix.RelativeDistinguishedNameSET)(nil)).Elem())
	_register("crypto/x509/pkix.RevokedCertificate", reflect.TypeOf((*crypto_x509_pkix.RevokedCertificate)(nil)).Elem())
	_register("crypto/x509/pkix.TBSCertificateList", reflect.TypeOf((*crypto_x509_pkix.TBSCertificateList)(nil)).Elem())

	// package database/sql
	////////////////////////////////////////
	_register("database/sql.ColumnType", reflect.TypeOf((*database_sql.ColumnType)(nil)).Elem())
	_register("database/sql.Conn", reflect.TypeOf((*database_sql.Conn)(nil)).Elem())
	_register("database/sql.DB", reflect.TypeOf((*database_sql.DB)(nil)).Elem())
	_register("database/sql.DBStats", reflect.TypeOf((*database_sql.DBStats)(nil)).Elem())
	_register("database/sql.Drivers", database_sql.Drivers)
	_register("database/sql.ErrConnDone", database_sql.ErrConnDone)
	_register("database/sql.ErrNoRows", database_sql.ErrNoRows)
	_register("database/sql.ErrTxDone", database_sql.ErrTxDone)
	_register("database/sql.IsolationLevel", reflect.TypeOf((*database_sql.IsolationLevel)(nil)).Elem())
	_register("database/sql.LevelDefault", database_sql.LevelDefault)
	_register("database/sql.LevelLinearizable", database_sql.LevelLinearizable)
	_register("database/sql.LevelReadCommitted", database_sql.LevelReadCommitted)
	_register("database/sql.LevelReadUncommitted", database_sql.LevelReadUncommitted)
	_register("database/sql.LevelRepeatableRead", database_sql.LevelRepeatableRead)
	_register("database/sql.LevelSerializable", database_sql.LevelSerializable)
	_register("database/sql.LevelSnapshot", database_sql.LevelSnapshot)
	_register("database/sql.LevelWriteCommitted", database_sql.LevelWriteCommitted)
	_register("database/sql.Named", database_sql.Named)
	_register("database/sql.NamedArg", reflect.TypeOf((*database_sql.NamedArg)(nil)).Elem())
	_register("database/sql.NullBool", reflect.TypeOf((*database_sql.NullBool)(nil)).Elem())
	_register("database/sql.NullByte", reflect.TypeOf((*database_sql.NullByte)(nil)).Elem())
	_register("database/sql.NullFloat64", reflect.TypeOf((*database_sql.NullFloat64)(nil)).Elem())
	_register("database/sql.NullInt16", reflect.TypeOf((*database_sql.NullInt16)(nil)).Elem())
	_register("database/sql.NullInt32", reflect.TypeOf((*database_sql.NullInt32)(nil)).Elem())
	_register("database/sql.NullInt64", reflect.TypeOf((*database_sql.NullInt64)(nil)).Elem())
	_register("database/sql.NullString", reflect.TypeOf((*database_sql.NullString)(nil)).Elem())
	_register("database/sql.NullTime", reflect.TypeOf((*database_sql.NullTime)(nil)).Elem())
	_register("database/sql.Open", database_sql.Open)
	_register("database/sql.OpenDB", database_sql.OpenDB)
	_register("database/sql.Out", reflect.TypeOf((*database_sql.Out)(nil)).Elem())
	_register("database/sql.RawBytes", reflect.TypeOf((*database_sql.RawBytes)(nil)).Elem())
	_register("database/sql.Register", database_sql.Register)
	_register("database/sql.Result", reflect.TypeOf((*database_sql.Result)(nil)).Elem())
	_register("database/sql.Row", reflect.TypeOf((*database_sql.Row)(nil)).Elem())
	_register("database/sql.Rows", reflect.TypeOf((*database_sql.Rows)(nil)).Elem())
	_register("database/sql.Scanner", reflect.TypeOf((*database_sql.Scanner)(nil)).Elem())
	_register("database/sql.Stmt", reflect.TypeOf((*database_sql.Stmt)(nil)).Elem())
	_register("database/sql.Tx", reflect.TypeOf((*database_sql.Tx)(nil)).Elem())
	_register("database/sql.TxOptions", reflect.TypeOf((*database_sql.TxOptions)(nil)).Elem())

	// package database/sql/driver
	////////////////////////////////////////
	_register("database/sql/driver.Bool", database_sql_driver.Bool)
	_register("database/sql/driver.ColumnConverter", reflect.TypeOf((*database_sql_driver.ColumnConverter)(nil)).Elem())
	_register("database/sql/driver.Conn", reflect.TypeOf((*database_sql_driver.Conn)(nil)).Elem())
	_register("database/sql/driver.ConnBeginTx", reflect.TypeOf((*database_sql_driver.ConnBeginTx)(nil)).Elem())
	_register("database/sql/driver.ConnPrepareContext", reflect.TypeOf((*database_sql_driver.ConnPrepareContext)(nil)).Elem())
	_register("database/sql/driver.Connector", reflect.TypeOf((*database_sql_driver.Connector)(nil)).Elem())
	_register("database/sql/driver.DefaultParameterConverter", database_sql_driver.DefaultParameterConverter)
	_register("database/sql/driver.Driver", reflect.TypeOf((*database_sql_driver.Driver)(nil)).Elem())
	_register("database/sql/driver.DriverContext", reflect.TypeOf((*database_sql_driver.DriverContext)(nil)).Elem())
	_register("database/sql/driver.ErrBadConn", database_sql_driver.ErrBadConn)
	_register("database/sql/driver.ErrRemoveArgument", database_sql_driver.ErrRemoveArgument)
	_register("database/sql/driver.ErrSkip", database_sql_driver.ErrSkip)
	_register("database/sql/driver.Execer", reflect.TypeOf((*database_sql_driver.Execer)(nil)).Elem())
	_register("database/sql/driver.ExecerContext", reflect.TypeOf((*database_sql_driver.ExecerContext)(nil)).Elem())
	_register("database/sql/driver.Int32", database_sql_driver.Int32)
	_register("database/sql/driver.IsScanValue", database_sql_driver.IsScanValue)
	_register("database/sql/driver.IsValue", database_sql_driver.IsValue)
	_register("database/sql/driver.IsolationLevel", reflect.TypeOf((*database_sql_driver.IsolationLevel)(nil)).Elem())
	_register("database/sql/driver.NamedValue", reflect.TypeOf((*database_sql_driver.NamedValue)(nil)).Elem())
	_register("database/sql/driver.NamedValueChecker", reflect.TypeOf((*database_sql_driver.NamedValueChecker)(nil)).Elem())
	_register("database/sql/driver.NotNull", reflect.TypeOf((*database_sql_driver.NotNull)(nil)).Elem())
	_register("database/sql/driver.Null", reflect.TypeOf((*database_sql_driver.Null)(nil)).Elem())
	_register("database/sql/driver.Pinger", reflect.TypeOf((*database_sql_driver.Pinger)(nil)).Elem())
	_register("database/sql/driver.Queryer", reflect.TypeOf((*database_sql_driver.Queryer)(nil)).Elem())
	_register("database/sql/driver.QueryerContext", reflect.TypeOf((*database_sql_driver.QueryerContext)(nil)).Elem())
	_register("database/sql/driver.Result", reflect.TypeOf((*database_sql_driver.Result)(nil)).Elem())
	_register("database/sql/driver.ResultNoRows", database_sql_driver.ResultNoRows)
	_register("database/sql/driver.Rows", reflect.TypeOf((*database_sql_driver.Rows)(nil)).Elem())
	_register("database/sql/driver.RowsAffected", reflect.TypeOf((*database_sql_driver.RowsAffected)(nil)).Elem())
	_register("database/sql/driver.RowsColumnTypeDatabaseTypeName", reflect.TypeOf((*database_sql_driver.RowsColumnTypeDatabaseTypeName)(nil)).Elem())
	_register("database/sql/driver.RowsColumnTypeLength", reflect.TypeOf((*database_sql_driver.RowsColumnTypeLength)(nil)).Elem())
	_register("database/sql/driver.RowsColumnTypeNullable", reflect.TypeOf((*database_sql_driver.RowsColumnTypeNullable)(nil)).Elem())
	_register("database/sql/driver.RowsColumnTypePrecisionScale", reflect.TypeOf((*database_sql_driver.RowsColumnTypePrecisionScale)(nil)).Elem())
	_register("database/sql/driver.RowsColumnTypeScanType", reflect.TypeOf((*database_sql_driver.RowsColumnTypeScanType)(nil)).Elem())
	_register("database/sql/driver.RowsNextResultSet", reflect.TypeOf((*database_sql_driver.RowsNextResultSet)(nil)).Elem())
	_register("database/sql/driver.SessionResetter", reflect.TypeOf((*database_sql_driver.SessionResetter)(nil)).Elem())
	_register("database/sql/driver.Stmt", reflect.TypeOf((*database_sql_driver.Stmt)(nil)).Elem())
	_register("database/sql/driver.StmtExecContext", reflect.TypeOf((*database_sql_driver.StmtExecContext)(nil)).Elem())
	_register("database/sql/driver.StmtQueryContext", reflect.TypeOf((*database_sql_driver.StmtQueryContext)(nil)).Elem())
	_register("database/sql/driver.String", database_sql_driver.String)
	_register("database/sql/driver.Tx", reflect.TypeOf((*database_sql_driver.Tx)(nil)).Elem())
	_register("database/sql/driver.TxOptions", reflect.TypeOf((*database_sql_driver.TxOptions)(nil)).Elem())
	_register("database/sql/driver.Validator", reflect.TypeOf((*database_sql_driver.Validator)(nil)).Elem())
	_register("database/sql/driver.Value", reflect.TypeOf((*database_sql_driver.Value)(nil)).Elem())
	_register("database/sql/driver.ValueConverter", reflect.TypeOf((*database_sql_driver.ValueConverter)(nil)).Elem())
	_register("database/sql/driver.Valuer", reflect.TypeOf((*database_sql_driver.Valuer)(nil)).Elem())

	// package debug/buildinfo
	////////////////////////////////////////
	_register("debug/buildinfo.BuildInfo", reflect.TypeOf((*debug_buildinfo.BuildInfo)(nil)).Elem())
	_register("debug/buildinfo.Read", debug_buildinfo.Read)
	_register("debug/buildinfo.ReadFile", debug_buildinfo.ReadFile)

	// package debug/dwarf
	////////////////////////////////////////
	_register("debug/dwarf.AddrType", reflect.TypeOf((*debug_dwarf.AddrType)(nil)).Elem())
	_register("debug/dwarf.ArrayType", reflect.TypeOf((*debug_dwarf.ArrayType)(nil)).Elem())
	_register("debug/dwarf.Attr", reflect.TypeOf((*debug_dwarf.Attr)(nil)).Elem())
	_register("debug/dwarf.AttrAbstractOrigin", debug_dwarf.AttrAbstractOrigin)
	_register("debug/dwarf.AttrAccessibility", debug_dwarf.AttrAccessibility)
	_register("debug/dwarf.AttrAddrBase", debug_dwarf.AttrAddrBase)
	_register("debug/dwarf.AttrAddrClass", debug_dwarf.AttrAddrClass)
	_register("debug/dwarf.AttrAlignment", debug_dwarf.AttrAlignment)
	_register("debug/dwarf.AttrAllocated", debug_dwarf.AttrAllocated)
	_register("debug/dwarf.AttrArtificial", debug_dwarf.AttrArtificial)
	_register("debug/dwarf.AttrAssociated", debug_dwarf.AttrAssociated)
	_register("debug/dwarf.AttrBaseTypes", debug_dwarf.AttrBaseTypes)
	_register("debug/dwarf.AttrBinaryScale", debug_dwarf.AttrBinaryScale)
	_register("debug/dwarf.AttrBitOffset", debug_dwarf.AttrBitOffset)
	_register("debug/dwarf.AttrBitSize", debug_dwarf.AttrBitSize)
	_register("debug/dwarf.AttrByteSize", debug_dwarf.AttrByteSize)
	_register("debug/dwarf.AttrCallAllCalls", debug_dwarf.AttrCallAllCalls)
	_register("debug/dwarf.AttrCallAllSourceCalls", debug_dwarf.AttrCallAllSourceCalls)
	_register("debug/dwarf.AttrCallAllTailCalls", debug_dwarf.AttrCallAllTailCalls)
	_register("debug/dwarf.AttrCallColumn", debug_dwarf.AttrCallColumn)
	_register("debug/dwarf.AttrCallDataLocation", debug_dwarf.AttrCallDataLocation)
	_register("debug/dwarf.AttrCallDataValue", debug_dwarf.AttrCallDataValue)
	_register("debug/dwarf.AttrCallFile", debug_dwarf.AttrCallFile)
	_register("debug/dwarf.AttrCallLine", debug_dwarf.AttrCallLine)
	_register("debug/dwarf.AttrCallOrigin", debug_dwarf.AttrCallOrigin)
	_register("debug/dwarf.AttrCallPC", debug_dwarf.AttrCallPC)
	_register("debug/dwarf.AttrCallParameter", debug_dwarf.AttrCallParameter)
	_register("debug/dwarf.AttrCallReturnPC", debug_dwarf.AttrCallReturnPC)
	_register("debug/dwarf.AttrCallTailCall", debug_dwarf.AttrCallTailCall)
	_register("debug/dwarf.AttrCallTarget", debug_dwarf.AttrCallTarget)
	_register("debug/dwarf.AttrCallTargetClobbered", debug_dwarf.AttrCallTargetClobbered)
	_register("debug/dwarf.AttrCallValue", debug_dwarf.AttrCallValue)
	_register("debug/dwarf.AttrCalling", debug_dwarf.AttrCalling)
	_register("debug/dwarf.AttrCommonRef", debug_dwarf.AttrCommonRef)
	_register("debug/dwarf.AttrCompDir", debug_dwarf.AttrCompDir)
	_register("debug/dwarf.AttrConstExpr", debug_dwarf.AttrConstExpr)
	_register("debug/dwarf.AttrConstValue", debug_dwarf.AttrConstValue)
	_register("debug/dwarf.AttrContainingType", debug_dwarf.AttrContainingType)
	_register("debug/dwarf.AttrCount", debug_dwarf.AttrCount)
	_register("debug/dwarf.AttrDataBitOffset", debug_dwarf.AttrDataBitOffset)
	_register("debug/dwarf.AttrDataLocation", debug_dwarf.AttrDataLocation)
	_register("debug/dwarf.AttrDataMemberLoc", debug_dwarf.AttrDataMemberLoc)
	_register("debug/dwarf.AttrDecimalScale", debug_dwarf.AttrDecimalScale)
	_register("debug/dwarf.AttrDecimalSign", debug_dwarf.AttrDecimalSign)
	_register("debug/dwarf.AttrDeclColumn", debug_dwarf.AttrDeclColumn)
	_register("debug/dwarf.AttrDeclFile", debug_dwarf.AttrDeclFile)
	_register("debug/dwarf.AttrDeclLine", debug_dwarf.AttrDeclLine)
	_register("debug/dwarf.AttrDeclaration", debug_dwarf.AttrDeclaration)
	_register("debug/dwarf.AttrDefaultValue", debug_dwarf.AttrDefaultValue)
	_register("debug/dwarf.AttrDefaulted", debug_dwarf.AttrDefaulted)
	_register("debug/dwarf.AttrDeleted", debug_dwarf.AttrDeleted)
	_register("debug/dwarf.AttrDescription", debug_dwarf.AttrDescription)
	_register("debug/dwarf.AttrDigitCount", debug_dwarf.AttrDigitCount)
	_register("debug/dwarf.AttrDiscr", debug_dwarf.AttrDiscr)
	_register("debug/dwarf.AttrDiscrList", debug_dwarf.AttrDiscrList)
	_register("debug/dwarf.AttrDiscrValue", debug_dwarf.AttrDiscrValue)
	_register("debug/dwarf.AttrDwoName", debug_dwarf.AttrDwoName)
	_register("debug/dwarf.AttrElemental", debug_dwarf.AttrElemental)
	_register("debug/dwarf.AttrEncoding", debug_dwarf.AttrEncoding)
	_register("debug/dwarf.AttrEndianity", debug_dwarf.AttrEndianity)
	_register("debug/dwarf.AttrEntrypc", debug_dwarf.AttrEntrypc)
	_register("debug/dwarf.AttrEnumClass", debug_dwarf.AttrEnumClass)
	_register("debug/dwarf.AttrExplicit", debug_dwarf.AttrExplicit)
	_register("debug/dwarf.AttrExportSymbols", debug_dwarf.AttrExportSymbols)
	_register("debug/dwarf.AttrExtension", debug_dwarf.AttrExtension)
	_register("debug/dwarf.AttrExternal", debug_dwarf.AttrExternal)
	_register("debug/dwarf.AttrFrameBase", debug_dwarf.AttrFrameBase)
	_register("debug/dwarf.AttrFriend", debug_dwarf.AttrFriend)
	_register("debug/dwarf.AttrHighpc", debug_dwarf.AttrHighpc)
	_register("debug/dwarf.AttrIdentifierCase", debug_dwarf.AttrIdentifierCase)
	_register("debug/dwarf.AttrImport", debug_dwarf.AttrImport)
	_register("debug/dwarf.AttrInline", debug_dwarf.AttrInline)
	_register("debug/dwarf.AttrIsOptional", debug_dwarf.AttrIsOptional)
	_register("debug/dwarf.AttrLanguage", debug_dwarf.AttrLanguage)
	_register("debug/dwarf.AttrLinkageName", debug_dwarf.AttrLinkageName)
	_register("debug/dwarf.AttrLocation", debug_dwarf.AttrLocation)
	_register("debug/dwarf.AttrLoclistsBase", debug_dwarf.AttrLoclistsBase)
	_register("debug/dwarf.AttrLowerBound", debug_dwarf.AttrLowerBound)
	_register("debug/dwarf.AttrLowpc", debug_dwarf.AttrLowpc)
	_register("debug/dwarf.AttrMacroInfo", debug_dwarf.AttrMacroInfo)
	_register("debug/dwarf.AttrMacros", debug_dwarf.AttrMacros)
	_register("debug/dwarf.AttrMainSubprogram", debug_dwarf.AttrMainSubprogram)
	_register("debug/dwarf.AttrMutable", debug_dwarf.AttrMutable)
	_register("debug/dwarf.AttrName", debug_dwarf.AttrName)
	_register("debug/dwarf.AttrNamelistItem", debug_dwarf.AttrNamelistItem)
	_register("debug/dwarf.AttrNoreturn", debug_dwarf.AttrNoreturn)
	_register("debug/dwarf.AttrObjectPointer", debug_dwarf.AttrObjectPointer)
	_register("debug/dwarf.AttrOrdering", debug_dwarf.AttrOrdering)
	_register("debug/dwarf.AttrPictureString", debug_dwarf.AttrPictureString)
	_register("debug/dwarf.AttrPriority", debug_dwarf.AttrPriority)
	_register("debug/dwarf.AttrProducer", debug_dwarf.AttrProducer)
	_register("debug/dwarf.AttrPrototyped", debug_dwarf.AttrPrototyped)
	_register("debug/dwarf.AttrPure", debug_dwarf.AttrPure)
	_register("debug/dwarf.AttrRanges", debug_dwarf.AttrRanges)
	_register("debug/dwarf.AttrRank", debug_dwarf.AttrRank)
	_register("debug/dwarf.AttrRecursive", debug_dwarf.AttrRecursive)
	_register("debug/dwarf.AttrReference", debug_dwarf.AttrReference)
	_register("debug/dwarf.AttrReturnAddr", debug_dwarf.AttrReturnAddr)
	_register("debug/dwarf.AttrRnglistsBase", debug_dwarf.AttrRnglistsBase)
	_register("debug/dwarf.AttrRvalueReference", debug_dwarf.AttrRvalueReference)
	_register("debug/dwarf.AttrSegment", debug_dwarf.AttrSegment)
	_register("debug/dwarf.AttrSibling", debug_dwarf.AttrSibling)
	_register("debug/dwarf.AttrSignature", debug_dwarf.AttrSignature)
	_register("debug/dwarf.AttrSmall", debug_dwarf.AttrSmall)
	_register("debug/dwarf.AttrSpecification", debug_dwarf.AttrSpecification)
	_register("debug/dwarf.AttrStartScope", debug_dwarf.AttrStartScope)
	_register("debug/dwarf.AttrStaticLink", debug_dwarf.AttrStaticLink)
	_register("debug/dwarf.AttrStmtList", debug_dwarf.AttrStmtList)
	_register("debug/dwarf.AttrStrOffsetsBase", debug_dwarf.AttrStrOffsetsBase)
	_register("debug/dwarf.AttrStride", debug_dwarf.AttrStride)
	_register("debug/dwarf.AttrStrideSize", debug_dwarf.AttrStrideSize)
	_register("debug/dwarf.AttrStringLength", debug_dwarf.AttrStringLength)
	_register("debug/dwarf.AttrStringLengthBitSize", debug_dwarf.AttrStringLengthBitSize)
	_register("debug/dwarf.AttrStringLengthByteSize", debug_dwarf.AttrStringLengthByteSize)
	_register("debug/dwarf.AttrThreadsScaled", debug_dwarf.AttrThreadsScaled)
	_register("debug/dwarf.AttrTrampoline", debug_dwarf.AttrTrampoline)
	_register("debug/dwarf.AttrType", debug_dwarf.AttrType)
	_register("debug/dwarf.AttrUpperBound", debug_dwarf.AttrUpperBound)
	_register("debug/dwarf.AttrUseLocation", debug_dwarf.AttrUseLocation)
	_register("debug/dwarf.AttrUseUTF8", debug_dwarf.AttrUseUTF8)
	_register("debug/dwarf.AttrVarParam", debug_dwarf.AttrVarParam)
	_register("debug/dwarf.AttrVirtuality", debug_dwarf.AttrVirtuality)
	_register("debug/dwarf.AttrVisibility", debug_dwarf.AttrVisibility)
	_register("debug/dwarf.AttrVtableElemLoc", debug_dwarf.AttrVtableElemLoc)
	_register("debug/dwarf.BasicType", reflect.TypeOf((*debug_dwarf.BasicType)(nil)).Elem())
	_register("debug/dwarf.BoolType", reflect.TypeOf((*debug_dwarf.BoolType)(nil)).Elem())
	_register("debug/dwarf.CharType", reflect.TypeOf((*debug_dwarf.CharType)(nil)).Elem())
	_register("debug/dwarf.Class", reflect.TypeOf((*debug_dwarf.Class)(nil)).Elem())
	_register("debug/dwarf.ClassAddrPtr", debug_dwarf.ClassAddrPtr)
	_register("debug/dwarf.ClassAddress", debug_dwarf.ClassAddress)
	_register("debug/dwarf.ClassBlock", debug_dwarf.ClassBlock)
	_register("debug/dwarf.ClassConstant", debug_dwarf.ClassConstant)
	_register("debug/dwarf.ClassExprLoc", debug_dwarf.ClassExprLoc)
	_register("debug/dwarf.ClassFlag", debug_dwarf.ClassFlag)
	_register("debug/dwarf.ClassLinePtr", debug_dwarf.ClassLinePtr)
	_register("debug/dwarf.ClassLocList", debug_dwarf.ClassLocList)
	_register("debug/dwarf.ClassLocListPtr", debug_dwarf.ClassLocListPtr)
	_register("debug/dwarf.ClassMacPtr", debug_dwarf.ClassMacPtr)
	_register("debug/dwarf.ClassRangeListPtr", debug_dwarf.ClassRangeListPtr)
	_register("debug/dwarf.ClassReference", debug_dwarf.ClassReference)
	_register("debug/dwarf.ClassReferenceAlt", debug_dwarf.ClassReferenceAlt)
	_register("debug/dwarf.ClassReferenceSig", debug_dwarf.ClassReferenceSig)
	_register("debug/dwarf.ClassRngList", debug_dwarf.ClassRngList)
	_register("debug/dwarf.ClassRngListsPtr", debug_dwarf.ClassRngListsPtr)
	_register("debug/dwarf.ClassStrOffsetsPtr", debug_dwarf.ClassStrOffsetsPtr)
	_register("debug/dwarf.ClassString", debug_dwarf.ClassString)
	_register("debug/dwarf.ClassStringAlt", debug_dwarf.ClassStringAlt)
	_register("debug/dwarf.ClassUnknown", debug_dwarf.ClassUnknown)
	_register("debug/dwarf.CommonType", reflect.TypeOf((*debug_dwarf.CommonType)(nil)).Elem())
	_register("debug/dwarf.ComplexType", reflect.TypeOf((*debug_dwarf.ComplexType)(nil)).Elem())
	_register("debug/dwarf.Data", reflect.TypeOf((*debug_dwarf.Data)(nil)).Elem())
	_register("debug/dwarf.DecodeError", reflect.TypeOf((*debug_dwarf.DecodeError)(nil)).Elem())
	_register("debug/dwarf.DotDotDotType", reflect.TypeOf((*debug_dwarf.DotDotDotType)(nil)).Elem())
	_register("debug/dwarf.Entry", reflect.TypeOf((*debug_dwarf.Entry)(nil)).Elem())
	_register("debug/dwarf.EnumType", reflect.TypeOf((*debug_dwarf.EnumType)(nil)).Elem())
	_register("debug/dwarf.EnumValue", reflect.TypeOf((*debug_dwarf.EnumValue)(nil)).Elem())
	_register("debug/dwarf.ErrUnknownPC", debug_dwarf.ErrUnknownPC)
	_register("debug/dwarf.Field", reflect.TypeOf((*debug_dwarf.Field)(nil)).Elem())
	_register("debug/dwarf.FloatType", reflect.TypeOf((*debug_dwarf.FloatType)(nil)).Elem())
	_register("debug/dwarf.FuncType", reflect.TypeOf((*debug_dwarf.FuncType)(nil)).Elem())
	_register("debug/dwarf.IntType", reflect.TypeOf((*debug_dwarf.IntType)(nil)).Elem())
	_register("debug/dwarf.LineEntry", reflect.TypeOf((*debug_dwarf.LineEntry)(nil)).Elem())
	_register("debug/dwarf.LineFile", reflect.TypeOf((*debug_dwarf.LineFile)(nil)).Elem())
	_register("debug/dwarf.LineReader", reflect.TypeOf((*debug_dwarf.LineReader)(nil)).Elem())
	_register("debug/dwarf.LineReaderPos", reflect.TypeOf((*debug_dwarf.LineReaderPos)(nil)).Elem())
	_register("debug/dwarf.New", debug_dwarf.New)
	_register("debug/dwarf.Offset", reflect.TypeOf((*debug_dwarf.Offset)(nil)).Elem())
	_register("debug/dwarf.PtrType", reflect.TypeOf((*debug_dwarf.PtrType)(nil)).Elem())
	_register("debug/dwarf.QualType", reflect.TypeOf((*debug_dwarf.QualType)(nil)).Elem())
	_register("debug/dwarf.Reader", reflect.TypeOf((*debug_dwarf.Reader)(nil)).Elem())
	_register("debug/dwarf.StructField", reflect.TypeOf((*debug_dwarf.StructField)(nil)).Elem())
	_register("debug/dwarf.StructType", reflect.TypeOf((*debug_dwarf.StructType)(nil)).Elem())
	_register("debug/dwarf.Tag", reflect.TypeOf((*debug_dwarf.Tag)(nil)).Elem())
	_register("debug/dwarf.TagAccessDeclaration", debug_dwarf.TagAccessDeclaration)
	_register("debug/dwarf.TagArrayType", debug_dwarf.TagArrayType)
	_register("debug/dwarf.TagAtomicType", debug_dwarf.TagAtomicType)
	_register("debug/dwarf.TagBaseType", debug_dwarf.TagBaseType)
	_register("debug/dwarf.TagCallSite", debug_dwarf.TagCallSite)
	_register("debug/dwarf.TagCallSiteParameter", debug_dwarf.TagCallSiteParameter)
	_register("debug/dwarf.TagCatchDwarfBlock", debug_dwarf.TagCatchDwarfBlock)
	_register("debug/dwarf.TagClassType", debug_dwarf.TagClassType)
	_register("debug/dwarf.TagCoarrayType", debug_dwarf.TagCoarrayType)
	_register("debug/dwarf.TagCommonDwarfBlock", debug_dwarf.TagCommonDwarfBlock)
	_register("debug/dwarf.TagCommonInclusion", debug_dwarf.TagCommonInclusion)
	_register("debug/dwarf.TagCompileUnit", debug_dwarf.TagCompileUnit)
	_register("debug/dwarf.TagCondition", debug_dwarf.TagCondition)
	_register("debug/dwarf.TagConstType", debug_dwarf.TagConstType)
	_register("debug/dwarf.TagConstant", debug_dwarf.TagConstant)
	_register("debug/dwarf.TagDwarfProcedure", debug_dwarf.TagDwarfProcedure)
	_register("debug/dwarf.TagDynamicType", debug_dwarf.TagDynamicType)
	_register("debug/dwarf.TagEntryPoint", debug_dwarf.TagEntryPoint)
	_register("debug/dwarf.TagEnumerationType", debug_dwarf.TagEnumerationType)
	_register("debug/dwarf.TagEnumerator", debug_dwarf.TagEnumerator)
	_register("debug/dwarf.TagFileType", debug_dwarf.TagFileType)
	_register("debug/dwarf.TagFormalParameter", debug_dwarf.TagFormalParameter)
	_register("debug/dwarf.TagFriend", debug_dwarf.TagFriend)
	_register("debug/dwarf.TagGenericSubrange", debug_dwarf.TagGenericSubrange)
	_register("debug/dwarf.TagImmutableType", debug_dwarf.TagImmutableType)
	_register("debug/dwarf.TagImportedDeclaration", debug_dwarf.TagImportedDeclaration)
	_register("debug/dwarf.TagImportedModule", debug_dwarf.TagImportedModule)
	_register("debug/dwarf.TagImportedUnit", debug_dwarf.TagImportedUnit)
	_register("debug/dwarf.TagInheritance", debug_dwarf.TagInheritance)
	_register("debug/dwarf.TagInlinedSubroutine", debug_dwarf.TagInlinedSubroutine)
	_register("debug/dwarf.TagInterfaceType", debug_dwarf.TagInterfaceType)
	_register("debug/dwarf.TagLabel", debug_dwarf.TagLabel)
	_register("debug/dwarf.TagLexDwarfBlock", debug_dwarf.TagLexDwarfBlock)
	_register("debug/dwarf.TagMember", debug_dwarf.TagMember)
	_register("debug/dwarf.TagModule", debug_dwarf.TagModule)
	_register("debug/dwarf.TagMutableType", debug_dwarf.TagMutableType)
	_register("debug/dwarf.TagNamelist", debug_dwarf.TagNamelist)
	_register("debug/dwarf.TagNamelistItem", debug_dwarf.TagNamelistItem)
	_register("debug/dwarf.TagNamespace", debug_dwarf.TagNamespace)
	_register("debug/dwarf.TagPackedType", debug_dwarf.TagPackedType)
	_register("debug/dwarf.TagPartialUnit", debug_dwarf.TagPartialUnit)
	_register("debug/dwarf.TagPointerType", debug_dwarf.TagPointerType)
	_register("debug/dwarf.TagPtrToMemberType", debug_dwarf.TagPtrToMemberType)
	_register("debug/dwarf.TagReferenceType", debug_dwarf.TagReferenceType)
	_register("debug/dwarf.TagRestrictType", debug_dwarf.TagRestrictType)
	_register("debug/dwarf.TagRvalueReferenceType", debug_dwarf.TagRvalueReferenceType)
	_register("debug/dwarf.TagSetType", debug_dwarf.TagSetType)
	_register("debug/dwarf.TagSharedType", debug_dwarf.TagSharedType)
	_register("debug/dwarf.TagSkeletonUnit", debug_dwarf.TagSkeletonUnit)
	_register("debug/dwarf.TagStringType", debug_dwarf.TagStringType)
	_register("debug/dwarf.TagStructType", debug_dwarf.TagStructType)
	_register("debug/dwarf.TagSubprogram", debug_dwarf.TagSubprogram)
	_register("debug/dwarf.TagSubrangeType", debug_dwarf.TagSubrangeType)
	_register("debug/dwarf.TagSubroutineType", debug_dwarf.TagSubroutineType)
	_register("debug/dwarf.TagTemplateAlias", debug_dwarf.TagTemplateAlias)
	_register("debug/dwarf.TagTemplateTypeParameter", debug_dwarf.TagTemplateTypeParameter)
	_register("debug/dwarf.TagTemplateValueParameter", debug_dwarf.TagTemplateValueParameter)
	_register("debug/dwarf.TagThrownType", debug_dwarf.TagThrownType)
	_register("debug/dwarf.TagTryDwarfBlock", debug_dwarf.TagTryDwarfBlock)
	_register("debug/dwarf.TagTypeUnit", debug_dwarf.TagTypeUnit)
	_register("debug/dwarf.TagTypedef", debug_dwarf.TagTypedef)
	_register("debug/dwarf.TagUnionType", debug_dwarf.TagUnionType)
	_register("debug/dwarf.TagUnspecifiedParameters", debug_dwarf.TagUnspecifiedParameters)
	_register("debug/dwarf.TagUnspecifiedType", debug_dwarf.TagUnspecifiedType)
	_register("debug/dwarf.TagVariable", debug_dwarf.TagVariable)
	_register("debug/dwarf.TagVariant", debug_dwarf.TagVariant)
	_register("debug/dwarf.TagVariantPart", debug_dwarf.TagVariantPart)
	_register("debug/dwarf.TagVolatileType", debug_dwarf.TagVolatileType)
	_register("debug/dwarf.TagWithStmt", debug_dwarf.TagWithStmt)
	_register("debug/dwarf.Type", reflect.TypeOf((*debug_dwarf.Type)(nil)).Elem())
	_register("debug/dwarf.TypedefType", reflect.TypeOf((*debug_dwarf.TypedefType)(nil)).Elem())
	_register("debug/dwarf.UcharType", reflect.TypeOf((*debug_dwarf.UcharType)(nil)).Elem())
	_register("debug/dwarf.UintType", reflect.TypeOf((*debug_dwarf.UintType)(nil)).Elem())
	_register("debug/dwarf.UnspecifiedType", reflect.TypeOf((*debug_dwarf.UnspecifiedType)(nil)).Elem())
	_register("debug/dwarf.UnsupportedType", reflect.TypeOf((*debug_dwarf.UnsupportedType)(nil)).Elem())
	_register("debug/dwarf.VoidType", reflect.TypeOf((*debug_dwarf.VoidType)(nil)).Elem())

	// package debug/elf
	////////////////////////////////////////
	_register("debug/elf.ARM_MAGIC_TRAMP_NUMBER", debug_elf.ARM_MAGIC_TRAMP_NUMBER)
	_register("debug/elf.COMPRESS_HIOS", debug_elf.COMPRESS_HIOS)
	_register("debug/elf.COMPRESS_HIPROC", debug_elf.COMPRESS_HIPROC)
	_register("debug/elf.COMPRESS_LOOS", debug_elf.COMPRESS_LOOS)
	_register("debug/elf.COMPRESS_LOPROC", debug_elf.COMPRESS_LOPROC)
	_register("debug/elf.COMPRESS_ZLIB", debug_elf.COMPRESS_ZLIB)
	_register("debug/elf.Chdr32", reflect.TypeOf((*debug_elf.Chdr32)(nil)).Elem())
	_register("debug/elf.Chdr64", reflect.TypeOf((*debug_elf.Chdr64)(nil)).Elem())
	_register("debug/elf.Class", reflect.TypeOf((*debug_elf.Class)(nil)).Elem())
	_register("debug/elf.CompressionType", reflect.TypeOf((*debug_elf.CompressionType)(nil)).Elem())
	_register("debug/elf.DF_BIND_NOW", debug_elf.DF_BIND_NOW)
	_register("debug/elf.DF_ORIGIN", debug_elf.DF_ORIGIN)
	_register("debug/elf.DF_STATIC_TLS", debug_elf.DF_STATIC_TLS)
	_register("debug/elf.DF_SYMBOLIC", debug_elf.DF_SYMBOLIC)
	_register("debug/elf.DF_TEXTREL", debug_elf.DF_TEXTREL)
	_register("debug/elf.DT_ADDRRNGHI", debug_elf.DT_ADDRRNGHI)
	_register("debug/elf.DT_ADDRRNGLO", debug_elf.DT_ADDRRNGLO)
	_register("debug/elf.DT_AUDIT", debug_elf.DT_AUDIT)
	_register("debug/elf.DT_AUXILIARY", debug_elf.DT_AUXILIARY)
	_register("debug/elf.DT_BIND_NOW", debug_elf.DT_BIND_NOW)
	_register("debug/elf.DT_CHECKSUM", debug_elf.DT_CHECKSUM)
	_register("debug/elf.DT_CONFIG", debug_elf.DT_CONFIG)
	_register("debug/elf.DT_DEBUG", debug_elf.DT_DEBUG)
	_register("debug/elf.DT_DEPAUDIT", debug_elf.DT_DEPAUDIT)
	_register("debug/elf.DT_ENCODING", debug_elf.DT_ENCODING)
	_register("debug/elf.DT_FEATURE", debug_elf.DT_FEATURE)
	_register("debug/elf.DT_FILTER", debug_elf.DT_FILTER)
	_register("debug/elf.DT_FINI", debug_elf.DT_FINI)
	_register("debug/elf.DT_FINI_ARRAY", debug_elf.DT_FINI_ARRAY)
	_register("debug/elf.DT_FINI_ARRAYSZ", debug_elf.DT_FINI_ARRAYSZ)
	_register("debug/elf.DT_FLAGS", debug_elf.DT_FLAGS)
	_register("debug/elf.DT_FLAGS_1", debug_elf.DT_FLAGS_1)
	_register("debug/elf.DT_GNU_CONFLICT", debug_elf.DT_GNU_CONFLICT)
	_register("debug/elf.DT_GNU_CONFLICTSZ", debug_elf.DT_GNU_CONFLICTSZ)
	_register("debug/elf.DT_GNU_HASH", debug_elf.DT_GNU_HASH)
	_register("debug/elf.DT_GNU_LIBLIST", debug_elf.DT_GNU_LIBLIST)
	_register("debug/elf.DT_GNU_LIBLISTSZ", debug_elf.DT_GNU_LIBLISTSZ)
	_register("debug/elf.DT_GNU_PRELINKED", debug_elf.DT_GNU_PRELINKED)
	_register("debug/elf.DT_HASH", debug_elf.DT_HASH)
	_register("debug/elf.DT_HIOS", debug_elf.DT_HIOS)
	_register("debug/elf.DT_HIPROC", debug_elf.DT_HIPROC)
	_register("debug/elf.DT_INIT", debug_elf.DT_INIT)
	_register("debug/elf.DT_INIT_ARRAY", debug_elf.DT_INIT_ARRAY)
	_register("debug/elf.DT_INIT_ARRAYSZ", debug_elf.DT_INIT_ARRAYSZ)
	_register("debug/elf.DT_JMPREL", debug_elf.DT_JMPREL)
	_register("debug/elf.DT_LOOS", debug_elf.DT_LOOS)
	_register("debug/elf.DT_LOPROC", debug_elf.DT_LOPROC)
	_register("debug/elf.DT_MIPS_AUX_DYNAMIC", debug_elf.DT_MIPS_AUX_DYNAMIC)
	_register("debug/elf.DT_MIPS_BASE_ADDRESS", debug_elf.DT_MIPS_BASE_ADDRESS)
	_register("debug/elf.DT_MIPS_COMPACT_SIZE", debug_elf.DT_MIPS_COMPACT_SIZE)
	_register("debug/elf.DT_MIPS_CONFLICT", debug_elf.DT_MIPS_CONFLICT)
	_register("debug/elf.DT_MIPS_CONFLICTNO", debug_elf.DT_MIPS_CONFLICTNO)
	_register("debug/elf.DT_MIPS_CXX_FLAGS", debug_elf.DT_MIPS_CXX_FLAGS)
	_register("debug/elf.DT_MIPS_DELTA_CLASS", debug_elf.DT_MIPS_DELTA_CLASS)
	_register("debug/elf.DT_MIPS_DELTA_CLASSSYM", debug_elf.DT_MIPS_DELTA_CLASSSYM)
	_register("debug/elf.DT_MIPS_DELTA_CLASSSYM_NO", debug_elf.DT_MIPS_DELTA_CLASSSYM_NO)
	_register("debug/elf.DT_MIPS_DELTA_CLASS_NO", debug_elf.DT_MIPS_DELTA_CLASS_NO)
	_register("debug/elf.DT_MIPS_DELTA_INSTANCE", debug_elf.DT_MIPS_DELTA_INSTANCE)
	_register("debug/elf.DT_MIPS_DELTA_INSTANCE_NO", debug_elf.DT_MIPS_DELTA_INSTANCE_NO)
	_register("debug/elf.DT_MIPS_DELTA_RELOC", debug_elf.DT_MIPS_DELTA_RELOC)
	_register("debug/elf.DT_MIPS_DELTA_RELOC_NO", debug_elf.DT_MIPS_DELTA_RELOC_NO)
	_register("debug/elf.DT_MIPS_DELTA_SYM", debug_elf.DT_MIPS_DELTA_SYM)
	_register("debug/elf.DT_MIPS_DELTA_SYM_NO", debug_elf.DT_MIPS_DELTA_SYM_NO)
	_register("debug/elf.DT_MIPS_DYNSTR_ALIGN", debug_elf.DT_MIPS_DYNSTR_ALIGN)
	_register("debug/elf.DT_MIPS_FLAGS", debug_elf.DT_MIPS_FLAGS)
	_register("debug/elf.DT_MIPS_GOTSYM", debug_elf.DT_MIPS_GOTSYM)
	_register("debug/elf.DT_MIPS_GP_VALUE", debug_elf.DT_MIPS_GP_VALUE)
	_register("debug/elf.DT_MIPS_HIDDEN_GOTIDX", debug_elf.DT_MIPS_HIDDEN_GOTIDX)
	_register("debug/elf.DT_MIPS_HIPAGENO", debug_elf.DT_MIPS_HIPAGENO)
	_register("debug/elf.DT_MIPS_ICHECKSUM", debug_elf.DT_MIPS_ICHECKSUM)
	_register("debug/elf.DT_MIPS_INTERFACE", debug_elf.DT_MIPS_INTERFACE)
	_register("debug/elf.DT_MIPS_INTERFACE_SIZE", debug_elf.DT_MIPS_INTERFACE_SIZE)
	_register("debug/elf.DT_MIPS_IVERSION", debug_elf.DT_MIPS_IVERSION)
	_register("debug/elf.DT_MIPS_LIBLIST", debug_elf.DT_MIPS_LIBLIST)
	_register("debug/elf.DT_MIPS_LIBLISTNO", debug_elf.DT_MIPS_LIBLISTNO)
	_register("debug/elf.DT_MIPS_LOCALPAGE_GOTIDX", debug_elf.DT_MIPS_LOCALPAGE_GOTIDX)
	_register("debug/elf.DT_MIPS_LOCAL_GOTIDX", debug_elf.DT_MIPS_LOCAL_GOTIDX)
	_register("debug/elf.DT_MIPS_LOCAL_GOTNO", debug_elf.DT_MIPS_LOCAL_GOTNO)
	_register("debug/elf.DT_MIPS_MSYM", debug_elf.DT_MIPS_MSYM)
	_register("debug/elf.DT_MIPS_OPTIONS", debug_elf.DT_MIPS_OPTIONS)
	_register("debug/elf.DT_MIPS_PERF_SUFFIX", debug_elf.DT_MIPS_PERF_SUFFIX)
	_register("debug/elf.DT_MIPS_PIXIE_INIT", debug_elf.DT_MIPS_PIXIE_INIT)
	_register("debug/elf.DT_MIPS_PLTGOT", debug_elf.DT_MIPS_PLTGOT)
	_register("debug/elf.DT_MIPS_PROTECTED_GOTIDX", debug_elf.DT_MIPS_PROTECTED_GOTIDX)
	_register("debug/elf.DT_MIPS_RLD_MAP", debug_elf.DT_MIPS_RLD_MAP)
	_register("debug/elf.DT_MIPS_RLD_MAP_REL", debug_elf.DT_MIPS_RLD_MAP_REL)
	_register("debug/elf.DT_MIPS_RLD_TEXT_RESOLVE_ADDR", debug_elf.DT_MIPS_RLD_TEXT_RESOLVE_ADDR)
	_register("debug/elf.DT_MIPS_RLD_VERSION", debug_elf.DT_MIPS_RLD_VERSION)
	_register("debug/elf.DT_MIPS_RWPLT", debug_elf.DT_MIPS_RWPLT)
	_register("debug/elf.DT_MIPS_SYMBOL_LIB", debug_elf.DT_MIPS_SYMBOL_LIB)
	_register("debug/elf.DT_MIPS_SYMTABNO", debug_elf.DT_MIPS_SYMTABNO)
	_register("debug/elf.DT_MIPS_TIME_STAMP", debug_elf.DT_MIPS_TIME_STAMP)
	_register("debug/elf.DT_MIPS_UNREFEXTNO", debug_elf.DT_MIPS_UNREFEXTNO)
	_register("debug/elf.DT_MOVEENT", debug_elf.DT_MOVEENT)
	_register("debug/elf.DT_MOVESZ", debug_elf.DT_MOVESZ)
	_register("debug/elf.DT_MOVETAB", debug_elf.DT_MOVETAB)
	_register("debug/elf.DT_NEEDED", debug_elf.DT_NEEDED)
	_register("debug/elf.DT_NULL", debug_elf.DT_NULL)
	_register("debug/elf.DT_PLTGOT", debug_elf.DT_PLTGOT)
	_register("debug/elf.DT_PLTPAD", debug_elf.DT_PLTPAD)
	_register("debug/elf.DT_PLTPADSZ", debug_elf.DT_PLTPADSZ)
	_register("debug/elf.DT_PLTREL", debug_elf.DT_PLTREL)
	_register("debug/elf.DT_PLTRELSZ", debug_elf.DT_PLTRELSZ)
	_register("debug/elf.DT_POSFLAG_1", debug_elf.DT_POSFLAG_1)
	_register("debug/elf.DT_PPC64_GLINK", debug_elf.DT_PPC64_GLINK)
	_register("debug/elf.DT_PPC64_OPD", debug_elf.DT_PPC64_OPD)
	_register("debug/elf.DT_PPC64_OPDSZ", debug_elf.DT_PPC64_OPDSZ)
	_register("debug/elf.DT_PPC64_OPT", debug_elf.DT_PPC64_OPT)
	_register("debug/elf.DT_PPC_GOT", debug_elf.DT_PPC_GOT)
	_register("debug/elf.DT_PPC_OPT", debug_elf.DT_PPC_OPT)
	_register("debug/elf.DT_PREINIT_ARRAY", debug_elf.DT_PREINIT_ARRAY)
	_register("debug/elf.DT_PREINIT_ARRAYSZ", debug_elf.DT_PREINIT_ARRAYSZ)
	_register("debug/elf.DT_REL", debug_elf.DT_REL)
	_register("debug/elf.DT_RELA", debug_elf.DT_RELA)
	_register("debug/elf.DT_RELACOUNT", debug_elf.DT_RELACOUNT)
	_register("debug/elf.DT_RELAENT", debug_elf.DT_RELAENT)
	_register("debug/elf.DT_RELASZ", debug_elf.DT_RELASZ)
	_register("debug/elf.DT_RELCOUNT", debug_elf.DT_RELCOUNT)
	_register("debug/elf.DT_RELENT", debug_elf.DT_RELENT)
	_register("debug/elf.DT_RELSZ", debug_elf.DT_RELSZ)
	_register("debug/elf.DT_RPATH", debug_elf.DT_RPATH)
	_register("debug/elf.DT_RUNPATH", debug_elf.DT_RUNPATH)
	_register("debug/elf.DT_SONAME", debug_elf.DT_SONAME)
	_register("debug/elf.DT_SPARC_REGISTER", debug_elf.DT_SPARC_REGISTER)
	_register("debug/elf.DT_STRSZ", debug_elf.DT_STRSZ)
	_register("debug/elf.DT_STRTAB", debug_elf.DT_STRTAB)
	_register("debug/elf.DT_SYMBOLIC", debug_elf.DT_SYMBOLIC)
	_register("debug/elf.DT_SYMENT", debug_elf.DT_SYMENT)
	_register("debug/elf.DT_SYMINENT", debug_elf.DT_SYMINENT)
	_register("debug/elf.DT_SYMINFO", debug_elf.DT_SYMINFO)
	_register("debug/elf.DT_SYMINSZ", debug_elf.DT_SYMINSZ)
	_register("debug/elf.DT_SYMTAB", debug_elf.DT_SYMTAB)
	_register("debug/elf.DT_SYMTAB_SHNDX", debug_elf.DT_SYMTAB_SHNDX)
	_register("debug/elf.DT_TEXTREL", debug_elf.DT_TEXTREL)
	_register("debug/elf.DT_TLSDESC_GOT", debug_elf.DT_TLSDESC_GOT)
	_register("debug/elf.DT_TLSDESC_PLT", debug_elf.DT_TLSDESC_PLT)
	_register("debug/elf.DT_USED", debug_elf.DT_USED)
	_register("debug/elf.DT_VALRNGHI", debug_elf.DT_VALRNGHI)
	_register("debug/elf.DT_VALRNGLO", debug_elf.DT_VALRNGLO)
	_register("debug/elf.DT_VERDEF", debug_elf.DT_VERDEF)
	_register("debug/elf.DT_VERDEFNUM", debug_elf.DT_VERDEFNUM)
	_register("debug/elf.DT_VERNEED", debug_elf.DT_VERNEED)
	_register("debug/elf.DT_VERNEEDNUM", debug_elf.DT_VERNEEDNUM)
	_register("debug/elf.DT_VERSYM", debug_elf.DT_VERSYM)
	_register("debug/elf.Data", reflect.TypeOf((*debug_elf.Data)(nil)).Elem())
	_register("debug/elf.Dyn32", reflect.TypeOf((*debug_elf.Dyn32)(nil)).Elem())
	_register("debug/elf.Dyn64", reflect.TypeOf((*debug_elf.Dyn64)(nil)).Elem())
	_register("debug/elf.DynFlag", reflect.TypeOf((*debug_elf.DynFlag)(nil)).Elem())
	_register("debug/elf.DynTag", reflect.TypeOf((*debug_elf.DynTag)(nil)).Elem())
	_register("debug/elf.EI_ABIVERSION", debug_elf.EI_ABIVERSION)
	_register("debug/elf.EI_CLASS", debug_elf.EI_CLASS)
	_register("debug/elf.EI_DATA", debug_elf.EI_DATA)
	_register("debug/elf.EI_NIDENT", debug_elf.EI_NIDENT)
	_register("debug/elf.EI_OSABI", debug_elf.EI_OSABI)
	_register("debug/elf.EI_PAD", debug_elf.EI_PAD)
	_register("debug/elf.EI_VERSION", debug_elf.EI_VERSION)
	_register("debug/elf.ELFCLASS32", debug_elf.ELFCLASS32)
	_register("debug/elf.ELFCLASS64", debug_elf.ELFCLASS64)
	_register("debug/elf.ELFCLASSNONE", debug_elf.ELFCLASSNONE)
	_register("debug/elf.ELFDATA2LSB", debug_elf.ELFDATA2LSB)
	_register("debug/elf.ELFDATA2MSB", debug_elf.ELFDATA2MSB)
	_register("debug/elf.ELFDATANONE", debug_elf.ELFDATANONE)
	_register("debug/elf.ELFMAG", debug_elf.ELFMAG)
	_register("debug/elf.ELFOSABI_86OPEN", debug_elf.ELFOSABI_86OPEN)
	_register("debug/elf.ELFOSABI_AIX", debug_elf.ELFOSABI_AIX)
	_register("debug/elf.ELFOSABI_ARM", debug_elf.ELFOSABI_ARM)
	_register("debug/elf.ELFOSABI_AROS", debug_elf.ELFOSABI_AROS)
	_register("debug/elf.ELFOSABI_CLOUDABI", debug_elf.ELFOSABI_CLOUDABI)
	_register("debug/elf.ELFOSABI_FENIXOS", debug_elf.ELFOSABI_FENIXOS)
	_register("debug/elf.ELFOSABI_FREEBSD", debug_elf.ELFOSABI_FREEBSD)
	_register("debug/elf.ELFOSABI_HPUX", debug_elf.ELFOSABI_HPUX)
	_register("debug/elf.ELFOSABI_HURD", debug_elf.ELFOSABI_HURD)
	_register("debug/elf.ELFOSABI_IRIX", debug_elf.ELFOSABI_IRIX)
	_register("debug/elf.ELFOSABI_LINUX", debug_elf.ELFOSABI_LINUX)
	_register("debug/elf.ELFOSABI_MODESTO", debug_elf.ELFOSABI_MODESTO)
	_register("debug/elf.ELFOSABI_NETBSD", debug_elf.ELFOSABI_NETBSD)
	_register("debug/elf.ELFOSABI_NONE", debug_elf.ELFOSABI_NONE)
	_register("debug/elf.ELFOSABI_NSK", debug_elf.ELFOSABI_NSK)
	_register("debug/elf.ELFOSABI_OPENBSD", debug_elf.ELFOSABI_OPENBSD)
	_register("debug/elf.ELFOSABI_OPENVMS", debug_elf.ELFOSABI_OPENVMS)
	_register("debug/elf.ELFOSABI_SOLARIS", debug_elf.ELFOSABI_SOLARIS)
	_register("debug/elf.ELFOSABI_STANDALONE", debug_elf.ELFOSABI_STANDALONE)
	_register("debug/elf.ELFOSABI_TRU64", debug_elf.ELFOSABI_TRU64)
	_register("debug/elf.EM_386", debug_elf.EM_386)
	_register("debug/elf.EM_486", debug_elf.EM_486)
	_register("debug/elf.EM_56800EX", debug_elf.EM_56800EX)
	_register("debug/elf.EM_68HC05", debug_elf.EM_68HC05)
	_register("debug/elf.EM_68HC08", debug_elf.EM_68HC08)
	_register("debug/elf.EM_68HC11", debug_elf.EM_68HC11)
	_register("debug/elf.EM_68HC12", debug_elf.EM_68HC12)
	_register("debug/elf.EM_68HC16", debug_elf.EM_68HC16)
	_register("debug/elf.EM_68K", debug_elf.EM_68K)
	_register("debug/elf.EM_78KOR", debug_elf.EM_78KOR)
	_register("debug/elf.EM_8051", debug_elf.EM_8051)
	_register("debug/elf.EM_860", debug_elf.EM_860)
	_register("debug/elf.EM_88K", debug_elf.EM_88K)
	_register("debug/elf.EM_960", debug_elf.EM_960)
	_register("debug/elf.EM_AARCH64", debug_elf.EM_AARCH64)
	_register("debug/elf.EM_ALPHA", debug_elf.EM_ALPHA)
	_register("debug/elf.EM_ALPHA_STD", debug_elf.EM_ALPHA_STD)
	_register("debug/elf.EM_ALTERA_NIOS2", debug_elf.EM_ALTERA_NIOS2)
	_register("debug/elf.EM_AMDGPU", debug_elf.EM_AMDGPU)
	_register("debug/elf.EM_ARC", debug_elf.EM_ARC)
	_register("debug/elf.EM_ARCA", debug_elf.EM_ARCA)
	_register("debug/elf.EM_ARC_COMPACT", debug_elf.EM_ARC_COMPACT)
	_register("debug/elf.EM_ARC_COMPACT2", debug_elf.EM_ARC_COMPACT2)
	_register("debug/elf.EM_ARM", debug_elf.EM_ARM)
	_register("debug/elf.EM_AVR", debug_elf.EM_AVR)
	_register("debug/elf.EM_AVR32", debug_elf.EM_AVR32)
	_register("debug/elf.EM_BA1", debug_elf.EM_BA1)
	_register("debug/elf.EM_BA2", debug_elf.EM_BA2)
	_register("debug/elf.EM_BLACKFIN", debug_elf.EM_BLACKFIN)
	_register("debug/elf.EM_BPF", debug_elf.EM_BPF)
	_register("debug/elf.EM_C166", debug_elf.EM_C166)
	_register("debug/elf.EM_CDP", debug_elf.EM_CDP)
	_register("debug/elf.EM_CE", debug_elf.EM_CE)
	_register("debug/elf.EM_CLOUDSHIELD", debug_elf.EM_CLOUDSHIELD)
	_register("debug/elf.EM_COGE", debug_elf.EM_COGE)
	_register("debug/elf.EM_COLDFIRE", debug_elf.EM_COLDFIRE)
	_register("debug/elf.EM_COOL", debug_elf.EM_COOL)
	_register("debug/elf.EM_COREA_1ST", debug_elf.EM_COREA_1ST)
	_register("debug/elf.EM_COREA_2ND", debug_elf.EM_COREA_2ND)
	_register("debug/elf.EM_CR", debug_elf.EM_CR)
	_register("debug/elf.EM_CR16", debug_elf.EM_CR16)
	_register("debug/elf.EM_CRAYNV2", debug_elf.EM_CRAYNV2)
	_register("debug/elf.EM_CRIS", debug_elf.EM_CRIS)
	_register("debug/elf.EM_CRX", debug_elf.EM_CRX)
	_register("debug/elf.EM_CSR_KALIMBA", debug_elf.EM_CSR_KALIMBA)
	_register("debug/elf.EM_CUDA", debug_elf.EM_CUDA)
	_register("debug/elf.EM_CYPRESS_M8C", debug_elf.EM_CYPRESS_M8C)
	_register("debug/elf.EM_D10V", debug_elf.EM_D10V)
	_register("debug/elf.EM_D30V", debug_elf.EM_D30V)
	_register("debug/elf.EM_DSP24", debug_elf.EM_DSP24)
	_register("debug/elf.EM_DSPIC30F", debug_elf.EM_DSPIC30F)
	_register("debug/elf.EM_DXP", debug_elf.EM_DXP)
	_register("debug/elf.EM_ECOG1", debug_elf.EM_ECOG1)
	_register("debug/elf.EM_ECOG16", debug_elf.EM_ECOG16)
	_register("debug/elf.EM_ECOG1X", debug_elf.EM_ECOG1X)
	_register("debug/elf.EM_ECOG2", debug_elf.EM_ECOG2)
	_register("debug/elf.EM_ETPU", debug_elf.EM_ETPU)
	_register("debug/elf.EM_EXCESS", debug_elf.EM_EXCESS)
	_register("debug/elf.EM_F2MC16", debug_elf.EM_F2MC16)
	_register("debug/elf.EM_FIREPATH", debug_elf.EM_FIREPATH)
	_register("debug/elf.EM_FR20", debug_elf.EM_FR20)
	_register("debug/elf.EM_FR30", debug_elf.EM_FR30)
	_register("debug/elf.EM_FT32", debug_elf.EM_FT32)
	_register("debug/elf.EM_FX66", debug_elf.EM_FX66)
	_register("debug/elf.EM_H8S", debug_elf.EM_H8S)
	_register("debug/elf.EM_H8_300", debug_elf.EM_H8_300)
	_register("debug/elf.EM_H8_300H", debug_elf.EM_H8_300H)
	_register("debug/elf.EM_H8_500", debug_elf.EM_H8_500)
	_register("debug/elf.EM_HUANY", debug_elf.EM_HUANY)
	_register("debug/elf.EM_IA_64", debug_elf.EM_IA_64)
	_register("debug/elf.EM_INTEL205", debug_elf.EM_INTEL205)
	_register("debug/elf.EM_INTEL206", debug_elf.EM_INTEL206)
	_register("debug/elf.EM_INTEL207", debug_elf.EM_INTEL207)
	_register("debug/elf.EM_INTEL208", debug_elf.EM_INTEL208)
	_register("debug/elf.EM_INTEL209", debug_elf.EM_INTEL209)
	_register("debug/elf.EM_IP2K", debug_elf.EM_IP2K)
	_register("debug/elf.EM_JAVELIN", debug_elf.EM_JAVELIN)
	_register("debug/elf.EM_K10M", debug_elf.EM_K10M)
	_register("debug/elf.EM_KM32", debug_elf.EM_KM32)
	_register("debug/elf.EM_KMX16", debug_elf.EM_KMX16)
	_register("debug/elf.EM_KMX32", debug_elf.EM_KMX32)
	_register("debug/elf.EM_KMX8", debug_elf.EM_KMX8)
	_register("debug/elf.EM_KVARC", debug_elf.EM_KVARC)
	_register("debug/elf.EM_L10M", debug_elf.EM_L10M)
	_register("debug/elf.EM_LANAI", debug_elf.EM_LANAI)
	_register("debug/elf.EM_LATTICEMICO32", debug_elf.EM_LATTICEMICO32)
	_register("debug/elf.EM_LOONGARCH", debug_elf.EM_LOONGARCH)
	_register("debug/elf.EM_M16C", debug_elf.EM_M16C)
	_register("debug/elf.EM_M32", debug_elf.EM_M32)
	_register("debug/elf.EM_M32C", debug_elf.EM_M32C)
	_register("debug/elf.EM_M32R", debug_elf.EM_M32R)
	_register("debug/elf.EM_MANIK", debug_elf.EM_MANIK)
	_register("debug/elf.EM_MAX", debug_elf.EM_MAX)
	_register("debug/elf.EM_MAXQ30", debug_elf.EM_MAXQ30)
	_register("debug/elf.EM_MCHP_PIC", debug_elf.EM_MCHP_PIC)
	_register("debug/elf.EM_MCST_ELBRUS", debug_elf.EM_MCST_ELBRUS)
	_register("debug/elf.EM_ME16", debug_elf.EM_ME16)
	_register("debug/elf.EM_METAG", debug_elf.EM_METAG)
	_register("debug/elf.EM_MICROBLAZE", debug_elf.EM_MICROBLAZE)
	_register("debug/elf.EM_MIPS", debug_elf.EM_MIPS)
	_register("debug/elf.EM_MIPS_RS3_LE", debug_elf.EM_MIPS_RS3_LE)
	_register("debug/elf.EM_MIPS_RS4_BE", debug_elf.EM_MIPS_RS4_BE)
	_register("debug/elf.EM_MIPS_X", debug_elf.EM_MIPS_X)
	_register("debug/elf.EM_MMA", debug_elf.EM_MMA)
	_register("debug/elf.EM_MMDSP_PLUS", debug_elf.EM_MMDSP_PLUS)
	_register("debug/elf.EM_MMIX", debug_elf.EM_MMIX)
	_register("debug/elf.EM_MN10200", debug_elf.EM_MN10200)
	_register("debug/elf.EM_MN10300", debug_elf.EM_MN10300)
	_register("debug/elf.EM_MOXIE", debug_elf.EM_MOXIE)
	_register("debug/elf.EM_MSP430", debug_elf.EM_MSP430)
	_register("debug/elf.EM_NCPU", debug_elf.EM_NCPU)
	_register("debug/elf.EM_NDR1", debug_elf.EM_NDR1)
	_register("debug/elf.EM_NDS32", debug_elf.EM_NDS32)
	_register("debug/elf.EM_NONE", debug_elf.EM_NONE)
	_register("debug/elf.EM_NORC", debug_elf.EM_NORC)
	_register("debug/elf.EM_NS32K", debug_elf.EM_NS32K)
	_register("debug/elf.EM_OPEN8", debug_elf.EM_OPEN8)
	_register("debug/elf.EM_OPENRISC", debug_elf.EM_OPENRISC)
	_register("debug/elf.EM_PARISC", debug_elf.EM_PARISC)
	_register("debug/elf.EM_PCP", debug_elf.EM_PCP)
	_register("debug/elf.EM_PDP10", debug_elf.EM_PDP10)
	_register("debug/elf.EM_PDP11", debug_elf.EM_PDP11)
	_register("debug/elf.EM_PDSP", debug_elf.EM_PDSP)
	_register("debug/elf.EM_PJ", debug_elf.EM_PJ)
	_register("debug/elf.EM_PPC", debug_elf.EM_PPC)
	_register("debug/elf.EM_PPC64", debug_elf.EM_PPC64)
	_register("debug/elf.EM_PRISM", debug_elf.EM_PRISM)
	_register("debug/elf.EM_QDSP6", debug_elf.EM_QDSP6)
	_register("debug/elf.EM_R32C", debug_elf.EM_R32C)
	_register("debug/elf.EM_RCE", debug_elf.EM_RCE)
	_register("debug/elf.EM_RH32", debug_elf.EM_RH32)
	_register("debug/elf.EM_RISCV", debug_elf.EM_RISCV)
	_register("debug/elf.EM_RL78", debug_elf.EM_RL78)
	_register("debug/elf.EM_RS08", debug_elf.EM_RS08)
	_register("debug/elf.EM_RX", debug_elf.EM_RX)
	_register("debug/elf.EM_S370", debug_elf.EM_S370)
	_register("debug/elf.EM_S390", debug_elf.EM_S390)
	_register("debug/elf.EM_SCORE7", debug_elf.EM_SCORE7)
	_register("debug/elf.EM_SEP", debug_elf.EM_SEP)
	_register("debug/elf.EM_SE_C17", debug_elf.EM_SE_C17)
	_register("debug/elf.EM_SE_C33", debug_elf.EM_SE_C33)
	_register("debug/elf.EM_SH", debug_elf.EM_SH)
	_register("debug/elf.EM_SHARC", debug_elf.EM_SHARC)
	_register("debug/elf.EM_SLE9X", debug_elf.EM_SLE9X)
	_register("debug/elf.EM_SNP1K", debug_elf.EM_SNP1K)
	_register("debug/elf.EM_SPARC", debug_elf.EM_SPARC)
	_register("debug/elf.EM_SPARC32PLUS", debug_elf.EM_SPARC32PLUS)
	_register("debug/elf.EM_SPARCV9", debug_elf.EM_SPARCV9)
	_register("debug/elf.EM_ST100", debug_elf.EM_ST100)
	_register("debug/elf.EM_ST19", debug_elf.EM_ST19)
	_register("debug/elf.EM_ST200", debug_elf.EM_ST200)
	_register("debug/elf.EM_ST7", debug_elf.EM_ST7)
	_register("debug/elf.EM_ST9PLUS", debug_elf.EM_ST9PLUS)
	_register("debug/elf.EM_STARCORE", debug_elf.EM_STARCORE)
	_register("debug/elf.EM_STM8", debug_elf.EM_STM8)
	_register("debug/elf.EM_STXP7X", debug_elf.EM_STXP7X)
	_register("debug/elf.EM_SVX", debug_elf.EM_SVX)
	_register("debug/elf.EM_TILE64", debug_elf.EM_TILE64)
	_register("debug/elf.EM_TILEGX", debug_elf.EM_TILEGX)
	_register("debug/elf.EM_TILEPRO", debug_elf.EM_TILEPRO)
	_register("debug/elf.EM_TINYJ", debug_elf.EM_TINYJ)
	_register("debug/elf.EM_TI_ARP32", debug_elf.EM_TI_ARP32)
	_register("debug/elf.EM_TI_C2000", debug_elf.EM_TI_C2000)
	_register("debug/elf.EM_TI_C5500", debug_elf.EM_TI_C5500)
	_register("debug/elf.EM_TI_C6000", debug_elf.EM_TI_C6000)
	_register("debug/elf.EM_TI_PRU", debug_elf.EM_TI_PRU)
	_register("debug/elf.EM_TMM_GPP", debug_elf.EM_TMM_GPP)
	_register("debug/elf.EM_TPC", debug_elf.EM_TPC)
	_register("debug/elf.EM_TRICORE", debug_elf.EM_TRICORE)
	_register("debug/elf.EM_TRIMEDIA", debug_elf.EM_TRIMEDIA)
	_register("debug/elf.EM_TSK3000", debug_elf.EM_TSK3000)
	_register("debug/elf.EM_UNICORE", debug_elf.EM_UNICORE)
	_register("debug/elf.EM_V800", debug_elf.EM_V800)
	_register("debug/elf.EM_V850", debug_elf.EM_V850)
	_register("debug/elf.EM_VAX", debug_elf.EM_VAX)
	_register("debug/elf.EM_VIDEOCORE", debug_elf.EM_VIDEOCORE)
	_register("debug/elf.EM_VIDEOCORE3", debug_elf.EM_VIDEOCORE3)
	_register("debug/elf.EM_VIDEOCORE5", debug_elf.EM_VIDEOCORE5)
	_register("debug/elf.EM_VISIUM", debug_elf.EM_VISIUM)
	_register("debug/elf.EM_VPP500", debug_elf.EM_VPP500)
	_register("debug/elf.EM_X86_64", debug_elf.EM_X86_64)
	_register("debug/elf.EM_XCORE", debug_elf.EM_XCORE)
	_register("debug/elf.EM_XGATE", debug_elf.EM_XGATE)
	_register("debug/elf.EM_XIMO16", debug_elf.EM_XIMO16)
	_register("debug/elf.EM_XTENSA", debug_elf.EM_XTENSA)
	_register("debug/elf.EM_Z80", debug_elf.EM_Z80)
	_register("debug/elf.EM_ZSP", debug_elf.EM_ZSP)
	_register("debug/elf.ET_CORE", debug_elf.ET_CORE)
	_register("debug/elf.ET_DYN", debug_elf.ET_DYN)
	_register("debug/elf.ET_EXEC", debug_elf.ET_EXEC)
	_register("debug/elf.ET_HIOS", debug_elf.ET_HIOS)
	_register("debug/elf.ET_HIPROC", debug_elf.ET_HIPROC)
	_register("debug/elf.ET_LOOS", debug_elf.ET_LOOS)
	_register("debug/elf.ET_LOPROC", debug_elf.ET_LOPROC)
	_register("debug/elf.ET_NONE", debug_elf.ET_NONE)
	_register("debug/elf.ET_REL", debug_elf.ET_REL)
	_register("debug/elf.EV_CURRENT", debug_elf.EV_CURRENT)
	_register("debug/elf.EV_NONE", debug_elf.EV_NONE)
	_register("debug/elf.ErrNoSymbols", debug_elf.ErrNoSymbols)
	_register("debug/elf.File", reflect.TypeOf((*debug_elf.File)(nil)).Elem())
	_register("debug/elf.FileHeader", reflect.TypeOf((*debug_elf.FileHeader)(nil)).Elem())
	_register("debug/elf.FormatError", reflect.TypeOf((*debug_elf.FormatError)(nil)).Elem())
	_register("debug/elf.Header32", reflect.TypeOf((*debug_elf.Header32)(nil)).Elem())
	_register("debug/elf.Header64", reflect.TypeOf((*debug_elf.Header64)(nil)).Elem())
	_register("debug/elf.ImportedSymbol", reflect.TypeOf((*debug_elf.ImportedSymbol)(nil)).Elem())
	_register("debug/elf.Machine", reflect.TypeOf((*debug_elf.Machine)(nil)).Elem())
	_register("debug/elf.NT_FPREGSET", debug_elf.NT_FPREGSET)
	_register("debug/elf.NT_PRPSINFO", debug_elf.NT_PRPSINFO)
	_register("debug/elf.NT_PRSTATUS", debug_elf.NT_PRSTATUS)
	_register("debug/elf.NType", reflect.TypeOf((*debug_elf.NType)(nil)).Elem())
	_register("debug/elf.NewFile", debug_elf.NewFile)
	_register("debug/elf.OSABI", reflect.TypeOf((*debug_elf.OSABI)(nil)).Elem())
	_register("debug/elf.Open", debug_elf.Open)
	_register("debug/elf.PF_MASKOS", debug_elf.PF_MASKOS)
	_register("debug/elf.PF_MASKPROC", debug_elf.PF_MASKPROC)
	_register("debug/elf.PF_R", debug_elf.PF_R)
	_register("debug/elf.PF_W", debug_elf.PF_W)
	_register("debug/elf.PF_X", debug_elf.PF_X)
	_register("debug/elf.PT_AARCH64_ARCHEXT", debug_elf.PT_AARCH64_ARCHEXT)
	_register("debug/elf.PT_AARCH64_UNWIND", debug_elf.PT_AARCH64_UNWIND)
	_register("debug/elf.PT_ARM_ARCHEXT", debug_elf.PT_ARM_ARCHEXT)
	_register("debug/elf.PT_ARM_EXIDX", debug_elf.PT_ARM_EXIDX)
	_register("debug/elf.PT_DYNAMIC", debug_elf.PT_DYNAMIC)
	_register("debug/elf.PT_GNU_EH_FRAME", debug_elf.PT_GNU_EH_FRAME)
	_register("debug/elf.PT_GNU_MBIND_HI", debug_elf.PT_GNU_MBIND_HI)
	_register("debug/elf.PT_GNU_MBIND_LO", debug_elf.PT_GNU_MBIND_LO)
	_register("debug/elf.PT_GNU_PROPERTY", debug_elf.PT_GNU_PROPERTY)
	_register("debug/elf.PT_GNU_RELRO", debug_elf.PT_GNU_RELRO)
	_register("debug/elf.PT_GNU_STACK", debug_elf.PT_GNU_STACK)
	_register("debug/elf.PT_HIOS", debug_elf.PT_HIOS)
	_register("debug/elf.PT_HIPROC", debug_elf.PT_HIPROC)
	_register("debug/elf.PT_INTERP", debug_elf.PT_INTERP)
	_register("debug/elf.PT_LOAD", debug_elf.PT_LOAD)
	_register("debug/elf.PT_LOOS", debug_elf.PT_LOOS)
	_register("debug/elf.PT_LOPROC", debug_elf.PT_LOPROC)
	_register("debug/elf.PT_MIPS_ABIFLAGS", debug_elf.PT_MIPS_ABIFLAGS)
	_register("debug/elf.PT_MIPS_OPTIONS", debug_elf.PT_MIPS_OPTIONS)
	_register("debug/elf.PT_MIPS_REGINFO", debug_elf.PT_MIPS_REGINFO)
	_register("debug/elf.PT_MIPS_RTPROC", debug_elf.PT_MIPS_RTPROC)
	_register("debug/elf.PT_NOTE", debug_elf.PT_NOTE)
	_register("debug/elf.PT_NULL", debug_elf.PT_NULL)
	_register("debug/elf.PT_OPENBSD_BOOTDATA", debug_elf.PT_OPENBSD_BOOTDATA)
	_register("debug/elf.PT_OPENBSD_RANDOMIZE", debug_elf.PT_OPENBSD_RANDOMIZE)
	_register("debug/elf.PT_OPENBSD_WXNEEDED", debug_elf.PT_OPENBSD_WXNEEDED)
	_register("debug/elf.PT_PAX_FLAGS", debug_elf.PT_PAX_FLAGS)
	_register("debug/elf.PT_PHDR", debug_elf.PT_PHDR)
	_register("debug/elf.PT_S390_PGSTE", debug_elf.PT_S390_PGSTE)
	_register("debug/elf.PT_SHLIB", debug_elf.PT_SHLIB)
	_register("debug/elf.PT_SUNWSTACK", debug_elf.PT_SUNWSTACK)
	_register("debug/elf.PT_SUNW_EH_FRAME", debug_elf.PT_SUNW_EH_FRAME)
	_register("debug/elf.PT_TLS", debug_elf.PT_TLS)
	_register("debug/elf.Prog", reflect.TypeOf((*debug_elf.Prog)(nil)).Elem())
	_register("debug/elf.Prog32", reflect.TypeOf((*debug_elf.Prog32)(nil)).Elem())
	_register("debug/elf.Prog64", reflect.TypeOf((*debug_elf.Prog64)(nil)).Elem())
	_register("debug/elf.ProgFlag", reflect.TypeOf((*debug_elf.ProgFlag)(nil)).Elem())
	_register("debug/elf.ProgHeader", reflect.TypeOf((*debug_elf.ProgHeader)(nil)).Elem())
	_register("debug/elf.ProgType", reflect.TypeOf((*debug_elf.ProgType)(nil)).Elem())
	_register("debug/elf.R_386", reflect.TypeOf((*debug_elf.R_386)(nil)).Elem())
	_register("debug/elf.R_386_16", debug_elf.R_386_16)
	_register("debug/elf.R_386_32", debug_elf.R_386_32)
	_register("debug/elf.R_386_32PLT", debug_elf.R_386_32PLT)
	_register("debug/elf.R_386_8", debug_elf.R_386_8)
	_register("debug/elf.R_386_COPY", debug_elf.R_386_COPY)
	_register("debug/elf.R_386_GLOB_DAT", debug_elf.R_386_GLOB_DAT)
	_register("debug/elf.R_386_GOT32", debug_elf.R_386_GOT32)
	_register("debug/elf.R_386_GOT32X", debug_elf.R_386_GOT32X)
	_register("debug/elf.R_386_GOTOFF", debug_elf.R_386_GOTOFF)
	_register("debug/elf.R_386_GOTPC", debug_elf.R_386_GOTPC)
	_register("debug/elf.R_386_IRELATIVE", debug_elf.R_386_IRELATIVE)
	_register("debug/elf.R_386_JMP_SLOT", debug_elf.R_386_JMP_SLOT)
	_register("debug/elf.R_386_NONE", debug_elf.R_386_NONE)
	_register("debug/elf.R_386_PC16", debug_elf.R_386_PC16)
	_register("debug/elf.R_386_PC32", debug_elf.R_386_PC32)
	_register("debug/elf.R_386_PC8", debug_elf.R_386_PC8)
	_register("debug/elf.R_386_PLT32", debug_elf.R_386_PLT32)
	_register("debug/elf.R_386_RELATIVE", debug_elf.R_386_RELATIVE)
	_register("debug/elf.R_386_SIZE32", debug_elf.R_386_SIZE32)
	_register("debug/elf.R_386_TLS_DESC", debug_elf.R_386_TLS_DESC)
	_register("debug/elf.R_386_TLS_DESC_CALL", debug_elf.R_386_TLS_DESC_CALL)
	_register("debug/elf.R_386_TLS_DTPMOD32", debug_elf.R_386_TLS_DTPMOD32)
	_register("debug/elf.R_386_TLS_DTPOFF32", debug_elf.R_386_TLS_DTPOFF32)
	_register("debug/elf.R_386_TLS_GD", debug_elf.R_386_TLS_GD)
	_register("debug/elf.R_386_TLS_GD_32", debug_elf.R_386_TLS_GD_32)
	_register("debug/elf.R_386_TLS_GD_CALL", debug_elf.R_386_TLS_GD_CALL)
	_register("debug/elf.R_386_TLS_GD_POP", debug_elf.R_386_TLS_GD_POP)
	_register("debug/elf.R_386_TLS_GD_PUSH", debug_elf.R_386_TLS_GD_PUSH)
	_register("debug/elf.R_386_TLS_GOTDESC", debug_elf.R_386_TLS_GOTDESC)
	_register("debug/elf.R_386_TLS_GOTIE", debug_elf.R_386_TLS_GOTIE)
	_register("debug/elf.R_386_TLS_IE", debug_elf.R_386_TLS_IE)
	_register("debug/elf.R_386_TLS_IE_32", debug_elf.R_386_TLS_IE_32)
	_register("debug/elf.R_386_TLS_LDM", debug_elf.R_386_TLS_LDM)
	_register("debug/elf.R_386_TLS_LDM_32", debug_elf.R_386_TLS_LDM_32)
	_register("debug/elf.R_386_TLS_LDM_CALL", debug_elf.R_386_TLS_LDM_CALL)
	_register("debug/elf.R_386_TLS_LDM_POP", debug_elf.R_386_TLS_LDM_POP)
	_register("debug/elf.R_386_TLS_LDM_PUSH", debug_elf.R_386_TLS_LDM_PUSH)
	_register("debug/elf.R_386_TLS_LDO_32", debug_elf.R_386_TLS_LDO_32)
	_register("debug/elf.R_386_TLS_LE", debug_elf.R_386_TLS_LE)
	_register("debug/elf.R_386_TLS_LE_32", debug_elf.R_386_TLS_LE_32)
	_register("debug/elf.R_386_TLS_TPOFF", debug_elf.R_386_TLS_TPOFF)
	_register("debug/elf.R_386_TLS_TPOFF32", debug_elf.R_386_TLS_TPOFF32)
	_register("debug/elf.R_390", reflect.TypeOf((*debug_elf.R_390)(nil)).Elem())
	_register("debug/elf.R_390_12", debug_elf.R_390_12)
	_register("debug/elf.R_390_16", debug_elf.R_390_16)
	_register("debug/elf.R_390_20", debug_elf.R_390_20)
	_register("debug/elf.R_390_32", debug_elf.R_390_32)
	_register("debug/elf.R_390_64", debug_elf.R_390_64)
	_register("debug/elf.R_390_8", debug_elf.R_390_8)
	_register("debug/elf.R_390_COPY", debug_elf.R_390_COPY)
	_register("debug/elf.R_390_GLOB_DAT", debug_elf.R_390_GLOB_DAT)
	_register("debug/elf.R_390_GOT12", debug_elf.R_390_GOT12)
	_register("debug/elf.R_390_GOT16", debug_elf.R_390_GOT16)
	_register("debug/elf.R_390_GOT20", debug_elf.R_390_GOT20)
	_register("debug/elf.R_390_GOT32", debug_elf.R_390_GOT32)
	_register("debug/elf.R_390_GOT64", debug_elf.R_390_GOT64)
	_register("debug/elf.R_390_GOTENT", debug_elf.R_390_GOTENT)
	_register("debug/elf.R_390_GOTOFF", debug_elf.R_390_GOTOFF)
	_register("debug/elf.R_390_GOTOFF16", debug_elf.R_390_GOTOFF16)
	_register("debug/elf.R_390_GOTOFF64", debug_elf.R_390_GOTOFF64)
	_register("debug/elf.R_390_GOTPC", debug_elf.R_390_GOTPC)
	_register("debug/elf.R_390_GOTPCDBL", debug_elf.R_390_GOTPCDBL)
	_register("debug/elf.R_390_GOTPLT12", debug_elf.R_390_GOTPLT12)
	_register("debug/elf.R_390_GOTPLT16", debug_elf.R_390_GOTPLT16)
	_register("debug/elf.R_390_GOTPLT20", debug_elf.R_390_GOTPLT20)
	_register("debug/elf.R_390_GOTPLT32", debug_elf.R_390_GOTPLT32)
	_register("debug/elf.R_390_GOTPLT64", debug_elf.R_390_GOTPLT64)
	_register("debug/elf.R_390_GOTPLTENT", debug_elf.R_390_GOTPLTENT)
	_register("debug/elf.R_390_GOTPLTOFF16", debug_elf.R_390_GOTPLTOFF16)
	_register("debug/elf.R_390_GOTPLTOFF32", debug_elf.R_390_GOTPLTOFF32)
	_register("debug/elf.R_390_GOTPLTOFF64", debug_elf.R_390_GOTPLTOFF64)
	_register("debug/elf.R_390_JMP_SLOT", debug_elf.R_390_JMP_SLOT)
	_register("debug/elf.R_390_NONE", debug_elf.R_390_NONE)
	_register("debug/elf.R_390_PC16", debug_elf.R_390_PC16)
	_register("debug/elf.R_390_PC16DBL", debug_elf.R_390_PC16DBL)
	_register("debug/elf.R_390_PC32", debug_elf.R_390_PC32)
	_register("debug/elf.R_390_PC32DBL", debug_elf.R_390_PC32DBL)
	_register("debug/elf.R_390_PC64", debug_elf.R_390_PC64)
	_register("debug/elf.R_390_PLT16DBL", debug_elf.R_390_PLT16DBL)
	_register("debug/elf.R_390_PLT32", debug_elf.R_390_PLT32)
	_register("debug/elf.R_390_PLT32DBL", debug_elf.R_390_PLT32DBL)
	_register("debug/elf.R_390_PLT64", debug_elf.R_390_PLT64)
	_register("debug/elf.R_390_RELATIVE", debug_elf.R_390_RELATIVE)
	_register("debug/elf.R_390_TLS_DTPMOD", debug_elf.R_390_TLS_DTPMOD)
	_register("debug/elf.R_390_TLS_DTPOFF", debug_elf.R_390_TLS_DTPOFF)
	_register("debug/elf.R_390_TLS_GD32", debug_elf.R_390_TLS_GD32)
	_register("debug/elf.R_390_TLS_GD64", debug_elf.R_390_TLS_GD64)
	_register("debug/elf.R_390_TLS_GDCALL", debug_elf.R_390_TLS_GDCALL)
	_register("debug/elf.R_390_TLS_GOTIE12", debug_elf.R_390_TLS_GOTIE12)
	_register("debug/elf.R_390_TLS_GOTIE20", debug_elf.R_390_TLS_GOTIE20)
	_register("debug/elf.R_390_TLS_GOTIE32", debug_elf.R_390_TLS_GOTIE32)
	_register("debug/elf.R_390_TLS_GOTIE64", debug_elf.R_390_TLS_GOTIE64)
	_register("debug/elf.R_390_TLS_IE32", debug_elf.R_390_TLS_IE32)
	_register("debug/elf.R_390_TLS_IE64", debug_elf.R_390_TLS_IE64)
	_register("debug/elf.R_390_TLS_IEENT", debug_elf.R_390_TLS_IEENT)
	_register("debug/elf.R_390_TLS_LDCALL", debug_elf.R_390_TLS_LDCALL)
	_register("debug/elf.R_390_TLS_LDM32", debug_elf.R_390_TLS_LDM32)
	_register("debug/elf.R_390_TLS_LDM64", debug_elf.R_390_TLS_LDM64)
	_register("debug/elf.R_390_TLS_LDO32", debug_elf.R_390_TLS_LDO32)
	_register("debug/elf.R_390_TLS_LDO64", debug_elf.R_390_TLS_LDO64)
	_register("debug/elf.R_390_TLS_LE32", debug_elf.R_390_TLS_LE32)
	_register("debug/elf.R_390_TLS_LE64", debug_elf.R_390_TLS_LE64)
	_register("debug/elf.R_390_TLS_LOAD", debug_elf.R_390_TLS_LOAD)
	_register("debug/elf.R_390_TLS_TPOFF", debug_elf.R_390_TLS_TPOFF)
	_register("debug/elf.R_AARCH64", reflect.TypeOf((*debug_elf.R_AARCH64)(nil)).Elem())
	_register("debug/elf.R_AARCH64_ABS16", debug_elf.R_AARCH64_ABS16)
	_register("debug/elf.R_AARCH64_ABS32", debug_elf.R_AARCH64_ABS32)
	_register("debug/elf.R_AARCH64_ABS64", debug_elf.R_AARCH64_ABS64)
	_register("debug/elf.R_AARCH64_ADD_ABS_LO12_NC", debug_elf.R_AARCH64_ADD_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_ADR_GOT_PAGE", debug_elf.R_AARCH64_ADR_GOT_PAGE)
	_register("debug/elf.R_AARCH64_ADR_PREL_LO21", debug_elf.R_AARCH64_ADR_PREL_LO21)
	_register("debug/elf.R_AARCH64_ADR_PREL_PG_HI21", debug_elf.R_AARCH64_ADR_PREL_PG_HI21)
	_register("debug/elf.R_AARCH64_ADR_PREL_PG_HI21_NC", debug_elf.R_AARCH64_ADR_PREL_PG_HI21_NC)
	_register("debug/elf.R_AARCH64_CALL26", debug_elf.R_AARCH64_CALL26)
	_register("debug/elf.R_AARCH64_CONDBR19", debug_elf.R_AARCH64_CONDBR19)
	_register("debug/elf.R_AARCH64_COPY", debug_elf.R_AARCH64_COPY)
	_register("debug/elf.R_AARCH64_GLOB_DAT", debug_elf.R_AARCH64_GLOB_DAT)
	_register("debug/elf.R_AARCH64_GOT_LD_PREL19", debug_elf.R_AARCH64_GOT_LD_PREL19)
	_register("debug/elf.R_AARCH64_IRELATIVE", debug_elf.R_AARCH64_IRELATIVE)
	_register("debug/elf.R_AARCH64_JUMP26", debug_elf.R_AARCH64_JUMP26)
	_register("debug/elf.R_AARCH64_JUMP_SLOT", debug_elf.R_AARCH64_JUMP_SLOT)
	_register("debug/elf.R_AARCH64_LD64_GOTOFF_LO15", debug_elf.R_AARCH64_LD64_GOTOFF_LO15)
	_register("debug/elf.R_AARCH64_LD64_GOTPAGE_LO15", debug_elf.R_AARCH64_LD64_GOTPAGE_LO15)
	_register("debug/elf.R_AARCH64_LD64_GOT_LO12_NC", debug_elf.R_AARCH64_LD64_GOT_LO12_NC)
	_register("debug/elf.R_AARCH64_LDST128_ABS_LO12_NC", debug_elf.R_AARCH64_LDST128_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_LDST16_ABS_LO12_NC", debug_elf.R_AARCH64_LDST16_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_LDST32_ABS_LO12_NC", debug_elf.R_AARCH64_LDST32_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_LDST64_ABS_LO12_NC", debug_elf.R_AARCH64_LDST64_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_LDST8_ABS_LO12_NC", debug_elf.R_AARCH64_LDST8_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_LD_PREL_LO19", debug_elf.R_AARCH64_LD_PREL_LO19)
	_register("debug/elf.R_AARCH64_MOVW_SABS_G0", debug_elf.R_AARCH64_MOVW_SABS_G0)
	_register("debug/elf.R_AARCH64_MOVW_SABS_G1", debug_elf.R_AARCH64_MOVW_SABS_G1)
	_register("debug/elf.R_AARCH64_MOVW_SABS_G2", debug_elf.R_AARCH64_MOVW_SABS_G2)
	_register("debug/elf.R_AARCH64_MOVW_UABS_G0", debug_elf.R_AARCH64_MOVW_UABS_G0)
	_register("debug/elf.R_AARCH64_MOVW_UABS_G0_NC", debug_elf.R_AARCH64_MOVW_UABS_G0_NC)
	_register("debug/elf.R_AARCH64_MOVW_UABS_G1", debug_elf.R_AARCH64_MOVW_UABS_G1)
	_register("debug/elf.R_AARCH64_MOVW_UABS_G1_NC", debug_elf.R_AARCH64_MOVW_UABS_G1_NC)
	_register("debug/elf.R_AARCH64_MOVW_UABS_G2", debug_elf.R_AARCH64_MOVW_UABS_G2)
	_register("debug/elf.R_AARCH64_MOVW_UABS_G2_NC", debug_elf.R_AARCH64_MOVW_UABS_G2_NC)
	_register("debug/elf.R_AARCH64_MOVW_UABS_G3", debug_elf.R_AARCH64_MOVW_UABS_G3)
	_register("debug/elf.R_AARCH64_NONE", debug_elf.R_AARCH64_NONE)
	_register("debug/elf.R_AARCH64_NULL", debug_elf.R_AARCH64_NULL)
	_register("debug/elf.R_AARCH64_P32_ABS16", debug_elf.R_AARCH64_P32_ABS16)
	_register("debug/elf.R_AARCH64_P32_ABS32", debug_elf.R_AARCH64_P32_ABS32)
	_register("debug/elf.R_AARCH64_P32_ADD_ABS_LO12_NC", debug_elf.R_AARCH64_P32_ADD_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_ADR_GOT_PAGE", debug_elf.R_AARCH64_P32_ADR_GOT_PAGE)
	_register("debug/elf.R_AARCH64_P32_ADR_PREL_LO21", debug_elf.R_AARCH64_P32_ADR_PREL_LO21)
	_register("debug/elf.R_AARCH64_P32_ADR_PREL_PG_HI21", debug_elf.R_AARCH64_P32_ADR_PREL_PG_HI21)
	_register("debug/elf.R_AARCH64_P32_CALL26", debug_elf.R_AARCH64_P32_CALL26)
	_register("debug/elf.R_AARCH64_P32_CONDBR19", debug_elf.R_AARCH64_P32_CONDBR19)
	_register("debug/elf.R_AARCH64_P32_COPY", debug_elf.R_AARCH64_P32_COPY)
	_register("debug/elf.R_AARCH64_P32_GLOB_DAT", debug_elf.R_AARCH64_P32_GLOB_DAT)
	_register("debug/elf.R_AARCH64_P32_GOT_LD_PREL19", debug_elf.R_AARCH64_P32_GOT_LD_PREL19)
	_register("debug/elf.R_AARCH64_P32_IRELATIVE", debug_elf.R_AARCH64_P32_IRELATIVE)
	_register("debug/elf.R_AARCH64_P32_JUMP26", debug_elf.R_AARCH64_P32_JUMP26)
	_register("debug/elf.R_AARCH64_P32_JUMP_SLOT", debug_elf.R_AARCH64_P32_JUMP_SLOT)
	_register("debug/elf.R_AARCH64_P32_LD32_GOT_LO12_NC", debug_elf.R_AARCH64_P32_LD32_GOT_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_LDST128_ABS_LO12_NC", debug_elf.R_AARCH64_P32_LDST128_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_LDST16_ABS_LO12_NC", debug_elf.R_AARCH64_P32_LDST16_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_LDST32_ABS_LO12_NC", debug_elf.R_AARCH64_P32_LDST32_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_LDST64_ABS_LO12_NC", debug_elf.R_AARCH64_P32_LDST64_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_LDST8_ABS_LO12_NC", debug_elf.R_AARCH64_P32_LDST8_ABS_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_LD_PREL_LO19", debug_elf.R_AARCH64_P32_LD_PREL_LO19)
	_register("debug/elf.R_AARCH64_P32_MOVW_SABS_G0", debug_elf.R_AARCH64_P32_MOVW_SABS_G0)
	_register("debug/elf.R_AARCH64_P32_MOVW_UABS_G0", debug_elf.R_AARCH64_P32_MOVW_UABS_G0)
	_register("debug/elf.R_AARCH64_P32_MOVW_UABS_G0_NC", debug_elf.R_AARCH64_P32_MOVW_UABS_G0_NC)
	_register("debug/elf.R_AARCH64_P32_MOVW_UABS_G1", debug_elf.R_AARCH64_P32_MOVW_UABS_G1)
	_register("debug/elf.R_AARCH64_P32_PREL16", debug_elf.R_AARCH64_P32_PREL16)
	_register("debug/elf.R_AARCH64_P32_PREL32", debug_elf.R_AARCH64_P32_PREL32)
	_register("debug/elf.R_AARCH64_P32_RELATIVE", debug_elf.R_AARCH64_P32_RELATIVE)
	_register("debug/elf.R_AARCH64_P32_TLSDESC", debug_elf.R_AARCH64_P32_TLSDESC)
	_register("debug/elf.R_AARCH64_P32_TLSDESC_ADD_LO12_NC", debug_elf.R_AARCH64_P32_TLSDESC_ADD_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_TLSDESC_ADR_PAGE21", debug_elf.R_AARCH64_P32_TLSDESC_ADR_PAGE21)
	_register("debug/elf.R_AARCH64_P32_TLSDESC_ADR_PREL21", debug_elf.R_AARCH64_P32_TLSDESC_ADR_PREL21)
	_register("debug/elf.R_AARCH64_P32_TLSDESC_CALL", debug_elf.R_AARCH64_P32_TLSDESC_CALL)
	_register("debug/elf.R_AARCH64_P32_TLSDESC_LD32_LO12_NC", debug_elf.R_AARCH64_P32_TLSDESC_LD32_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_TLSDESC_LD_PREL19", debug_elf.R_AARCH64_P32_TLSDESC_LD_PREL19)
	_register("debug/elf.R_AARCH64_P32_TLSGD_ADD_LO12_NC", debug_elf.R_AARCH64_P32_TLSGD_ADD_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_TLSGD_ADR_PAGE21", debug_elf.R_AARCH64_P32_TLSGD_ADR_PAGE21)
	_register("debug/elf.R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21", debug_elf.R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21)
	_register("debug/elf.R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC", debug_elf.R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19", debug_elf.R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19)
	_register("debug/elf.R_AARCH64_P32_TLSLE_ADD_TPREL_HI12", debug_elf.R_AARCH64_P32_TLSLE_ADD_TPREL_HI12)
	_register("debug/elf.R_AARCH64_P32_TLSLE_ADD_TPREL_LO12", debug_elf.R_AARCH64_P32_TLSLE_ADD_TPREL_LO12)
	_register("debug/elf.R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC", debug_elf.R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC)
	_register("debug/elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G0", debug_elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G0)
	_register("debug/elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC", debug_elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC)
	_register("debug/elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G1", debug_elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G1)
	_register("debug/elf.R_AARCH64_P32_TLS_DTPMOD", debug_elf.R_AARCH64_P32_TLS_DTPMOD)
	_register("debug/elf.R_AARCH64_P32_TLS_DTPREL", debug_elf.R_AARCH64_P32_TLS_DTPREL)
	_register("debug/elf.R_AARCH64_P32_TLS_TPREL", debug_elf.R_AARCH64_P32_TLS_TPREL)
	_register("debug/elf.R_AARCH64_P32_TSTBR14", debug_elf.R_AARCH64_P32_TSTBR14)
	_register("debug/elf.R_AARCH64_PREL16", debug_elf.R_AARCH64_PREL16)
	_register("debug/elf.R_AARCH64_PREL32", debug_elf.R_AARCH64_PREL32)
	_register("debug/elf.R_AARCH64_PREL64", debug_elf.R_AARCH64_PREL64)
	_register("debug/elf.R_AARCH64_RELATIVE", debug_elf.R_AARCH64_RELATIVE)
	_register("debug/elf.R_AARCH64_TLSDESC", debug_elf.R_AARCH64_TLSDESC)
	_register("debug/elf.R_AARCH64_TLSDESC_ADD", debug_elf.R_AARCH64_TLSDESC_ADD)
	_register("debug/elf.R_AARCH64_TLSDESC_ADD_LO12_NC", debug_elf.R_AARCH64_TLSDESC_ADD_LO12_NC)
	_register("debug/elf.R_AARCH64_TLSDESC_ADR_PAGE21", debug_elf.R_AARCH64_TLSDESC_ADR_PAGE21)
	_register("debug/elf.R_AARCH64_TLSDESC_ADR_PREL21", debug_elf.R_AARCH64_TLSDESC_ADR_PREL21)
	_register("debug/elf.R_AARCH64_TLSDESC_CALL", debug_elf.R_AARCH64_TLSDESC_CALL)
	_register("debug/elf.R_AARCH64_TLSDESC_LD64_LO12_NC", debug_elf.R_AARCH64_TLSDESC_LD64_LO12_NC)
	_register("debug/elf.R_AARCH64_TLSDESC_LDR", debug_elf.R_AARCH64_TLSDESC_LDR)
	_register("debug/elf.R_AARCH64_TLSDESC_LD_PREL19", debug_elf.R_AARCH64_TLSDESC_LD_PREL19)
	_register("debug/elf.R_AARCH64_TLSDESC_OFF_G0_NC", debug_elf.R_AARCH64_TLSDESC_OFF_G0_NC)
	_register("debug/elf.R_AARCH64_TLSDESC_OFF_G1", debug_elf.R_AARCH64_TLSDESC_OFF_G1)
	_register("debug/elf.R_AARCH64_TLSGD_ADD_LO12_NC", debug_elf.R_AARCH64_TLSGD_ADD_LO12_NC)
	_register("debug/elf.R_AARCH64_TLSGD_ADR_PAGE21", debug_elf.R_AARCH64_TLSGD_ADR_PAGE21)
	_register("debug/elf.R_AARCH64_TLSGD_ADR_PREL21", debug_elf.R_AARCH64_TLSGD_ADR_PREL21)
	_register("debug/elf.R_AARCH64_TLSGD_MOVW_G0_NC", debug_elf.R_AARCH64_TLSGD_MOVW_G0_NC)
	_register("debug/elf.R_AARCH64_TLSGD_MOVW_G1", debug_elf.R_AARCH64_TLSGD_MOVW_G1)
	_register("debug/elf.R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21", debug_elf.R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21)
	_register("debug/elf.R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC", debug_elf.R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC)
	_register("debug/elf.R_AARCH64_TLSIE_LD_GOTTPREL_PREL19", debug_elf.R_AARCH64_TLSIE_LD_GOTTPREL_PREL19)
	_register("debug/elf.R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC", debug_elf.R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC)
	_register("debug/elf.R_AARCH64_TLSIE_MOVW_GOTTPREL_G1", debug_elf.R_AARCH64_TLSIE_MOVW_GOTTPREL_G1)
	_register("debug/elf.R_AARCH64_TLSLD_ADR_PAGE21", debug_elf.R_AARCH64_TLSLD_ADR_PAGE21)
	_register("debug/elf.R_AARCH64_TLSLD_ADR_PREL21", debug_elf.R_AARCH64_TLSLD_ADR_PREL21)
	_register("debug/elf.R_AARCH64_TLSLD_LDST128_DTPREL_LO12", debug_elf.R_AARCH64_TLSLD_LDST128_DTPREL_LO12)
	_register("debug/elf.R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC", debug_elf.R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC)
	_register("debug/elf.R_AARCH64_TLSLE_ADD_TPREL_HI12", debug_elf.R_AARCH64_TLSLE_ADD_TPREL_HI12)
	_register("debug/elf.R_AARCH64_TLSLE_ADD_TPREL_LO12", debug_elf.R_AARCH64_TLSLE_ADD_TPREL_LO12)
	_register("debug/elf.R_AARCH64_TLSLE_ADD_TPREL_LO12_NC", debug_elf.R_AARCH64_TLSLE_ADD_TPREL_LO12_NC)
	_register("debug/elf.R_AARCH64_TLSLE_LDST128_TPREL_LO12", debug_elf.R_AARCH64_TLSLE_LDST128_TPREL_LO12)
	_register("debug/elf.R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC", debug_elf.R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC)
	_register("debug/elf.R_AARCH64_TLSLE_MOVW_TPREL_G0", debug_elf.R_AARCH64_TLSLE_MOVW_TPREL_G0)
	_register("debug/elf.R_AARCH64_TLSLE_MOVW_TPREL_G0_NC", debug_elf.R_AARCH64_TLSLE_MOVW_TPREL_G0_NC)
	_register("debug/elf.R_AARCH64_TLSLE_MOVW_TPREL_G1", debug_elf.R_AARCH64_TLSLE_MOVW_TPREL_G1)
	_register("debug/elf.R_AARCH64_TLSLE_MOVW_TPREL_G1_NC", debug_elf.R_AARCH64_TLSLE_MOVW_TPREL_G1_NC)
	_register("debug/elf.R_AARCH64_TLSLE_MOVW_TPREL_G2", debug_elf.R_AARCH64_TLSLE_MOVW_TPREL_G2)
	_register("debug/elf.R_AARCH64_TLS_DTPMOD64", debug_elf.R_AARCH64_TLS_DTPMOD64)
	_register("debug/elf.R_AARCH64_TLS_DTPREL64", debug_elf.R_AARCH64_TLS_DTPREL64)
	_register("debug/elf.R_AARCH64_TLS_TPREL64", debug_elf.R_AARCH64_TLS_TPREL64)
	_register("debug/elf.R_AARCH64_TSTBR14", debug_elf.R_AARCH64_TSTBR14)
	_register("debug/elf.R_ALPHA", reflect.TypeOf((*debug_elf.R_ALPHA)(nil)).Elem())
	_register("debug/elf.R_ALPHA_BRADDR", debug_elf.R_ALPHA_BRADDR)
	_register("debug/elf.R_ALPHA_COPY", debug_elf.R_ALPHA_COPY)
	_register("debug/elf.R_ALPHA_GLOB_DAT", debug_elf.R_ALPHA_GLOB_DAT)
	_register("debug/elf.R_ALPHA_GPDISP", debug_elf.R_ALPHA_GPDISP)
	_register("debug/elf.R_ALPHA_GPREL32", debug_elf.R_ALPHA_GPREL32)
	_register("debug/elf.R_ALPHA_GPRELHIGH", debug_elf.R_ALPHA_GPRELHIGH)
	_register("debug/elf.R_ALPHA_GPRELLOW", debug_elf.R_ALPHA_GPRELLOW)
	_register("debug/elf.R_ALPHA_GPVALUE", debug_elf.R_ALPHA_GPVALUE)
	_register("debug/elf.R_ALPHA_HINT", debug_elf.R_ALPHA_HINT)
	_register("debug/elf.R_ALPHA_IMMED_BR_HI32", debug_elf.R_ALPHA_IMMED_BR_HI32)
	_register("debug/elf.R_ALPHA_IMMED_GP_16", debug_elf.R_ALPHA_IMMED_GP_16)
	_register("debug/elf.R_ALPHA_IMMED_GP_HI32", debug_elf.R_ALPHA_IMMED_GP_HI32)
	_register("debug/elf.R_ALPHA_IMMED_LO32", debug_elf.R_ALPHA_IMMED_LO32)
	_register("debug/elf.R_ALPHA_IMMED_SCN_HI32", debug_elf.R_ALPHA_IMMED_SCN_HI32)
	_register("debug/elf.R_ALPHA_JMP_SLOT", debug_elf.R_ALPHA_JMP_SLOT)
	_register("debug/elf.R_ALPHA_LITERAL", debug_elf.R_ALPHA_LITERAL)
	_register("debug/elf.R_ALPHA_LITUSE", debug_elf.R_ALPHA_LITUSE)
	_register("debug/elf.R_ALPHA_NONE", debug_elf.R_ALPHA_NONE)
	_register("debug/elf.R_ALPHA_OP_PRSHIFT", debug_elf.R_ALPHA_OP_PRSHIFT)
	_register("debug/elf.R_ALPHA_OP_PSUB", debug_elf.R_ALPHA_OP_PSUB)
	_register("debug/elf.R_ALPHA_OP_PUSH", debug_elf.R_ALPHA_OP_PUSH)
	_register("debug/elf.R_ALPHA_OP_STORE", debug_elf.R_ALPHA_OP_STORE)
	_register("debug/elf.R_ALPHA_REFLONG", debug_elf.R_ALPHA_REFLONG)
	_register("debug/elf.R_ALPHA_REFQUAD", debug_elf.R_ALPHA_REFQUAD)
	_register("debug/elf.R_ALPHA_RELATIVE", debug_elf.R_ALPHA_RELATIVE)
	_register("debug/elf.R_ALPHA_SREL16", debug_elf.R_ALPHA_SREL16)
	_register("debug/elf.R_ALPHA_SREL32", debug_elf.R_ALPHA_SREL32)
	_register("debug/elf.R_ALPHA_SREL64", debug_elf.R_ALPHA_SREL64)
	_register("debug/elf.R_ARM", reflect.TypeOf((*debug_elf.R_ARM)(nil)).Elem())
	_register("debug/elf.R_ARM_ABS12", debug_elf.R_ARM_ABS12)
	_register("debug/elf.R_ARM_ABS16", debug_elf.R_ARM_ABS16)
	_register("debug/elf.R_ARM_ABS32", debug_elf.R_ARM_ABS32)
	_register("debug/elf.R_ARM_ABS32_NOI", debug_elf.R_ARM_ABS32_NOI)
	_register("debug/elf.R_ARM_ABS8", debug_elf.R_ARM_ABS8)
	_register("debug/elf.R_ARM_ALU_PCREL_15_8", debug_elf.R_ARM_ALU_PCREL_15_8)
	_register("debug/elf.R_ARM_ALU_PCREL_23_15", debug_elf.R_ARM_ALU_PCREL_23_15)
	_register("debug/elf.R_ARM_ALU_PCREL_7_0", debug_elf.R_ARM_ALU_PCREL_7_0)
	_register("debug/elf.R_ARM_ALU_PC_G0", debug_elf.R_ARM_ALU_PC_G0)
	_register("debug/elf.R_ARM_ALU_PC_G0_NC", debug_elf.R_ARM_ALU_PC_G0_NC)
	_register("debug/elf.R_ARM_ALU_PC_G1", debug_elf.R_ARM_ALU_PC_G1)
	_register("debug/elf.R_ARM_ALU_PC_G1_NC", debug_elf.R_ARM_ALU_PC_G1_NC)
	_register("debug/elf.R_ARM_ALU_PC_G2", debug_elf.R_ARM_ALU_PC_G2)
	_register("debug/elf.R_ARM_ALU_SBREL_19_12_NC", debug_elf.R_ARM_ALU_SBREL_19_12_NC)
	_register("debug/elf.R_ARM_ALU_SBREL_27_20_CK", debug_elf.R_ARM_ALU_SBREL_27_20_CK)
	_register("debug/elf.R_ARM_ALU_SB_G0", debug_elf.R_ARM_ALU_SB_G0)
	_register("debug/elf.R_ARM_ALU_SB_G0_NC", debug_elf.R_ARM_ALU_SB_G0_NC)
	_register("debug/elf.R_ARM_ALU_SB_G1", debug_elf.R_ARM_ALU_SB_G1)
	_register("debug/elf.R_ARM_ALU_SB_G1_NC", debug_elf.R_ARM_ALU_SB_G1_NC)
	_register("debug/elf.R_ARM_ALU_SB_G2", debug_elf.R_ARM_ALU_SB_G2)
	_register("debug/elf.R_ARM_AMP_VCALL9", debug_elf.R_ARM_AMP_VCALL9)
	_register("debug/elf.R_ARM_BASE_ABS", debug_elf.R_ARM_BASE_ABS)
	_register("debug/elf.R_ARM_CALL", debug_elf.R_ARM_CALL)
	_register("debug/elf.R_ARM_COPY", debug_elf.R_ARM_COPY)
	_register("debug/elf.R_ARM_GLOB_DAT", debug_elf.R_ARM_GLOB_DAT)
	_register("debug/elf.R_ARM_GNU_VTENTRY", debug_elf.R_ARM_GNU_VTENTRY)
	_register("debug/elf.R_ARM_GNU_VTINHERIT", debug_elf.R_ARM_GNU_VTINHERIT)
	_register("debug/elf.R_ARM_GOT32", debug_elf.R_ARM_GOT32)
	_register("debug/elf.R_ARM_GOTOFF", debug_elf.R_ARM_GOTOFF)
	_register("debug/elf.R_ARM_GOTOFF12", debug_elf.R_ARM_GOTOFF12)
	_register("debug/elf.R_ARM_GOTPC", debug_elf.R_ARM_GOTPC)
	_register("debug/elf.R_ARM_GOTRELAX", debug_elf.R_ARM_GOTRELAX)
	_register("debug/elf.R_ARM_GOT_ABS", debug_elf.R_ARM_GOT_ABS)
	_register("debug/elf.R_ARM_GOT_BREL12", debug_elf.R_ARM_GOT_BREL12)
	_register("debug/elf.R_ARM_GOT_PREL", debug_elf.R_ARM_GOT_PREL)
	_register("debug/elf.R_ARM_IRELATIVE", debug_elf.R_ARM_IRELATIVE)
	_register("debug/elf.R_ARM_JUMP24", debug_elf.R_ARM_JUMP24)
	_register("debug/elf.R_ARM_JUMP_SLOT", debug_elf.R_ARM_JUMP_SLOT)
	_register("debug/elf.R_ARM_LDC_PC_G0", debug_elf.R_ARM_LDC_PC_G0)
	_register("debug/elf.R_ARM_LDC_PC_G1", debug_elf.R_ARM_LDC_PC_G1)
	_register("debug/elf.R_ARM_LDC_PC_G2", debug_elf.R_ARM_LDC_PC_G2)
	_register("debug/elf.R_ARM_LDC_SB_G0", debug_elf.R_ARM_LDC_SB_G0)
	_register("debug/elf.R_ARM_LDC_SB_G1", debug_elf.R_ARM_LDC_SB_G1)
	_register("debug/elf.R_ARM_LDC_SB_G2", debug_elf.R_ARM_LDC_SB_G2)
	_register("debug/elf.R_ARM_LDRS_PC_G0", debug_elf.R_ARM_LDRS_PC_G0)
	_register("debug/elf.R_ARM_LDRS_PC_G1", debug_elf.R_ARM_LDRS_PC_G1)
	_register("debug/elf.R_ARM_LDRS_PC_G2", debug_elf.R_ARM_LDRS_PC_G2)
	_register("debug/elf.R_ARM_LDRS_SB_G0", debug_elf.R_ARM_LDRS_SB_G0)
	_register("debug/elf.R_ARM_LDRS_SB_G1", debug_elf.R_ARM_LDRS_SB_G1)
	_register("debug/elf.R_ARM_LDRS_SB_G2", debug_elf.R_ARM_LDRS_SB_G2)
	_register("debug/elf.R_ARM_LDR_PC_G1", debug_elf.R_ARM_LDR_PC_G1)
	_register("debug/elf.R_ARM_LDR_PC_G2", debug_elf.R_ARM_LDR_PC_G2)
	_register("debug/elf.R_ARM_LDR_SBREL_11_10_NC", debug_elf.R_ARM_LDR_SBREL_11_10_NC)
	_register("debug/elf.R_ARM_LDR_SB_G0", debug_elf.R_ARM_LDR_SB_G0)
	_register("debug/elf.R_ARM_LDR_SB_G1", debug_elf.R_ARM_LDR_SB_G1)
	_register("debug/elf.R_ARM_LDR_SB_G2", debug_elf.R_ARM_LDR_SB_G2)
	_register("debug/elf.R_ARM_ME_TOO", debug_elf.R_ARM_ME_TOO)
	_register("debug/elf.R_ARM_MOVT_ABS", debug_elf.R_ARM_MOVT_ABS)
	_register("debug/elf.R_ARM_MOVT_BREL", debug_elf.R_ARM_MOVT_BREL)
	_register("debug/elf.R_ARM_MOVT_PREL", debug_elf.R_ARM_MOVT_PREL)
	_register("debug/elf.R_ARM_MOVW_ABS_NC", debug_elf.R_ARM_MOVW_ABS_NC)
	_register("debug/elf.R_ARM_MOVW_BREL", debug_elf.R_ARM_MOVW_BREL)
	_register("debug/elf.R_ARM_MOVW_BREL_NC", debug_elf.R_ARM_MOVW_BREL_NC)
	_register("debug/elf.R_ARM_MOVW_PREL_NC", debug_elf.R_ARM_MOVW_PREL_NC)
	_register("debug/elf.R_ARM_NONE", debug_elf.R_ARM_NONE)
	_register("debug/elf.R_ARM_PC13", debug_elf.R_ARM_PC13)
	_register("debug/elf.R_ARM_PC24", debug_elf.R_ARM_PC24)
	_register("debug/elf.R_ARM_PLT32", debug_elf.R_ARM_PLT32)
	_register("debug/elf.R_ARM_PLT32_ABS", debug_elf.R_ARM_PLT32_ABS)
	_register("debug/elf.R_ARM_PREL31", debug_elf.R_ARM_PREL31)
	_register("debug/elf.R_ARM_PRIVATE_0", debug_elf.R_ARM_PRIVATE_0)
	_register("debug/elf.R_ARM_PRIVATE_1", debug_elf.R_ARM_PRIVATE_1)
	_register("debug/elf.R_ARM_PRIVATE_10", debug_elf.R_ARM_PRIVATE_10)
	_register("debug/elf.R_ARM_PRIVATE_11", debug_elf.R_ARM_PRIVATE_11)
	_register("debug/elf.R_ARM_PRIVATE_12", debug_elf.R_ARM_PRIVATE_12)
	_register("debug/elf.R_ARM_PRIVATE_13", debug_elf.R_ARM_PRIVATE_13)
	_register("debug/elf.R_ARM_PRIVATE_14", debug_elf.R_ARM_PRIVATE_14)
	_register("debug/elf.R_ARM_PRIVATE_15", debug_elf.R_ARM_PRIVATE_15)
	_register("debug/elf.R_ARM_PRIVATE_2", debug_elf.R_ARM_PRIVATE_2)
	_register("debug/elf.R_ARM_PRIVATE_3", debug_elf.R_ARM_PRIVATE_3)
	_register("debug/elf.R_ARM_PRIVATE_4", debug_elf.R_ARM_PRIVATE_4)
	_register("debug/elf.R_ARM_PRIVATE_5", debug_elf.R_ARM_PRIVATE_5)
	_register("debug/elf.R_ARM_PRIVATE_6", debug_elf.R_ARM_PRIVATE_6)
	_register("debug/elf.R_ARM_PRIVATE_7", debug_elf.R_ARM_PRIVATE_7)
	_register("debug/elf.R_ARM_PRIVATE_8", debug_elf.R_ARM_PRIVATE_8)
	_register("debug/elf.R_ARM_PRIVATE_9", debug_elf.R_ARM_PRIVATE_9)
	_register("debug/elf.R_ARM_RABS32", debug_elf.R_ARM_RABS32)
	_register("debug/elf.R_ARM_RBASE", debug_elf.R_ARM_RBASE)
	_register("debug/elf.R_ARM_REL32", debug_elf.R_ARM_REL32)
	_register("debug/elf.R_ARM_REL32_NOI", debug_elf.R_ARM_REL32_NOI)
	_register("debug/elf.R_ARM_RELATIVE", debug_elf.R_ARM_RELATIVE)
	_register("debug/elf.R_ARM_RPC24", debug_elf.R_ARM_RPC24)
	_register("debug/elf.R_ARM_RREL32", debug_elf.R_ARM_RREL32)
	_register("debug/elf.R_ARM_RSBREL32", debug_elf.R_ARM_RSBREL32)
	_register("debug/elf.R_ARM_RXPC25", debug_elf.R_ARM_RXPC25)
	_register("debug/elf.R_ARM_SBREL31", debug_elf.R_ARM_SBREL31)
	_register("debug/elf.R_ARM_SBREL32", debug_elf.R_ARM_SBREL32)
	_register("debug/elf.R_ARM_SWI24", debug_elf.R_ARM_SWI24)
	_register("debug/elf.R_ARM_TARGET1", debug_elf.R_ARM_TARGET1)
	_register("debug/elf.R_ARM_TARGET2", debug_elf.R_ARM_TARGET2)
	_register("debug/elf.R_ARM_THM_ABS5", debug_elf.R_ARM_THM_ABS5)
	_register("debug/elf.R_ARM_THM_ALU_ABS_G0_NC", debug_elf.R_ARM_THM_ALU_ABS_G0_NC)
	_register("debug/elf.R_ARM_THM_ALU_ABS_G1_NC", debug_elf.R_ARM_THM_ALU_ABS_G1_NC)
	_register("debug/elf.R_ARM_THM_ALU_ABS_G2_NC", debug_elf.R_ARM_THM_ALU_ABS_G2_NC)
	_register("debug/elf.R_ARM_THM_ALU_ABS_G3", debug_elf.R_ARM_THM_ALU_ABS_G3)
	_register("debug/elf.R_ARM_THM_ALU_PREL_11_0", debug_elf.R_ARM_THM_ALU_PREL_11_0)
	_register("debug/elf.R_ARM_THM_GOT_BREL12", debug_elf.R_ARM_THM_GOT_BREL12)
	_register("debug/elf.R_ARM_THM_JUMP11", debug_elf.R_ARM_THM_JUMP11)
	_register("debug/elf.R_ARM_THM_JUMP19", debug_elf.R_ARM_THM_JUMP19)
	_register("debug/elf.R_ARM_THM_JUMP24", debug_elf.R_ARM_THM_JUMP24)
	_register("debug/elf.R_ARM_THM_JUMP6", debug_elf.R_ARM_THM_JUMP6)
	_register("debug/elf.R_ARM_THM_JUMP8", debug_elf.R_ARM_THM_JUMP8)
	_register("debug/elf.R_ARM_THM_MOVT_ABS", debug_elf.R_ARM_THM_MOVT_ABS)
	_register("debug/elf.R_ARM_THM_MOVT_BREL", debug_elf.R_ARM_THM_MOVT_BREL)
	_register("debug/elf.R_ARM_THM_MOVT_PREL", debug_elf.R_ARM_THM_MOVT_PREL)
	_register("debug/elf.R_ARM_THM_MOVW_ABS_NC", debug_elf.R_ARM_THM_MOVW_ABS_NC)
	_register("debug/elf.R_ARM_THM_MOVW_BREL", debug_elf.R_ARM_THM_MOVW_BREL)
	_register("debug/elf.R_ARM_THM_MOVW_BREL_NC", debug_elf.R_ARM_THM_MOVW_BREL_NC)
	_register("debug/elf.R_ARM_THM_MOVW_PREL_NC", debug_elf.R_ARM_THM_MOVW_PREL_NC)
	_register("debug/elf.R_ARM_THM_PC12", debug_elf.R_ARM_THM_PC12)
	_register("debug/elf.R_ARM_THM_PC22", debug_elf.R_ARM_THM_PC22)
	_register("debug/elf.R_ARM_THM_PC8", debug_elf.R_ARM_THM_PC8)
	_register("debug/elf.R_ARM_THM_RPC22", debug_elf.R_ARM_THM_RPC22)
	_register("debug/elf.R_ARM_THM_SWI8", debug_elf.R_ARM_THM_SWI8)
	_register("debug/elf.R_ARM_THM_TLS_CALL", debug_elf.R_ARM_THM_TLS_CALL)
	_register("debug/elf.R_ARM_THM_TLS_DESCSEQ16", debug_elf.R_ARM_THM_TLS_DESCSEQ16)
	_register("debug/elf.R_ARM_THM_TLS_DESCSEQ32", debug_elf.R_ARM_THM_TLS_DESCSEQ32)
	_register("debug/elf.R_ARM_THM_XPC22", debug_elf.R_ARM_THM_XPC22)
	_register("debug/elf.R_ARM_TLS_CALL", debug_elf.R_ARM_TLS_CALL)
	_register("debug/elf.R_ARM_TLS_DESCSEQ", debug_elf.R_ARM_TLS_DESCSEQ)
	_register("debug/elf.R_ARM_TLS_DTPMOD32", debug_elf.R_ARM_TLS_DTPMOD32)
	_register("debug/elf.R_ARM_TLS_DTPOFF32", debug_elf.R_ARM_TLS_DTPOFF32)
	_register("debug/elf.R_ARM_TLS_GD32", debug_elf.R_ARM_TLS_GD32)
	_register("debug/elf.R_ARM_TLS_GOTDESC", debug_elf.R_ARM_TLS_GOTDESC)
	_register("debug/elf.R_ARM_TLS_IE12GP", debug_elf.R_ARM_TLS_IE12GP)
	_register("debug/elf.R_ARM_TLS_IE32", debug_elf.R_ARM_TLS_IE32)
	_register("debug/elf.R_ARM_TLS_LDM32", debug_elf.R_ARM_TLS_LDM32)
	_register("debug/elf.R_ARM_TLS_LDO12", debug_elf.R_ARM_TLS_LDO12)
	_register("debug/elf.R_ARM_TLS_LDO32", debug_elf.R_ARM_TLS_LDO32)
	_register("debug/elf.R_ARM_TLS_LE12", debug_elf.R_ARM_TLS_LE12)
	_register("debug/elf.R_ARM_TLS_LE32", debug_elf.R_ARM_TLS_LE32)
	_register("debug/elf.R_ARM_TLS_TPOFF32", debug_elf.R_ARM_TLS_TPOFF32)
	_register("debug/elf.R_ARM_V4BX", debug_elf.R_ARM_V4BX)
	_register("debug/elf.R_ARM_XPC25", debug_elf.R_ARM_XPC25)
	_register("debug/elf.R_INFO", debug_elf.R_INFO)
	_register("debug/elf.R_INFO32", debug_elf.R_INFO32)
	_register("debug/elf.R_LARCH", reflect.TypeOf((*debug_elf.R_LARCH)(nil)).Elem())
	_register("debug/elf.R_LARCH_32", debug_elf.R_LARCH_32)
	_register("debug/elf.R_LARCH_64", debug_elf.R_LARCH_64)
	_register("debug/elf.R_LARCH_ADD16", debug_elf.R_LARCH_ADD16)
	_register("debug/elf.R_LARCH_ADD24", debug_elf.R_LARCH_ADD24)
	_register("debug/elf.R_LARCH_ADD32", debug_elf.R_LARCH_ADD32)
	_register("debug/elf.R_LARCH_ADD64", debug_elf.R_LARCH_ADD64)
	_register("debug/elf.R_LARCH_ADD8", debug_elf.R_LARCH_ADD8)
	_register("debug/elf.R_LARCH_COPY", debug_elf.R_LARCH_COPY)
	_register("debug/elf.R_LARCH_IRELATIVE", debug_elf.R_LARCH_IRELATIVE)
	_register("debug/elf.R_LARCH_JUMP_SLOT", debug_elf.R_LARCH_JUMP_SLOT)
	_register("debug/elf.R_LARCH_MARK_LA", debug_elf.R_LARCH_MARK_LA)
	_register("debug/elf.R_LARCH_MARK_PCREL", debug_elf.R_LARCH_MARK_PCREL)
	_register("debug/elf.R_LARCH_NONE", debug_elf.R_LARCH_NONE)
	_register("debug/elf.R_LARCH_RELATIVE", debug_elf.R_LARCH_RELATIVE)
	_register("debug/elf.R_LARCH_SOP_ADD", debug_elf.R_LARCH_SOP_ADD)
	_register("debug/elf.R_LARCH_SOP_AND", debug_elf.R_LARCH_SOP_AND)
	_register("debug/elf.R_LARCH_SOP_ASSERT", debug_elf.R_LARCH_SOP_ASSERT)
	_register("debug/elf.R_LARCH_SOP_IF_ELSE", debug_elf.R_LARCH_SOP_IF_ELSE)
	_register("debug/elf.R_LARCH_SOP_NOT", debug_elf.R_LARCH_SOP_NOT)
	_register("debug/elf.R_LARCH_SOP_POP_32_S_0_10_10_16_S2", debug_elf.R_LARCH_SOP_POP_32_S_0_10_10_16_S2)
	_register("debug/elf.R_LARCH_SOP_POP_32_S_0_5_10_16_S2", debug_elf.R_LARCH_SOP_POP_32_S_0_5_10_16_S2)
	_register("debug/elf.R_LARCH_SOP_POP_32_S_10_12", debug_elf.R_LARCH_SOP_POP_32_S_10_12)
	_register("debug/elf.R_LARCH_SOP_POP_32_S_10_16", debug_elf.R_LARCH_SOP_POP_32_S_10_16)
	_register("debug/elf.R_LARCH_SOP_POP_32_S_10_16_S2", debug_elf.R_LARCH_SOP_POP_32_S_10_16_S2)
	_register("debug/elf.R_LARCH_SOP_POP_32_S_10_5", debug_elf.R_LARCH_SOP_POP_32_S_10_5)
	_register("debug/elf.R_LARCH_SOP_POP_32_S_5_20", debug_elf.R_LARCH_SOP_POP_32_S_5_20)
	_register("debug/elf.R_LARCH_SOP_POP_32_U", debug_elf.R_LARCH_SOP_POP_32_U)
	_register("debug/elf.R_LARCH_SOP_POP_32_U_10_12", debug_elf.R_LARCH_SOP_POP_32_U_10_12)
	_register("debug/elf.R_LARCH_SOP_PUSH_ABSOLUTE", debug_elf.R_LARCH_SOP_PUSH_ABSOLUTE)
	_register("debug/elf.R_LARCH_SOP_PUSH_DUP", debug_elf.R_LARCH_SOP_PUSH_DUP)
	_register("debug/elf.R_LARCH_SOP_PUSH_GPREL", debug_elf.R_LARCH_SOP_PUSH_GPREL)
	_register("debug/elf.R_LARCH_SOP_PUSH_PCREL", debug_elf.R_LARCH_SOP_PUSH_PCREL)
	_register("debug/elf.R_LARCH_SOP_PUSH_PLT_PCREL", debug_elf.R_LARCH_SOP_PUSH_PLT_PCREL)
	_register("debug/elf.R_LARCH_SOP_PUSH_TLS_GD", debug_elf.R_LARCH_SOP_PUSH_TLS_GD)
	_register("debug/elf.R_LARCH_SOP_PUSH_TLS_GOT", debug_elf.R_LARCH_SOP_PUSH_TLS_GOT)
	_register("debug/elf.R_LARCH_SOP_PUSH_TLS_TPREL", debug_elf.R_LARCH_SOP_PUSH_TLS_TPREL)
	_register("debug/elf.R_LARCH_SOP_SL", debug_elf.R_LARCH_SOP_SL)
	_register("debug/elf.R_LARCH_SOP_SR", debug_elf.R_LARCH_SOP_SR)
	_register("debug/elf.R_LARCH_SOP_SUB", debug_elf.R_LARCH_SOP_SUB)
	_register("debug/elf.R_LARCH_SUB16", debug_elf.R_LARCH_SUB16)
	_register("debug/elf.R_LARCH_SUB24", debug_elf.R_LARCH_SUB24)
	_register("debug/elf.R_LARCH_SUB32", debug_elf.R_LARCH_SUB32)
	_register("debug/elf.R_LARCH_SUB64", debug_elf.R_LARCH_SUB64)
	_register("debug/elf.R_LARCH_SUB8", debug_elf.R_LARCH_SUB8)
	_register("debug/elf.R_LARCH_TLS_DTPMOD32", debug_elf.R_LARCH_TLS_DTPMOD32)
	_register("debug/elf.R_LARCH_TLS_DTPMOD64", debug_elf.R_LARCH_TLS_DTPMOD64)
	_register("debug/elf.R_LARCH_TLS_DTPREL32", debug_elf.R_LARCH_TLS_DTPREL32)
	_register("debug/elf.R_LARCH_TLS_DTPREL64", debug_elf.R_LARCH_TLS_DTPREL64)
	_register("debug/elf.R_LARCH_TLS_TPREL32", debug_elf.R_LARCH_TLS_TPREL32)
	_register("debug/elf.R_LARCH_TLS_TPREL64", debug_elf.R_LARCH_TLS_TPREL64)
	_register("debug/elf.R_MIPS", reflect.TypeOf((*debug_elf.R_MIPS)(nil)).Elem())
	_register("debug/elf.R_MIPS_16", debug_elf.R_MIPS_16)
	_register("debug/elf.R_MIPS_26", debug_elf.R_MIPS_26)
	_register("debug/elf.R_MIPS_32", debug_elf.R_MIPS_32)
	_register("debug/elf.R_MIPS_64", debug_elf.R_MIPS_64)
	_register("debug/elf.R_MIPS_ADD_IMMEDIATE", debug_elf.R_MIPS_ADD_IMMEDIATE)
	_register("debug/elf.R_MIPS_CALL16", debug_elf.R_MIPS_CALL16)
	_register("debug/elf.R_MIPS_CALL_HI16", debug_elf.R_MIPS_CALL_HI16)
	_register("debug/elf.R_MIPS_CALL_LO16", debug_elf.R_MIPS_CALL_LO16)
	_register("debug/elf.R_MIPS_DELETE", debug_elf.R_MIPS_DELETE)
	_register("debug/elf.R_MIPS_GOT16", debug_elf.R_MIPS_GOT16)
	_register("debug/elf.R_MIPS_GOT_DISP", debug_elf.R_MIPS_GOT_DISP)
	_register("debug/elf.R_MIPS_GOT_HI16", debug_elf.R_MIPS_GOT_HI16)
	_register("debug/elf.R_MIPS_GOT_LO16", debug_elf.R_MIPS_GOT_LO16)
	_register("debug/elf.R_MIPS_GOT_OFST", debug_elf.R_MIPS_GOT_OFST)
	_register("debug/elf.R_MIPS_GOT_PAGE", debug_elf.R_MIPS_GOT_PAGE)
	_register("debug/elf.R_MIPS_GPREL16", debug_elf.R_MIPS_GPREL16)
	_register("debug/elf.R_MIPS_GPREL32", debug_elf.R_MIPS_GPREL32)
	_register("debug/elf.R_MIPS_HI16", debug_elf.R_MIPS_HI16)
	_register("debug/elf.R_MIPS_HIGHER", debug_elf.R_MIPS_HIGHER)
	_register("debug/elf.R_MIPS_HIGHEST", debug_elf.R_MIPS_HIGHEST)
	_register("debug/elf.R_MIPS_INSERT_A", debug_elf.R_MIPS_INSERT_A)
	_register("debug/elf.R_MIPS_INSERT_B", debug_elf.R_MIPS_INSERT_B)
	_register("debug/elf.R_MIPS_JALR", debug_elf.R_MIPS_JALR)
	_register("debug/elf.R_MIPS_LITERAL", debug_elf.R_MIPS_LITERAL)
	_register("debug/elf.R_MIPS_LO16", debug_elf.R_MIPS_LO16)
	_register("debug/elf.R_MIPS_NONE", debug_elf.R_MIPS_NONE)
	_register("debug/elf.R_MIPS_PC16", debug_elf.R_MIPS_PC16)
	_register("debug/elf.R_MIPS_PJUMP", debug_elf.R_MIPS_PJUMP)
	_register("debug/elf.R_MIPS_REL16", debug_elf.R_MIPS_REL16)
	_register("debug/elf.R_MIPS_REL32", debug_elf.R_MIPS_REL32)
	_register("debug/elf.R_MIPS_RELGOT", debug_elf.R_MIPS_RELGOT)
	_register("debug/elf.R_MIPS_SCN_DISP", debug_elf.R_MIPS_SCN_DISP)
	_register("debug/elf.R_MIPS_SHIFT5", debug_elf.R_MIPS_SHIFT5)
	_register("debug/elf.R_MIPS_SHIFT6", debug_elf.R_MIPS_SHIFT6)
	_register("debug/elf.R_MIPS_SUB", debug_elf.R_MIPS_SUB)
	_register("debug/elf.R_MIPS_TLS_DTPMOD32", debug_elf.R_MIPS_TLS_DTPMOD32)
	_register("debug/elf.R_MIPS_TLS_DTPMOD64", debug_elf.R_MIPS_TLS_DTPMOD64)
	_register("debug/elf.R_MIPS_TLS_DTPREL32", debug_elf.R_MIPS_TLS_DTPREL32)
	_register("debug/elf.R_MIPS_TLS_DTPREL64", debug_elf.R_MIPS_TLS_DTPREL64)
	_register("debug/elf.R_MIPS_TLS_DTPREL_HI16", debug_elf.R_MIPS_TLS_DTPREL_HI16)
	_register("debug/elf.R_MIPS_TLS_DTPREL_LO16", debug_elf.R_MIPS_TLS_DTPREL_LO16)
	_register("debug/elf.R_MIPS_TLS_GD", debug_elf.R_MIPS_TLS_GD)
	_register("debug/elf.R_MIPS_TLS_GOTTPREL", debug_elf.R_MIPS_TLS_GOTTPREL)
	_register("debug/elf.R_MIPS_TLS_LDM", debug_elf.R_MIPS_TLS_LDM)
	_register("debug/elf.R_MIPS_TLS_TPREL32", debug_elf.R_MIPS_TLS_TPREL32)
	_register("debug/elf.R_MIPS_TLS_TPREL64", debug_elf.R_MIPS_TLS_TPREL64)
	_register("debug/elf.R_MIPS_TLS_TPREL_HI16", debug_elf.R_MIPS_TLS_TPREL_HI16)
	_register("debug/elf.R_MIPS_TLS_TPREL_LO16", debug_elf.R_MIPS_TLS_TPREL_LO16)
	_register("debug/elf.R_PPC", reflect.TypeOf((*debug_elf.R_PPC)(nil)).Elem())
	_register("debug/elf.R_PPC64", reflect.TypeOf((*debug_elf.R_PPC64)(nil)).Elem())
	_register("debug/elf.R_PPC64_ADDR14", debug_elf.R_PPC64_ADDR14)
	_register("debug/elf.R_PPC64_ADDR14_BRNTAKEN", debug_elf.R_PPC64_ADDR14_BRNTAKEN)
	_register("debug/elf.R_PPC64_ADDR14_BRTAKEN", debug_elf.R_PPC64_ADDR14_BRTAKEN)
	_register("debug/elf.R_PPC64_ADDR16", debug_elf.R_PPC64_ADDR16)
	_register("debug/elf.R_PPC64_ADDR16_DS", debug_elf.R_PPC64_ADDR16_DS)
	_register("debug/elf.R_PPC64_ADDR16_HA", debug_elf.R_PPC64_ADDR16_HA)
	_register("debug/elf.R_PPC64_ADDR16_HI", debug_elf.R_PPC64_ADDR16_HI)
	_register("debug/elf.R_PPC64_ADDR16_HIGH", debug_elf.R_PPC64_ADDR16_HIGH)
	_register("debug/elf.R_PPC64_ADDR16_HIGHA", debug_elf.R_PPC64_ADDR16_HIGHA)
	_register("debug/elf.R_PPC64_ADDR16_HIGHER", debug_elf.R_PPC64_ADDR16_HIGHER)
	_register("debug/elf.R_PPC64_ADDR16_HIGHERA", debug_elf.R_PPC64_ADDR16_HIGHERA)
	_register("debug/elf.R_PPC64_ADDR16_HIGHEST", debug_elf.R_PPC64_ADDR16_HIGHEST)
	_register("debug/elf.R_PPC64_ADDR16_HIGHESTA", debug_elf.R_PPC64_ADDR16_HIGHESTA)
	_register("debug/elf.R_PPC64_ADDR16_LO", debug_elf.R_PPC64_ADDR16_LO)
	_register("debug/elf.R_PPC64_ADDR16_LO_DS", debug_elf.R_PPC64_ADDR16_LO_DS)
	_register("debug/elf.R_PPC64_ADDR24", debug_elf.R_PPC64_ADDR24)
	_register("debug/elf.R_PPC64_ADDR32", debug_elf.R_PPC64_ADDR32)
	_register("debug/elf.R_PPC64_ADDR64", debug_elf.R_PPC64_ADDR64)
	_register("debug/elf.R_PPC64_ADDR64_LOCAL", debug_elf.R_PPC64_ADDR64_LOCAL)
	_register("debug/elf.R_PPC64_DTPMOD64", debug_elf.R_PPC64_DTPMOD64)
	_register("debug/elf.R_PPC64_DTPREL16", debug_elf.R_PPC64_DTPREL16)
	_register("debug/elf.R_PPC64_DTPREL16_DS", debug_elf.R_PPC64_DTPREL16_DS)
	_register("debug/elf.R_PPC64_DTPREL16_HA", debug_elf.R_PPC64_DTPREL16_HA)
	_register("debug/elf.R_PPC64_DTPREL16_HI", debug_elf.R_PPC64_DTPREL16_HI)
	_register("debug/elf.R_PPC64_DTPREL16_HIGH", debug_elf.R_PPC64_DTPREL16_HIGH)
	_register("debug/elf.R_PPC64_DTPREL16_HIGHA", debug_elf.R_PPC64_DTPREL16_HIGHA)
	_register("debug/elf.R_PPC64_DTPREL16_HIGHER", debug_elf.R_PPC64_DTPREL16_HIGHER)
	_register("debug/elf.R_PPC64_DTPREL16_HIGHERA", debug_elf.R_PPC64_DTPREL16_HIGHERA)
	_register("debug/elf.R_PPC64_DTPREL16_HIGHEST", debug_elf.R_PPC64_DTPREL16_HIGHEST)
	_register("debug/elf.R_PPC64_DTPREL16_HIGHESTA", debug_elf.R_PPC64_DTPREL16_HIGHESTA)
	_register("debug/elf.R_PPC64_DTPREL16_LO", debug_elf.R_PPC64_DTPREL16_LO)
	_register("debug/elf.R_PPC64_DTPREL16_LO_DS", debug_elf.R_PPC64_DTPREL16_LO_DS)
	_register("debug/elf.R_PPC64_DTPREL64", debug_elf.R_PPC64_DTPREL64)
	_register("debug/elf.R_PPC64_ENTRY", debug_elf.R_PPC64_ENTRY)
	_register("debug/elf.R_PPC64_GOT16", debug_elf.R_PPC64_GOT16)
	_register("debug/elf.R_PPC64_GOT16_DS", debug_elf.R_PPC64_GOT16_DS)
	_register("debug/elf.R_PPC64_GOT16_HA", debug_elf.R_PPC64_GOT16_HA)
	_register("debug/elf.R_PPC64_GOT16_HI", debug_elf.R_PPC64_GOT16_HI)
	_register("debug/elf.R_PPC64_GOT16_LO", debug_elf.R_PPC64_GOT16_LO)
	_register("debug/elf.R_PPC64_GOT16_LO_DS", debug_elf.R_PPC64_GOT16_LO_DS)
	_register("debug/elf.R_PPC64_GOT_DTPREL16_DS", debug_elf.R_PPC64_GOT_DTPREL16_DS)
	_register("debug/elf.R_PPC64_GOT_DTPREL16_HA", debug_elf.R_PPC64_GOT_DTPREL16_HA)
	_register("debug/elf.R_PPC64_GOT_DTPREL16_HI", debug_elf.R_PPC64_GOT_DTPREL16_HI)
	_register("debug/elf.R_PPC64_GOT_DTPREL16_LO_DS", debug_elf.R_PPC64_GOT_DTPREL16_LO_DS)
	_register("debug/elf.R_PPC64_GOT_TLSGD16", debug_elf.R_PPC64_GOT_TLSGD16)
	_register("debug/elf.R_PPC64_GOT_TLSGD16_HA", debug_elf.R_PPC64_GOT_TLSGD16_HA)
	_register("debug/elf.R_PPC64_GOT_TLSGD16_HI", debug_elf.R_PPC64_GOT_TLSGD16_HI)
	_register("debug/elf.R_PPC64_GOT_TLSGD16_LO", debug_elf.R_PPC64_GOT_TLSGD16_LO)
	_register("debug/elf.R_PPC64_GOT_TLSLD16", debug_elf.R_PPC64_GOT_TLSLD16)
	_register("debug/elf.R_PPC64_GOT_TLSLD16_HA", debug_elf.R_PPC64_GOT_TLSLD16_HA)
	_register("debug/elf.R_PPC64_GOT_TLSLD16_HI", debug_elf.R_PPC64_GOT_TLSLD16_HI)
	_register("debug/elf.R_PPC64_GOT_TLSLD16_LO", debug_elf.R_PPC64_GOT_TLSLD16_LO)
	_register("debug/elf.R_PPC64_GOT_TPREL16_DS", debug_elf.R_PPC64_GOT_TPREL16_DS)
	_register("debug/elf.R_PPC64_GOT_TPREL16_HA", debug_elf.R_PPC64_GOT_TPREL16_HA)
	_register("debug/elf.R_PPC64_GOT_TPREL16_HI", debug_elf.R_PPC64_GOT_TPREL16_HI)
	_register("debug/elf.R_PPC64_GOT_TPREL16_LO_DS", debug_elf.R_PPC64_GOT_TPREL16_LO_DS)
	_register("debug/elf.R_PPC64_IRELATIVE", debug_elf.R_PPC64_IRELATIVE)
	_register("debug/elf.R_PPC64_JMP_IREL", debug_elf.R_PPC64_JMP_IREL)
	_register("debug/elf.R_PPC64_JMP_SLOT", debug_elf.R_PPC64_JMP_SLOT)
	_register("debug/elf.R_PPC64_NONE", debug_elf.R_PPC64_NONE)
	_register("debug/elf.R_PPC64_PLT16_LO_DS", debug_elf.R_PPC64_PLT16_LO_DS)
	_register("debug/elf.R_PPC64_PLTGOT16", debug_elf.R_PPC64_PLTGOT16)
	_register("debug/elf.R_PPC64_PLTGOT16_DS", debug_elf.R_PPC64_PLTGOT16_DS)
	_register("debug/elf.R_PPC64_PLTGOT16_HA", debug_elf.R_PPC64_PLTGOT16_HA)
	_register("debug/elf.R_PPC64_PLTGOT16_HI", debug_elf.R_PPC64_PLTGOT16_HI)
	_register("debug/elf.R_PPC64_PLTGOT16_LO", debug_elf.R_PPC64_PLTGOT16_LO)
	_register("debug/elf.R_PPC64_PLTGOT_LO_DS", debug_elf.R_PPC64_PLTGOT_LO_DS)
	_register("debug/elf.R_PPC64_REL14", debug_elf.R_PPC64_REL14)
	_register("debug/elf.R_PPC64_REL14_BRNTAKEN", debug_elf.R_PPC64_REL14_BRNTAKEN)
	_register("debug/elf.R_PPC64_REL14_BRTAKEN", debug_elf.R_PPC64_REL14_BRTAKEN)
	_register("debug/elf.R_PPC64_REL16", debug_elf.R_PPC64_REL16)
	_register("debug/elf.R_PPC64_REL16DX_HA", debug_elf.R_PPC64_REL16DX_HA)
	_register("debug/elf.R_PPC64_REL16_HA", debug_elf.R_PPC64_REL16_HA)
	_register("debug/elf.R_PPC64_REL16_HI", debug_elf.R_PPC64_REL16_HI)
	_register("debug/elf.R_PPC64_REL16_LO", debug_elf.R_PPC64_REL16_LO)
	_register("debug/elf.R_PPC64_REL24", debug_elf.R_PPC64_REL24)
	_register("debug/elf.R_PPC64_REL24_NOTOC", debug_elf.R_PPC64_REL24_NOTOC)
	_register("debug/elf.R_PPC64_REL32", debug_elf.R_PPC64_REL32)
	_register("debug/elf.R_PPC64_REL64", debug_elf.R_PPC64_REL64)
	_register("debug/elf.R_PPC64_RELATIVE", debug_elf.R_PPC64_RELATIVE)
	_register("debug/elf.R_PPC64_SECTOFF_DS", debug_elf.R_PPC64_SECTOFF_DS)
	_register("debug/elf.R_PPC64_SECTOFF_LO_DS", debug_elf.R_PPC64_SECTOFF_LO_DS)
	_register("debug/elf.R_PPC64_TLS", debug_elf.R_PPC64_TLS)
	_register("debug/elf.R_PPC64_TLSGD", debug_elf.R_PPC64_TLSGD)
	_register("debug/elf.R_PPC64_TLSLD", debug_elf.R_PPC64_TLSLD)
	_register("debug/elf.R_PPC64_TOC", debug_elf.R_PPC64_TOC)
	_register("debug/elf.R_PPC64_TOC16", debug_elf.R_PPC64_TOC16)
	_register("debug/elf.R_PPC64_TOC16_DS", debug_elf.R_PPC64_TOC16_DS)
	_register("debug/elf.R_PPC64_TOC16_HA", debug_elf.R_PPC64_TOC16_HA)
	_register("debug/elf.R_PPC64_TOC16_HI", debug_elf.R_PPC64_TOC16_HI)
	_register("debug/elf.R_PPC64_TOC16_LO", debug_elf.R_PPC64_TOC16_LO)
	_register("debug/elf.R_PPC64_TOC16_LO_DS", debug_elf.R_PPC64_TOC16_LO_DS)
	_register("debug/elf.R_PPC64_TOCSAVE", debug_elf.R_PPC64_TOCSAVE)
	_register("debug/elf.R_PPC64_TPREL16", debug_elf.R_PPC64_TPREL16)
	_register("debug/elf.R_PPC64_TPREL16_DS", debug_elf.R_PPC64_TPREL16_DS)
	_register("debug/elf.R_PPC64_TPREL16_HA", debug_elf.R_PPC64_TPREL16_HA)
	_register("debug/elf.R_PPC64_TPREL16_HI", debug_elf.R_PPC64_TPREL16_HI)
	_register("debug/elf.R_PPC64_TPREL16_HIGH", debug_elf.R_PPC64_TPREL16_HIGH)
	_register("debug/elf.R_PPC64_TPREL16_HIGHA", debug_elf.R_PPC64_TPREL16_HIGHA)
	_register("debug/elf.R_PPC64_TPREL16_HIGHER", debug_elf.R_PPC64_TPREL16_HIGHER)
	_register("debug/elf.R_PPC64_TPREL16_HIGHERA", debug_elf.R_PPC64_TPREL16_HIGHERA)
	_register("debug/elf.R_PPC64_TPREL16_HIGHEST", debug_elf.R_PPC64_TPREL16_HIGHEST)
	_register("debug/elf.R_PPC64_TPREL16_HIGHESTA", debug_elf.R_PPC64_TPREL16_HIGHESTA)
	_register("debug/elf.R_PPC64_TPREL16_LO", debug_elf.R_PPC64_TPREL16_LO)
	_register("debug/elf.R_PPC64_TPREL16_LO_DS", debug_elf.R_PPC64_TPREL16_LO_DS)
	_register("debug/elf.R_PPC64_TPREL64", debug_elf.R_PPC64_TPREL64)
	_register("debug/elf.R_PPC_ADDR14", debug_elf.R_PPC_ADDR14)
	_register("debug/elf.R_PPC_ADDR14_BRNTAKEN", debug_elf.R_PPC_ADDR14_BRNTAKEN)
	_register("debug/elf.R_PPC_ADDR14_BRTAKEN", debug_elf.R_PPC_ADDR14_BRTAKEN)
	_register("debug/elf.R_PPC_ADDR16", debug_elf.R_PPC_ADDR16)
	_register("debug/elf.R_PPC_ADDR16_HA", debug_elf.R_PPC_ADDR16_HA)
	_register("debug/elf.R_PPC_ADDR16_HI", debug_elf.R_PPC_ADDR16_HI)
	_register("debug/elf.R_PPC_ADDR16_LO", debug_elf.R_PPC_ADDR16_LO)
	_register("debug/elf.R_PPC_ADDR24", debug_elf.R_PPC_ADDR24)
	_register("debug/elf.R_PPC_ADDR32", debug_elf.R_PPC_ADDR32)
	_register("debug/elf.R_PPC_COPY", debug_elf.R_PPC_COPY)
	_register("debug/elf.R_PPC_DTPMOD32", debug_elf.R_PPC_DTPMOD32)
	_register("debug/elf.R_PPC_DTPREL16", debug_elf.R_PPC_DTPREL16)
	_register("debug/elf.R_PPC_DTPREL16_HA", debug_elf.R_PPC_DTPREL16_HA)
	_register("debug/elf.R_PPC_DTPREL16_HI", debug_elf.R_PPC_DTPREL16_HI)
	_register("debug/elf.R_PPC_DTPREL16_LO", debug_elf.R_PPC_DTPREL16_LO)
	_register("debug/elf.R_PPC_DTPREL32", debug_elf.R_PPC_DTPREL32)
	_register("debug/elf.R_PPC_EMB_BIT_FLD", debug_elf.R_PPC_EMB_BIT_FLD)
	_register("debug/elf.R_PPC_EMB_MRKREF", debug_elf.R_PPC_EMB_MRKREF)
	_register("debug/elf.R_PPC_EMB_NADDR16", debug_elf.R_PPC_EMB_NADDR16)
	_register("debug/elf.R_PPC_EMB_NADDR16_HA", debug_elf.R_PPC_EMB_NADDR16_HA)
	_register("debug/elf.R_PPC_EMB_NADDR16_HI", debug_elf.R_PPC_EMB_NADDR16_HI)
	_register("debug/elf.R_PPC_EMB_NADDR16_LO", debug_elf.R_PPC_EMB_NADDR16_LO)
	_register("debug/elf.R_PPC_EMB_NADDR32", debug_elf.R_PPC_EMB_NADDR32)
	_register("debug/elf.R_PPC_EMB_RELSDA", debug_elf.R_PPC_EMB_RELSDA)
	_register("debug/elf.R_PPC_EMB_RELSEC16", debug_elf.R_PPC_EMB_RELSEC16)
	_register("debug/elf.R_PPC_EMB_RELST_HA", debug_elf.R_PPC_EMB_RELST_HA)
	_register("debug/elf.R_PPC_EMB_RELST_HI", debug_elf.R_PPC_EMB_RELST_HI)
	_register("debug/elf.R_PPC_EMB_RELST_LO", debug_elf.R_PPC_EMB_RELST_LO)
	_register("debug/elf.R_PPC_EMB_SDA21", debug_elf.R_PPC_EMB_SDA21)
	_register("debug/elf.R_PPC_EMB_SDA2I16", debug_elf.R_PPC_EMB_SDA2I16)
	_register("debug/elf.R_PPC_EMB_SDA2REL", debug_elf.R_PPC_EMB_SDA2REL)
	_register("debug/elf.R_PPC_EMB_SDAI16", debug_elf.R_PPC_EMB_SDAI16)
	_register("debug/elf.R_PPC_GLOB_DAT", debug_elf.R_PPC_GLOB_DAT)
	_register("debug/elf.R_PPC_GOT16", debug_elf.R_PPC_GOT16)
	_register("debug/elf.R_PPC_GOT16_HA", debug_elf.R_PPC_GOT16_HA)
	_register("debug/elf.R_PPC_GOT16_HI", debug_elf.R_PPC_GOT16_HI)
	_register("debug/elf.R_PPC_GOT16_LO", debug_elf.R_PPC_GOT16_LO)
	_register("debug/elf.R_PPC_GOT_TLSGD16", debug_elf.R_PPC_GOT_TLSGD16)
	_register("debug/elf.R_PPC_GOT_TLSGD16_HA", debug_elf.R_PPC_GOT_TLSGD16_HA)
	_register("debug/elf.R_PPC_GOT_TLSGD16_HI", debug_elf.R_PPC_GOT_TLSGD16_HI)
	_register("debug/elf.R_PPC_GOT_TLSGD16_LO", debug_elf.R_PPC_GOT_TLSGD16_LO)
	_register("debug/elf.R_PPC_GOT_TLSLD16", debug_elf.R_PPC_GOT_TLSLD16)
	_register("debug/elf.R_PPC_GOT_TLSLD16_HA", debug_elf.R_PPC_GOT_TLSLD16_HA)
	_register("debug/elf.R_PPC_GOT_TLSLD16_HI", debug_elf.R_PPC_GOT_TLSLD16_HI)
	_register("debug/elf.R_PPC_GOT_TLSLD16_LO", debug_elf.R_PPC_GOT_TLSLD16_LO)
	_register("debug/elf.R_PPC_GOT_TPREL16", debug_elf.R_PPC_GOT_TPREL16)
	_register("debug/elf.R_PPC_GOT_TPREL16_HA", debug_elf.R_PPC_GOT_TPREL16_HA)
	_register("debug/elf.R_PPC_GOT_TPREL16_HI", debug_elf.R_PPC_GOT_TPREL16_HI)
	_register("debug/elf.R_PPC_GOT_TPREL16_LO", debug_elf.R_PPC_GOT_TPREL16_LO)
	_register("debug/elf.R_PPC_JMP_SLOT", debug_elf.R_PPC_JMP_SLOT)
	_register("debug/elf.R_PPC_LOCAL24PC", debug_elf.R_PPC_LOCAL24PC)
	_register("debug/elf.R_PPC_NONE", debug_elf.R_PPC_NONE)
	_register("debug/elf.R_PPC_PLT16_HA", debug_elf.R_PPC_PLT16_HA)
	_register("debug/elf.R_PPC_PLT16_HI", debug_elf.R_PPC_PLT16_HI)
	_register("debug/elf.R_PPC_PLT16_LO", debug_elf.R_PPC_PLT16_LO)
	_register("debug/elf.R_PPC_PLT32", debug_elf.R_PPC_PLT32)
	_register("debug/elf.R_PPC_PLTREL24", debug_elf.R_PPC_PLTREL24)
	_register("debug/elf.R_PPC_PLTREL32", debug_elf.R_PPC_PLTREL32)
	_register("debug/elf.R_PPC_REL14", debug_elf.R_PPC_REL14)
	_register("debug/elf.R_PPC_REL14_BRNTAKEN", debug_elf.R_PPC_REL14_BRNTAKEN)
	_register("debug/elf.R_PPC_REL14_BRTAKEN", debug_elf.R_PPC_REL14_BRTAKEN)
	_register("debug/elf.R_PPC_REL24", debug_elf.R_PPC_REL24)
	_register("debug/elf.R_PPC_REL32", debug_elf.R_PPC_REL32)
	_register("debug/elf.R_PPC_RELATIVE", debug_elf.R_PPC_RELATIVE)
	_register("debug/elf.R_PPC_SDAREL16", debug_elf.R_PPC_SDAREL16)
	_register("debug/elf.R_PPC_SECTOFF", debug_elf.R_PPC_SECTOFF)
	_register("debug/elf.R_PPC_SECTOFF_HA", debug_elf.R_PPC_SECTOFF_HA)
	_register("debug/elf.R_PPC_SECTOFF_HI", debug_elf.R_PPC_SECTOFF_HI)
	_register("debug/elf.R_PPC_SECTOFF_LO", debug_elf.R_PPC_SECTOFF_LO)
	_register("debug/elf.R_PPC_TLS", debug_elf.R_PPC_TLS)
	_register("debug/elf.R_PPC_TPREL16", debug_elf.R_PPC_TPREL16)
	_register("debug/elf.R_PPC_TPREL16_HA", debug_elf.R_PPC_TPREL16_HA)
	_register("debug/elf.R_PPC_TPREL16_HI", debug_elf.R_PPC_TPREL16_HI)
	_register("debug/elf.R_PPC_TPREL16_LO", debug_elf.R_PPC_TPREL16_LO)
	_register("debug/elf.R_PPC_TPREL32", debug_elf.R_PPC_TPREL32)
	_register("debug/elf.R_PPC_UADDR16", debug_elf.R_PPC_UADDR16)
	_register("debug/elf.R_PPC_UADDR32", debug_elf.R_PPC_UADDR32)
	_register("debug/elf.R_RISCV", reflect.TypeOf((*debug_elf.R_RISCV)(nil)).Elem())
	_register("debug/elf.R_RISCV_32", debug_elf.R_RISCV_32)
	_register("debug/elf.R_RISCV_32_PCREL", debug_elf.R_RISCV_32_PCREL)
	_register("debug/elf.R_RISCV_64", debug_elf.R_RISCV_64)
	_register("debug/elf.R_RISCV_ADD16", debug_elf.R_RISCV_ADD16)
	_register("debug/elf.R_RISCV_ADD32", debug_elf.R_RISCV_ADD32)
	_register("debug/elf.R_RISCV_ADD64", debug_elf.R_RISCV_ADD64)
	_register("debug/elf.R_RISCV_ADD8", debug_elf.R_RISCV_ADD8)
	_register("debug/elf.R_RISCV_ALIGN", debug_elf.R_RISCV_ALIGN)
	_register("debug/elf.R_RISCV_BRANCH", debug_elf.R_RISCV_BRANCH)
	_register("debug/elf.R_RISCV_CALL", debug_elf.R_RISCV_CALL)
	_register("debug/elf.R_RISCV_CALL_PLT", debug_elf.R_RISCV_CALL_PLT)
	_register("debug/elf.R_RISCV_COPY", debug_elf.R_RISCV_COPY)
	_register("debug/elf.R_RISCV_GNU_VTENTRY", debug_elf.R_RISCV_GNU_VTENTRY)
	_register("debug/elf.R_RISCV_GNU_VTINHERIT", debug_elf.R_RISCV_GNU_VTINHERIT)
	_register("debug/elf.R_RISCV_GOT_HI20", debug_elf.R_RISCV_GOT_HI20)
	_register("debug/elf.R_RISCV_GPREL_I", debug_elf.R_RISCV_GPREL_I)
	_register("debug/elf.R_RISCV_GPREL_S", debug_elf.R_RISCV_GPREL_S)
	_register("debug/elf.R_RISCV_HI20", debug_elf.R_RISCV_HI20)
	_register("debug/elf.R_RISCV_JAL", debug_elf.R_RISCV_JAL)
	_register("debug/elf.R_RISCV_JUMP_SLOT", debug_elf.R_RISCV_JUMP_SLOT)
	_register("debug/elf.R_RISCV_LO12_I", debug_elf.R_RISCV_LO12_I)
	_register("debug/elf.R_RISCV_LO12_S", debug_elf.R_RISCV_LO12_S)
	_register("debug/elf.R_RISCV_NONE", debug_elf.R_RISCV_NONE)
	_register("debug/elf.R_RISCV_PCREL_HI20", debug_elf.R_RISCV_PCREL_HI20)
	_register("debug/elf.R_RISCV_PCREL_LO12_I", debug_elf.R_RISCV_PCREL_LO12_I)
	_register("debug/elf.R_RISCV_PCREL_LO12_S", debug_elf.R_RISCV_PCREL_LO12_S)
	_register("debug/elf.R_RISCV_RELATIVE", debug_elf.R_RISCV_RELATIVE)
	_register("debug/elf.R_RISCV_RELAX", debug_elf.R_RISCV_RELAX)
	_register("debug/elf.R_RISCV_RVC_BRANCH", debug_elf.R_RISCV_RVC_BRANCH)
	_register("debug/elf.R_RISCV_RVC_JUMP", debug_elf.R_RISCV_RVC_JUMP)
	_register("debug/elf.R_RISCV_RVC_LUI", debug_elf.R_RISCV_RVC_LUI)
	_register("debug/elf.R_RISCV_SET16", debug_elf.R_RISCV_SET16)
	_register("debug/elf.R_RISCV_SET32", debug_elf.R_RISCV_SET32)
	_register("debug/elf.R_RISCV_SET6", debug_elf.R_RISCV_SET6)
	_register("debug/elf.R_RISCV_SET8", debug_elf.R_RISCV_SET8)
	_register("debug/elf.R_RISCV_SUB16", debug_elf.R_RISCV_SUB16)
	_register("debug/elf.R_RISCV_SUB32", debug_elf.R_RISCV_SUB32)
	_register("debug/elf.R_RISCV_SUB6", debug_elf.R_RISCV_SUB6)
	_register("debug/elf.R_RISCV_SUB64", debug_elf.R_RISCV_SUB64)
	_register("debug/elf.R_RISCV_SUB8", debug_elf.R_RISCV_SUB8)
	_register("debug/elf.R_RISCV_TLS_DTPMOD32", debug_elf.R_RISCV_TLS_DTPMOD32)
	_register("debug/elf.R_RISCV_TLS_DTPMOD64", debug_elf.R_RISCV_TLS_DTPMOD64)
	_register("debug/elf.R_RISCV_TLS_DTPREL32", debug_elf.R_RISCV_TLS_DTPREL32)
	_register("debug/elf.R_RISCV_TLS_DTPREL64", debug_elf.R_RISCV_TLS_DTPREL64)
	_register("debug/elf.R_RISCV_TLS_GD_HI20", debug_elf.R_RISCV_TLS_GD_HI20)
	_register("debug/elf.R_RISCV_TLS_GOT_HI20", debug_elf.R_RISCV_TLS_GOT_HI20)
	_register("debug/elf.R_RISCV_TLS_TPREL32", debug_elf.R_RISCV_TLS_TPREL32)
	_register("debug/elf.R_RISCV_TLS_TPREL64", debug_elf.R_RISCV_TLS_TPREL64)
	_register("debug/elf.R_RISCV_TPREL_ADD", debug_elf.R_RISCV_TPREL_ADD)
	_register("debug/elf.R_RISCV_TPREL_HI20", debug_elf.R_RISCV_TPREL_HI20)
	_register("debug/elf.R_RISCV_TPREL_I", debug_elf.R_RISCV_TPREL_I)
	_register("debug/elf.R_RISCV_TPREL_LO12_I", debug_elf.R_RISCV_TPREL_LO12_I)
	_register("debug/elf.R_RISCV_TPREL_LO12_S", debug_elf.R_RISCV_TPREL_LO12_S)
	_register("debug/elf.R_RISCV_TPREL_S", debug_elf.R_RISCV_TPREL_S)
	_register("debug/elf.R_SPARC", reflect.TypeOf((*debug_elf.R_SPARC)(nil)).Elem())
	_register("debug/elf.R_SPARC_10", debug_elf.R_SPARC_10)
	_register("debug/elf.R_SPARC_11", debug_elf.R_SPARC_11)
	_register("debug/elf.R_SPARC_13", debug_elf.R_SPARC_13)
	_register("debug/elf.R_SPARC_16", debug_elf.R_SPARC_16)
	_register("debug/elf.R_SPARC_22", debug_elf.R_SPARC_22)
	_register("debug/elf.R_SPARC_32", debug_elf.R_SPARC_32)
	_register("debug/elf.R_SPARC_5", debug_elf.R_SPARC_5)
	_register("debug/elf.R_SPARC_6", debug_elf.R_SPARC_6)
	_register("debug/elf.R_SPARC_64", debug_elf.R_SPARC_64)
	_register("debug/elf.R_SPARC_7", debug_elf.R_SPARC_7)
	_register("debug/elf.R_SPARC_8", debug_elf.R_SPARC_8)
	_register("debug/elf.R_SPARC_COPY", debug_elf.R_SPARC_COPY)
	_register("debug/elf.R_SPARC_DISP16", debug_elf.R_SPARC_DISP16)
	_register("debug/elf.R_SPARC_DISP32", debug_elf.R_SPARC_DISP32)
	_register("debug/elf.R_SPARC_DISP64", debug_elf.R_SPARC_DISP64)
	_register("debug/elf.R_SPARC_DISP8", debug_elf.R_SPARC_DISP8)
	_register("debug/elf.R_SPARC_GLOB_DAT", debug_elf.R_SPARC_GLOB_DAT)
	_register("debug/elf.R_SPARC_GLOB_JMP", debug_elf.R_SPARC_GLOB_JMP)
	_register("debug/elf.R_SPARC_GOT10", debug_elf.R_SPARC_GOT10)
	_register("debug/elf.R_SPARC_GOT13", debug_elf.R_SPARC_GOT13)
	_register("debug/elf.R_SPARC_GOT22", debug_elf.R_SPARC_GOT22)
	_register("debug/elf.R_SPARC_H44", debug_elf.R_SPARC_H44)
	_register("debug/elf.R_SPARC_HH22", debug_elf.R_SPARC_HH22)
	_register("debug/elf.R_SPARC_HI22", debug_elf.R_SPARC_HI22)
	_register("debug/elf.R_SPARC_HIPLT22", debug_elf.R_SPARC_HIPLT22)
	_register("debug/elf.R_SPARC_HIX22", debug_elf.R_SPARC_HIX22)
	_register("debug/elf.R_SPARC_HM10", debug_elf.R_SPARC_HM10)
	_register("debug/elf.R_SPARC_JMP_SLOT", debug_elf.R_SPARC_JMP_SLOT)
	_register("debug/elf.R_SPARC_L44", debug_elf.R_SPARC_L44)
	_register("debug/elf.R_SPARC_LM22", debug_elf.R_SPARC_LM22)
	_register("debug/elf.R_SPARC_LO10", debug_elf.R_SPARC_LO10)
	_register("debug/elf.R_SPARC_LOPLT10", debug_elf.R_SPARC_LOPLT10)
	_register("debug/elf.R_SPARC_LOX10", debug_elf.R_SPARC_LOX10)
	_register("debug/elf.R_SPARC_M44", debug_elf.R_SPARC_M44)
	_register("debug/elf.R_SPARC_NONE", debug_elf.R_SPARC_NONE)
	_register("debug/elf.R_SPARC_OLO10", debug_elf.R_SPARC_OLO10)
	_register("debug/elf.R_SPARC_PC10", debug_elf.R_SPARC_PC10)
	_register("debug/elf.R_SPARC_PC22", debug_elf.R_SPARC_PC22)
	_register("debug/elf.R_SPARC_PCPLT10", debug_elf.R_SPARC_PCPLT10)
	_register("debug/elf.R_SPARC_PCPLT22", debug_elf.R_SPARC_PCPLT22)
	_register("debug/elf.R_SPARC_PCPLT32", debug_elf.R_SPARC_PCPLT32)
	_register("debug/elf.R_SPARC_PC_HH22", debug_elf.R_SPARC_PC_HH22)
	_register("debug/elf.R_SPARC_PC_HM10", debug_elf.R_SPARC_PC_HM10)
	_register("debug/elf.R_SPARC_PC_LM22", debug_elf.R_SPARC_PC_LM22)
	_register("debug/elf.R_SPARC_PLT32", debug_elf.R_SPARC_PLT32)
	_register("debug/elf.R_SPARC_PLT64", debug_elf.R_SPARC_PLT64)
	_register("debug/elf.R_SPARC_REGISTER", debug_elf.R_SPARC_REGISTER)
	_register("debug/elf.R_SPARC_RELATIVE", debug_elf.R_SPARC_RELATIVE)
	_register("debug/elf.R_SPARC_UA16", debug_elf.R_SPARC_UA16)
	_register("debug/elf.R_SPARC_UA32", debug_elf.R_SPARC_UA32)
	_register("debug/elf.R_SPARC_UA64", debug_elf.R_SPARC_UA64)
	_register("debug/elf.R_SPARC_WDISP16", debug_elf.R_SPARC_WDISP16)
	_register("debug/elf.R_SPARC_WDISP19", debug_elf.R_SPARC_WDISP19)
	_register("debug/elf.R_SPARC_WDISP22", debug_elf.R_SPARC_WDISP22)
	_register("debug/elf.R_SPARC_WDISP30", debug_elf.R_SPARC_WDISP30)
	_register("debug/elf.R_SPARC_WPLT30", debug_elf.R_SPARC_WPLT30)
	_register("debug/elf.R_SYM32", debug_elf.R_SYM32)
	_register("debug/elf.R_SYM64", debug_elf.R_SYM64)
	_register("debug/elf.R_TYPE32", debug_elf.R_TYPE32)
	_register("debug/elf.R_TYPE64", debug_elf.R_TYPE64)
	_register("debug/elf.R_X86_64", reflect.TypeOf((*debug_elf.R_X86_64)(nil)).Elem())
	_register("debug/elf.R_X86_64_16", debug_elf.R_X86_64_16)
	_register("debug/elf.R_X86_64_32", debug_elf.R_X86_64_32)
	_register("debug/elf.R_X86_64_32S", debug_elf.R_X86_64_32S)
	_register("debug/elf.R_X86_64_64", debug_elf.R_X86_64_64)
	_register("debug/elf.R_X86_64_8", debug_elf.R_X86_64_8)
	_register("debug/elf.R_X86_64_COPY", debug_elf.R_X86_64_COPY)
	_register("debug/elf.R_X86_64_DTPMOD64", debug_elf.R_X86_64_DTPMOD64)
	_register("debug/elf.R_X86_64_DTPOFF32", debug_elf.R_X86_64_DTPOFF32)
	_register("debug/elf.R_X86_64_DTPOFF64", debug_elf.R_X86_64_DTPOFF64)
	_register("debug/elf.R_X86_64_GLOB_DAT", debug_elf.R_X86_64_GLOB_DAT)
	_register("debug/elf.R_X86_64_GOT32", debug_elf.R_X86_64_GOT32)
	_register("debug/elf.R_X86_64_GOT64", debug_elf.R_X86_64_GOT64)
	_register("debug/elf.R_X86_64_GOTOFF64", debug_elf.R_X86_64_GOTOFF64)
	_register("debug/elf.R_X86_64_GOTPC32", debug_elf.R_X86_64_GOTPC32)
	_register("debug/elf.R_X86_64_GOTPC32_TLSDESC", debug_elf.R_X86_64_GOTPC32_TLSDESC)
	_register("debug/elf.R_X86_64_GOTPC64", debug_elf.R_X86_64_GOTPC64)
	_register("debug/elf.R_X86_64_GOTPCREL", debug_elf.R_X86_64_GOTPCREL)
	_register("debug/elf.R_X86_64_GOTPCREL64", debug_elf.R_X86_64_GOTPCREL64)
	_register("debug/elf.R_X86_64_GOTPCRELX", debug_elf.R_X86_64_GOTPCRELX)
	_register("debug/elf.R_X86_64_GOTPLT64", debug_elf.R_X86_64_GOTPLT64)
	_register("debug/elf.R_X86_64_GOTTPOFF", debug_elf.R_X86_64_GOTTPOFF)
	_register("debug/elf.R_X86_64_IRELATIVE", debug_elf.R_X86_64_IRELATIVE)
	_register("debug/elf.R_X86_64_JMP_SLOT", debug_elf.R_X86_64_JMP_SLOT)
	_register("debug/elf.R_X86_64_NONE", debug_elf.R_X86_64_NONE)
	_register("debug/elf.R_X86_64_PC16", debug_elf.R_X86_64_PC16)
	_register("debug/elf.R_X86_64_PC32", debug_elf.R_X86_64_PC32)
	_register("debug/elf.R_X86_64_PC32_BND", debug_elf.R_X86_64_PC32_BND)
	_register("debug/elf.R_X86_64_PC64", debug_elf.R_X86_64_PC64)
	_register("debug/elf.R_X86_64_PC8", debug_elf.R_X86_64_PC8)
	_register("debug/elf.R_X86_64_PLT32", debug_elf.R_X86_64_PLT32)
	_register("debug/elf.R_X86_64_PLT32_BND", debug_elf.R_X86_64_PLT32_BND)
	_register("debug/elf.R_X86_64_PLTOFF64", debug_elf.R_X86_64_PLTOFF64)
	_register("debug/elf.R_X86_64_RELATIVE", debug_elf.R_X86_64_RELATIVE)
	_register("debug/elf.R_X86_64_RELATIVE64", debug_elf.R_X86_64_RELATIVE64)
	_register("debug/elf.R_X86_64_REX_GOTPCRELX", debug_elf.R_X86_64_REX_GOTPCRELX)
	_register("debug/elf.R_X86_64_SIZE32", debug_elf.R_X86_64_SIZE32)
	_register("debug/elf.R_X86_64_SIZE64", debug_elf.R_X86_64_SIZE64)
	_register("debug/elf.R_X86_64_TLSDESC", debug_elf.R_X86_64_TLSDESC)
	_register("debug/elf.R_X86_64_TLSDESC_CALL", debug_elf.R_X86_64_TLSDESC_CALL)
	_register("debug/elf.R_X86_64_TLSGD", debug_elf.R_X86_64_TLSGD)
	_register("debug/elf.R_X86_64_TLSLD", debug_elf.R_X86_64_TLSLD)
	_register("debug/elf.R_X86_64_TPOFF32", debug_elf.R_X86_64_TPOFF32)
	_register("debug/elf.R_X86_64_TPOFF64", debug_elf.R_X86_64_TPOFF64)
	_register("debug/elf.Rel32", reflect.TypeOf((*debug_elf.Rel32)(nil)).Elem())
	_register("debug/elf.Rel64", reflect.TypeOf((*debug_elf.Rel64)(nil)).Elem())
	_register("debug/elf.Rela32", reflect.TypeOf((*debug_elf.Rela32)(nil)).Elem())
	_register("debug/elf.Rela64", reflect.TypeOf((*debug_elf.Rela64)(nil)).Elem())
	_register("debug/elf.SHF_ALLOC", debug_elf.SHF_ALLOC)
	_register("debug/elf.SHF_COMPRESSED", debug_elf.SHF_COMPRESSED)
	_register("debug/elf.SHF_EXECINSTR", debug_elf.SHF_EXECINSTR)
	_register("debug/elf.SHF_GROUP", debug_elf.SHF_GROUP)
	_register("debug/elf.SHF_INFO_LINK", debug_elf.SHF_INFO_LINK)
	_register("debug/elf.SHF_LINK_ORDER", debug_elf.SHF_LINK_ORDER)
	_register("debug/elf.SHF_MASKOS", debug_elf.SHF_MASKOS)
	_register("debug/elf.SHF_MASKPROC", debug_elf.SHF_MASKPROC)
	_register("debug/elf.SHF_MERGE", debug_elf.SHF_MERGE)
	_register("debug/elf.SHF_OS_NONCONFORMING", debug_elf.SHF_OS_NONCONFORMING)
	_register("debug/elf.SHF_STRINGS", debug_elf.SHF_STRINGS)
	_register("debug/elf.SHF_TLS", debug_elf.SHF_TLS)
	_register("debug/elf.SHF_WRITE", debug_elf.SHF_WRITE)
	_register("debug/elf.SHN_ABS", debug_elf.SHN_ABS)
	_register("debug/elf.SHN_COMMON", debug_elf.SHN_COMMON)
	_register("debug/elf.SHN_HIOS", debug_elf.SHN_HIOS)
	_register("debug/elf.SHN_HIPROC", debug_elf.SHN_HIPROC)
	_register("debug/elf.SHN_HIRESERVE", debug_elf.SHN_HIRESERVE)
	_register("debug/elf.SHN_LOOS", debug_elf.SHN_LOOS)
	_register("debug/elf.SHN_LOPROC", debug_elf.SHN_LOPROC)
	_register("debug/elf.SHN_LORESERVE", debug_elf.SHN_LORESERVE)
	_register("debug/elf.SHN_UNDEF", debug_elf.SHN_UNDEF)
	_register("debug/elf.SHN_XINDEX", debug_elf.SHN_XINDEX)
	_register("debug/elf.SHT_DYNAMIC", debug_elf.SHT_DYNAMIC)
	_register("debug/elf.SHT_DYNSYM", debug_elf.SHT_DYNSYM)
	_register("debug/elf.SHT_FINI_ARRAY", debug_elf.SHT_FINI_ARRAY)
	_register("debug/elf.SHT_GNU_ATTRIBUTES", debug_elf.SHT_GNU_ATTRIBUTES)
	_register("debug/elf.SHT_GNU_HASH", debug_elf.SHT_GNU_HASH)
	_register("debug/elf.SHT_GNU_LIBLIST", debug_elf.SHT_GNU_LIBLIST)
	_register("debug/elf.SHT_GNU_VERDEF", debug_elf.SHT_GNU_VERDEF)
	_register("debug/elf.SHT_GNU_VERNEED", debug_elf.SHT_GNU_VERNEED)
	_register("debug/elf.SHT_GNU_VERSYM", debug_elf.SHT_GNU_VERSYM)
	_register("debug/elf.SHT_GROUP", debug_elf.SHT_GROUP)
	_register("debug/elf.SHT_HASH", debug_elf.SHT_HASH)
	_register("debug/elf.SHT_HIOS", debug_elf.SHT_HIOS)
	_register("debug/elf.SHT_HIPROC", debug_elf.SHT_HIPROC)
	_register("debug/elf.SHT_HIUSER", debug_elf.SHT_HIUSER)
	_register("debug/elf.SHT_INIT_ARRAY", debug_elf.SHT_INIT_ARRAY)
	_register("debug/elf.SHT_LOOS", debug_elf.SHT_LOOS)
	_register("debug/elf.SHT_LOPROC", debug_elf.SHT_LOPROC)
	_register("debug/elf.SHT_LOUSER", debug_elf.SHT_LOUSER)
	_register("debug/elf.SHT_MIPS_ABIFLAGS", debug_elf.SHT_MIPS_ABIFLAGS)
	_register("debug/elf.SHT_NOBITS", debug_elf.SHT_NOBITS)
	_register("debug/elf.SHT_NOTE", debug_elf.SHT_NOTE)
	_register("debug/elf.SHT_NULL", debug_elf.SHT_NULL)
	_register("debug/elf.SHT_PREINIT_ARRAY", debug_elf.SHT_PREINIT_ARRAY)
	_register("debug/elf.SHT_PROGBITS", debug_elf.SHT_PROGBITS)
	_register("debug/elf.SHT_REL", debug_elf.SHT_REL)
	_register("debug/elf.SHT_RELA", debug_elf.SHT_RELA)
	_register("debug/elf.SHT_SHLIB", debug_elf.SHT_SHLIB)
	_register("debug/elf.SHT_STRTAB", debug_elf.SHT_STRTAB)
	_register("debug/elf.SHT_SYMTAB", debug_elf.SHT_SYMTAB)
	_register("debug/elf.SHT_SYMTAB_SHNDX", debug_elf.SHT_SYMTAB_SHNDX)
	_register("debug/elf.STB_GLOBAL", debug_elf.STB_GLOBAL)
	_register("debug/elf.STB_HIOS", debug_elf.STB_HIOS)
	_register("debug/elf.STB_HIPROC", debug_elf.STB_HIPROC)
	_register("debug/elf.STB_LOCAL", debug_elf.STB_LOCAL)
	_register("debug/elf.STB_LOOS", debug_elf.STB_LOOS)
	_register("debug/elf.STB_LOPROC", debug_elf.STB_LOPROC)
	_register("debug/elf.STB_WEAK", debug_elf.STB_WEAK)
	_register("debug/elf.STT_COMMON", debug_elf.STT_COMMON)
	_register("debug/elf.STT_FILE", debug_elf.STT_FILE)
	_register("debug/elf.STT_FUNC", debug_elf.STT_FUNC)
	_register("debug/elf.STT_HIOS", debug_elf.STT_HIOS)
	_register("debug/elf.STT_HIPROC", debug_elf.STT_HIPROC)
	_register("debug/elf.STT_LOOS", debug_elf.STT_LOOS)
	_register("debug/elf.STT_LOPROC", debug_elf.STT_LOPROC)
	_register("debug/elf.STT_NOTYPE", debug_elf.STT_NOTYPE)
	_register("debug/elf.STT_OBJECT", debug_elf.STT_OBJECT)
	_register("debug/elf.STT_SECTION", debug_elf.STT_SECTION)
	_register("debug/elf.STT_TLS", debug_elf.STT_TLS)
	_register("debug/elf.STV_DEFAULT", debug_elf.STV_DEFAULT)
	_register("debug/elf.STV_HIDDEN", debug_elf.STV_HIDDEN)
	_register("debug/elf.STV_INTERNAL", debug_elf.STV_INTERNAL)
	_register("debug/elf.STV_PROTECTED", debug_elf.STV_PROTECTED)
	_register("debug/elf.ST_BIND", debug_elf.ST_BIND)
	_register("debug/elf.ST_INFO", debug_elf.ST_INFO)
	_register("debug/elf.ST_TYPE", debug_elf.ST_TYPE)
	_register("debug/elf.ST_VISIBILITY", debug_elf.ST_VISIBILITY)
	_register("debug/elf.Section", reflect.TypeOf((*debug_elf.Section)(nil)).Elem())
	_register("debug/elf.Section32", reflect.TypeOf((*debug_elf.Section32)(nil)).Elem())
	_register("debug/elf.Section64", reflect.TypeOf((*debug_elf.Section64)(nil)).Elem())
	_register("debug/elf.SectionFlag", reflect.TypeOf((*debug_elf.SectionFlag)(nil)).Elem())
	_register("debug/elf.SectionHeader", reflect.TypeOf((*debug_elf.SectionHeader)(nil)).Elem())
	_register("debug/elf.SectionIndex", reflect.TypeOf((*debug_elf.SectionIndex)(nil)).Elem())
	_register("debug/elf.SectionType", reflect.TypeOf((*debug_elf.SectionType)(nil)).Elem())
	_register("debug/elf.Sym32", reflect.TypeOf((*debug_elf.Sym32)(nil)).Elem())
	_register("debug/elf.Sym32Size", debug_elf.Sym32Size)
	_register("debug/elf.Sym64", reflect.TypeOf((*debug_elf.Sym64)(nil)).Elem())
	_register("debug/elf.Sym64Size", debug_elf.Sym64Size)
	_register("debug/elf.SymBind", reflect.TypeOf((*debug_elf.SymBind)(nil)).Elem())
	_register("debug/elf.SymType", reflect.TypeOf((*debug_elf.SymType)(nil)).Elem())
	_register("debug/elf.SymVis", reflect.TypeOf((*debug_elf.SymVis)(nil)).Elem())
	_register("debug/elf.Symbol", reflect.TypeOf((*debug_elf.Symbol)(nil)).Elem())
	_register("debug/elf.Type", reflect.TypeOf((*debug_elf.Type)(nil)).Elem())
	_register("debug/elf.Version", reflect.TypeOf((*debug_elf.Version)(nil)).Elem())

	// package debug/gosym
	////////////////////////////////////////
	_register("debug/gosym.DecodingError", reflect.TypeOf((*debug_gosym.DecodingError)(nil)).Elem())
	_register("debug/gosym.Func", reflect.TypeOf((*debug_gosym.Func)(nil)).Elem())
	_register("debug/gosym.LineTable", reflect.TypeOf((*debug_gosym.LineTable)(nil)).Elem())
	_register("debug/gosym.NewLineTable", debug_gosym.NewLineTable)
	_register("debug/gosym.NewTable", debug_gosym.NewTable)
	_register("debug/gosym.Obj", reflect.TypeOf((*debug_gosym.Obj)(nil)).Elem())
	_register("debug/gosym.Sym", reflect.TypeOf((*debug_gosym.Sym)(nil)).Elem())
	_register("debug/gosym.Table", reflect.TypeOf((*debug_gosym.Table)(nil)).Elem())
	_register("debug/gosym.UnknownFileError", reflect.TypeOf((*debug_gosym.UnknownFileError)(nil)).Elem())
	_register("debug/gosym.UnknownLineError", reflect.TypeOf((*debug_gosym.UnknownLineError)(nil)).Elem())

	// package debug/macho
	////////////////////////////////////////
	_register("debug/macho.ARM64_RELOC_ADDEND", debug_macho.ARM64_RELOC_ADDEND)
	_register("debug/macho.ARM64_RELOC_BRANCH26", debug_macho.ARM64_RELOC_BRANCH26)
	_register("debug/macho.ARM64_RELOC_GOT_LOAD_PAGE21", debug_macho.ARM64_RELOC_GOT_LOAD_PAGE21)
	_register("debug/macho.ARM64_RELOC_GOT_LOAD_PAGEOFF12", debug_macho.ARM64_RELOC_GOT_LOAD_PAGEOFF12)
	_register("debug/macho.ARM64_RELOC_PAGE21", debug_macho.ARM64_RELOC_PAGE21)
	_register("debug/macho.ARM64_RELOC_PAGEOFF12", debug_macho.ARM64_RELOC_PAGEOFF12)
	_register("debug/macho.ARM64_RELOC_POINTER_TO_GOT", debug_macho.ARM64_RELOC_POINTER_TO_GOT)
	_register("debug/macho.ARM64_RELOC_SUBTRACTOR", debug_macho.ARM64_RELOC_SUBTRACTOR)
	_register("debug/macho.ARM64_RELOC_TLVP_LOAD_PAGE21", debug_macho.ARM64_RELOC_TLVP_LOAD_PAGE21)
	_register("debug/macho.ARM64_RELOC_TLVP_LOAD_PAGEOFF12", debug_macho.ARM64_RELOC_TLVP_LOAD_PAGEOFF12)
	_register("debug/macho.ARM64_RELOC_UNSIGNED", debug_macho.ARM64_RELOC_UNSIGNED)
	_register("debug/macho.ARM_RELOC_BR24", debug_macho.ARM_RELOC_BR24)
	_register("debug/macho.ARM_RELOC_HALF", debug_macho.ARM_RELOC_HALF)
	_register("debug/macho.ARM_RELOC_HALF_SECTDIFF", debug_macho.ARM_RELOC_HALF_SECTDIFF)
	_register("debug/macho.ARM_RELOC_LOCAL_SECTDIFF", debug_macho.ARM_RELOC_LOCAL_SECTDIFF)
	_register("debug/macho.ARM_RELOC_PAIR", debug_macho.ARM_RELOC_PAIR)
	_register("debug/macho.ARM_RELOC_PB_LA_PTR", debug_macho.ARM_RELOC_PB_LA_PTR)
	_register("debug/macho.ARM_RELOC_SECTDIFF", debug_macho.ARM_RELOC_SECTDIFF)
	_register("debug/macho.ARM_RELOC_VANILLA", debug_macho.ARM_RELOC_VANILLA)
	_register("debug/macho.ARM_THUMB_32BIT_BRANCH", debug_macho.ARM_THUMB_32BIT_BRANCH)
	_register("debug/macho.ARM_THUMB_RELOC_BR22", debug_macho.ARM_THUMB_RELOC_BR22)
	_register("debug/macho.Cpu", reflect.TypeOf((*debug_macho.Cpu)(nil)).Elem())
	_register("debug/macho.Cpu386", debug_macho.Cpu386)
	_register("debug/macho.CpuAmd64", debug_macho.CpuAmd64)
	_register("debug/macho.CpuArm", debug_macho.CpuArm)
	_register("debug/macho.CpuArm64", debug_macho.CpuArm64)
	_register("debug/macho.CpuPpc", debug_macho.CpuPpc)
	_register("debug/macho.CpuPpc64", debug_macho.CpuPpc64)
	_register("debug/macho.Dylib", reflect.TypeOf((*debug_macho.Dylib)(nil)).Elem())
	_register("debug/macho.DylibCmd", reflect.TypeOf((*debug_macho.DylibCmd)(nil)).Elem())
	_register("debug/macho.Dysymtab", reflect.TypeOf((*debug_macho.Dysymtab)(nil)).Elem())
	_register("debug/macho.DysymtabCmd", reflect.TypeOf((*debug_macho.DysymtabCmd)(nil)).Elem())
	_register("debug/macho.ErrNotFat", debug_macho.ErrNotFat)
	_register("debug/macho.FatArch", reflect.TypeOf((*debug_macho.FatArch)(nil)).Elem())
	_register("debug/macho.FatArchHeader", reflect.TypeOf((*debug_macho.FatArchHeader)(nil)).Elem())
	_register("debug/macho.FatFile", reflect.TypeOf((*debug_macho.FatFile)(nil)).Elem())
	_register("debug/macho.File", reflect.TypeOf((*debug_macho.File)(nil)).Elem())
	_register("debug/macho.FileHeader", reflect.TypeOf((*debug_macho.FileHeader)(nil)).Elem())
	_register("debug/macho.FlagAllModsBound", debug_macho.FlagAllModsBound)
	_register("debug/macho.FlagAllowStackExecution", debug_macho.FlagAllowStackExecution)
	_register("debug/macho.FlagAppExtensionSafe", debug_macho.FlagAppExtensionSafe)
	_register("debug/macho.FlagBindAtLoad", debug_macho.FlagBindAtLoad)
	_register("debug/macho.FlagBindsToWeak", debug_macho.FlagBindsToWeak)
	_register("debug/macho.FlagCanonical", debug_macho.FlagCanonical)
	_register("debug/macho.FlagDeadStrippableDylib", debug_macho.FlagDeadStrippableDylib)
	_register("debug/macho.FlagDyldLink", debug_macho.FlagDyldLink)
	_register("debug/macho.FlagForceFlat", debug_macho.FlagForceFlat)
	_register("debug/macho.FlagHasTLVDescriptors", debug_macho.FlagHasTLVDescriptors)
	_register("debug/macho.FlagIncrLink", debug_macho.FlagIncrLink)
	_register("debug/macho.FlagLazyInit", debug_macho.FlagLazyInit)
	_register("debug/macho.FlagNoFixPrebinding", debug_macho.FlagNoFixPrebinding)
	_register("debug/macho.FlagNoHeapExecution", debug_macho.FlagNoHeapExecution)
	_register("debug/macho.FlagNoMultiDefs", debug_macho.FlagNoMultiDefs)
	_register("debug/macho.FlagNoReexportedDylibs", debug_macho.FlagNoReexportedDylibs)
	_register("debug/macho.FlagNoUndefs", debug_macho.FlagNoUndefs)
	_register("debug/macho.FlagPIE", debug_macho.FlagPIE)
	_register("debug/macho.FlagPrebindable", debug_macho.FlagPrebindable)
	_register("debug/macho.FlagPrebound", debug_macho.FlagPrebound)
	_register("debug/macho.FlagRootSafe", debug_macho.FlagRootSafe)
	_register("debug/macho.FlagSetuidSafe", debug_macho.FlagSetuidSafe)
	_register("debug/macho.FlagSplitSegs", debug_macho.FlagSplitSegs)
	_register("debug/macho.FlagSubsectionsViaSymbols", debug_macho.FlagSubsectionsViaSymbols)
	_register("debug/macho.FlagTwoLevel", debug_macho.FlagTwoLevel)
	_register("debug/macho.FlagWeakDefines", debug_macho.FlagWeakDefines)
	_register("debug/macho.FormatError", reflect.TypeOf((*debug_macho.FormatError)(nil)).Elem())
	_register("debug/macho.GENERIC_RELOC_LOCAL_SECTDIFF", debug_macho.GENERIC_RELOC_LOCAL_SECTDIFF)
	_register("debug/macho.GENERIC_RELOC_PAIR", debug_macho.GENERIC_RELOC_PAIR)
	_register("debug/macho.GENERIC_RELOC_PB_LA_PTR", debug_macho.GENERIC_RELOC_PB_LA_PTR)
	_register("debug/macho.GENERIC_RELOC_SECTDIFF", debug_macho.GENERIC_RELOC_SECTDIFF)
	_register("debug/macho.GENERIC_RELOC_TLV", debug_macho.GENERIC_RELOC_TLV)
	_register("debug/macho.GENERIC_RELOC_VANILLA", debug_macho.GENERIC_RELOC_VANILLA)
	_register("debug/macho.Load", reflect.TypeOf((*debug_macho.Load)(nil)).Elem())
	_register("debug/macho.LoadBytes", reflect.TypeOf((*debug_macho.LoadBytes)(nil)).Elem())
	_register("debug/macho.LoadCmd", reflect.TypeOf((*debug_macho.LoadCmd)(nil)).Elem())
	_register("debug/macho.LoadCmdDylib", debug_macho.LoadCmdDylib)
	_register("debug/macho.LoadCmdDylinker", debug_macho.LoadCmdDylinker)
	_register("debug/macho.LoadCmdDysymtab", debug_macho.LoadCmdDysymtab)
	_register("debug/macho.LoadCmdRpath", debug_macho.LoadCmdRpath)
	_register("debug/macho.LoadCmdSegment", debug_macho.LoadCmdSegment)
	_register("debug/macho.LoadCmdSegment64", debug_macho.LoadCmdSegment64)
	_register("debug/macho.LoadCmdSymtab", debug_macho.LoadCmdSymtab)
	_register("debug/macho.LoadCmdThread", debug_macho.LoadCmdThread)
	_register("debug/macho.LoadCmdUnixThread", debug_macho.LoadCmdUnixThread)
	_register("debug/macho.Magic32", debug_macho.Magic32)
	_register("debug/macho.Magic64", debug_macho.Magic64)
	_register("debug/macho.MagicFat", debug_macho.MagicFat)
	_register("debug/macho.NewFatFile", debug_macho.NewFatFile)
	_register("debug/macho.NewFile", debug_macho.NewFile)
	_register("debug/macho.Nlist32", reflect.TypeOf((*debug_macho.Nlist32)(nil)).Elem())
	_register("debug/macho.Nlist64", reflect.TypeOf((*debug_macho.Nlist64)(nil)).Elem())
	_register("debug/macho.Open", debug_macho.Open)
	_register("debug/macho.OpenFat", debug_macho.OpenFat)
	_register("debug/macho.Regs386", reflect.TypeOf((*debug_macho.Regs386)(nil)).Elem())
	_register("debug/macho.RegsAMD64", reflect.TypeOf((*debug_macho.RegsAMD64)(nil)).Elem())
	_register("debug/macho.Reloc", reflect.TypeOf((*debug_macho.Reloc)(nil)).Elem())
	_register("debug/macho.RelocTypeARM", reflect.TypeOf((*debug_macho.RelocTypeARM)(nil)).Elem())
	_register("debug/macho.RelocTypeARM64", reflect.TypeOf((*debug_macho.RelocTypeARM64)(nil)).Elem())
	_register("debug/macho.RelocTypeGeneric", reflect.TypeOf((*debug_macho.RelocTypeGeneric)(nil)).Elem())
	_register("debug/macho.RelocTypeX86_64", reflect.TypeOf((*debug_macho.RelocTypeX86_64)(nil)).Elem())
	_register("debug/macho.Rpath", reflect.TypeOf((*debug_macho.Rpath)(nil)).Elem())
	_register("debug/macho.RpathCmd", reflect.TypeOf((*debug_macho.RpathCmd)(nil)).Elem())
	_register("debug/macho.Section", reflect.TypeOf((*debug_macho.Section)(nil)).Elem())
	_register("debug/macho.Section32", reflect.TypeOf((*debug_macho.Section32)(nil)).Elem())
	_register("debug/macho.Section64", reflect.TypeOf((*debug_macho.Section64)(nil)).Elem())
	_register("debug/macho.SectionHeader", reflect.TypeOf((*debug_macho.SectionHeader)(nil)).Elem())
	_register("debug/macho.Segment", reflect.TypeOf((*debug_macho.Segment)(nil)).Elem())
	_register("debug/macho.Segment32", reflect.TypeOf((*debug_macho.Segment32)(nil)).Elem())
	_register("debug/macho.Segment64", reflect.TypeOf((*debug_macho.Segment64)(nil)).Elem())
	_register("debug/macho.SegmentHeader", reflect.TypeOf((*debug_macho.SegmentHeader)(nil)).Elem())
	_register("debug/macho.Symbol", reflect.TypeOf((*debug_macho.Symbol)(nil)).Elem())
	_register("debug/macho.Symtab", reflect.TypeOf((*debug_macho.Symtab)(nil)).Elem())
	_register("debug/macho.SymtabCmd", reflect.TypeOf((*debug_macho.SymtabCmd)(nil)).Elem())
	_register("debug/macho.Thread", reflect.TypeOf((*debug_macho.Thread)(nil)).Elem())
	_register("debug/macho.Type", reflect.TypeOf((*debug_macho.Type)(nil)).Elem())
	_register("debug/macho.TypeBundle", debug_macho.TypeBundle)
	_register("debug/macho.TypeDylib", debug_macho.TypeDylib)
	_register("debug/macho.TypeExec", debug_macho.TypeExec)
	_register("debug/macho.TypeObj", debug_macho.TypeObj)
	_register("debug/macho.X86_64_RELOC_BRANCH", debug_macho.X86_64_RELOC_BRANCH)
	_register("debug/macho.X86_64_RELOC_GOT", debug_macho.X86_64_RELOC_GOT)
	_register("debug/macho.X86_64_RELOC_GOT_LOAD", debug_macho.X86_64_RELOC_GOT_LOAD)
	_register("debug/macho.X86_64_RELOC_SIGNED", debug_macho.X86_64_RELOC_SIGNED)
	_register("debug/macho.X86_64_RELOC_SIGNED_1", debug_macho.X86_64_RELOC_SIGNED_1)
	_register("debug/macho.X86_64_RELOC_SIGNED_2", debug_macho.X86_64_RELOC_SIGNED_2)
	_register("debug/macho.X86_64_RELOC_SIGNED_4", debug_macho.X86_64_RELOC_SIGNED_4)
	_register("debug/macho.X86_64_RELOC_SUBTRACTOR", debug_macho.X86_64_RELOC_SUBTRACTOR)
	_register("debug/macho.X86_64_RELOC_TLV", debug_macho.X86_64_RELOC_TLV)
	_register("debug/macho.X86_64_RELOC_UNSIGNED", debug_macho.X86_64_RELOC_UNSIGNED)

	// package debug/pe
	////////////////////////////////////////
	_register("debug/pe.COFFSymbol", reflect.TypeOf((*debug_pe.COFFSymbol)(nil)).Elem())
	_register("debug/pe.COFFSymbolAuxFormat5", reflect.TypeOf((*debug_pe.COFFSymbolAuxFormat5)(nil)).Elem())
	_register("debug/pe.COFFSymbolSize", debug_pe.COFFSymbolSize)
	_register("debug/pe.DataDirectory", reflect.TypeOf((*debug_pe.DataDirectory)(nil)).Elem())
	_register("debug/pe.File", reflect.TypeOf((*debug_pe.File)(nil)).Elem())
	_register("debug/pe.FileHeader", reflect.TypeOf((*debug_pe.FileHeader)(nil)).Elem())
	_register("debug/pe.FormatError", reflect.TypeOf((*debug_pe.FormatError)(nil)).Elem())
	_register("debug/pe.IMAGE_COMDAT_SELECT_ANY", debug_pe.IMAGE_COMDAT_SELECT_ANY)
	_register("debug/pe.IMAGE_COMDAT_SELECT_ASSOCIATIVE", debug_pe.IMAGE_COMDAT_SELECT_ASSOCIATIVE)
	_register("debug/pe.IMAGE_COMDAT_SELECT_EXACT_MATCH", debug_pe.IMAGE_COMDAT_SELECT_EXACT_MATCH)
	_register("debug/pe.IMAGE_COMDAT_SELECT_LARGEST", debug_pe.IMAGE_COMDAT_SELECT_LARGEST)
	_register("debug/pe.IMAGE_COMDAT_SELECT_NODUPLICATES", debug_pe.IMAGE_COMDAT_SELECT_NODUPLICATES)
	_register("debug/pe.IMAGE_COMDAT_SELECT_SAME_SIZE", debug_pe.IMAGE_COMDAT_SELECT_SAME_SIZE)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_ARCHITECTURE", debug_pe.IMAGE_DIRECTORY_ENTRY_ARCHITECTURE)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_BASERELOC", debug_pe.IMAGE_DIRECTORY_ENTRY_BASERELOC)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT", debug_pe.IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR", debug_pe.IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_DEBUG", debug_pe.IMAGE_DIRECTORY_ENTRY_DEBUG)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT", debug_pe.IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_EXCEPTION", debug_pe.IMAGE_DIRECTORY_ENTRY_EXCEPTION)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_EXPORT", debug_pe.IMAGE_DIRECTORY_ENTRY_EXPORT)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_GLOBALPTR", debug_pe.IMAGE_DIRECTORY_ENTRY_GLOBALPTR)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_IAT", debug_pe.IMAGE_DIRECTORY_ENTRY_IAT)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_IMPORT", debug_pe.IMAGE_DIRECTORY_ENTRY_IMPORT)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG", debug_pe.IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_RESOURCE", debug_pe.IMAGE_DIRECTORY_ENTRY_RESOURCE)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_SECURITY", debug_pe.IMAGE_DIRECTORY_ENTRY_SECURITY)
	_register("debug/pe.IMAGE_DIRECTORY_ENTRY_TLS", debug_pe.IMAGE_DIRECTORY_ENTRY_TLS)
	_register("debug/pe.IMAGE_DLLCHARACTERISTICS_APPCONTAINER", debug_pe.IMAGE_DLLCHARACTERISTICS_APPCONTAINER)
	_register("debug/pe.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE", debug_pe.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE)
	_register("debug/pe.IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY", debug_pe.IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY)
	_register("debug/pe.IMAGE_DLLCHARACTERISTICS_GUARD_CF", debug_pe.IMAGE_DLLCHARACTERISTICS_GUARD_CF)
	_register("debug/pe.IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA", debug_pe.IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA)
	_register("debug/pe.IMAGE_DLLCHARACTERISTICS_NO_BIND", debug_pe.IMAGE_DLLCHARACTERISTICS_NO_BIND)
	_register("debug/pe.IMAGE_DLLCHARACTERISTICS_NO_ISOLATION", debug_pe.IMAGE_DLLCHARACTERISTICS_NO_ISOLATION)
	_register("debug/pe.IMAGE_DLLCHARACTERISTICS_NO_SEH", debug_pe.IMAGE_DLLCHARACTERISTICS_NO_SEH)
	_register("debug/pe.IMAGE_DLLCHARACTERISTICS_NX_COMPAT", debug_pe.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
	_register("debug/pe.IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE", debug_pe.IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE)
	_register("debug/pe.IMAGE_DLLCHARACTERISTICS_WDM_DRIVER", debug_pe.IMAGE_DLLCHARACTERISTICS_WDM_DRIVER)
	_register("debug/pe.IMAGE_FILE_32BIT_MACHINE", debug_pe.IMAGE_FILE_32BIT_MACHINE)
	_register("debug/pe.IMAGE_FILE_AGGRESIVE_WS_TRIM", debug_pe.IMAGE_FILE_AGGRESIVE_WS_TRIM)
	_register("debug/pe.IMAGE_FILE_BYTES_REVERSED_HI", debug_pe.IMAGE_FILE_BYTES_REVERSED_HI)
	_register("debug/pe.IMAGE_FILE_BYTES_REVERSED_LO", debug_pe.IMAGE_FILE_BYTES_REVERSED_LO)
	_register("debug/pe.IMAGE_FILE_DEBUG_STRIPPED", debug_pe.IMAGE_FILE_DEBUG_STRIPPED)
	_register("debug/pe.IMAGE_FILE_DLL", debug_pe.IMAGE_FILE_DLL)
	_register("debug/pe.IMAGE_FILE_EXECUTABLE_IMAGE", debug_pe.IMAGE_FILE_EXECUTABLE_IMAGE)
	_register("debug/pe.IMAGE_FILE_LARGE_ADDRESS_AWARE", debug_pe.IMAGE_FILE_LARGE_ADDRESS_AWARE)
	_register("debug/pe.IMAGE_FILE_LINE_NUMS_STRIPPED", debug_pe.IMAGE_FILE_LINE_NUMS_STRIPPED)
	_register("debug/pe.IMAGE_FILE_LOCAL_SYMS_STRIPPED", debug_pe.IMAGE_FILE_LOCAL_SYMS_STRIPPED)
	_register("debug/pe.IMAGE_FILE_MACHINE_AM33", debug_pe.IMAGE_FILE_MACHINE_AM33)
	_register("debug/pe.IMAGE_FILE_MACHINE_AMD64", debug_pe.IMAGE_FILE_MACHINE_AMD64)
	_register("debug/pe.IMAGE_FILE_MACHINE_ARM", debug_pe.IMAGE_FILE_MACHINE_ARM)
	_register("debug/pe.IMAGE_FILE_MACHINE_ARM64", debug_pe.IMAGE_FILE_MACHINE_ARM64)
	_register("debug/pe.IMAGE_FILE_MACHINE_ARMNT", debug_pe.IMAGE_FILE_MACHINE_ARMNT)
	_register("debug/pe.IMAGE_FILE_MACHINE_EBC", debug_pe.IMAGE_FILE_MACHINE_EBC)
	_register("debug/pe.IMAGE_FILE_MACHINE_I386", debug_pe.IMAGE_FILE_MACHINE_I386)
	_register("debug/pe.IMAGE_FILE_MACHINE_IA64", debug_pe.IMAGE_FILE_MACHINE_IA64)
	_register("debug/pe.IMAGE_FILE_MACHINE_LOONGARCH32", debug_pe.IMAGE_FILE_MACHINE_LOONGARCH32)
	_register("debug/pe.IMAGE_FILE_MACHINE_LOONGARCH64", debug_pe.IMAGE_FILE_MACHINE_LOONGARCH64)
	_register("debug/pe.IMAGE_FILE_MACHINE_M32R", debug_pe.IMAGE_FILE_MACHINE_M32R)
	_register("debug/pe.IMAGE_FILE_MACHINE_MIPS16", debug_pe.IMAGE_FILE_MACHINE_MIPS16)
	_register("debug/pe.IMAGE_FILE_MACHINE_MIPSFPU", debug_pe.IMAGE_FILE_MACHINE_MIPSFPU)
	_register("debug/pe.IMAGE_FILE_MACHINE_MIPSFPU16", debug_pe.IMAGE_FILE_MACHINE_MIPSFPU16)
	_register("debug/pe.IMAGE_FILE_MACHINE_POWERPC", debug_pe.IMAGE_FILE_MACHINE_POWERPC)
	_register("debug/pe.IMAGE_FILE_MACHINE_POWERPCFP", debug_pe.IMAGE_FILE_MACHINE_POWERPCFP)
	_register("debug/pe.IMAGE_FILE_MACHINE_R4000", debug_pe.IMAGE_FILE_MACHINE_R4000)
	_register("debug/pe.IMAGE_FILE_MACHINE_SH3", debug_pe.IMAGE_FILE_MACHINE_SH3)
	_register("debug/pe.IMAGE_FILE_MACHINE_SH3DSP", debug_pe.IMAGE_FILE_MACHINE_SH3DSP)
	_register("debug/pe.IMAGE_FILE_MACHINE_SH4", debug_pe.IMAGE_FILE_MACHINE_SH4)
	_register("debug/pe.IMAGE_FILE_MACHINE_SH5", debug_pe.IMAGE_FILE_MACHINE_SH5)
	_register("debug/pe.IMAGE_FILE_MACHINE_THUMB", debug_pe.IMAGE_FILE_MACHINE_THUMB)
	_register("debug/pe.IMAGE_FILE_MACHINE_UNKNOWN", debug_pe.IMAGE_FILE_MACHINE_UNKNOWN)
	_register("debug/pe.IMAGE_FILE_MACHINE_WCEMIPSV2", debug_pe.IMAGE_FILE_MACHINE_WCEMIPSV2)
	_register("debug/pe.IMAGE_FILE_NET_RUN_FROM_SWAP", debug_pe.IMAGE_FILE_NET_RUN_FROM_SWAP)
	_register("debug/pe.IMAGE_FILE_RELOCS_STRIPPED", debug_pe.IMAGE_FILE_RELOCS_STRIPPED)
	_register("debug/pe.IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP", debug_pe.IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP)
	_register("debug/pe.IMAGE_FILE_SYSTEM", debug_pe.IMAGE_FILE_SYSTEM)
	_register("debug/pe.IMAGE_FILE_UP_SYSTEM_ONLY", debug_pe.IMAGE_FILE_UP_SYSTEM_ONLY)
	_register("debug/pe.IMAGE_SCN_CNT_CODE", debug_pe.IMAGE_SCN_CNT_CODE)
	_register("debug/pe.IMAGE_SCN_CNT_INITIALIZED_DATA", debug_pe.IMAGE_SCN_CNT_INITIALIZED_DATA)
	_register("debug/pe.IMAGE_SCN_CNT_UNINITIALIZED_DATA", debug_pe.IMAGE_SCN_CNT_UNINITIALIZED_DATA)
	_register("debug/pe.IMAGE_SCN_LNK_COMDAT", debug_pe.IMAGE_SCN_LNK_COMDAT)
	_register("debug/pe.IMAGE_SCN_MEM_DISCARDABLE", debug_pe.IMAGE_SCN_MEM_DISCARDABLE)
	_register("debug/pe.IMAGE_SCN_MEM_EXECUTE", debug_pe.IMAGE_SCN_MEM_EXECUTE)
	_register("debug/pe.IMAGE_SCN_MEM_READ", debug_pe.IMAGE_SCN_MEM_READ)
	_register("debug/pe.IMAGE_SCN_MEM_WRITE", debug_pe.IMAGE_SCN_MEM_WRITE)
	_register("debug/pe.IMAGE_SUBSYSTEM_EFI_APPLICATION", debug_pe.IMAGE_SUBSYSTEM_EFI_APPLICATION)
	_register("debug/pe.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER", debug_pe.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER)
	_register("debug/pe.IMAGE_SUBSYSTEM_EFI_ROM", debug_pe.IMAGE_SUBSYSTEM_EFI_ROM)
	_register("debug/pe.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER", debug_pe.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER)
	_register("debug/pe.IMAGE_SUBSYSTEM_NATIVE", debug_pe.IMAGE_SUBSYSTEM_NATIVE)
	_register("debug/pe.IMAGE_SUBSYSTEM_NATIVE_WINDOWS", debug_pe.IMAGE_SUBSYSTEM_NATIVE_WINDOWS)
	_register("debug/pe.IMAGE_SUBSYSTEM_OS2_CUI", debug_pe.IMAGE_SUBSYSTEM_OS2_CUI)
	_register("debug/pe.IMAGE_SUBSYSTEM_POSIX_CUI", debug_pe.IMAGE_SUBSYSTEM_POSIX_CUI)
	_register("debug/pe.IMAGE_SUBSYSTEM_UNKNOWN", debug_pe.IMAGE_SUBSYSTEM_UNKNOWN)
	_register("debug/pe.IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION", debug_pe.IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION)
	_register("debug/pe.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI", debug_pe.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI)
	_register("debug/pe.IMAGE_SUBSYSTEM_WINDOWS_CUI", debug_pe.IMAGE_SUBSYSTEM_WINDOWS_CUI)
	_register("debug/pe.IMAGE_SUBSYSTEM_WINDOWS_GUI", debug_pe.IMAGE_SUBSYSTEM_WINDOWS_GUI)
	_register("debug/pe.IMAGE_SUBSYSTEM_XBOX", debug_pe.IMAGE_SUBSYSTEM_XBOX)
	_register("debug/pe.ImportDirectory", reflect.TypeOf((*debug_pe.ImportDirectory)(nil)).Elem())
	_register("debug/pe.NewFile", debug_pe.NewFile)
	_register("debug/pe.Open", debug_pe.Open)
	_register("debug/pe.OptionalHeader32", reflect.TypeOf((*debug_pe.OptionalHeader32)(nil)).Elem())
	_register("debug/pe.OptionalHeader64", reflect.TypeOf((*debug_pe.OptionalHeader64)(nil)).Elem())
	_register("debug/pe.Reloc", reflect.TypeOf((*debug_pe.Reloc)(nil)).Elem())
	_register("debug/pe.Section", reflect.TypeOf((*debug_pe.Section)(nil)).Elem())
	_register("debug/pe.SectionHeader", reflect.TypeOf((*debug_pe.SectionHeader)(nil)).Elem())
	_register("debug/pe.SectionHeader32", reflect.TypeOf((*debug_pe.SectionHeader32)(nil)).Elem())
	_register("debug/pe.StringTable", reflect.TypeOf((*debug_pe.StringTable)(nil)).Elem())
	_register("debug/pe.Symbol", reflect.TypeOf((*debug_pe.Symbol)(nil)).Elem())

	// package debug/plan9obj
	////////////////////////////////////////
	_register("debug/plan9obj.ErrNoSymbols", debug_plan9obj.ErrNoSymbols)
	_register("debug/plan9obj.File", reflect.TypeOf((*debug_plan9obj.File)(nil)).Elem())
	_register("debug/plan9obj.FileHeader", reflect.TypeOf((*debug_plan9obj.FileHeader)(nil)).Elem())
	_register("debug/plan9obj.Magic386", debug_plan9obj.Magic386)
	_register("debug/plan9obj.Magic64", debug_plan9obj.Magic64)
	_register("debug/plan9obj.MagicAMD64", debug_plan9obj.MagicAMD64)
	_register("debug/plan9obj.MagicARM", debug_plan9obj.MagicARM)
	_register("debug/plan9obj.NewFile", debug_plan9obj.NewFile)
	_register("debug/plan9obj.Open", debug_plan9obj.Open)
	_register("debug/plan9obj.Section", reflect.TypeOf((*debug_plan9obj.Section)(nil)).Elem())
	_register("debug/plan9obj.SectionHeader", reflect.TypeOf((*debug_plan9obj.SectionHeader)(nil)).Elem())
	_register("debug/plan9obj.Sym", reflect.TypeOf((*debug_plan9obj.Sym)(nil)).Elem())

	// package embed
	////////////////////////////////////////
	_register("embed.FS", reflect.TypeOf((*embed.FS)(nil)).Elem())

	// package encoding
	////////////////////////////////////////
	_register("encoding.BinaryMarshaler", reflect.TypeOf((*encoding.BinaryMarshaler)(nil)).Elem())
	_register("encoding.BinaryUnmarshaler", reflect.TypeOf((*encoding.BinaryUnmarshaler)(nil)).Elem())
	_register("encoding.TextMarshaler", reflect.TypeOf((*encoding.TextMarshaler)(nil)).Elem())
	_register("encoding.TextUnmarshaler", reflect.TypeOf((*encoding.TextUnmarshaler)(nil)).Elem())

	// package encoding/ascii85
	////////////////////////////////////////
	_register("encoding/ascii85.CorruptInputError", reflect.TypeOf((*encoding_ascii85.CorruptInputError)(nil)).Elem())
	_register("encoding/ascii85.Decode", encoding_ascii85.Decode)
	_register("encoding/ascii85.Encode", encoding_ascii85.Encode)
	_register("encoding/ascii85.MaxEncodedLen", encoding_ascii85.MaxEncodedLen)
	_register("encoding/ascii85.NewDecoder", encoding_ascii85.NewDecoder)
	_register("encoding/ascii85.NewEncoder", encoding_ascii85.NewEncoder)

	// package encoding/asn1
	////////////////////////////////////////
	_register("encoding/asn1.BitString", reflect.TypeOf((*encoding_asn1.BitString)(nil)).Elem())
	_register("encoding/asn1.ClassApplication", encoding_asn1.ClassApplication)
	_register("encoding/asn1.ClassContextSpecific", encoding_asn1.ClassContextSpecific)
	_register("encoding/asn1.ClassPrivate", encoding_asn1.ClassPrivate)
	_register("encoding/asn1.ClassUniversal", encoding_asn1.ClassUniversal)
	_register("encoding/asn1.Enumerated", reflect.TypeOf((*encoding_asn1.Enumerated)(nil)).Elem())
	_register("encoding/asn1.Flag", reflect.TypeOf((*encoding_asn1.Flag)(nil)).Elem())
	_register("encoding/asn1.Marshal", encoding_asn1.Marshal)
	_register("encoding/asn1.MarshalWithParams", encoding_asn1.MarshalWithParams)
	_register("encoding/asn1.NullBytes", encoding_asn1.NullBytes)
	_register("encoding/asn1.NullRawValue", encoding_asn1.NullRawValue)
	_register("encoding/asn1.ObjectIdentifier", reflect.TypeOf((*encoding_asn1.ObjectIdentifier)(nil)).Elem())
	_register("encoding/asn1.RawContent", reflect.TypeOf((*encoding_asn1.RawContent)(nil)).Elem())
	_register("encoding/asn1.RawValue", reflect.TypeOf((*encoding_asn1.RawValue)(nil)).Elem())
	_register("encoding/asn1.StructuralError", reflect.TypeOf((*encoding_asn1.StructuralError)(nil)).Elem())
	_register("encoding/asn1.SyntaxError", reflect.TypeOf((*encoding_asn1.SyntaxError)(nil)).Elem())
	_register("encoding/asn1.TagBMPString", encoding_asn1.TagBMPString)
	_register("encoding/asn1.TagBitString", encoding_asn1.TagBitString)
	_register("encoding/asn1.TagBoolean", encoding_asn1.TagBoolean)
	_register("encoding/asn1.TagEnum", encoding_asn1.TagEnum)
	_register("encoding/asn1.TagGeneralString", encoding_asn1.TagGeneralString)
	_register("encoding/asn1.TagGeneralizedTime", encoding_asn1.TagGeneralizedTime)
	_register("encoding/asn1.TagIA5String", encoding_asn1.TagIA5String)
	_register("encoding/asn1.TagInteger", encoding_asn1.TagInteger)
	_register("encoding/asn1.TagNull", encoding_asn1.TagNull)
	_register("encoding/asn1.TagNumericString", encoding_asn1.TagNumericString)
	_register("encoding/asn1.TagOID", encoding_asn1.TagOID)
	_register("encoding/asn1.TagOctetString", encoding_asn1.TagOctetString)
	_register("encoding/asn1.TagPrintableString", encoding_asn1.TagPrintableString)
	_register("encoding/asn1.TagSequence", encoding_asn1.TagSequence)
	_register("encoding/asn1.TagSet", encoding_asn1.TagSet)
	_register("encoding/asn1.TagT61String", encoding_asn1.TagT61String)
	_register("encoding/asn1.TagUTCTime", encoding_asn1.TagUTCTime)
	_register("encoding/asn1.TagUTF8String", encoding_asn1.TagUTF8String)
	_register("encoding/asn1.Unmarshal", encoding_asn1.Unmarshal)
	_register("encoding/asn1.UnmarshalWithParams", encoding_asn1.UnmarshalWithParams)

	// package encoding/base32
	////////////////////////////////////////
	_register("encoding/base32.CorruptInputError", reflect.TypeOf((*encoding_base32.CorruptInputError)(nil)).Elem())
	_register("encoding/base32.Encoding", reflect.TypeOf((*encoding_base32.Encoding)(nil)).Elem())
	_register("encoding/base32.HexEncoding", encoding_base32.HexEncoding)
	_register("encoding/base32.NewDecoder", encoding_base32.NewDecoder)
	_register("encoding/base32.NewEncoder", encoding_base32.NewEncoder)
	_register("encoding/base32.NewEncoding", encoding_base32.NewEncoding)
	_register("encoding/base32.NoPadding", encoding_base32.NoPadding)
	_register("encoding/base32.StdEncoding", encoding_base32.StdEncoding)
	_register("encoding/base32.StdPadding", encoding_base32.StdPadding)

	// package encoding/base64
	////////////////////////////////////////
	_register("encoding/base64.CorruptInputError", reflect.TypeOf((*encoding_base64.CorruptInputError)(nil)).Elem())
	_register("encoding/base64.Encoding", reflect.TypeOf((*encoding_base64.Encoding)(nil)).Elem())
	_register("encoding/base64.NewDecoder", encoding_base64.NewDecoder)
	_register("encoding/base64.NewEncoder", encoding_base64.NewEncoder)
	_register("encoding/base64.NewEncoding", encoding_base64.NewEncoding)
	_register("encoding/base64.NoPadding", encoding_base64.NoPadding)
	_register("encoding/base64.RawStdEncoding", encoding_base64.RawStdEncoding)
	_register("encoding/base64.RawURLEncoding", encoding_base64.RawURLEncoding)
	_register("encoding/base64.StdEncoding", encoding_base64.StdEncoding)
	_register("encoding/base64.StdPadding", encoding_base64.StdPadding)
	_register("encoding/base64.URLEncoding", encoding_base64.URLEncoding)

	// package encoding/binary
	////////////////////////////////////////
	_register("encoding/binary.AppendByteOrder", reflect.TypeOf((*encoding_binary.AppendByteOrder)(nil)).Elem())
	_register("encoding/binary.AppendUvarint", encoding_binary.AppendUvarint)
	_register("encoding/binary.AppendVarint", encoding_binary.AppendVarint)
	_register("encoding/binary.BigEndian", encoding_binary.BigEndian)
	_register("encoding/binary.ByteOrder", reflect.TypeOf((*encoding_binary.ByteOrder)(nil)).Elem())
	_register("encoding/binary.LittleEndian", encoding_binary.LittleEndian)
	_register("encoding/binary.MaxVarintLen16", encoding_binary.MaxVarintLen16)
	_register("encoding/binary.MaxVarintLen32", encoding_binary.MaxVarintLen32)
	_register("encoding/binary.MaxVarintLen64", encoding_binary.MaxVarintLen64)
	_register("encoding/binary.PutUvarint", encoding_binary.PutUvarint)
	_register("encoding/binary.PutVarint", encoding_binary.PutVarint)
	_register("encoding/binary.Read", encoding_binary.Read)
	_register("encoding/binary.ReadUvarint", encoding_binary.ReadUvarint)
	_register("encoding/binary.ReadVarint", encoding_binary.ReadVarint)
	_register("encoding/binary.Size", encoding_binary.Size)
	_register("encoding/binary.Uvarint", encoding_binary.Uvarint)
	_register("encoding/binary.Varint", encoding_binary.Varint)
	_register("encoding/binary.Write", encoding_binary.Write)

	// package encoding/csv
	////////////////////////////////////////
	_register("encoding/csv.ErrBareQuote", encoding_csv.ErrBareQuote)
	_register("encoding/csv.ErrFieldCount", encoding_csv.ErrFieldCount)
	_register("encoding/csv.ErrQuote", encoding_csv.ErrQuote)
	_register("encoding/csv.ErrTrailingComma", encoding_csv.ErrTrailingComma)
	_register("encoding/csv.NewReader", encoding_csv.NewReader)
	_register("encoding/csv.NewWriter", encoding_csv.NewWriter)
	_register("encoding/csv.ParseError", reflect.TypeOf((*encoding_csv.ParseError)(nil)).Elem())
	_register("encoding/csv.Reader", reflect.TypeOf((*encoding_csv.Reader)(nil)).Elem())
	_register("encoding/csv.Writer", reflect.TypeOf((*encoding_csv.Writer)(nil)).Elem())

	// package encoding/gob
	////////////////////////////////////////
	_register("encoding/gob.CommonType", reflect.TypeOf((*encoding_gob.CommonType)(nil)).Elem())
	_register("encoding/gob.Decoder", reflect.TypeOf((*encoding_gob.Decoder)(nil)).Elem())
	_register("encoding/gob.Encoder", reflect.TypeOf((*encoding_gob.Encoder)(nil)).Elem())
	_register("encoding/gob.GobDecoder", reflect.TypeOf((*encoding_gob.GobDecoder)(nil)).Elem())
	_register("encoding/gob.GobEncoder", reflect.TypeOf((*encoding_gob.GobEncoder)(nil)).Elem())
	_register("encoding/gob.NewDecoder", encoding_gob.NewDecoder)
	_register("encoding/gob.NewEncoder", encoding_gob.NewEncoder)
	_register("encoding/gob.Register", encoding_gob.Register)
	_register("encoding/gob.RegisterName", encoding_gob.RegisterName)

	// package encoding/hex
	////////////////////////////////////////
	_register("encoding/hex.Decode", encoding_hex.Decode)
	_register("encoding/hex.DecodeString", encoding_hex.DecodeString)
	_register("encoding/hex.DecodedLen", encoding_hex.DecodedLen)
	_register("encoding/hex.Dump", encoding_hex.Dump)
	_register("encoding/hex.Dumper", encoding_hex.Dumper)
	_register("encoding/hex.Encode", encoding_hex.Encode)
	_register("encoding/hex.EncodeToString", encoding_hex.EncodeToString)
	_register("encoding/hex.EncodedLen", encoding_hex.EncodedLen)
	_register("encoding/hex.ErrLength", encoding_hex.ErrLength)
	_register("encoding/hex.InvalidByteError", reflect.TypeOf((*encoding_hex.InvalidByteError)(nil)).Elem())
	_register("encoding/hex.NewDecoder", encoding_hex.NewDecoder)
	_register("encoding/hex.NewEncoder", encoding_hex.NewEncoder)

	// package encoding/json
	////////////////////////////////////////
	_register("encoding/json.Compact", encoding_json.Compact)
	_register("encoding/json.Decoder", reflect.TypeOf((*encoding_json.Decoder)(nil)).Elem())
	_register("encoding/json.Delim", reflect.TypeOf((*encoding_json.Delim)(nil)).Elem())
	_register("encoding/json.Encoder", reflect.TypeOf((*encoding_json.Encoder)(nil)).Elem())
	_register("encoding/json.HTMLEscape", encoding_json.HTMLEscape)
	_register("encoding/json.Indent", encoding_json.Indent)
	_register("encoding/json.InvalidUTF8Error", reflect.TypeOf((*encoding_json.InvalidUTF8Error)(nil)).Elem())
	_register("encoding/json.InvalidUnmarshalError", reflect.TypeOf((*encoding_json.InvalidUnmarshalError)(nil)).Elem())
	_register("encoding/json.Marshal", encoding_json.Marshal)
	_register("encoding/json.MarshalIndent", encoding_json.MarshalIndent)
	_register("encoding/json.Marshaler", reflect.TypeOf((*encoding_json.Marshaler)(nil)).Elem())
	_register("encoding/json.MarshalerError", reflect.TypeOf((*encoding_json.MarshalerError)(nil)).Elem())
	_register("encoding/json.NewDecoder", encoding_json.NewDecoder)
	_register("encoding/json.NewEncoder", encoding_json.NewEncoder)
	_register("encoding/json.Number", reflect.TypeOf((*encoding_json.Number)(nil)).Elem())
	_register("encoding/json.RawMessage", reflect.TypeOf((*encoding_json.RawMessage)(nil)).Elem())
	_register("encoding/json.SyntaxError", reflect.TypeOf((*encoding_json.SyntaxError)(nil)).Elem())
	_register("encoding/json.Token", reflect.TypeOf((*encoding_json.Token)(nil)).Elem())
	_register("encoding/json.Unmarshal", encoding_json.Unmarshal)
	_register("encoding/json.UnmarshalFieldError", reflect.TypeOf((*encoding_json.UnmarshalFieldError)(nil)).Elem())
	_register("encoding/json.UnmarshalTypeError", reflect.TypeOf((*encoding_json.UnmarshalTypeError)(nil)).Elem())
	_register("encoding/json.Unmarshaler", reflect.TypeOf((*encoding_json.Unmarshaler)(nil)).Elem())
	_register("encoding/json.UnsupportedTypeError", reflect.TypeOf((*encoding_json.UnsupportedTypeError)(nil)).Elem())
	_register("encoding/json.UnsupportedValueError", reflect.TypeOf((*encoding_json.UnsupportedValueError)(nil)).Elem())
	_register("encoding/json.Valid", encoding_json.Valid)

	// package encoding/pem
	////////////////////////////////////////
	_register("encoding/pem.Block", reflect.TypeOf((*encoding_pem.Block)(nil)).Elem())
	_register("encoding/pem.Decode", encoding_pem.Decode)
	_register("encoding/pem.Encode", encoding_pem.Encode)
	_register("encoding/pem.EncodeToMemory", encoding_pem.EncodeToMemory)

	// package encoding/xml
	////////////////////////////////////////
	_register("encoding/xml.Attr", reflect.TypeOf((*encoding_xml.Attr)(nil)).Elem())
	_register("encoding/xml.CharData", reflect.TypeOf((*encoding_xml.CharData)(nil)).Elem())
	_register("encoding/xml.Comment", reflect.TypeOf((*encoding_xml.Comment)(nil)).Elem())
	_register("encoding/xml.CopyToken", encoding_xml.CopyToken)
	_register("encoding/xml.Decoder", reflect.TypeOf((*encoding_xml.Decoder)(nil)).Elem())
	_register("encoding/xml.Directive", reflect.TypeOf((*encoding_xml.Directive)(nil)).Elem())
	_register("encoding/xml.Encoder", reflect.TypeOf((*encoding_xml.Encoder)(nil)).Elem())
	_register("encoding/xml.EndElement", reflect.TypeOf((*encoding_xml.EndElement)(nil)).Elem())
	_register("encoding/xml.Escape", encoding_xml.Escape)
	_register("encoding/xml.EscapeText", encoding_xml.EscapeText)
	_register("encoding/xml.HTMLAutoClose", encoding_xml.HTMLAutoClose)
	_register("encoding/xml.HTMLEntity", encoding_xml.HTMLEntity)
	_register("encoding/xml.Header", encoding_xml.Header)
	_register("encoding/xml.Marshal", encoding_xml.Marshal)
	_register("encoding/xml.MarshalIndent", encoding_xml.MarshalIndent)
	_register("encoding/xml.Marshaler", reflect.TypeOf((*encoding_xml.Marshaler)(nil)).Elem())
	_register("encoding/xml.MarshalerAttr", reflect.TypeOf((*encoding_xml.MarshalerAttr)(nil)).Elem())
	_register("encoding/xml.Name", reflect.TypeOf((*encoding_xml.Name)(nil)).Elem())
	_register("encoding/xml.NewDecoder", encoding_xml.NewDecoder)
	_register("encoding/xml.NewEncoder", encoding_xml.NewEncoder)
	_register("encoding/xml.NewTokenDecoder", encoding_xml.NewTokenDecoder)
	_register("encoding/xml.ProcInst", reflect.TypeOf((*encoding_xml.ProcInst)(nil)).Elem())
	_register("encoding/xml.StartElement", reflect.TypeOf((*encoding_xml.StartElement)(nil)).Elem())
	_register("encoding/xml.SyntaxError", reflect.TypeOf((*encoding_xml.SyntaxError)(nil)).Elem())
	_register("encoding/xml.TagPathError", reflect.TypeOf((*encoding_xml.TagPathError)(nil)).Elem())
	_register("encoding/xml.Token", reflect.TypeOf((*encoding_xml.Token)(nil)).Elem())
	_register("encoding/xml.TokenReader", reflect.TypeOf((*encoding_xml.TokenReader)(nil)).Elem())
	_register("encoding/xml.Unmarshal", encoding_xml.Unmarshal)
	_register("encoding/xml.UnmarshalError", reflect.TypeOf((*encoding_xml.UnmarshalError)(nil)).Elem())
	_register("encoding/xml.Unmarshaler", reflect.TypeOf((*encoding_xml.Unmarshaler)(nil)).Elem())
	_register("encoding/xml.UnmarshalerAttr", reflect.TypeOf((*encoding_xml.UnmarshalerAttr)(nil)).Elem())
	_register("encoding/xml.UnsupportedTypeError", reflect.TypeOf((*encoding_xml.UnsupportedTypeError)(nil)).Elem())

	// package errors
	////////////////////////////////////////
	_register("errors.As", errors.As)
	_register("errors.Is", errors.Is)
	_register("errors.New", errors.New)
	_register("errors.Unwrap", errors.Unwrap)

	// package expvar
	////////////////////////////////////////
	_register("expvar.Do", expvar.Do)
	_register("expvar.Float", reflect.TypeOf((*expvar.Float)(nil)).Elem())
	_register("expvar.Func", reflect.TypeOf((*expvar.Func)(nil)).Elem())
	_register("expvar.Get", expvar.Get)
	_register("expvar.Handler", expvar.Handler)
	_register("expvar.Int", reflect.TypeOf((*expvar.Int)(nil)).Elem())
	_register("expvar.KeyValue", reflect.TypeOf((*expvar.KeyValue)(nil)).Elem())
	_register("expvar.Map", reflect.TypeOf((*expvar.Map)(nil)).Elem())
	_register("expvar.NewFloat", expvar.NewFloat)
	_register("expvar.NewInt", expvar.NewInt)
	_register("expvar.NewMap", expvar.NewMap)
	_register("expvar.NewString", expvar.NewString)
	_register("expvar.Publish", expvar.Publish)
	_register("expvar.String", reflect.TypeOf((*expvar.String)(nil)).Elem())
	_register("expvar.Var", reflect.TypeOf((*expvar.Var)(nil)).Elem())

	// package flag
	////////////////////////////////////////
	_register("flag.Arg", flag.Arg)
	_register("flag.Args", flag.Args)
	_register("flag.Bool", flag.Bool)
	_register("flag.BoolVar", flag.BoolVar)
	_register("flag.CommandLine", flag.CommandLine)
	_register("flag.ContinueOnError", flag.ContinueOnError)
	_register("flag.Duration", flag.Duration)
	_register("flag.DurationVar", flag.DurationVar)
	_register("flag.ErrHelp", flag.ErrHelp)
	_register("flag.ErrorHandling", reflect.TypeOf((*flag.ErrorHandling)(nil)).Elem())
	_register("flag.ExitOnError", flag.ExitOnError)
	_register("flag.Flag", reflect.TypeOf((*flag.Flag)(nil)).Elem())
	_register("flag.FlagSet", reflect.TypeOf((*flag.FlagSet)(nil)).Elem())
	_register("flag.Float64", flag.Float64)
	_register("flag.Float64Var", flag.Float64Var)
	_register("flag.Func", flag.Func)
	_register("flag.Getter", reflect.TypeOf((*flag.Getter)(nil)).Elem())
	_register("flag.Int", flag.Int)
	_register("flag.Int64", flag.Int64)
	_register("flag.Int64Var", flag.Int64Var)
	_register("flag.IntVar", flag.IntVar)
	_register("flag.Lookup", flag.Lookup)
	_register("flag.NArg", flag.NArg)
	_register("flag.NFlag", flag.NFlag)
	_register("flag.NewFlagSet", flag.NewFlagSet)
	_register("flag.PanicOnError", flag.PanicOnError)
	_register("flag.Parse", flag.Parse)
	_register("flag.Parsed", flag.Parsed)
	_register("flag.PrintDefaults", flag.PrintDefaults)
	_register("flag.Set", flag.Set)
	_register("flag.String", flag.String)
	_register("flag.StringVar", flag.StringVar)
	_register("flag.TextVar", flag.TextVar)
	_register("flag.Uint", flag.Uint)
	_register("flag.Uint64", flag.Uint64)
	_register("flag.Uint64Var", flag.Uint64Var)
	_register("flag.UintVar", flag.UintVar)
	_register("flag.UnquoteUsage", flag.UnquoteUsage)
	_register("flag.Usage", flag.Usage)
	_register("flag.Value", reflect.TypeOf((*flag.Value)(nil)).Elem())
	_register("flag.Var", flag.Var)
	_register("flag.Visit", flag.Visit)
	_register("flag.VisitAll", flag.VisitAll)

	// package fmt
	////////////////////////////////////////
	_register("fmt.Append", fmt.Append)
	_register("fmt.Appendf", fmt.Appendf)
	_register("fmt.Appendln", fmt.Appendln)
	_register("fmt.Errorf", fmt.Errorf)
	_register("fmt.Formatter", reflect.TypeOf((*fmt.Formatter)(nil)).Elem())
	_register("fmt.Fprint", fmt.Fprint)
	_register("fmt.Fprintf", fmt.Fprintf)
	_register("fmt.Fprintln", fmt.Fprintln)
	_register("fmt.Fscan", fmt.Fscan)
	_register("fmt.Fscanf", fmt.Fscanf)
	_register("fmt.Fscanln", fmt.Fscanln)
	_register("fmt.GoStringer", reflect.TypeOf((*fmt.GoStringer)(nil)).Elem())
	_register("fmt.Print", fmt.Print)
	_register("fmt.Printf", fmt.Printf)
	_register("fmt.Println", fmt.Println)
	_register("fmt.Scan", fmt.Scan)
	_register("fmt.ScanState", reflect.TypeOf((*fmt.ScanState)(nil)).Elem())
	_register("fmt.Scanf", fmt.Scanf)
	_register("fmt.Scanln", fmt.Scanln)
	_register("fmt.Scanner", reflect.TypeOf((*fmt.Scanner)(nil)).Elem())
	_register("fmt.Sprint", fmt.Sprint)
	_register("fmt.Sprintf", fmt.Sprintf)
	_register("fmt.Sprintln", fmt.Sprintln)
	_register("fmt.Sscan", fmt.Sscan)
	_register("fmt.Sscanf", fmt.Sscanf)
	_register("fmt.Sscanln", fmt.Sscanln)
	_register("fmt.State", reflect.TypeOf((*fmt.State)(nil)).Elem())
	_register("fmt.Stringer", reflect.TypeOf((*fmt.Stringer)(nil)).Elem())

	// package github.com/glojurelang/glojure/pkg/lang
	////////////////////////////////////////
	_register("github.com/glojurelang/glojure/pkg/lang.AddP", github_com_glojurelang_glojure_pkg_lang.AddP)
	_register("github.com/glojurelang/glojure/pkg/lang.AppendWriter", github_com_glojurelang_glojure_pkg_lang.AppendWriter)
	_register("github.com/glojurelang/glojure/pkg/lang.Apply", github_com_glojurelang_glojure_pkg_lang.Apply)
	_register("github.com/glojurelang/glojure/pkg/lang.ArrayNode", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.ArrayNode)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.ArrayNodeIterator", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.ArrayNodeIterator)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.ArrayNodeSeq", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.ArrayNodeSeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.AsBigDecimal", github_com_glojurelang_glojure_pkg_lang.AsBigDecimal)
	_register("github.com/glojurelang/glojure/pkg/lang.AsBigInt", github_com_glojurelang_glojure_pkg_lang.AsBigInt)
	_register("github.com/glojurelang/glojure/pkg/lang.AsByte", github_com_glojurelang_glojure_pkg_lang.AsByte)
	_register("github.com/glojurelang/glojure/pkg/lang.AsFloat64", github_com_glojurelang_glojure_pkg_lang.AsFloat64)
	_register("github.com/glojurelang/glojure/pkg/lang.AsInt", github_com_glojurelang_glojure_pkg_lang.AsInt)
	_register("github.com/glojurelang/glojure/pkg/lang.AsInt64", github_com_glojurelang_glojure_pkg_lang.AsInt64)
	_register("github.com/glojurelang/glojure/pkg/lang.AsNumber", github_com_glojurelang_glojure_pkg_lang.AsNumber)
	_register("github.com/glojurelang/glojure/pkg/lang.AsRatio", github_com_glojurelang_glojure_pkg_lang.AsRatio)
	_register("github.com/glojurelang/glojure/pkg/lang.Assoc", github_com_glojurelang_glojure_pkg_lang.Assoc)
	_register("github.com/glojurelang/glojure/pkg/lang.Associative", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Associative)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Atom", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Atom)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.BigDecimal", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.BigDecimal)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.BigInt", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.BigInt)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.BitmapIndexedNode", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.BitmapIndexedNode)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.BooleanCast", github_com_glojurelang_glojure_pkg_lang.BooleanCast)
	_register("github.com/glojurelang/glojure/pkg/lang.Box", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Box)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Builtins", github_com_glojurelang_glojure_pkg_lang.Builtins)
	_register("github.com/glojurelang/glojure/pkg/lang.ByteCast", github_com_glojurelang_glojure_pkg_lang.ByteCast)
	_register("github.com/glojurelang/glojure/pkg/lang.Char", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Char)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.CharAt", github_com_glojurelang_glojure_pkg_lang.CharAt)
	_register("github.com/glojurelang/glojure/pkg/lang.CharLiteralFromRune", github_com_glojurelang_glojure_pkg_lang.CharLiteralFromRune)
	_register("github.com/glojurelang/glojure/pkg/lang.Comparer", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Comparer)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.ConcatStrings", github_com_glojurelang_glojure_pkg_lang.ConcatStrings)
	_register("github.com/glojurelang/glojure/pkg/lang.Conj", github_com_glojurelang_glojure_pkg_lang.Conj)
	_register("github.com/glojurelang/glojure/pkg/lang.Conjer", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Conjer)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Cons", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Cons)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.ConsList", github_com_glojurelang_glojure_pkg_lang.ConsList)
	_register("github.com/glojurelang/glojure/pkg/lang.ConstructPersistentStructMap", github_com_glojurelang_glojure_pkg_lang.ConstructPersistentStructMap)
	_register("github.com/glojurelang/glojure/pkg/lang.ConvertToGo", github_com_glojurelang_glojure_pkg_lang.ConvertToGo)
	_register("github.com/glojurelang/glojure/pkg/lang.Count", github_com_glojurelang_glojure_pkg_lang.Count)
	_register("github.com/glojurelang/glojure/pkg/lang.Counted", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Counted)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.CreatePersistentHashMap", github_com_glojurelang_glojure_pkg_lang.CreatePersistentHashMap)
	_register("github.com/glojurelang/glojure/pkg/lang.CreatePersistentStructMapSlotMap", github_com_glojurelang_glojure_pkg_lang.CreatePersistentStructMapSlotMap)
	_register("github.com/glojurelang/glojure/pkg/lang.CreatePersistentTreeMap", github_com_glojurelang_glojure_pkg_lang.CreatePersistentTreeMap)
	_register("github.com/glojurelang/glojure/pkg/lang.CreatePersistentTreeSet", github_com_glojurelang_glojure_pkg_lang.CreatePersistentTreeSet)
	_register("github.com/glojurelang/glojure/pkg/lang.CreatePersistentTreeSetWithComparator", github_com_glojurelang_glojure_pkg_lang.CreatePersistentTreeSetWithComparator)
	_register("github.com/glojurelang/glojure/pkg/lang.Cycle", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Cycle)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Dissoc", github_com_glojurelang_glojure_pkg_lang.Dissoc)
	_register("github.com/glojurelang/glojure/pkg/lang.EmptyList", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.EmptyList)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.EmptyMapIterator", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.EmptyMapIterator)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Environment", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Environment)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Equal", github_com_glojurelang_glojure_pkg_lang.Equal)
	_register("github.com/glojurelang/glojure/pkg/lang.Equaler", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Equaler)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.ErrNoTransaction", github_com_glojurelang_glojure_pkg_lang.ErrNoTransaction)
	_register("github.com/glojurelang/glojure/pkg/lang.Error", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Error)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.FieldOrMethod", github_com_glojurelang_glojure_pkg_lang.FieldOrMethod)
	_register("github.com/glojurelang/glojure/pkg/lang.FindNamespace", github_com_glojurelang_glojure_pkg_lang.FindNamespace)
	_register("github.com/glojurelang/glojure/pkg/lang.FindOrCreateNamespace", github_com_glojurelang_glojure_pkg_lang.FindOrCreateNamespace)
	_register("github.com/glojurelang/glojure/pkg/lang.First", github_com_glojurelang_glojure_pkg_lang.First)
	_register("github.com/glojurelang/glojure/pkg/lang.Get", github_com_glojurelang_glojure_pkg_lang.Get)
	_register("github.com/glojurelang/glojure/pkg/lang.GetDefault", github_com_glojurelang_glojure_pkg_lang.GetDefault)
	_register("github.com/glojurelang/glojure/pkg/lang.GlobalEnv", github_com_glojurelang_glojure_pkg_lang.GlobalEnv)
	_register("github.com/glojurelang/glojure/pkg/lang.GoAppend", github_com_glojurelang_glojure_pkg_lang.GoAppend)
	_register("github.com/glojurelang/glojure/pkg/lang.GoCap", github_com_glojurelang_glojure_pkg_lang.GoCap)
	_register("github.com/glojurelang/glojure/pkg/lang.GoChanOf", github_com_glojurelang_glojure_pkg_lang.GoChanOf)
	_register("github.com/glojurelang/glojure/pkg/lang.GoClose", github_com_glojurelang_glojure_pkg_lang.GoClose)
	_register("github.com/glojurelang/glojure/pkg/lang.GoComplex", github_com_glojurelang_glojure_pkg_lang.GoComplex)
	_register("github.com/glojurelang/glojure/pkg/lang.GoCopy", github_com_glojurelang_glojure_pkg_lang.GoCopy)
	_register("github.com/glojurelang/glojure/pkg/lang.GoDelete", github_com_glojurelang_glojure_pkg_lang.GoDelete)
	_register("github.com/glojurelang/glojure/pkg/lang.GoDeref", github_com_glojurelang_glojure_pkg_lang.GoDeref)
	_register("github.com/glojurelang/glojure/pkg/lang.GoImag", github_com_glojurelang_glojure_pkg_lang.GoImag)
	_register("github.com/glojurelang/glojure/pkg/lang.GoIndex", github_com_glojurelang_glojure_pkg_lang.GoIndex)
	_register("github.com/glojurelang/glojure/pkg/lang.GoLen", github_com_glojurelang_glojure_pkg_lang.GoLen)
	_register("github.com/glojurelang/glojure/pkg/lang.GoMake", github_com_glojurelang_glojure_pkg_lang.GoMake)
	_register("github.com/glojurelang/glojure/pkg/lang.GoNew", github_com_glojurelang_glojure_pkg_lang.GoNew)
	_register("github.com/glojurelang/glojure/pkg/lang.GoPanic", github_com_glojurelang_glojure_pkg_lang.GoPanic)
	_register("github.com/glojurelang/glojure/pkg/lang.GoReal", github_com_glojurelang_glojure_pkg_lang.GoReal)
	_register("github.com/glojurelang/glojure/pkg/lang.GoRecv", github_com_glojurelang_glojure_pkg_lang.GoRecv)
	_register("github.com/glojurelang/glojure/pkg/lang.GoRecvChanOf", github_com_glojurelang_glojure_pkg_lang.GoRecvChanOf)
	_register("github.com/glojurelang/glojure/pkg/lang.GoSend", github_com_glojurelang_glojure_pkg_lang.GoSend)
	_register("github.com/glojurelang/glojure/pkg/lang.GoSendChanOf", github_com_glojurelang_glojure_pkg_lang.GoSendChanOf)
	_register("github.com/glojurelang/glojure/pkg/lang.GoSlice", github_com_glojurelang_glojure_pkg_lang.GoSlice)
	_register("github.com/glojurelang/glojure/pkg/lang.HasType", github_com_glojurelang_glojure_pkg_lang.HasType)
	_register("github.com/glojurelang/glojure/pkg/lang.Hash", github_com_glojurelang_glojure_pkg_lang.Hash)
	_register("github.com/glojurelang/glojure/pkg/lang.HashCollisionNode", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.HashCollisionNode)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Hasher", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Hasher)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IAtom", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IAtom)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IAtom2", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IAtom2)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IChunk", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IChunk)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IChunkedSeq", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IChunkedSeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IDeref", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IDeref)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IDrop", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IDrop)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IEditableCollection", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IEditableCollection)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IFn", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IFn)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IFnFunc", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IFnFunc)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IHashEq", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IHashEq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.ILookup", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.ILookup)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IMapEntry", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IMapEntry)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IMeta", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IMeta)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IObj", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IObj)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IPending", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IPending)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IPersistentCollection", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IPersistentCollection)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IPersistentList", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IPersistentList)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IPersistentMap", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IPersistentMap)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IPersistentSet", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IPersistentSet)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IPersistentStack", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IPersistentStack)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IPersistentVector", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IPersistentVector)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IRecord", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IRecord)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IReduce", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IReduce)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IReduceInit", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IReduceInit)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.IRef", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.IRef)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.ISeq", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.ISeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.ISeqable", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.ISeqable)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.ITransientCollection", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.ITransientCollection)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.ITransientSet", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.ITransientSet)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Identical", github_com_glojurelang_glojure_pkg_lang.Identical)
	_register("github.com/glojurelang/glojure/pkg/lang.IdentityHash", github_com_glojurelang_glojure_pkg_lang.IdentityHash)
	_register("github.com/glojurelang/glojure/pkg/lang.Import", github_com_glojurelang_glojure_pkg_lang.Import)
	_register("github.com/glojurelang/glojure/pkg/lang.Inc", github_com_glojurelang_glojure_pkg_lang.Inc)
	_register("github.com/glojurelang/glojure/pkg/lang.IncP", github_com_glojurelang_glojure_pkg_lang.IncP)
	_register("github.com/glojurelang/glojure/pkg/lang.Indexed", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Indexed)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.InternKeyword", github_com_glojurelang_glojure_pkg_lang.InternKeyword)
	_register("github.com/glojurelang/glojure/pkg/lang.InternKeywordString", github_com_glojurelang_glojure_pkg_lang.InternKeywordString)
	_register("github.com/glojurelang/glojure/pkg/lang.InternKeywordSymbol", github_com_glojurelang_glojure_pkg_lang.InternKeywordSymbol)
	_register("github.com/glojurelang/glojure/pkg/lang.InternSymbol", github_com_glojurelang_glojure_pkg_lang.InternSymbol)
	_register("github.com/glojurelang/glojure/pkg/lang.InternVar", github_com_glojurelang_glojure_pkg_lang.InternVar)
	_register("github.com/glojurelang/glojure/pkg/lang.InternVarName", github_com_glojurelang_glojure_pkg_lang.InternVarName)
	_register("github.com/glojurelang/glojure/pkg/lang.InternVarReplaceRoot", github_com_glojurelang_glojure_pkg_lang.InternVarReplaceRoot)
	_register("github.com/glojurelang/glojure/pkg/lang.IsInteger", github_com_glojurelang_glojure_pkg_lang.IsInteger)
	_register("github.com/glojurelang/glojure/pkg/lang.IsNil", github_com_glojurelang_glojure_pkg_lang.IsNil)
	_register("github.com/glojurelang/glojure/pkg/lang.IsNumber", github_com_glojurelang_glojure_pkg_lang.IsNumber)
	_register("github.com/glojurelang/glojure/pkg/lang.IsReduced", github_com_glojurelang_glojure_pkg_lang.IsReduced)
	_register("github.com/glojurelang/glojure/pkg/lang.IsSeq", github_com_glojurelang_glojure_pkg_lang.IsSeq)
	_register("github.com/glojurelang/glojure/pkg/lang.IsSeqEqual", github_com_glojurelang_glojure_pkg_lang.IsSeqEqual)
	_register("github.com/glojurelang/glojure/pkg/lang.IsTruthy", github_com_glojurelang_glojure_pkg_lang.IsTruthy)
	_register("github.com/glojurelang/glojure/pkg/lang.KWAliases", github_com_glojurelang_glojure_pkg_lang.KWAliases)
	_register("github.com/glojurelang/glojure/pkg/lang.KWArg", github_com_glojurelang_glojure_pkg_lang.KWArg)
	_register("github.com/glojurelang/glojure/pkg/lang.KWArgId", github_com_glojurelang_glojure_pkg_lang.KWArgId)
	_register("github.com/glojurelang/glojure/pkg/lang.KWArglists", github_com_glojurelang_glojure_pkg_lang.KWArglists)
	_register("github.com/glojurelang/glojure/pkg/lang.KWArgs", github_com_glojurelang_glojure_pkg_lang.KWArgs)
	_register("github.com/glojurelang/glojure/pkg/lang.KWBinding", github_com_glojurelang_glojure_pkg_lang.KWBinding)
	_register("github.com/glojurelang/glojure/pkg/lang.KWBindings", github_com_glojurelang_glojure_pkg_lang.KWBindings)
	_register("github.com/glojurelang/glojure/pkg/lang.KWBody", github_com_glojurelang_glojure_pkg_lang.KWBody)
	_register("github.com/glojurelang/glojure/pkg/lang.KWBool", github_com_glojurelang_glojure_pkg_lang.KWBool)
	_register("github.com/glojurelang/glojure/pkg/lang.KWCase", github_com_glojurelang_glojure_pkg_lang.KWCase)
	_register("github.com/glojurelang/glojure/pkg/lang.KWCaseNode", github_com_glojurelang_glojure_pkg_lang.KWCaseNode)
	_register("github.com/glojurelang/glojure/pkg/lang.KWCatch", github_com_glojurelang_glojure_pkg_lang.KWCatch)
	_register("github.com/glojurelang/glojure/pkg/lang.KWCatches", github_com_glojurelang_glojure_pkg_lang.KWCatches)
	_register("github.com/glojurelang/glojure/pkg/lang.KWChar", github_com_glojurelang_glojure_pkg_lang.KWChar)
	_register("github.com/glojurelang/glojure/pkg/lang.KWChildren", github_com_glojurelang_glojure_pkg_lang.KWChildren)
	_register("github.com/glojurelang/glojure/pkg/lang.KWClass", github_com_glojurelang_glojure_pkg_lang.KWClass)
	_register("github.com/glojurelang/glojure/pkg/lang.KWColumn", github_com_glojurelang_glojure_pkg_lang.KWColumn)
	_register("github.com/glojurelang/glojure/pkg/lang.KWCompact", github_com_glojurelang_glojure_pkg_lang.KWCompact)
	_register("github.com/glojurelang/glojure/pkg/lang.KWConst", github_com_glojurelang_glojure_pkg_lang.KWConst)
	_register("github.com/glojurelang/glojure/pkg/lang.KWContext", github_com_glojurelang_glojure_pkg_lang.KWContext)
	_register("github.com/glojurelang/glojure/pkg/lang.KWCtxExpr", github_com_glojurelang_glojure_pkg_lang.KWCtxExpr)
	_register("github.com/glojurelang/glojure/pkg/lang.KWCtxReturn", github_com_glojurelang_glojure_pkg_lang.KWCtxReturn)
	_register("github.com/glojurelang/glojure/pkg/lang.KWCtxStatement", github_com_glojurelang_glojure_pkg_lang.KWCtxStatement)
	_register("github.com/glojurelang/glojure/pkg/lang.KWDef", github_com_glojurelang_glojure_pkg_lang.KWDef)
	_register("github.com/glojurelang/glojure/pkg/lang.KWDefault", github_com_glojurelang_glojure_pkg_lang.KWDefault)
	_register("github.com/glojurelang/glojure/pkg/lang.KWDo", github_com_glojurelang_glojure_pkg_lang.KWDo)
	_register("github.com/glojurelang/glojure/pkg/lang.KWDoc", github_com_glojurelang_glojure_pkg_lang.KWDoc)
	_register("github.com/glojurelang/glojure/pkg/lang.KWDynamic", github_com_glojurelang_glojure_pkg_lang.KWDynamic)
	_register("github.com/glojurelang/glojure/pkg/lang.KWElse", github_com_glojurelang_glojure_pkg_lang.KWElse)
	_register("github.com/glojurelang/glojure/pkg/lang.KWEndColumn", github_com_glojurelang_glojure_pkg_lang.KWEndColumn)
	_register("github.com/glojurelang/glojure/pkg/lang.KWEndLine", github_com_glojurelang_glojure_pkg_lang.KWEndLine)
	_register("github.com/glojurelang/glojure/pkg/lang.KWEnv", github_com_glojurelang_glojure_pkg_lang.KWEnv)
	_register("github.com/glojurelang/glojure/pkg/lang.KWException", github_com_glojurelang_glojure_pkg_lang.KWException)
	_register("github.com/glojurelang/glojure/pkg/lang.KWExpr", github_com_glojurelang_glojure_pkg_lang.KWExpr)
	_register("github.com/glojurelang/glojure/pkg/lang.KWExprs", github_com_glojurelang_glojure_pkg_lang.KWExprs)
	_register("github.com/glojurelang/glojure/pkg/lang.KWField", github_com_glojurelang_glojure_pkg_lang.KWField)
	_register("github.com/glojurelang/glojure/pkg/lang.KWFile", github_com_glojurelang_glojure_pkg_lang.KWFile)
	_register("github.com/glojurelang/glojure/pkg/lang.KWFinally", github_com_glojurelang_glojure_pkg_lang.KWFinally)
	_register("github.com/glojurelang/glojure/pkg/lang.KWFixedArity", github_com_glojurelang_glojure_pkg_lang.KWFixedArity)
	_register("github.com/glojurelang/glojure/pkg/lang.KWFn", github_com_glojurelang_glojure_pkg_lang.KWFn)
	_register("github.com/glojurelang/glojure/pkg/lang.KWFnMethod", github_com_glojurelang_glojure_pkg_lang.KWFnMethod)
	_register("github.com/glojurelang/glojure/pkg/lang.KWForm", github_com_glojurelang_glojure_pkg_lang.KWForm)
	_register("github.com/glojurelang/glojure/pkg/lang.KWHashEquiv", github_com_glojurelang_glojure_pkg_lang.KWHashEquiv)
	_register("github.com/glojurelang/glojure/pkg/lang.KWHashIdentity", github_com_glojurelang_glojure_pkg_lang.KWHashIdentity)
	_register("github.com/glojurelang/glojure/pkg/lang.KWHostCall", github_com_glojurelang_glojure_pkg_lang.KWHostCall)
	_register("github.com/glojurelang/glojure/pkg/lang.KWHostField", github_com_glojurelang_glojure_pkg_lang.KWHostField)
	_register("github.com/glojurelang/glojure/pkg/lang.KWHostInterop", github_com_glojurelang_glojure_pkg_lang.KWHostInterop)
	_register("github.com/glojurelang/glojure/pkg/lang.KWIf", github_com_glojurelang_glojure_pkg_lang.KWIf)
	_register("github.com/glojurelang/glojure/pkg/lang.KWInTry", github_com_glojurelang_glojure_pkg_lang.KWInTry)
	_register("github.com/glojurelang/glojure/pkg/lang.KWInit", github_com_glojurelang_glojure_pkg_lang.KWInit)
	_register("github.com/glojurelang/glojure/pkg/lang.KWInt", github_com_glojurelang_glojure_pkg_lang.KWInt)
	_register("github.com/glojurelang/glojure/pkg/lang.KWInvoke", github_com_glojurelang_glojure_pkg_lang.KWInvoke)
	_register("github.com/glojurelang/glojure/pkg/lang.KWIsAssignable", github_com_glojurelang_glojure_pkg_lang.KWIsAssignable)
	_register("github.com/glojurelang/glojure/pkg/lang.KWIsBody", github_com_glojurelang_glojure_pkg_lang.KWIsBody)
	_register("github.com/glojurelang/glojure/pkg/lang.KWIsLiteral", github_com_glojurelang_glojure_pkg_lang.KWIsLiteral)
	_register("github.com/glojurelang/glojure/pkg/lang.KWIsVariadic", github_com_glojurelang_glojure_pkg_lang.KWIsVariadic)
	_register("github.com/glojurelang/glojure/pkg/lang.KWItems", github_com_glojurelang_glojure_pkg_lang.KWItems)
	_register("github.com/glojurelang/glojure/pkg/lang.KWKeys", github_com_glojurelang_glojure_pkg_lang.KWKeys)
	_register("github.com/glojurelang/glojure/pkg/lang.KWKeyword", github_com_glojurelang_glojure_pkg_lang.KWKeyword)
	_register("github.com/glojurelang/glojure/pkg/lang.KWLet", github_com_glojurelang_glojure_pkg_lang.KWLet)
	_register("github.com/glojurelang/glojure/pkg/lang.KWLetfn", github_com_glojurelang_glojure_pkg_lang.KWLetfn)
	_register("github.com/glojurelang/glojure/pkg/lang.KWLine", github_com_glojurelang_glojure_pkg_lang.KWLine)
	_register("github.com/glojurelang/glojure/pkg/lang.KWLocal", github_com_glojurelang_glojure_pkg_lang.KWLocal)
	_register("github.com/glojurelang/glojure/pkg/lang.KWLocals", github_com_glojurelang_glojure_pkg_lang.KWLocals)
	_register("github.com/glojurelang/glojure/pkg/lang.KWLoop", github_com_glojurelang_glojure_pkg_lang.KWLoop)
	_register("github.com/glojurelang/glojure/pkg/lang.KWLoopId", github_com_glojurelang_glojure_pkg_lang.KWLoopId)
	_register("github.com/glojurelang/glojure/pkg/lang.KWLoopLocals", github_com_glojurelang_glojure_pkg_lang.KWLoopLocals)
	_register("github.com/glojurelang/glojure/pkg/lang.KWMOrF", github_com_glojurelang_glojure_pkg_lang.KWMOrF)
	_register("github.com/glojurelang/glojure/pkg/lang.KWMacro", github_com_glojurelang_glojure_pkg_lang.KWMacro)
	_register("github.com/glojurelang/glojure/pkg/lang.KWMap", github_com_glojurelang_glojure_pkg_lang.KWMap)
	_register("github.com/glojurelang/glojure/pkg/lang.KWMappings", github_com_glojurelang_glojure_pkg_lang.KWMappings)
	_register("github.com/glojurelang/glojure/pkg/lang.KWMaxFixedArity", github_com_glojurelang_glojure_pkg_lang.KWMaxFixedArity)
	_register("github.com/glojurelang/glojure/pkg/lang.KWMaybeClass", github_com_glojurelang_glojure_pkg_lang.KWMaybeClass)
	_register("github.com/glojurelang/glojure/pkg/lang.KWMaybeHostForm", github_com_glojurelang_glojure_pkg_lang.KWMaybeHostForm)
	_register("github.com/glojurelang/glojure/pkg/lang.KWMeta", github_com_glojurelang_glojure_pkg_lang.KWMeta)
	_register("github.com/glojurelang/glojure/pkg/lang.KWMethod", github_com_glojurelang_glojure_pkg_lang.KWMethod)
	_register("github.com/glojurelang/glojure/pkg/lang.KWMethods", github_com_glojurelang_glojure_pkg_lang.KWMethods)
	_register("github.com/glojurelang/glojure/pkg/lang.KWMutable", github_com_glojurelang_glojure_pkg_lang.KWMutable)
	_register("github.com/glojurelang/glojure/pkg/lang.KWNS", github_com_glojurelang_glojure_pkg_lang.KWNS)
	_register("github.com/glojurelang/glojure/pkg/lang.KWName", github_com_glojurelang_glojure_pkg_lang.KWName)
	_register("github.com/glojurelang/glojure/pkg/lang.KWNamespaces", github_com_glojurelang_glojure_pkg_lang.KWNamespaces)
	_register("github.com/glojurelang/glojure/pkg/lang.KWNew", github_com_glojurelang_glojure_pkg_lang.KWNew)
	_register("github.com/glojurelang/glojure/pkg/lang.KWNil", github_com_glojurelang_glojure_pkg_lang.KWNil)
	_register("github.com/glojurelang/glojure/pkg/lang.KWNodes", github_com_glojurelang_glojure_pkg_lang.KWNodes)
	_register("github.com/glojurelang/glojure/pkg/lang.KWNumber", github_com_glojurelang_glojure_pkg_lang.KWNumber)
	_register("github.com/glojurelang/glojure/pkg/lang.KWOnce", github_com_glojurelang_glojure_pkg_lang.KWOnce)
	_register("github.com/glojurelang/glojure/pkg/lang.KWOp", github_com_glojurelang_glojure_pkg_lang.KWOp)
	_register("github.com/glojurelang/glojure/pkg/lang.KWParams", github_com_glojurelang_glojure_pkg_lang.KWParams)
	_register("github.com/glojurelang/glojure/pkg/lang.KWPrivate", github_com_glojurelang_glojure_pkg_lang.KWPrivate)
	_register("github.com/glojurelang/glojure/pkg/lang.KWQuote", github_com_glojurelang_glojure_pkg_lang.KWQuote)
	_register("github.com/glojurelang/glojure/pkg/lang.KWRawForms", github_com_glojurelang_glojure_pkg_lang.KWRawForms)
	_register("github.com/glojurelang/glojure/pkg/lang.KWRecur", github_com_glojurelang_glojure_pkg_lang.KWRecur)
	_register("github.com/glojurelang/glojure/pkg/lang.KWRegex", github_com_glojurelang_glojure_pkg_lang.KWRegex)
	_register("github.com/glojurelang/glojure/pkg/lang.KWRet", github_com_glojurelang_glojure_pkg_lang.KWRet)
	_register("github.com/glojurelang/glojure/pkg/lang.KWSeq", github_com_glojurelang_glojure_pkg_lang.KWSeq)
	_register("github.com/glojurelang/glojure/pkg/lang.KWSet", github_com_glojurelang_glojure_pkg_lang.KWSet)
	_register("github.com/glojurelang/glojure/pkg/lang.KWSetBang", github_com_glojurelang_glojure_pkg_lang.KWSetBang)
	_register("github.com/glojurelang/glojure/pkg/lang.KWSparse", github_com_glojurelang_glojure_pkg_lang.KWSparse)
	_register("github.com/glojurelang/glojure/pkg/lang.KWStatements", github_com_glojurelang_glojure_pkg_lang.KWStatements)
	_register("github.com/glojurelang/glojure/pkg/lang.KWString", github_com_glojurelang_glojure_pkg_lang.KWString)
	_register("github.com/glojurelang/glojure/pkg/lang.KWSymbol", github_com_glojurelang_glojure_pkg_lang.KWSymbol)
	_register("github.com/glojurelang/glojure/pkg/lang.KWTag", github_com_glojurelang_glojure_pkg_lang.KWTag)
	_register("github.com/glojurelang/glojure/pkg/lang.KWTarget", github_com_glojurelang_glojure_pkg_lang.KWTarget)
	_register("github.com/glojurelang/glojure/pkg/lang.KWTest", github_com_glojurelang_glojure_pkg_lang.KWTest)
	_register("github.com/glojurelang/glojure/pkg/lang.KWTests", github_com_glojurelang_glojure_pkg_lang.KWTests)
	_register("github.com/glojurelang/glojure/pkg/lang.KWTheVar", github_com_glojurelang_glojure_pkg_lang.KWTheVar)
	_register("github.com/glojurelang/glojure/pkg/lang.KWThen", github_com_glojurelang_glojure_pkg_lang.KWThen)
	_register("github.com/glojurelang/glojure/pkg/lang.KWThrow", github_com_glojurelang_glojure_pkg_lang.KWThrow)
	_register("github.com/glojurelang/glojure/pkg/lang.KWTopLevel", github_com_glojurelang_glojure_pkg_lang.KWTopLevel)
	_register("github.com/glojurelang/glojure/pkg/lang.KWTry", github_com_glojurelang_glojure_pkg_lang.KWTry)
	_register("github.com/glojurelang/glojure/pkg/lang.KWType", github_com_glojurelang_glojure_pkg_lang.KWType)
	_register("github.com/glojurelang/glojure/pkg/lang.KWUnknown", github_com_glojurelang_glojure_pkg_lang.KWUnknown)
	_register("github.com/glojurelang/glojure/pkg/lang.KWVal", github_com_glojurelang_glojure_pkg_lang.KWVal)
	_register("github.com/glojurelang/glojure/pkg/lang.KWVals", github_com_glojurelang_glojure_pkg_lang.KWVals)
	_register("github.com/glojurelang/glojure/pkg/lang.KWVar", github_com_glojurelang_glojure_pkg_lang.KWVar)
	_register("github.com/glojurelang/glojure/pkg/lang.KWVector", github_com_glojurelang_glojure_pkg_lang.KWVector)
	_register("github.com/glojurelang/glojure/pkg/lang.KWWithMeta", github_com_glojurelang_glojure_pkg_lang.KWWithMeta)
	_register("github.com/glojurelang/glojure/pkg/lang.Keys", github_com_glojurelang_glojure_pkg_lang.Keys)
	_register("github.com/glojurelang/glojure/pkg/lang.Keyword", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Keyword)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.LazySeq", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.LazySeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.List", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.List)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.LockingTransaction", github_com_glojurelang_glojure_pkg_lang.LockingTransaction)
	_register("github.com/glojurelang/glojure/pkg/lang.LockingTransactor", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.LockingTransactor)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Map", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Map)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.MapEntry", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.MapEntry)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.MapIterator", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.MapIterator)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.MapKeySeq", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.MapKeySeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.MapSeq", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.MapSeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.MapValSeq", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.MapValSeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Matcher", github_com_glojurelang_glojure_pkg_lang.Matcher)
	_register("github.com/glojurelang/glojure/pkg/lang.Max", github_com_glojurelang_glojure_pkg_lang.Max)
	_register("github.com/glojurelang/glojure/pkg/lang.Merge", github_com_glojurelang_glojure_pkg_lang.Merge)
	_register("github.com/glojurelang/glojure/pkg/lang.Min", github_com_glojurelang_glojure_pkg_lang.Min)
	_register("github.com/glojurelang/glojure/pkg/lang.MultiFn", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.MultiFn)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.MustAsInt", github_com_glojurelang_glojure_pkg_lang.MustAsInt)
	_register("github.com/glojurelang/glojure/pkg/lang.MustNth", github_com_glojurelang_glojure_pkg_lang.MustNth)
	_register("github.com/glojurelang/glojure/pkg/lang.NSCore", github_com_glojurelang_glojure_pkg_lang.NSCore)
	_register("github.com/glojurelang/glojure/pkg/lang.Named", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Named)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Namespace", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Namespace)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.NamespaceFor", github_com_glojurelang_glojure_pkg_lang.NamespaceFor)
	_register("github.com/glojurelang/glojure/pkg/lang.Namespaces", github_com_glojurelang_glojure_pkg_lang.Namespaces)
	_register("github.com/glojurelang/glojure/pkg/lang.NewAtom", github_com_glojurelang_glojure_pkg_lang.NewAtom)
	_register("github.com/glojurelang/glojure/pkg/lang.NewBigDecimal", github_com_glojurelang_glojure_pkg_lang.NewBigDecimal)
	_register("github.com/glojurelang/glojure/pkg/lang.NewBigDecimalFromFloat64", github_com_glojurelang_glojure_pkg_lang.NewBigDecimalFromFloat64)
	_register("github.com/glojurelang/glojure/pkg/lang.NewBigInt", github_com_glojurelang_glojure_pkg_lang.NewBigInt)
	_register("github.com/glojurelang/glojure/pkg/lang.NewBigIntFromGoBigInt", github_com_glojurelang_glojure_pkg_lang.NewBigIntFromGoBigInt)
	_register("github.com/glojurelang/glojure/pkg/lang.NewBigIntFromInt64", github_com_glojurelang_glojure_pkg_lang.NewBigIntFromInt64)
	_register("github.com/glojurelang/glojure/pkg/lang.NewBox", github_com_glojurelang_glojure_pkg_lang.NewBox)
	_register("github.com/glojurelang/glojure/pkg/lang.NewChar", github_com_glojurelang_glojure_pkg_lang.NewChar)
	_register("github.com/glojurelang/glojure/pkg/lang.NewConcatIterator", github_com_glojurelang_glojure_pkg_lang.NewConcatIterator)
	_register("github.com/glojurelang/glojure/pkg/lang.NewCons", github_com_glojurelang_glojure_pkg_lang.NewCons)
	_register("github.com/glojurelang/glojure/pkg/lang.NewCycle", github_com_glojurelang_glojure_pkg_lang.NewCycle)
	_register("github.com/glojurelang/glojure/pkg/lang.NewError", github_com_glojurelang_glojure_pkg_lang.NewError)
	_register("github.com/glojurelang/glojure/pkg/lang.NewIterator", github_com_glojurelang_glojure_pkg_lang.NewIterator)
	_register("github.com/glojurelang/glojure/pkg/lang.NewKeyword", github_com_glojurelang_glojure_pkg_lang.NewKeyword)
	_register("github.com/glojurelang/glojure/pkg/lang.NewLazilyPersistentVector", github_com_glojurelang_glojure_pkg_lang.NewLazilyPersistentVector)
	_register("github.com/glojurelang/glojure/pkg/lang.NewLazySeq", github_com_glojurelang_glojure_pkg_lang.NewLazySeq)
	_register("github.com/glojurelang/glojure/pkg/lang.NewList", github_com_glojurelang_glojure_pkg_lang.NewList)
	_register("github.com/glojurelang/glojure/pkg/lang.NewMap", github_com_glojurelang_glojure_pkg_lang.NewMap)
	_register("github.com/glojurelang/glojure/pkg/lang.NewMapEntry", github_com_glojurelang_glojure_pkg_lang.NewMapEntry)
	_register("github.com/glojurelang/glojure/pkg/lang.NewMapKeySeq", github_com_glojurelang_glojure_pkg_lang.NewMapKeySeq)
	_register("github.com/glojurelang/glojure/pkg/lang.NewMapSeq", github_com_glojurelang_glojure_pkg_lang.NewMapSeq)
	_register("github.com/glojurelang/glojure/pkg/lang.NewMapValSeq", github_com_glojurelang_glojure_pkg_lang.NewMapValSeq)
	_register("github.com/glojurelang/glojure/pkg/lang.NewMultiFn", github_com_glojurelang_glojure_pkg_lang.NewMultiFn)
	_register("github.com/glojurelang/glojure/pkg/lang.NewNamespace", github_com_glojurelang_glojure_pkg_lang.NewNamespace)
	_register("github.com/glojurelang/glojure/pkg/lang.NewPersistentArrayMapAsIfByAssoc", github_com_glojurelang_glojure_pkg_lang.NewPersistentArrayMapAsIfByAssoc)
	_register("github.com/glojurelang/glojure/pkg/lang.NewPersistentHashMap", github_com_glojurelang_glojure_pkg_lang.NewPersistentHashMap)
	_register("github.com/glojurelang/glojure/pkg/lang.NewRangeIterator", github_com_glojurelang_glojure_pkg_lang.NewRangeIterator)
	_register("github.com/glojurelang/glojure/pkg/lang.NewRatio", github_com_glojurelang_glojure_pkg_lang.NewRatio)
	_register("github.com/glojurelang/glojure/pkg/lang.NewRatioBigInt", github_com_glojurelang_glojure_pkg_lang.NewRatioBigInt)
	_register("github.com/glojurelang/glojure/pkg/lang.NewRecurTarget", github_com_glojurelang_glojure_pkg_lang.NewRecurTarget)
	_register("github.com/glojurelang/glojure/pkg/lang.NewReduced", github_com_glojurelang_glojure_pkg_lang.NewReduced)
	_register("github.com/glojurelang/glojure/pkg/lang.NewRef", github_com_glojurelang_glojure_pkg_lang.NewRef)
	_register("github.com/glojurelang/glojure/pkg/lang.NewRepeat", github_com_glojurelang_glojure_pkg_lang.NewRepeat)
	_register("github.com/glojurelang/glojure/pkg/lang.NewRepeatN", github_com_glojurelang_glojure_pkg_lang.NewRepeatN)
	_register("github.com/glojurelang/glojure/pkg/lang.NewSet", github_com_glojurelang_glojure_pkg_lang.NewSet)
	_register("github.com/glojurelang/glojure/pkg/lang.NewSliceIterator", github_com_glojurelang_glojure_pkg_lang.NewSliceIterator)
	_register("github.com/glojurelang/glojure/pkg/lang.NewSubVector", github_com_glojurelang_glojure_pkg_lang.NewSubVector)
	_register("github.com/glojurelang/glojure/pkg/lang.NewSymbol", github_com_glojurelang_glojure_pkg_lang.NewSymbol)
	_register("github.com/glojurelang/glojure/pkg/lang.NewVar", github_com_glojurelang_glojure_pkg_lang.NewVar)
	_register("github.com/glojurelang/glojure/pkg/lang.NewVarWithRoot", github_com_glojurelang_glojure_pkg_lang.NewVarWithRoot)
	_register("github.com/glojurelang/glojure/pkg/lang.NewVector", github_com_glojurelang_glojure_pkg_lang.NewVector)
	_register("github.com/glojurelang/glojure/pkg/lang.NewVectorFromCollection", github_com_glojurelang_glojure_pkg_lang.NewVectorFromCollection)
	_register("github.com/glojurelang/glojure/pkg/lang.NewVectorIterator", github_com_glojurelang_glojure_pkg_lang.NewVectorIterator)
	_register("github.com/glojurelang/glojure/pkg/lang.NewVolatile", github_com_glojurelang_glojure_pkg_lang.NewVolatile)
	_register("github.com/glojurelang/glojure/pkg/lang.Next", github_com_glojurelang_glojure_pkg_lang.Next)
	_register("github.com/glojurelang/glojure/pkg/lang.Node", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Node)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.NodeIterator", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.NodeIterator)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.NodeSeq", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.NodeSeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Nth", github_com_glojurelang_glojure_pkg_lang.Nth)
	_register("github.com/glojurelang/glojure/pkg/lang.Nther", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Nther)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.NumberMethods", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.NumberMethods)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Numbers", github_com_glojurelang_glojure_pkg_lang.Numbers)
	_register("github.com/glojurelang/glojure/pkg/lang.NumbersEqual", github_com_glojurelang_glojure_pkg_lang.NumbersEqual)
	_register("github.com/glojurelang/glojure/pkg/lang.Object", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Object)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Ops", github_com_glojurelang_glojure_pkg_lang.Ops)
	_register("github.com/glojurelang/glojure/pkg/lang.Pair", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Pair)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Peek", github_com_glojurelang_glojure_pkg_lang.Peek)
	_register("github.com/glojurelang/glojure/pkg/lang.PersistentHashMap", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.PersistentHashMap)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.PersistentHashSet", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.PersistentHashSet)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.PersistentStructMap", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.PersistentStructMap)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.PersistentStructMapDef", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.PersistentStructMapDef)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.PersistentVector", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.PersistentVector)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Pop", github_com_glojurelang_glojure_pkg_lang.Pop)
	_register("github.com/glojurelang/glojure/pkg/lang.PopThreadBindings", github_com_glojurelang_glojure_pkg_lang.PopThreadBindings)
	_register("github.com/glojurelang/glojure/pkg/lang.Print", github_com_glojurelang_glojure_pkg_lang.Print)
	_register("github.com/glojurelang/glojure/pkg/lang.PrintString", github_com_glojurelang_glojure_pkg_lang.PrintString)
	_register("github.com/glojurelang/glojure/pkg/lang.PrintWriter", github_com_glojurelang_glojure_pkg_lang.PrintWriter)
	_register("github.com/glojurelang/glojure/pkg/lang.PushThreadBindings", github_com_glojurelang_glojure_pkg_lang.PushThreadBindings)
	_register("github.com/glojurelang/glojure/pkg/lang.Ratio", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Ratio)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.RecurError", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.RecurError)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.RecurTarget", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.RecurTarget)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Reduce", github_com_glojurelang_glojure_pkg_lang.Reduce)
	_register("github.com/glojurelang/glojure/pkg/lang.ReduceInit", github_com_glojurelang_glojure_pkg_lang.ReduceInit)
	_register("github.com/glojurelang/glojure/pkg/lang.ReduceKV", github_com_glojurelang_glojure_pkg_lang.ReduceKV)
	_register("github.com/glojurelang/glojure/pkg/lang.Reduced", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Reduced)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Ref", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Ref)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Repeat", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Repeat)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Rest", github_com_glojurelang_glojure_pkg_lang.Rest)
	_register("github.com/glojurelang/glojure/pkg/lang.Reversible", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Reversible)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.RuneFromCharLiteral", github_com_glojurelang_glojure_pkg_lang.RuneFromCharLiteral)
	_register("github.com/glojurelang/glojure/pkg/lang.SafeMerge", github_com_glojurelang_glojure_pkg_lang.SafeMerge)
	_register("github.com/glojurelang/glojure/pkg/lang.Seq", github_com_glojurelang_glojure_pkg_lang.Seq)
	_register("github.com/glojurelang/glojure/pkg/lang.SeqsEqual", github_com_glojurelang_glojure_pkg_lang.SeqsEqual)
	_register("github.com/glojurelang/glojure/pkg/lang.Sequential", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Sequential)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Set", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Set)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.SetField", github_com_glojurelang_glojure_pkg_lang.SetField)
	_register("github.com/glojurelang/glojure/pkg/lang.ShutdownAgents", github_com_glojurelang_glojure_pkg_lang.ShutdownAgents)
	_register("github.com/glojurelang/glojure/pkg/lang.SliceSet", github_com_glojurelang_glojure_pkg_lang.SliceSet)
	_register("github.com/glojurelang/glojure/pkg/lang.StackFrame", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.StackFrame)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Stacker", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Stacker)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Sub", github_com_glojurelang_glojure_pkg_lang.Sub)
	_register("github.com/glojurelang/glojure/pkg/lang.SubP", github_com_glojurelang_glojure_pkg_lang.SubP)
	_register("github.com/glojurelang/glojure/pkg/lang.SubVector", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.SubVector)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Subvec", github_com_glojurelang_glojure_pkg_lang.Subvec)
	_register("github.com/glojurelang/glojure/pkg/lang.Symbol", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Symbol)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.SymbolCoreNamespace", github_com_glojurelang_glojure_pkg_lang.SymbolCoreNamespace)
	_register("github.com/glojurelang/glojure/pkg/lang.Throwable", github_com_glojurelang_glojure_pkg_lang.Throwable)
	_register("github.com/glojurelang/glojure/pkg/lang.ToString", github_com_glojurelang_glojure_pkg_lang.ToString)
	_register("github.com/glojurelang/glojure/pkg/lang.TransientMap", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.TransientMap)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.TransientSet", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.TransientSet)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.TypeOf", github_com_glojurelang_glojure_pkg_lang.TypeOf)
	_register("github.com/glojurelang/glojure/pkg/lang.UnboundVar", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.UnboundVar)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Vals", github_com_glojurelang_glojure_pkg_lang.Vals)
	_register("github.com/glojurelang/glojure/pkg/lang.Var", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Var)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.VarAgent", github_com_glojurelang_glojure_pkg_lang.VarAgent)
	_register("github.com/glojurelang/glojure/pkg/lang.VarAssert", github_com_glojurelang_glojure_pkg_lang.VarAssert)
	_register("github.com/glojurelang/glojure/pkg/lang.VarCompileFiles", github_com_glojurelang_glojure_pkg_lang.VarCompileFiles)
	_register("github.com/glojurelang/glojure/pkg/lang.VarCurrentNS", github_com_glojurelang_glojure_pkg_lang.VarCurrentNS)
	_register("github.com/glojurelang/glojure/pkg/lang.VarDataReaders", github_com_glojurelang_glojure_pkg_lang.VarDataReaders)
	_register("github.com/glojurelang/glojure/pkg/lang.VarFile", github_com_glojurelang_glojure_pkg_lang.VarFile)
	_register("github.com/glojurelang/glojure/pkg/lang.VarIn", github_com_glojurelang_glojure_pkg_lang.VarIn)
	_register("github.com/glojurelang/glojure/pkg/lang.VarInNS", github_com_glojurelang_glojure_pkg_lang.VarInNS)
	_register("github.com/glojurelang/glojure/pkg/lang.VarNS", github_com_glojurelang_glojure_pkg_lang.VarNS)
	_register("github.com/glojurelang/glojure/pkg/lang.VarOut", github_com_glojurelang_glojure_pkg_lang.VarOut)
	_register("github.com/glojurelang/glojure/pkg/lang.VarParents", github_com_glojurelang_glojure_pkg_lang.VarParents)
	_register("github.com/glojurelang/glojure/pkg/lang.VarPrOn", github_com_glojurelang_glojure_pkg_lang.VarPrOn)
	_register("github.com/glojurelang/glojure/pkg/lang.VarPrintInitialized", github_com_glojurelang_glojure_pkg_lang.VarPrintInitialized)
	_register("github.com/glojurelang/glojure/pkg/lang.VarPrintReadably", github_com_glojurelang_glojure_pkg_lang.VarPrintReadably)
	_register("github.com/glojurelang/glojure/pkg/lang.VarUncheckedMath", github_com_glojurelang_glojure_pkg_lang.VarUncheckedMath)
	_register("github.com/glojurelang/glojure/pkg/lang.VarWarnOnReflection", github_com_glojurelang_glojure_pkg_lang.VarWarnOnReflection)
	_register("github.com/glojurelang/glojure/pkg/lang.Vector", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Vector)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.Volatile", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_lang.Volatile)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/lang.WithMeta", github_com_glojurelang_glojure_pkg_lang.WithMeta)
	_register("github.com/glojurelang/glojure/pkg/lang.WriteWriter", github_com_glojurelang_glojure_pkg_lang.WriteWriter)

	// package github.com/glojurelang/glojure/pkg/runtime
	////////////////////////////////////////
	_register("github.com/glojurelang/glojure/pkg/runtime.AddLoadPath", github_com_glojurelang_glojure_pkg_runtime.AddLoadPath)
	_register("github.com/glojurelang/glojure/pkg/runtime.Compiler", github_com_glojurelang_glojure_pkg_runtime.Compiler)
	_register("github.com/glojurelang/glojure/pkg/runtime.Debug", github_com_glojurelang_glojure_pkg_runtime.Debug)
	_register("github.com/glojurelang/glojure/pkg/runtime.EvalError", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_runtime.EvalError)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/runtime.EvalOption", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_runtime.EvalOption)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/runtime.Fn", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_runtime.Fn)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/runtime.NewEnvironment", github_com_glojurelang_glojure_pkg_runtime.NewEnvironment)
	_register("github.com/glojurelang/glojure/pkg/runtime.NewFn", github_com_glojurelang_glojure_pkg_runtime.NewFn)
	_register("github.com/glojurelang/glojure/pkg/runtime.Program", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_runtime.Program)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/runtime.RT", github_com_glojurelang_glojure_pkg_runtime.RT)
	_register("github.com/glojurelang/glojure/pkg/runtime.RTMethods", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_runtime.RTMethods)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/runtime.RTReadString", github_com_glojurelang_glojure_pkg_runtime.RTReadString)
	_register("github.com/glojurelang/glojure/pkg/runtime.ReadEval", github_com_glojurelang_glojure_pkg_runtime.ReadEval)
	_register("github.com/glojurelang/glojure/pkg/runtime.ReadEvalOption", reflect.TypeOf((*github_com_glojurelang_glojure_pkg_runtime.ReadEvalOption)(nil)).Elem())
	_register("github.com/glojurelang/glojure/pkg/runtime.SymInNS", github_com_glojurelang_glojure_pkg_runtime.SymInNS)
	_register("github.com/glojurelang/glojure/pkg/runtime.SymNS", github_com_glojurelang_glojure_pkg_runtime.SymNS)
	_register("github.com/glojurelang/glojure/pkg/runtime.SymbolDot", github_com_glojurelang_glojure_pkg_runtime.SymbolDot)
	_register("github.com/glojurelang/glojure/pkg/runtime.SymbolInNamespace", github_com_glojurelang_glojure_pkg_runtime.SymbolInNamespace)
	_register("github.com/glojurelang/glojure/pkg/runtime.SymbolNamespace", github_com_glojurelang_glojure_pkg_runtime.SymbolNamespace)
	_register("github.com/glojurelang/glojure/pkg/runtime.SymbolSpliceUnquote", github_com_glojurelang_glojure_pkg_runtime.SymbolSpliceUnquote)
	_register("github.com/glojurelang/glojure/pkg/runtime.SymbolUnquote", github_com_glojurelang_glojure_pkg_runtime.SymbolUnquote)
	_register("github.com/glojurelang/glojure/pkg/runtime.SymbolUserNamespace", github_com_glojurelang_glojure_pkg_runtime.SymbolUserNamespace)
	_register("github.com/glojurelang/glojure/pkg/runtime.WithEnv", github_com_glojurelang_glojure_pkg_runtime.WithEnv)
	_register("github.com/glojurelang/glojure/pkg/runtime.WithFilename", github_com_glojurelang_glojure_pkg_runtime.WithFilename)
	_register("github.com/glojurelang/glojure/pkg/runtime.WithLoadPath", github_com_glojurelang_glojure_pkg_runtime.WithLoadPath)
	_register("github.com/glojurelang/glojure/pkg/runtime.WithStderr", github_com_glojurelang_glojure_pkg_runtime.WithStderr)
	_register("github.com/glojurelang/glojure/pkg/runtime.WithStdout", github_com_glojurelang_glojure_pkg_runtime.WithStdout)

	// package go/ast
	////////////////////////////////////////
	_register("go/ast.ArrayType", reflect.TypeOf((*go_ast.ArrayType)(nil)).Elem())
	_register("go/ast.AssignStmt", reflect.TypeOf((*go_ast.AssignStmt)(nil)).Elem())
	_register("go/ast.Bad", go_ast.Bad)
	_register("go/ast.BadDecl", reflect.TypeOf((*go_ast.BadDecl)(nil)).Elem())
	_register("go/ast.BadExpr", reflect.TypeOf((*go_ast.BadExpr)(nil)).Elem())
	_register("go/ast.BadStmt", reflect.TypeOf((*go_ast.BadStmt)(nil)).Elem())
	_register("go/ast.BasicLit", reflect.TypeOf((*go_ast.BasicLit)(nil)).Elem())
	_register("go/ast.BinaryExpr", reflect.TypeOf((*go_ast.BinaryExpr)(nil)).Elem())
	_register("go/ast.BlockStmt", reflect.TypeOf((*go_ast.BlockStmt)(nil)).Elem())
	_register("go/ast.BranchStmt", reflect.TypeOf((*go_ast.BranchStmt)(nil)).Elem())
	_register("go/ast.CallExpr", reflect.TypeOf((*go_ast.CallExpr)(nil)).Elem())
	_register("go/ast.CaseClause", reflect.TypeOf((*go_ast.CaseClause)(nil)).Elem())
	_register("go/ast.ChanDir", reflect.TypeOf((*go_ast.ChanDir)(nil)).Elem())
	_register("go/ast.ChanType", reflect.TypeOf((*go_ast.ChanType)(nil)).Elem())
	_register("go/ast.CommClause", reflect.TypeOf((*go_ast.CommClause)(nil)).Elem())
	_register("go/ast.Comment", reflect.TypeOf((*go_ast.Comment)(nil)).Elem())
	_register("go/ast.CommentGroup", reflect.TypeOf((*go_ast.CommentGroup)(nil)).Elem())
	_register("go/ast.CommentMap", reflect.TypeOf((*go_ast.CommentMap)(nil)).Elem())
	_register("go/ast.CompositeLit", reflect.TypeOf((*go_ast.CompositeLit)(nil)).Elem())
	_register("go/ast.Con", go_ast.Con)
	_register("go/ast.Decl", reflect.TypeOf((*go_ast.Decl)(nil)).Elem())
	_register("go/ast.DeclStmt", reflect.TypeOf((*go_ast.DeclStmt)(nil)).Elem())
	_register("go/ast.DeferStmt", reflect.TypeOf((*go_ast.DeferStmt)(nil)).Elem())
	_register("go/ast.Ellipsis", reflect.TypeOf((*go_ast.Ellipsis)(nil)).Elem())
	_register("go/ast.EmptyStmt", reflect.TypeOf((*go_ast.EmptyStmt)(nil)).Elem())
	_register("go/ast.Expr", reflect.TypeOf((*go_ast.Expr)(nil)).Elem())
	_register("go/ast.ExprStmt", reflect.TypeOf((*go_ast.ExprStmt)(nil)).Elem())
	_register("go/ast.Field", reflect.TypeOf((*go_ast.Field)(nil)).Elem())
	_register("go/ast.FieldFilter", reflect.TypeOf((*go_ast.FieldFilter)(nil)).Elem())
	_register("go/ast.FieldList", reflect.TypeOf((*go_ast.FieldList)(nil)).Elem())
	_register("go/ast.File", reflect.TypeOf((*go_ast.File)(nil)).Elem())
	_register("go/ast.FileExports", go_ast.FileExports)
	_register("go/ast.Filter", reflect.TypeOf((*go_ast.Filter)(nil)).Elem())
	_register("go/ast.FilterDecl", go_ast.FilterDecl)
	_register("go/ast.FilterFile", go_ast.FilterFile)
	_register("go/ast.FilterFuncDuplicates", go_ast.FilterFuncDuplicates)
	_register("go/ast.FilterImportDuplicates", go_ast.FilterImportDuplicates)
	_register("go/ast.FilterPackage", go_ast.FilterPackage)
	_register("go/ast.FilterUnassociatedComments", go_ast.FilterUnassociatedComments)
	_register("go/ast.ForStmt", reflect.TypeOf((*go_ast.ForStmt)(nil)).Elem())
	_register("go/ast.Fprint", go_ast.Fprint)
	_register("go/ast.Fun", go_ast.Fun)
	_register("go/ast.FuncDecl", reflect.TypeOf((*go_ast.FuncDecl)(nil)).Elem())
	_register("go/ast.FuncLit", reflect.TypeOf((*go_ast.FuncLit)(nil)).Elem())
	_register("go/ast.FuncType", reflect.TypeOf((*go_ast.FuncType)(nil)).Elem())
	_register("go/ast.GenDecl", reflect.TypeOf((*go_ast.GenDecl)(nil)).Elem())
	_register("go/ast.GoStmt", reflect.TypeOf((*go_ast.GoStmt)(nil)).Elem())
	_register("go/ast.Ident", reflect.TypeOf((*go_ast.Ident)(nil)).Elem())
	_register("go/ast.IfStmt", reflect.TypeOf((*go_ast.IfStmt)(nil)).Elem())
	_register("go/ast.ImportSpec", reflect.TypeOf((*go_ast.ImportSpec)(nil)).Elem())
	_register("go/ast.Importer", reflect.TypeOf((*go_ast.Importer)(nil)).Elem())
	_register("go/ast.IncDecStmt", reflect.TypeOf((*go_ast.IncDecStmt)(nil)).Elem())
	_register("go/ast.IndexExpr", reflect.TypeOf((*go_ast.IndexExpr)(nil)).Elem())
	_register("go/ast.IndexListExpr", reflect.TypeOf((*go_ast.IndexListExpr)(nil)).Elem())
	_register("go/ast.Inspect", go_ast.Inspect)
	_register("go/ast.InterfaceType", reflect.TypeOf((*go_ast.InterfaceType)(nil)).Elem())
	_register("go/ast.IsExported", go_ast.IsExported)
	_register("go/ast.KeyValueExpr", reflect.TypeOf((*go_ast.KeyValueExpr)(nil)).Elem())
	_register("go/ast.LabeledStmt", reflect.TypeOf((*go_ast.LabeledStmt)(nil)).Elem())
	_register("go/ast.Lbl", go_ast.Lbl)
	_register("go/ast.MapType", reflect.TypeOf((*go_ast.MapType)(nil)).Elem())
	_register("go/ast.MergeMode", reflect.TypeOf((*go_ast.MergeMode)(nil)).Elem())
	_register("go/ast.MergePackageFiles", go_ast.MergePackageFiles)
	_register("go/ast.NewCommentMap", go_ast.NewCommentMap)
	_register("go/ast.NewIdent", go_ast.NewIdent)
	_register("go/ast.NewObj", go_ast.NewObj)
	_register("go/ast.NewPackage", go_ast.NewPackage)
	_register("go/ast.NewScope", go_ast.NewScope)
	_register("go/ast.Node", reflect.TypeOf((*go_ast.Node)(nil)).Elem())
	_register("go/ast.NotNilFilter", go_ast.NotNilFilter)
	_register("go/ast.ObjKind", reflect.TypeOf((*go_ast.ObjKind)(nil)).Elem())
	_register("go/ast.Object", reflect.TypeOf((*go_ast.Object)(nil)).Elem())
	_register("go/ast.Package", reflect.TypeOf((*go_ast.Package)(nil)).Elem())
	_register("go/ast.PackageExports", go_ast.PackageExports)
	_register("go/ast.ParenExpr", reflect.TypeOf((*go_ast.ParenExpr)(nil)).Elem())
	_register("go/ast.Pkg", go_ast.Pkg)
	_register("go/ast.Print", go_ast.Print)
	_register("go/ast.RECV", go_ast.RECV)
	_register("go/ast.RangeStmt", reflect.TypeOf((*go_ast.RangeStmt)(nil)).Elem())
	_register("go/ast.ReturnStmt", reflect.TypeOf((*go_ast.ReturnStmt)(nil)).Elem())
	_register("go/ast.SEND", go_ast.SEND)
	_register("go/ast.Scope", reflect.TypeOf((*go_ast.Scope)(nil)).Elem())
	_register("go/ast.SelectStmt", reflect.TypeOf((*go_ast.SelectStmt)(nil)).Elem())
	_register("go/ast.SelectorExpr", reflect.TypeOf((*go_ast.SelectorExpr)(nil)).Elem())
	_register("go/ast.SendStmt", reflect.TypeOf((*go_ast.SendStmt)(nil)).Elem())
	_register("go/ast.SliceExpr", reflect.TypeOf((*go_ast.SliceExpr)(nil)).Elem())
	_register("go/ast.SortImports", go_ast.SortImports)
	_register("go/ast.Spec", reflect.TypeOf((*go_ast.Spec)(nil)).Elem())
	_register("go/ast.StarExpr", reflect.TypeOf((*go_ast.StarExpr)(nil)).Elem())
	_register("go/ast.Stmt", reflect.TypeOf((*go_ast.Stmt)(nil)).Elem())
	_register("go/ast.StructType", reflect.TypeOf((*go_ast.StructType)(nil)).Elem())
	_register("go/ast.SwitchStmt", reflect.TypeOf((*go_ast.SwitchStmt)(nil)).Elem())
	_register("go/ast.Typ", go_ast.Typ)
	_register("go/ast.TypeAssertExpr", reflect.TypeOf((*go_ast.TypeAssertExpr)(nil)).Elem())
	_register("go/ast.TypeSpec", reflect.TypeOf((*go_ast.TypeSpec)(nil)).Elem())
	_register("go/ast.TypeSwitchStmt", reflect.TypeOf((*go_ast.TypeSwitchStmt)(nil)).Elem())
	_register("go/ast.UnaryExpr", reflect.TypeOf((*go_ast.UnaryExpr)(nil)).Elem())
	_register("go/ast.ValueSpec", reflect.TypeOf((*go_ast.ValueSpec)(nil)).Elem())
	_register("go/ast.Var", go_ast.Var)
	_register("go/ast.Visitor", reflect.TypeOf((*go_ast.Visitor)(nil)).Elem())
	_register("go/ast.Walk", go_ast.Walk)

	// package go/build
	////////////////////////////////////////
	_register("go/build.AllowBinary", go_build.AllowBinary)
	_register("go/build.ArchChar", go_build.ArchChar)
	_register("go/build.Context", reflect.TypeOf((*go_build.Context)(nil)).Elem())
	_register("go/build.Default", go_build.Default)
	_register("go/build.FindOnly", go_build.FindOnly)
	_register("go/build.IgnoreVendor", go_build.IgnoreVendor)
	_register("go/build.Import", go_build.Import)
	_register("go/build.ImportComment", go_build.ImportComment)
	_register("go/build.ImportDir", go_build.ImportDir)
	_register("go/build.ImportMode", reflect.TypeOf((*go_build.ImportMode)(nil)).Elem())
	_register("go/build.IsLocalImport", go_build.IsLocalImport)
	_register("go/build.MultiplePackageError", reflect.TypeOf((*go_build.MultiplePackageError)(nil)).Elem())
	_register("go/build.NoGoError", reflect.TypeOf((*go_build.NoGoError)(nil)).Elem())
	_register("go/build.Package", reflect.TypeOf((*go_build.Package)(nil)).Elem())
	_register("go/build.ToolDir", go_build.ToolDir)

	// package go/build/constraint
	////////////////////////////////////////
	_register("go/build/constraint.AndExpr", reflect.TypeOf((*go_build_constraint.AndExpr)(nil)).Elem())
	_register("go/build/constraint.Expr", reflect.TypeOf((*go_build_constraint.Expr)(nil)).Elem())
	_register("go/build/constraint.IsGoBuild", go_build_constraint.IsGoBuild)
	_register("go/build/constraint.IsPlusBuild", go_build_constraint.IsPlusBuild)
	_register("go/build/constraint.NotExpr", reflect.TypeOf((*go_build_constraint.NotExpr)(nil)).Elem())
	_register("go/build/constraint.OrExpr", reflect.TypeOf((*go_build_constraint.OrExpr)(nil)).Elem())
	_register("go/build/constraint.Parse", go_build_constraint.Parse)
	_register("go/build/constraint.PlusBuildLines", go_build_constraint.PlusBuildLines)
	_register("go/build/constraint.SyntaxError", reflect.TypeOf((*go_build_constraint.SyntaxError)(nil)).Elem())
	_register("go/build/constraint.TagExpr", reflect.TypeOf((*go_build_constraint.TagExpr)(nil)).Elem())

	// package go/constant
	////////////////////////////////////////
	_register("go/constant.BinaryOp", go_constant.BinaryOp)
	_register("go/constant.BitLen", go_constant.BitLen)
	_register("go/constant.Bool", go_constant.Bool)
	_register("go/constant.BoolVal", go_constant.BoolVal)
	_register("go/constant.Bytes", go_constant.Bytes)
	_register("go/constant.Compare", go_constant.Compare)
	_register("go/constant.Complex", go_constant.Complex)
	_register("go/constant.Denom", go_constant.Denom)
	_register("go/constant.Float", go_constant.Float)
	_register("go/constant.Float32Val", go_constant.Float32Val)
	_register("go/constant.Float64Val", go_constant.Float64Val)
	_register("go/constant.Imag", go_constant.Imag)
	_register("go/constant.Int", go_constant.Int)
	_register("go/constant.Int64Val", go_constant.Int64Val)
	_register("go/constant.Kind", reflect.TypeOf((*go_constant.Kind)(nil)).Elem())
	_register("go/constant.Make", go_constant.Make)
	_register("go/constant.MakeBool", go_constant.MakeBool)
	_register("go/constant.MakeFloat64", go_constant.MakeFloat64)
	_register("go/constant.MakeFromBytes", go_constant.MakeFromBytes)
	_register("go/constant.MakeFromLiteral", go_constant.MakeFromLiteral)
	_register("go/constant.MakeImag", go_constant.MakeImag)
	_register("go/constant.MakeInt64", go_constant.MakeInt64)
	_register("go/constant.MakeString", go_constant.MakeString)
	_register("go/constant.MakeUint64", go_constant.MakeUint64)
	_register("go/constant.MakeUnknown", go_constant.MakeUnknown)
	_register("go/constant.Num", go_constant.Num)
	_register("go/constant.Real", go_constant.Real)
	_register("go/constant.Shift", go_constant.Shift)
	_register("go/constant.Sign", go_constant.Sign)
	_register("go/constant.String", go_constant.String)
	_register("go/constant.StringVal", go_constant.StringVal)
	_register("go/constant.ToComplex", go_constant.ToComplex)
	_register("go/constant.ToFloat", go_constant.ToFloat)
	_register("go/constant.ToInt", go_constant.ToInt)
	_register("go/constant.Uint64Val", go_constant.Uint64Val)
	_register("go/constant.UnaryOp", go_constant.UnaryOp)
	_register("go/constant.Unknown", go_constant.Unknown)
	_register("go/constant.Val", go_constant.Val)
	_register("go/constant.Value", reflect.TypeOf((*go_constant.Value)(nil)).Elem())

	// package go/doc
	////////////////////////////////////////
	_register("go/doc.AllDecls", go_doc.AllDecls)
	_register("go/doc.AllMethods", go_doc.AllMethods)
	_register("go/doc.Example", reflect.TypeOf((*go_doc.Example)(nil)).Elem())
	_register("go/doc.Examples", go_doc.Examples)
	_register("go/doc.Filter", reflect.TypeOf((*go_doc.Filter)(nil)).Elem())
	_register("go/doc.Func", reflect.TypeOf((*go_doc.Func)(nil)).Elem())
	_register("go/doc.IllegalPrefixes", go_doc.IllegalPrefixes)
	_register("go/doc.IsPredeclared", go_doc.IsPredeclared)
	_register("go/doc.Mode", reflect.TypeOf((*go_doc.Mode)(nil)).Elem())
	_register("go/doc.New", go_doc.New)
	_register("go/doc.NewFromFiles", go_doc.NewFromFiles)
	_register("go/doc.Note", reflect.TypeOf((*go_doc.Note)(nil)).Elem())
	_register("go/doc.Package", reflect.TypeOf((*go_doc.Package)(nil)).Elem())
	_register("go/doc.PreserveAST", go_doc.PreserveAST)
	_register("go/doc.Synopsis", go_doc.Synopsis)
	_register("go/doc.ToHTML", go_doc.ToHTML)
	_register("go/doc.ToText", go_doc.ToText)
	_register("go/doc.Type", reflect.TypeOf((*go_doc.Type)(nil)).Elem())
	_register("go/doc.Value", reflect.TypeOf((*go_doc.Value)(nil)).Elem())

	// package go/doc/comment
	////////////////////////////////////////
	_register("go/doc/comment.Block", reflect.TypeOf((*go_doc_comment.Block)(nil)).Elem())
	_register("go/doc/comment.Code", reflect.TypeOf((*go_doc_comment.Code)(nil)).Elem())
	_register("go/doc/comment.DefaultLookupPackage", go_doc_comment.DefaultLookupPackage)
	_register("go/doc/comment.Doc", reflect.TypeOf((*go_doc_comment.Doc)(nil)).Elem())
	_register("go/doc/comment.DocLink", reflect.TypeOf((*go_doc_comment.DocLink)(nil)).Elem())
	_register("go/doc/comment.Heading", reflect.TypeOf((*go_doc_comment.Heading)(nil)).Elem())
	_register("go/doc/comment.Italic", reflect.TypeOf((*go_doc_comment.Italic)(nil)).Elem())
	_register("go/doc/comment.Link", reflect.TypeOf((*go_doc_comment.Link)(nil)).Elem())
	_register("go/doc/comment.LinkDef", reflect.TypeOf((*go_doc_comment.LinkDef)(nil)).Elem())
	_register("go/doc/comment.List", reflect.TypeOf((*go_doc_comment.List)(nil)).Elem())
	_register("go/doc/comment.ListItem", reflect.TypeOf((*go_doc_comment.ListItem)(nil)).Elem())
	_register("go/doc/comment.Paragraph", reflect.TypeOf((*go_doc_comment.Paragraph)(nil)).Elem())
	_register("go/doc/comment.Parser", reflect.TypeOf((*go_doc_comment.Parser)(nil)).Elem())
	_register("go/doc/comment.Plain", reflect.TypeOf((*go_doc_comment.Plain)(nil)).Elem())
	_register("go/doc/comment.Printer", reflect.TypeOf((*go_doc_comment.Printer)(nil)).Elem())
	_register("go/doc/comment.Text", reflect.TypeOf((*go_doc_comment.Text)(nil)).Elem())

	// package go/format
	////////////////////////////////////////
	_register("go/format.Node", go_format.Node)
	_register("go/format.Source", go_format.Source)

	// package go/importer
	////////////////////////////////////////
	_register("go/importer.Default", go_importer.Default)
	_register("go/importer.For", go_importer.For)
	_register("go/importer.ForCompiler", go_importer.ForCompiler)
	_register("go/importer.Lookup", reflect.TypeOf((*go_importer.Lookup)(nil)).Elem())

	// package go/parser
	////////////////////////////////////////
	_register("go/parser.AllErrors", go_parser.AllErrors)
	_register("go/parser.DeclarationErrors", go_parser.DeclarationErrors)
	_register("go/parser.ImportsOnly", go_parser.ImportsOnly)
	_register("go/parser.Mode", reflect.TypeOf((*go_parser.Mode)(nil)).Elem())
	_register("go/parser.PackageClauseOnly", go_parser.PackageClauseOnly)
	_register("go/parser.ParseComments", go_parser.ParseComments)
	_register("go/parser.ParseDir", go_parser.ParseDir)
	_register("go/parser.ParseExpr", go_parser.ParseExpr)
	_register("go/parser.ParseExprFrom", go_parser.ParseExprFrom)
	_register("go/parser.ParseFile", go_parser.ParseFile)
	_register("go/parser.SkipObjectResolution", go_parser.SkipObjectResolution)
	_register("go/parser.SpuriousErrors", go_parser.SpuriousErrors)
	_register("go/parser.Trace", go_parser.Trace)

	// package go/printer
	////////////////////////////////////////
	_register("go/printer.CommentedNode", reflect.TypeOf((*go_printer.CommentedNode)(nil)).Elem())
	_register("go/printer.Config", reflect.TypeOf((*go_printer.Config)(nil)).Elem())
	_register("go/printer.Fprint", go_printer.Fprint)
	_register("go/printer.Mode", reflect.TypeOf((*go_printer.Mode)(nil)).Elem())
	_register("go/printer.RawFormat", go_printer.RawFormat)
	_register("go/printer.SourcePos", go_printer.SourcePos)
	_register("go/printer.TabIndent", go_printer.TabIndent)
	_register("go/printer.UseSpaces", go_printer.UseSpaces)

	// package go/scanner
	////////////////////////////////////////
	_register("go/scanner.Error", reflect.TypeOf((*go_scanner.Error)(nil)).Elem())
	_register("go/scanner.ErrorHandler", reflect.TypeOf((*go_scanner.ErrorHandler)(nil)).Elem())
	_register("go/scanner.ErrorList", reflect.TypeOf((*go_scanner.ErrorList)(nil)).Elem())
	_register("go/scanner.Mode", reflect.TypeOf((*go_scanner.Mode)(nil)).Elem())
	_register("go/scanner.PrintError", go_scanner.PrintError)
	_register("go/scanner.ScanComments", go_scanner.ScanComments)
	_register("go/scanner.Scanner", reflect.TypeOf((*go_scanner.Scanner)(nil)).Elem())

	// package go/token
	////////////////////////////////////////
	_register("go/token.ADD", go_token.ADD)
	_register("go/token.ADD_ASSIGN", go_token.ADD_ASSIGN)
	_register("go/token.AND", go_token.AND)
	_register("go/token.AND_ASSIGN", go_token.AND_ASSIGN)
	_register("go/token.AND_NOT", go_token.AND_NOT)
	_register("go/token.AND_NOT_ASSIGN", go_token.AND_NOT_ASSIGN)
	_register("go/token.ARROW", go_token.ARROW)
	_register("go/token.ASSIGN", go_token.ASSIGN)
	_register("go/token.BREAK", go_token.BREAK)
	_register("go/token.CASE", go_token.CASE)
	_register("go/token.CHAN", go_token.CHAN)
	_register("go/token.CHAR", go_token.CHAR)
	_register("go/token.COLON", go_token.COLON)
	_register("go/token.COMMA", go_token.COMMA)
	_register("go/token.COMMENT", go_token.COMMENT)
	_register("go/token.CONST", go_token.CONST)
	_register("go/token.CONTINUE", go_token.CONTINUE)
	_register("go/token.DEC", go_token.DEC)
	_register("go/token.DEFAULT", go_token.DEFAULT)
	_register("go/token.DEFER", go_token.DEFER)
	_register("go/token.DEFINE", go_token.DEFINE)
	_register("go/token.ELLIPSIS", go_token.ELLIPSIS)
	_register("go/token.ELSE", go_token.ELSE)
	_register("go/token.EOF", go_token.EOF)
	_register("go/token.EQL", go_token.EQL)
	_register("go/token.FALLTHROUGH", go_token.FALLTHROUGH)
	_register("go/token.FLOAT", go_token.FLOAT)
	_register("go/token.FOR", go_token.FOR)
	_register("go/token.FUNC", go_token.FUNC)
	_register("go/token.File", reflect.TypeOf((*go_token.File)(nil)).Elem())
	_register("go/token.FileSet", reflect.TypeOf((*go_token.FileSet)(nil)).Elem())
	_register("go/token.GEQ", go_token.GEQ)
	_register("go/token.GO", go_token.GO)
	_register("go/token.GOTO", go_token.GOTO)
	_register("go/token.GTR", go_token.GTR)
	_register("go/token.HighestPrec", go_token.HighestPrec)
	_register("go/token.IDENT", go_token.IDENT)
	_register("go/token.IF", go_token.IF)
	_register("go/token.ILLEGAL", go_token.ILLEGAL)
	_register("go/token.IMAG", go_token.IMAG)
	_register("go/token.IMPORT", go_token.IMPORT)
	_register("go/token.INC", go_token.INC)
	_register("go/token.INT", go_token.INT)
	_register("go/token.INTERFACE", go_token.INTERFACE)
	_register("go/token.IsExported", go_token.IsExported)
	_register("go/token.IsIdentifier", go_token.IsIdentifier)
	_register("go/token.IsKeyword", go_token.IsKeyword)
	_register("go/token.LAND", go_token.LAND)
	_register("go/token.LBRACE", go_token.LBRACE)
	_register("go/token.LBRACK", go_token.LBRACK)
	_register("go/token.LEQ", go_token.LEQ)
	_register("go/token.LOR", go_token.LOR)
	_register("go/token.LPAREN", go_token.LPAREN)
	_register("go/token.LSS", go_token.LSS)
	_register("go/token.Lookup", go_token.Lookup)
	_register("go/token.LowestPrec", go_token.LowestPrec)
	_register("go/token.MAP", go_token.MAP)
	_register("go/token.MUL", go_token.MUL)
	_register("go/token.MUL_ASSIGN", go_token.MUL_ASSIGN)
	_register("go/token.NEQ", go_token.NEQ)
	_register("go/token.NOT", go_token.NOT)
	_register("go/token.NewFileSet", go_token.NewFileSet)
	_register("go/token.NoPos", go_token.NoPos)
	_register("go/token.OR", go_token.OR)
	_register("go/token.OR_ASSIGN", go_token.OR_ASSIGN)
	_register("go/token.PACKAGE", go_token.PACKAGE)
	_register("go/token.PERIOD", go_token.PERIOD)
	_register("go/token.Pos", reflect.TypeOf((*go_token.Pos)(nil)).Elem())
	_register("go/token.Position", reflect.TypeOf((*go_token.Position)(nil)).Elem())
	_register("go/token.QUO", go_token.QUO)
	_register("go/token.QUO_ASSIGN", go_token.QUO_ASSIGN)
	_register("go/token.RANGE", go_token.RANGE)
	_register("go/token.RBRACE", go_token.RBRACE)
	_register("go/token.RBRACK", go_token.RBRACK)
	_register("go/token.REM", go_token.REM)
	_register("go/token.REM_ASSIGN", go_token.REM_ASSIGN)
	_register("go/token.RETURN", go_token.RETURN)
	_register("go/token.RPAREN", go_token.RPAREN)
	_register("go/token.SELECT", go_token.SELECT)
	_register("go/token.SEMICOLON", go_token.SEMICOLON)
	_register("go/token.SHL", go_token.SHL)
	_register("go/token.SHL_ASSIGN", go_token.SHL_ASSIGN)
	_register("go/token.SHR", go_token.SHR)
	_register("go/token.SHR_ASSIGN", go_token.SHR_ASSIGN)
	_register("go/token.STRING", go_token.STRING)
	_register("go/token.STRUCT", go_token.STRUCT)
	_register("go/token.SUB", go_token.SUB)
	_register("go/token.SUB_ASSIGN", go_token.SUB_ASSIGN)
	_register("go/token.SWITCH", go_token.SWITCH)
	_register("go/token.TILDE", go_token.TILDE)
	_register("go/token.TYPE", go_token.TYPE)
	_register("go/token.Token", reflect.TypeOf((*go_token.Token)(nil)).Elem())
	_register("go/token.UnaryPrec", go_token.UnaryPrec)
	_register("go/token.VAR", go_token.VAR)
	_register("go/token.XOR", go_token.XOR)
	_register("go/token.XOR_ASSIGN", go_token.XOR_ASSIGN)

	// package go/types
	////////////////////////////////////////
	_register("go/types.ArgumentError", reflect.TypeOf((*go_types.ArgumentError)(nil)).Elem())
	_register("go/types.Array", reflect.TypeOf((*go_types.Array)(nil)).Elem())
	_register("go/types.AssertableTo", go_types.AssertableTo)
	_register("go/types.AssignableTo", go_types.AssignableTo)
	_register("go/types.Basic", reflect.TypeOf((*go_types.Basic)(nil)).Elem())
	_register("go/types.BasicInfo", reflect.TypeOf((*go_types.BasicInfo)(nil)).Elem())
	_register("go/types.BasicKind", reflect.TypeOf((*go_types.BasicKind)(nil)).Elem())
	_register("go/types.Bool", go_types.Bool)
	_register("go/types.Builtin", reflect.TypeOf((*go_types.Builtin)(nil)).Elem())
	_register("go/types.Byte", go_types.Byte)
	_register("go/types.Chan", reflect.TypeOf((*go_types.Chan)(nil)).Elem())
	_register("go/types.ChanDir", reflect.TypeOf((*go_types.ChanDir)(nil)).Elem())
	_register("go/types.CheckExpr", go_types.CheckExpr)
	_register("go/types.Checker", reflect.TypeOf((*go_types.Checker)(nil)).Elem())
	_register("go/types.Comparable", go_types.Comparable)
	_register("go/types.Complex128", go_types.Complex128)
	_register("go/types.Complex64", go_types.Complex64)
	_register("go/types.Config", reflect.TypeOf((*go_types.Config)(nil)).Elem())
	_register("go/types.Const", reflect.TypeOf((*go_types.Const)(nil)).Elem())
	_register("go/types.Context", reflect.TypeOf((*go_types.Context)(nil)).Elem())
	_register("go/types.ConvertibleTo", go_types.ConvertibleTo)
	_register("go/types.DefPredeclaredTestFuncs", go_types.DefPredeclaredTestFuncs)
	_register("go/types.Default", go_types.Default)
	_register("go/types.Error", reflect.TypeOf((*go_types.Error)(nil)).Elem())
	_register("go/types.Eval", go_types.Eval)
	_register("go/types.ExprString", go_types.ExprString)
	_register("go/types.FieldVal", go_types.FieldVal)
	_register("go/types.Float32", go_types.Float32)
	_register("go/types.Float64", go_types.Float64)
	_register("go/types.Func", reflect.TypeOf((*go_types.Func)(nil)).Elem())
	_register("go/types.Id", go_types.Id)
	_register("go/types.Identical", go_types.Identical)
	_register("go/types.IdenticalIgnoreTags", go_types.IdenticalIgnoreTags)
	_register("go/types.Implements", go_types.Implements)
	_register("go/types.ImportMode", reflect.TypeOf((*go_types.ImportMode)(nil)).Elem())
	_register("go/types.Importer", reflect.TypeOf((*go_types.Importer)(nil)).Elem())
	_register("go/types.ImporterFrom", reflect.TypeOf((*go_types.ImporterFrom)(nil)).Elem())
	_register("go/types.Info", reflect.TypeOf((*go_types.Info)(nil)).Elem())
	_register("go/types.Initializer", reflect.TypeOf((*go_types.Initializer)(nil)).Elem())
	_register("go/types.Instance", reflect.TypeOf((*go_types.Instance)(nil)).Elem())
	_register("go/types.Instantiate", go_types.Instantiate)
	_register("go/types.Int", go_types.Int)
	_register("go/types.Int16", go_types.Int16)
	_register("go/types.Int32", go_types.Int32)
	_register("go/types.Int64", go_types.Int64)
	_register("go/types.Int8", go_types.Int8)
	_register("go/types.Interface", reflect.TypeOf((*go_types.Interface)(nil)).Elem())
	_register("go/types.Invalid", go_types.Invalid)
	_register("go/types.IsBoolean", go_types.IsBoolean)
	_register("go/types.IsComplex", go_types.IsComplex)
	_register("go/types.IsConstType", go_types.IsConstType)
	_register("go/types.IsFloat", go_types.IsFloat)
	_register("go/types.IsInteger", go_types.IsInteger)
	_register("go/types.IsInterface", go_types.IsInterface)
	_register("go/types.IsNumeric", go_types.IsNumeric)
	_register("go/types.IsOrdered", go_types.IsOrdered)
	_register("go/types.IsString", go_types.IsString)
	_register("go/types.IsUnsigned", go_types.IsUnsigned)
	_register("go/types.IsUntyped", go_types.IsUntyped)
	_register("go/types.Label", reflect.TypeOf((*go_types.Label)(nil)).Elem())
	_register("go/types.LookupFieldOrMethod", go_types.LookupFieldOrMethod)
	_register("go/types.Map", reflect.TypeOf((*go_types.Map)(nil)).Elem())
	_register("go/types.MethodExpr", go_types.MethodExpr)
	_register("go/types.MethodSet", reflect.TypeOf((*go_types.MethodSet)(nil)).Elem())
	_register("go/types.MethodVal", go_types.MethodVal)
	_register("go/types.MissingMethod", go_types.MissingMethod)
	_register("go/types.Named", reflect.TypeOf((*go_types.Named)(nil)).Elem())
	_register("go/types.NewArray", go_types.NewArray)
	_register("go/types.NewChan", go_types.NewChan)
	_register("go/types.NewChecker", go_types.NewChecker)
	_register("go/types.NewConst", go_types.NewConst)
	_register("go/types.NewContext", go_types.NewContext)
	_register("go/types.NewField", go_types.NewField)
	_register("go/types.NewFunc", go_types.NewFunc)
	_register("go/types.NewInterface", go_types.NewInterface)
	_register("go/types.NewInterfaceType", go_types.NewInterfaceType)
	_register("go/types.NewLabel", go_types.NewLabel)
	_register("go/types.NewMap", go_types.NewMap)
	_register("go/types.NewMethodSet", go_types.NewMethodSet)
	_register("go/types.NewNamed", go_types.NewNamed)
	_register("go/types.NewPackage", go_types.NewPackage)
	_register("go/types.NewParam", go_types.NewParam)
	_register("go/types.NewPkgName", go_types.NewPkgName)
	_register("go/types.NewPointer", go_types.NewPointer)
	_register("go/types.NewScope", go_types.NewScope)
	_register("go/types.NewSignature", go_types.NewSignature)
	_register("go/types.NewSignatureType", go_types.NewSignatureType)
	_register("go/types.NewSlice", go_types.NewSlice)
	_register("go/types.NewStruct", go_types.NewStruct)
	_register("go/types.NewTerm", go_types.NewTerm)
	_register("go/types.NewTuple", go_types.NewTuple)
	_register("go/types.NewTypeName", go_types.NewTypeName)
	_register("go/types.NewTypeParam", go_types.NewTypeParam)
	_register("go/types.NewUnion", go_types.NewUnion)
	_register("go/types.NewVar", go_types.NewVar)
	_register("go/types.Nil", reflect.TypeOf((*go_types.Nil)(nil)).Elem())
	_register("go/types.Object", reflect.TypeOf((*go_types.Object)(nil)).Elem())
	_register("go/types.ObjectString", go_types.ObjectString)
	_register("go/types.Package", reflect.TypeOf((*go_types.Package)(nil)).Elem())
	_register("go/types.PkgName", reflect.TypeOf((*go_types.PkgName)(nil)).Elem())
	_register("go/types.Pointer", reflect.TypeOf((*go_types.Pointer)(nil)).Elem())
	_register("go/types.Qualifier", reflect.TypeOf((*go_types.Qualifier)(nil)).Elem())
	_register("go/types.RecvOnly", go_types.RecvOnly)
	_register("go/types.RelativeTo", go_types.RelativeTo)
	_register("go/types.Rune", go_types.Rune)
	_register("go/types.Scope", reflect.TypeOf((*go_types.Scope)(nil)).Elem())
	_register("go/types.Selection", reflect.TypeOf((*go_types.Selection)(nil)).Elem())
	_register("go/types.SelectionKind", reflect.TypeOf((*go_types.SelectionKind)(nil)).Elem())
	_register("go/types.SelectionString", go_types.SelectionString)
	_register("go/types.SendOnly", go_types.SendOnly)
	_register("go/types.SendRecv", go_types.SendRecv)
	_register("go/types.Signature", reflect.TypeOf((*go_types.Signature)(nil)).Elem())
	_register("go/types.Sizes", reflect.TypeOf((*go_types.Sizes)(nil)).Elem())
	_register("go/types.SizesFor", go_types.SizesFor)
	_register("go/types.Slice", reflect.TypeOf((*go_types.Slice)(nil)).Elem())
	_register("go/types.StdSizes", reflect.TypeOf((*go_types.StdSizes)(nil)).Elem())
	_register("go/types.String", go_types.String)
	_register("go/types.Struct", reflect.TypeOf((*go_types.Struct)(nil)).Elem())
	_register("go/types.Term", reflect.TypeOf((*go_types.Term)(nil)).Elem())
	_register("go/types.Tuple", reflect.TypeOf((*go_types.Tuple)(nil)).Elem())
	_register("go/types.Typ", go_types.Typ)
	_register("go/types.Type", reflect.TypeOf((*go_types.Type)(nil)).Elem())
	_register("go/types.TypeAndValue", reflect.TypeOf((*go_types.TypeAndValue)(nil)).Elem())
	_register("go/types.TypeList", reflect.TypeOf((*go_types.TypeList)(nil)).Elem())
	_register("go/types.TypeName", reflect.TypeOf((*go_types.TypeName)(nil)).Elem())
	_register("go/types.TypeParam", reflect.TypeOf((*go_types.TypeParam)(nil)).Elem())
	_register("go/types.TypeParamList", reflect.TypeOf((*go_types.TypeParamList)(nil)).Elem())
	_register("go/types.TypeString", go_types.TypeString)
	_register("go/types.Uint", go_types.Uint)
	_register("go/types.Uint16", go_types.Uint16)
	_register("go/types.Uint32", go_types.Uint32)
	_register("go/types.Uint64", go_types.Uint64)
	_register("go/types.Uint8", go_types.Uint8)
	_register("go/types.Uintptr", go_types.Uintptr)
	_register("go/types.Union", reflect.TypeOf((*go_types.Union)(nil)).Elem())
	_register("go/types.Universe", go_types.Universe)
	_register("go/types.Unsafe", go_types.Unsafe)
	_register("go/types.UnsafePointer", go_types.UnsafePointer)
	_register("go/types.UntypedBool", go_types.UntypedBool)
	_register("go/types.UntypedComplex", go_types.UntypedComplex)
	_register("go/types.UntypedFloat", go_types.UntypedFloat)
	_register("go/types.UntypedInt", go_types.UntypedInt)
	_register("go/types.UntypedNil", go_types.UntypedNil)
	_register("go/types.UntypedRune", go_types.UntypedRune)
	_register("go/types.UntypedString", go_types.UntypedString)
	_register("go/types.Var", reflect.TypeOf((*go_types.Var)(nil)).Elem())
	_register("go/types.WriteExpr", go_types.WriteExpr)
	_register("go/types.WriteSignature", go_types.WriteSignature)
	_register("go/types.WriteType", go_types.WriteType)

	// package hash
	////////////////////////////////////////
	_register("hash.Hash", reflect.TypeOf((*hash.Hash)(nil)).Elem())
	_register("hash.Hash32", reflect.TypeOf((*hash.Hash32)(nil)).Elem())
	_register("hash.Hash64", reflect.TypeOf((*hash.Hash64)(nil)).Elem())

	// package hash/adler32
	////////////////////////////////////////
	_register("hash/adler32.Checksum", hash_adler32.Checksum)
	_register("hash/adler32.New", hash_adler32.New)
	_register("hash/adler32.Size", hash_adler32.Size)

	// package hash/crc32
	////////////////////////////////////////
	_register("hash/crc32.Castagnoli", hash_crc32.Castagnoli)
	_register("hash/crc32.Checksum", hash_crc32.Checksum)
	_register("hash/crc32.ChecksumIEEE", hash_crc32.ChecksumIEEE)
	_register("hash/crc32.IEEE", hash_crc32.IEEE)
	_register("hash/crc32.IEEETable", hash_crc32.IEEETable)
	_register("hash/crc32.Koopman", hash_crc32.Koopman)
	_register("hash/crc32.MakeTable", hash_crc32.MakeTable)
	_register("hash/crc32.New", hash_crc32.New)
	_register("hash/crc32.NewIEEE", hash_crc32.NewIEEE)
	_register("hash/crc32.Size", hash_crc32.Size)
	_register("hash/crc32.Table", reflect.TypeOf((*hash_crc32.Table)(nil)).Elem())
	_register("hash/crc32.Update", hash_crc32.Update)

	// package hash/crc64
	////////////////////////////////////////
	_register("hash/crc64.Checksum", hash_crc64.Checksum)
	_register("hash/crc64.ECMA", uint64(hash_crc64.ECMA))
	_register("hash/crc64.ISO", uint64(hash_crc64.ISO))
	_register("hash/crc64.MakeTable", hash_crc64.MakeTable)
	_register("hash/crc64.New", hash_crc64.New)
	_register("hash/crc64.Size", hash_crc64.Size)
	_register("hash/crc64.Table", reflect.TypeOf((*hash_crc64.Table)(nil)).Elem())
	_register("hash/crc64.Update", hash_crc64.Update)

	// package hash/fnv
	////////////////////////////////////////
	_register("hash/fnv.New128", hash_fnv.New128)
	_register("hash/fnv.New128a", hash_fnv.New128a)
	_register("hash/fnv.New32", hash_fnv.New32)
	_register("hash/fnv.New32a", hash_fnv.New32a)
	_register("hash/fnv.New64", hash_fnv.New64)
	_register("hash/fnv.New64a", hash_fnv.New64a)

	// package hash/maphash
	////////////////////////////////////////
	_register("hash/maphash.Bytes", hash_maphash.Bytes)
	_register("hash/maphash.Hash", reflect.TypeOf((*hash_maphash.Hash)(nil)).Elem())
	_register("hash/maphash.MakeSeed", hash_maphash.MakeSeed)
	_register("hash/maphash.Seed", reflect.TypeOf((*hash_maphash.Seed)(nil)).Elem())
	_register("hash/maphash.String", hash_maphash.String)

	// package html
	////////////////////////////////////////
	_register("html.EscapeString", html.EscapeString)
	_register("html.UnescapeString", html.UnescapeString)

	// package html/template
	////////////////////////////////////////
	_register("html/template.CSS", reflect.TypeOf((*html_template.CSS)(nil)).Elem())
	_register("html/template.ErrAmbigContext", html_template.ErrAmbigContext)
	_register("html/template.ErrBadHTML", html_template.ErrBadHTML)
	_register("html/template.ErrBranchEnd", html_template.ErrBranchEnd)
	_register("html/template.ErrEndContext", html_template.ErrEndContext)
	_register("html/template.ErrNoSuchTemplate", html_template.ErrNoSuchTemplate)
	_register("html/template.ErrOutputContext", html_template.ErrOutputContext)
	_register("html/template.ErrPartialCharset", html_template.ErrPartialCharset)
	_register("html/template.ErrPartialEscape", html_template.ErrPartialEscape)
	_register("html/template.ErrPredefinedEscaper", html_template.ErrPredefinedEscaper)
	_register("html/template.ErrRangeLoopReentry", html_template.ErrRangeLoopReentry)
	_register("html/template.ErrSlashAmbig", html_template.ErrSlashAmbig)
	_register("html/template.Error", reflect.TypeOf((*html_template.Error)(nil)).Elem())
	_register("html/template.ErrorCode", reflect.TypeOf((*html_template.ErrorCode)(nil)).Elem())
	_register("html/template.FuncMap", reflect.TypeOf((*html_template.FuncMap)(nil)).Elem())
	_register("html/template.HTML", reflect.TypeOf((*html_template.HTML)(nil)).Elem())
	_register("html/template.HTMLAttr", reflect.TypeOf((*html_template.HTMLAttr)(nil)).Elem())
	_register("html/template.HTMLEscape", html_template.HTMLEscape)
	_register("html/template.HTMLEscapeString", html_template.HTMLEscapeString)
	_register("html/template.HTMLEscaper", html_template.HTMLEscaper)
	_register("html/template.IsTrue", html_template.IsTrue)
	_register("html/template.JS", reflect.TypeOf((*html_template.JS)(nil)).Elem())
	_register("html/template.JSEscape", html_template.JSEscape)
	_register("html/template.JSEscapeString", html_template.JSEscapeString)
	_register("html/template.JSEscaper", html_template.JSEscaper)
	_register("html/template.JSStr", reflect.TypeOf((*html_template.JSStr)(nil)).Elem())
	_register("html/template.Must", html_template.Must)
	_register("html/template.New", html_template.New)
	_register("html/template.OK", html_template.OK)
	_register("html/template.ParseFS", html_template.ParseFS)
	_register("html/template.ParseFiles", html_template.ParseFiles)
	_register("html/template.ParseGlob", html_template.ParseGlob)
	_register("html/template.Srcset", reflect.TypeOf((*html_template.Srcset)(nil)).Elem())
	_register("html/template.Template", reflect.TypeOf((*html_template.Template)(nil)).Elem())
	_register("html/template.URL", reflect.TypeOf((*html_template.URL)(nil)).Elem())
	_register("html/template.URLQueryEscaper", html_template.URLQueryEscaper)

	// package image
	////////////////////////////////////////
	_register("image.Alpha", reflect.TypeOf((*image.Alpha)(nil)).Elem())
	_register("image.Alpha16", reflect.TypeOf((*image.Alpha16)(nil)).Elem())
	_register("image.Black", image.Black)
	_register("image.CMYK", reflect.TypeOf((*image.CMYK)(nil)).Elem())
	_register("image.Config", reflect.TypeOf((*image.Config)(nil)).Elem())
	_register("image.Decode", image.Decode)
	_register("image.DecodeConfig", image.DecodeConfig)
	_register("image.ErrFormat", image.ErrFormat)
	_register("image.Gray", reflect.TypeOf((*image.Gray)(nil)).Elem())
	_register("image.Gray16", reflect.TypeOf((*image.Gray16)(nil)).Elem())
	_register("image.Image", reflect.TypeOf((*image.Image)(nil)).Elem())
	_register("image.NRGBA", reflect.TypeOf((*image.NRGBA)(nil)).Elem())
	_register("image.NRGBA64", reflect.TypeOf((*image.NRGBA64)(nil)).Elem())
	_register("image.NYCbCrA", reflect.TypeOf((*image.NYCbCrA)(nil)).Elem())
	_register("image.NewAlpha", image.NewAlpha)
	_register("image.NewAlpha16", image.NewAlpha16)
	_register("image.NewCMYK", image.NewCMYK)
	_register("image.NewGray", image.NewGray)
	_register("image.NewGray16", image.NewGray16)
	_register("image.NewNRGBA", image.NewNRGBA)
	_register("image.NewNRGBA64", image.NewNRGBA64)
	_register("image.NewNYCbCrA", image.NewNYCbCrA)
	_register("image.NewPaletted", image.NewPaletted)
	_register("image.NewRGBA", image.NewRGBA)
	_register("image.NewRGBA64", image.NewRGBA64)
	_register("image.NewUniform", image.NewUniform)
	_register("image.NewYCbCr", image.NewYCbCr)
	_register("image.Opaque", image.Opaque)
	_register("image.Paletted", reflect.TypeOf((*image.Paletted)(nil)).Elem())
	_register("image.PalettedImage", reflect.TypeOf((*image.PalettedImage)(nil)).Elem())
	_register("image.Point", reflect.TypeOf((*image.Point)(nil)).Elem())
	_register("image.Pt", image.Pt)
	_register("image.RGBA", reflect.TypeOf((*image.RGBA)(nil)).Elem())
	_register("image.RGBA64", reflect.TypeOf((*image.RGBA64)(nil)).Elem())
	_register("image.RGBA64Image", reflect.TypeOf((*image.RGBA64Image)(nil)).Elem())
	_register("image.Rect", image.Rect)
	_register("image.Rectangle", reflect.TypeOf((*image.Rectangle)(nil)).Elem())
	_register("image.RegisterFormat", image.RegisterFormat)
	_register("image.Transparent", image.Transparent)
	_register("image.Uniform", reflect.TypeOf((*image.Uniform)(nil)).Elem())
	_register("image.White", image.White)
	_register("image.YCbCr", reflect.TypeOf((*image.YCbCr)(nil)).Elem())
	_register("image.YCbCrSubsampleRatio", reflect.TypeOf((*image.YCbCrSubsampleRatio)(nil)).Elem())
	_register("image.YCbCrSubsampleRatio410", image.YCbCrSubsampleRatio410)
	_register("image.YCbCrSubsampleRatio411", image.YCbCrSubsampleRatio411)
	_register("image.YCbCrSubsampleRatio420", image.YCbCrSubsampleRatio420)
	_register("image.YCbCrSubsampleRatio422", image.YCbCrSubsampleRatio422)
	_register("image.YCbCrSubsampleRatio440", image.YCbCrSubsampleRatio440)
	_register("image.YCbCrSubsampleRatio444", image.YCbCrSubsampleRatio444)
	_register("image.ZP", image.ZP)
	_register("image.ZR", image.ZR)

	// package image/color
	////////////////////////////////////////
	_register("image/color.Alpha", reflect.TypeOf((*image_color.Alpha)(nil)).Elem())
	_register("image/color.Alpha16", reflect.TypeOf((*image_color.Alpha16)(nil)).Elem())
	_register("image/color.Alpha16Model", image_color.Alpha16Model)
	_register("image/color.AlphaModel", image_color.AlphaModel)
	_register("image/color.Black", image_color.Black)
	_register("image/color.CMYK", reflect.TypeOf((*image_color.CMYK)(nil)).Elem())
	_register("image/color.CMYKModel", image_color.CMYKModel)
	_register("image/color.CMYKToRGB", image_color.CMYKToRGB)
	_register("image/color.Color", reflect.TypeOf((*image_color.Color)(nil)).Elem())
	_register("image/color.Gray", reflect.TypeOf((*image_color.Gray)(nil)).Elem())
	_register("image/color.Gray16", reflect.TypeOf((*image_color.Gray16)(nil)).Elem())
	_register("image/color.Gray16Model", image_color.Gray16Model)
	_register("image/color.GrayModel", image_color.GrayModel)
	_register("image/color.Model", reflect.TypeOf((*image_color.Model)(nil)).Elem())
	_register("image/color.ModelFunc", image_color.ModelFunc)
	_register("image/color.NRGBA", reflect.TypeOf((*image_color.NRGBA)(nil)).Elem())
	_register("image/color.NRGBA64", reflect.TypeOf((*image_color.NRGBA64)(nil)).Elem())
	_register("image/color.NRGBA64Model", image_color.NRGBA64Model)
	_register("image/color.NRGBAModel", image_color.NRGBAModel)
	_register("image/color.NYCbCrA", reflect.TypeOf((*image_color.NYCbCrA)(nil)).Elem())
	_register("image/color.NYCbCrAModel", image_color.NYCbCrAModel)
	_register("image/color.Opaque", image_color.Opaque)
	_register("image/color.Palette", reflect.TypeOf((*image_color.Palette)(nil)).Elem())
	_register("image/color.RGBA", reflect.TypeOf((*image_color.RGBA)(nil)).Elem())
	_register("image/color.RGBA64", reflect.TypeOf((*image_color.RGBA64)(nil)).Elem())
	_register("image/color.RGBA64Model", image_color.RGBA64Model)
	_register("image/color.RGBAModel", image_color.RGBAModel)
	_register("image/color.RGBToCMYK", image_color.RGBToCMYK)
	_register("image/color.RGBToYCbCr", image_color.RGBToYCbCr)
	_register("image/color.Transparent", image_color.Transparent)
	_register("image/color.White", image_color.White)
	_register("image/color.YCbCr", reflect.TypeOf((*image_color.YCbCr)(nil)).Elem())
	_register("image/color.YCbCrModel", image_color.YCbCrModel)
	_register("image/color.YCbCrToRGB", image_color.YCbCrToRGB)

	// package image/color/palette
	////////////////////////////////////////
	_register("image/color/palette.Plan9", image_color_palette.Plan9)
	_register("image/color/palette.WebSafe", image_color_palette.WebSafe)

	// package image/draw
	////////////////////////////////////////
	_register("image/draw.Draw", image_draw.Draw)
	_register("image/draw.DrawMask", image_draw.DrawMask)
	_register("image/draw.Drawer", reflect.TypeOf((*image_draw.Drawer)(nil)).Elem())
	_register("image/draw.FloydSteinberg", image_draw.FloydSteinberg)
	_register("image/draw.Image", reflect.TypeOf((*image_draw.Image)(nil)).Elem())
	_register("image/draw.Op", reflect.TypeOf((*image_draw.Op)(nil)).Elem())
	_register("image/draw.Over", image_draw.Over)
	_register("image/draw.Quantizer", reflect.TypeOf((*image_draw.Quantizer)(nil)).Elem())
	_register("image/draw.RGBA64Image", reflect.TypeOf((*image_draw.RGBA64Image)(nil)).Elem())
	_register("image/draw.Src", image_draw.Src)

	// package image/gif
	////////////////////////////////////////
	_register("image/gif.Decode", image_gif.Decode)
	_register("image/gif.DecodeAll", image_gif.DecodeAll)
	_register("image/gif.DecodeConfig", image_gif.DecodeConfig)
	_register("image/gif.DisposalBackground", image_gif.DisposalBackground)
	_register("image/gif.DisposalNone", image_gif.DisposalNone)
	_register("image/gif.DisposalPrevious", image_gif.DisposalPrevious)
	_register("image/gif.Encode", image_gif.Encode)
	_register("image/gif.EncodeAll", image_gif.EncodeAll)
	_register("image/gif.GIF", reflect.TypeOf((*image_gif.GIF)(nil)).Elem())
	_register("image/gif.Options", reflect.TypeOf((*image_gif.Options)(nil)).Elem())

	// package image/jpeg
	////////////////////////////////////////
	_register("image/jpeg.Decode", image_jpeg.Decode)
	_register("image/jpeg.DecodeConfig", image_jpeg.DecodeConfig)
	_register("image/jpeg.DefaultQuality", image_jpeg.DefaultQuality)
	_register("image/jpeg.Encode", image_jpeg.Encode)
	_register("image/jpeg.FormatError", reflect.TypeOf((*image_jpeg.FormatError)(nil)).Elem())
	_register("image/jpeg.Options", reflect.TypeOf((*image_jpeg.Options)(nil)).Elem())
	_register("image/jpeg.Reader", reflect.TypeOf((*image_jpeg.Reader)(nil)).Elem())
	_register("image/jpeg.UnsupportedError", reflect.TypeOf((*image_jpeg.UnsupportedError)(nil)).Elem())

	// package image/png
	////////////////////////////////////////
	_register("image/png.BestCompression", image_png.BestCompression)
	_register("image/png.BestSpeed", image_png.BestSpeed)
	_register("image/png.CompressionLevel", reflect.TypeOf((*image_png.CompressionLevel)(nil)).Elem())
	_register("image/png.Decode", image_png.Decode)
	_register("image/png.DecodeConfig", image_png.DecodeConfig)
	_register("image/png.DefaultCompression", image_png.DefaultCompression)
	_register("image/png.Encode", image_png.Encode)
	_register("image/png.Encoder", reflect.TypeOf((*image_png.Encoder)(nil)).Elem())
	_register("image/png.EncoderBuffer", reflect.TypeOf((*image_png.EncoderBuffer)(nil)).Elem())
	_register("image/png.EncoderBufferPool", reflect.TypeOf((*image_png.EncoderBufferPool)(nil)).Elem())
	_register("image/png.FormatError", reflect.TypeOf((*image_png.FormatError)(nil)).Elem())
	_register("image/png.NoCompression", image_png.NoCompression)
	_register("image/png.UnsupportedError", reflect.TypeOf((*image_png.UnsupportedError)(nil)).Elem())

	// package index/suffixarray
	////////////////////////////////////////
	_register("index/suffixarray.Index", reflect.TypeOf((*index_suffixarray.Index)(nil)).Elem())
	_register("index/suffixarray.New", index_suffixarray.New)

	// package io
	////////////////////////////////////////
	_register("io.ByteReader", reflect.TypeOf((*io.ByteReader)(nil)).Elem())
	_register("io.ByteScanner", reflect.TypeOf((*io.ByteScanner)(nil)).Elem())
	_register("io.ByteWriter", reflect.TypeOf((*io.ByteWriter)(nil)).Elem())
	_register("io.Closer", reflect.TypeOf((*io.Closer)(nil)).Elem())
	_register("io.Copy", io.Copy)
	_register("io.CopyBuffer", io.CopyBuffer)
	_register("io.CopyN", io.CopyN)
	_register("io.Discard", io.Discard)
	_register("io.EOF", io.EOF)
	_register("io.ErrClosedPipe", io.ErrClosedPipe)
	_register("io.ErrNoProgress", io.ErrNoProgress)
	_register("io.ErrShortBuffer", io.ErrShortBuffer)
	_register("io.ErrShortWrite", io.ErrShortWrite)
	_register("io.ErrUnexpectedEOF", io.ErrUnexpectedEOF)
	_register("io.LimitReader", io.LimitReader)
	_register("io.LimitedReader", reflect.TypeOf((*io.LimitedReader)(nil)).Elem())
	_register("io.MultiReader", io.MultiReader)
	_register("io.MultiWriter", io.MultiWriter)
	_register("io.NewSectionReader", io.NewSectionReader)
	_register("io.NopCloser", io.NopCloser)
	_register("io.Pipe", io.Pipe)
	_register("io.PipeReader", reflect.TypeOf((*io.PipeReader)(nil)).Elem())
	_register("io.PipeWriter", reflect.TypeOf((*io.PipeWriter)(nil)).Elem())
	_register("io.ReadAll", io.ReadAll)
	_register("io.ReadAtLeast", io.ReadAtLeast)
	_register("io.ReadCloser", reflect.TypeOf((*io.ReadCloser)(nil)).Elem())
	_register("io.ReadFull", io.ReadFull)
	_register("io.ReadSeekCloser", reflect.TypeOf((*io.ReadSeekCloser)(nil)).Elem())
	_register("io.ReadSeeker", reflect.TypeOf((*io.ReadSeeker)(nil)).Elem())
	_register("io.ReadWriteCloser", reflect.TypeOf((*io.ReadWriteCloser)(nil)).Elem())
	_register("io.ReadWriteSeeker", reflect.TypeOf((*io.ReadWriteSeeker)(nil)).Elem())
	_register("io.ReadWriter", reflect.TypeOf((*io.ReadWriter)(nil)).Elem())
	_register("io.Reader", reflect.TypeOf((*io.Reader)(nil)).Elem())
	_register("io.ReaderAt", reflect.TypeOf((*io.ReaderAt)(nil)).Elem())
	_register("io.ReaderFrom", reflect.TypeOf((*io.ReaderFrom)(nil)).Elem())
	_register("io.RuneReader", reflect.TypeOf((*io.RuneReader)(nil)).Elem())
	_register("io.RuneScanner", reflect.TypeOf((*io.RuneScanner)(nil)).Elem())
	_register("io.SectionReader", reflect.TypeOf((*io.SectionReader)(nil)).Elem())
	_register("io.SeekCurrent", io.SeekCurrent)
	_register("io.SeekEnd", io.SeekEnd)
	_register("io.SeekStart", io.SeekStart)
	_register("io.Seeker", reflect.TypeOf((*io.Seeker)(nil)).Elem())
	_register("io.StringWriter", reflect.TypeOf((*io.StringWriter)(nil)).Elem())
	_register("io.TeeReader", io.TeeReader)
	_register("io.WriteCloser", reflect.TypeOf((*io.WriteCloser)(nil)).Elem())
	_register("io.WriteSeeker", reflect.TypeOf((*io.WriteSeeker)(nil)).Elem())
	_register("io.WriteString", io.WriteString)
	_register("io.Writer", reflect.TypeOf((*io.Writer)(nil)).Elem())
	_register("io.WriterAt", reflect.TypeOf((*io.WriterAt)(nil)).Elem())
	_register("io.WriterTo", reflect.TypeOf((*io.WriterTo)(nil)).Elem())

	// package io/fs
	////////////////////////////////////////
	_register("io/fs.DirEntry", reflect.TypeOf((*io_fs.DirEntry)(nil)).Elem())
	_register("io/fs.ErrClosed", io_fs.ErrClosed)
	_register("io/fs.ErrExist", io_fs.ErrExist)
	_register("io/fs.ErrInvalid", io_fs.ErrInvalid)
	_register("io/fs.ErrNotExist", io_fs.ErrNotExist)
	_register("io/fs.ErrPermission", io_fs.ErrPermission)
	_register("io/fs.FS", reflect.TypeOf((*io_fs.FS)(nil)).Elem())
	_register("io/fs.File", reflect.TypeOf((*io_fs.File)(nil)).Elem())
	_register("io/fs.FileInfo", reflect.TypeOf((*io_fs.FileInfo)(nil)).Elem())
	_register("io/fs.FileInfoToDirEntry", io_fs.FileInfoToDirEntry)
	_register("io/fs.FileMode", reflect.TypeOf((*io_fs.FileMode)(nil)).Elem())
	_register("io/fs.Glob", io_fs.Glob)
	_register("io/fs.GlobFS", reflect.TypeOf((*io_fs.GlobFS)(nil)).Elem())
	_register("io/fs.ModeAppend", io_fs.ModeAppend)
	_register("io/fs.ModeCharDevice", io_fs.ModeCharDevice)
	_register("io/fs.ModeDevice", io_fs.ModeDevice)
	_register("io/fs.ModeDir", io_fs.ModeDir)
	_register("io/fs.ModeExclusive", io_fs.ModeExclusive)
	_register("io/fs.ModeIrregular", io_fs.ModeIrregular)
	_register("io/fs.ModeNamedPipe", io_fs.ModeNamedPipe)
	_register("io/fs.ModePerm", io_fs.ModePerm)
	_register("io/fs.ModeSetgid", io_fs.ModeSetgid)
	_register("io/fs.ModeSetuid", io_fs.ModeSetuid)
	_register("io/fs.ModeSocket", io_fs.ModeSocket)
	_register("io/fs.ModeSticky", io_fs.ModeSticky)
	_register("io/fs.ModeSymlink", io_fs.ModeSymlink)
	_register("io/fs.ModeTemporary", io_fs.ModeTemporary)
	_register("io/fs.ModeType", io_fs.ModeType)
	_register("io/fs.PathError", reflect.TypeOf((*io_fs.PathError)(nil)).Elem())
	_register("io/fs.ReadDir", io_fs.ReadDir)
	_register("io/fs.ReadDirFS", reflect.TypeOf((*io_fs.ReadDirFS)(nil)).Elem())
	_register("io/fs.ReadDirFile", reflect.TypeOf((*io_fs.ReadDirFile)(nil)).Elem())
	_register("io/fs.ReadFile", io_fs.ReadFile)
	_register("io/fs.ReadFileFS", reflect.TypeOf((*io_fs.ReadFileFS)(nil)).Elem())
	_register("io/fs.SkipDir", io_fs.SkipDir)
	_register("io/fs.Stat", io_fs.Stat)
	_register("io/fs.StatFS", reflect.TypeOf((*io_fs.StatFS)(nil)).Elem())
	_register("io/fs.Sub", io_fs.Sub)
	_register("io/fs.SubFS", reflect.TypeOf((*io_fs.SubFS)(nil)).Elem())
	_register("io/fs.ValidPath", io_fs.ValidPath)
	_register("io/fs.WalkDir", io_fs.WalkDir)
	_register("io/fs.WalkDirFunc", reflect.TypeOf((*io_fs.WalkDirFunc)(nil)).Elem())

	// package io/ioutil
	////////////////////////////////////////
	_register("io/ioutil.Discard", io_ioutil.Discard)
	_register("io/ioutil.NopCloser", io_ioutil.NopCloser)
	_register("io/ioutil.ReadAll", io_ioutil.ReadAll)
	_register("io/ioutil.ReadDir", io_ioutil.ReadDir)
	_register("io/ioutil.ReadFile", io_ioutil.ReadFile)
	_register("io/ioutil.TempDir", io_ioutil.TempDir)
	_register("io/ioutil.TempFile", io_ioutil.TempFile)
	_register("io/ioutil.WriteFile", io_ioutil.WriteFile)

	// package log
	////////////////////////////////////////
	_register("log.Default", log.Default)
	_register("log.Fatal", log.Fatal)
	_register("log.Fatalf", log.Fatalf)
	_register("log.Fatalln", log.Fatalln)
	_register("log.Flags", log.Flags)
	_register("log.LUTC", log.LUTC)
	_register("log.Ldate", log.Ldate)
	_register("log.Llongfile", log.Llongfile)
	_register("log.Lmicroseconds", log.Lmicroseconds)
	_register("log.Lmsgprefix", log.Lmsgprefix)
	_register("log.Logger", reflect.TypeOf((*log.Logger)(nil)).Elem())
	_register("log.Lshortfile", log.Lshortfile)
	_register("log.LstdFlags", log.LstdFlags)
	_register("log.Ltime", log.Ltime)
	_register("log.New", log.New)
	_register("log.Output", log.Output)
	_register("log.Panic", log.Panic)
	_register("log.Panicf", log.Panicf)
	_register("log.Panicln", log.Panicln)
	_register("log.Prefix", log.Prefix)
	_register("log.Print", log.Print)
	_register("log.Printf", log.Printf)
	_register("log.Println", log.Println)
	_register("log.SetFlags", log.SetFlags)
	_register("log.SetOutput", log.SetOutput)
	_register("log.SetPrefix", log.SetPrefix)
	_register("log.Writer", log.Writer)

	// package math
	////////////////////////////////////////
	_register("math.Abs", math.Abs)
	_register("math.Acos", math.Acos)
	_register("math.Acosh", math.Acosh)
	_register("math.Asin", math.Asin)
	_register("math.Asinh", math.Asinh)
	_register("math.Atan", math.Atan)
	_register("math.Atan2", math.Atan2)
	_register("math.Atanh", math.Atanh)
	_register("math.Cbrt", math.Cbrt)
	_register("math.Ceil", math.Ceil)
	_register("math.Copysign", math.Copysign)
	_register("math.Cos", math.Cos)
	_register("math.Cosh", math.Cosh)
	_register("math.Dim", math.Dim)
	_register("math.E", float64(math.E))
	_register("math.Erf", math.Erf)
	_register("math.Erfc", math.Erfc)
	_register("math.Erfcinv", math.Erfcinv)
	_register("math.Erfinv", math.Erfinv)
	_register("math.Exp", math.Exp)
	_register("math.Exp2", math.Exp2)
	_register("math.Expm1", math.Expm1)
	_register("math.FMA", math.FMA)
	_register("math.Float32bits", math.Float32bits)
	_register("math.Float32frombits", math.Float32frombits)
	_register("math.Float64bits", math.Float64bits)
	_register("math.Float64frombits", math.Float64frombits)
	_register("math.Floor", math.Floor)
	_register("math.Frexp", math.Frexp)
	_register("math.Gamma", math.Gamma)
	_register("math.Hypot", math.Hypot)
	_register("math.Ilogb", math.Ilogb)
	_register("math.Inf", math.Inf)
	_register("math.IsInf", math.IsInf)
	_register("math.IsNaN", math.IsNaN)
	_register("math.J0", math.J0)
	_register("math.J1", math.J1)
	_register("math.Jn", math.Jn)
	_register("math.Ldexp", math.Ldexp)
	_register("math.Lgamma", math.Lgamma)
	_register("math.Ln10", float64(math.Ln10))
	_register("math.Ln2", float64(math.Ln2))
	_register("math.Log", math.Log)
	_register("math.Log10", math.Log10)
	_register("math.Log10E", float64(math.Log10E))
	_register("math.Log1p", math.Log1p)
	_register("math.Log2", math.Log2)
	_register("math.Log2E", float64(math.Log2E))
	_register("math.Logb", math.Logb)
	_register("math.Max", math.Max)
	_register("math.MaxFloat32", float64(math.MaxFloat32))
	_register("math.MaxFloat64", float64(math.MaxFloat64))
	_register("math.MaxInt", math.MaxInt)
	_register("math.MaxInt16", math.MaxInt16)
	_register("math.MaxInt32", math.MaxInt32)
	_register("math.MaxInt64", math.MaxInt64)
	_register("math.MaxInt8", math.MaxInt8)
	_register("math.MaxUint", uint64(math.MaxUint))
	_register("math.MaxUint16", math.MaxUint16)
	_register("math.MaxUint32", math.MaxUint32)
	_register("math.MaxUint64", uint64(math.MaxUint64))
	_register("math.MaxUint8", math.MaxUint8)
	_register("math.Min", math.Min)
	_register("math.MinInt", math.MinInt)
	_register("math.MinInt16", math.MinInt16)
	_register("math.MinInt32", math.MinInt32)
	_register("math.MinInt64", math.MinInt64)
	_register("math.MinInt8", math.MinInt8)
	_register("math.Mod", math.Mod)
	_register("math.Modf", math.Modf)
	_register("math.NaN", math.NaN)
	_register("math.Nextafter", math.Nextafter)
	_register("math.Nextafter32", math.Nextafter32)
	_register("math.Phi", float64(math.Phi))
	_register("math.Pi", float64(math.Pi))
	_register("math.Pow", math.Pow)
	_register("math.Pow10", math.Pow10)
	_register("math.Remainder", math.Remainder)
	_register("math.Round", math.Round)
	_register("math.RoundToEven", math.RoundToEven)
	_register("math.Signbit", math.Signbit)
	_register("math.Sin", math.Sin)
	_register("math.Sincos", math.Sincos)
	_register("math.Sinh", math.Sinh)
	_register("math.SmallestNonzeroFloat32", float64(math.SmallestNonzeroFloat32))
	_register("math.SmallestNonzeroFloat64", float64(math.SmallestNonzeroFloat64))
	_register("math.Sqrt", math.Sqrt)
	_register("math.Sqrt2", float64(math.Sqrt2))
	_register("math.SqrtE", float64(math.SqrtE))
	_register("math.SqrtPhi", float64(math.SqrtPhi))
	_register("math.SqrtPi", float64(math.SqrtPi))
	_register("math.Tan", math.Tan)
	_register("math.Tanh", math.Tanh)
	_register("math.Trunc", math.Trunc)
	_register("math.Y0", math.Y0)
	_register("math.Y1", math.Y1)
	_register("math.Yn", math.Yn)

	// package math/big
	////////////////////////////////////////
	_register("math/big.Above", math_big.Above)
	_register("math/big.Accuracy", reflect.TypeOf((*math_big.Accuracy)(nil)).Elem())
	_register("math/big.AwayFromZero", math_big.AwayFromZero)
	_register("math/big.Below", math_big.Below)
	_register("math/big.ErrNaN", reflect.TypeOf((*math_big.ErrNaN)(nil)).Elem())
	_register("math/big.Exact", math_big.Exact)
	_register("math/big.Float", reflect.TypeOf((*math_big.Float)(nil)).Elem())
	_register("math/big.Int", reflect.TypeOf((*math_big.Int)(nil)).Elem())
	_register("math/big.Jacobi", math_big.Jacobi)
	_register("math/big.MaxBase", math_big.MaxBase)
	_register("math/big.MaxExp", math_big.MaxExp)
	_register("math/big.MaxPrec", math_big.MaxPrec)
	_register("math/big.MinExp", math_big.MinExp)
	_register("math/big.NewFloat", math_big.NewFloat)
	_register("math/big.NewInt", math_big.NewInt)
	_register("math/big.NewRat", math_big.NewRat)
	_register("math/big.ParseFloat", math_big.ParseFloat)
	_register("math/big.Rat", reflect.TypeOf((*math_big.Rat)(nil)).Elem())
	_register("math/big.RoundingMode", reflect.TypeOf((*math_big.RoundingMode)(nil)).Elem())
	_register("math/big.ToNearestAway", math_big.ToNearestAway)
	_register("math/big.ToNearestEven", math_big.ToNearestEven)
	_register("math/big.ToNegativeInf", math_big.ToNegativeInf)
	_register("math/big.ToPositiveInf", math_big.ToPositiveInf)
	_register("math/big.ToZero", math_big.ToZero)
	_register("math/big.Word", reflect.TypeOf((*math_big.Word)(nil)).Elem())

	// package math/bits
	////////////////////////////////////////
	_register("math/bits.Add", math_bits.Add)
	_register("math/bits.Add32", math_bits.Add32)
	_register("math/bits.Add64", math_bits.Add64)
	_register("math/bits.Div", math_bits.Div)
	_register("math/bits.Div32", math_bits.Div32)
	_register("math/bits.Div64", math_bits.Div64)
	_register("math/bits.LeadingZeros", math_bits.LeadingZeros)
	_register("math/bits.LeadingZeros16", math_bits.LeadingZeros16)
	_register("math/bits.LeadingZeros32", math_bits.LeadingZeros32)
	_register("math/bits.LeadingZeros64", math_bits.LeadingZeros64)
	_register("math/bits.LeadingZeros8", math_bits.LeadingZeros8)
	_register("math/bits.Len", math_bits.Len)
	_register("math/bits.Len16", math_bits.Len16)
	_register("math/bits.Len32", math_bits.Len32)
	_register("math/bits.Len64", math_bits.Len64)
	_register("math/bits.Len8", math_bits.Len8)
	_register("math/bits.Mul", math_bits.Mul)
	_register("math/bits.Mul32", math_bits.Mul32)
	_register("math/bits.Mul64", math_bits.Mul64)
	_register("math/bits.OnesCount", math_bits.OnesCount)
	_register("math/bits.OnesCount16", math_bits.OnesCount16)
	_register("math/bits.OnesCount32", math_bits.OnesCount32)
	_register("math/bits.OnesCount64", math_bits.OnesCount64)
	_register("math/bits.OnesCount8", math_bits.OnesCount8)
	_register("math/bits.Rem", math_bits.Rem)
	_register("math/bits.Rem32", math_bits.Rem32)
	_register("math/bits.Rem64", math_bits.Rem64)
	_register("math/bits.Reverse", math_bits.Reverse)
	_register("math/bits.Reverse16", math_bits.Reverse16)
	_register("math/bits.Reverse32", math_bits.Reverse32)
	_register("math/bits.Reverse64", math_bits.Reverse64)
	_register("math/bits.Reverse8", math_bits.Reverse8)
	_register("math/bits.ReverseBytes", math_bits.ReverseBytes)
	_register("math/bits.ReverseBytes16", math_bits.ReverseBytes16)
	_register("math/bits.ReverseBytes32", math_bits.ReverseBytes32)
	_register("math/bits.ReverseBytes64", math_bits.ReverseBytes64)
	_register("math/bits.RotateLeft", math_bits.RotateLeft)
	_register("math/bits.RotateLeft16", math_bits.RotateLeft16)
	_register("math/bits.RotateLeft32", math_bits.RotateLeft32)
	_register("math/bits.RotateLeft64", math_bits.RotateLeft64)
	_register("math/bits.RotateLeft8", math_bits.RotateLeft8)
	_register("math/bits.Sub", math_bits.Sub)
	_register("math/bits.Sub32", math_bits.Sub32)
	_register("math/bits.Sub64", math_bits.Sub64)
	_register("math/bits.TrailingZeros", math_bits.TrailingZeros)
	_register("math/bits.TrailingZeros16", math_bits.TrailingZeros16)
	_register("math/bits.TrailingZeros32", math_bits.TrailingZeros32)
	_register("math/bits.TrailingZeros64", math_bits.TrailingZeros64)
	_register("math/bits.TrailingZeros8", math_bits.TrailingZeros8)
	_register("math/bits.UintSize", math_bits.UintSize)

	// package math/cmplx
	////////////////////////////////////////
	_register("math/cmplx.Abs", math_cmplx.Abs)
	_register("math/cmplx.Acos", math_cmplx.Acos)
	_register("math/cmplx.Acosh", math_cmplx.Acosh)
	_register("math/cmplx.Asin", math_cmplx.Asin)
	_register("math/cmplx.Asinh", math_cmplx.Asinh)
	_register("math/cmplx.Atan", math_cmplx.Atan)
	_register("math/cmplx.Atanh", math_cmplx.Atanh)
	_register("math/cmplx.Conj", math_cmplx.Conj)
	_register("math/cmplx.Cos", math_cmplx.Cos)
	_register("math/cmplx.Cosh", math_cmplx.Cosh)
	_register("math/cmplx.Cot", math_cmplx.Cot)
	_register("math/cmplx.Exp", math_cmplx.Exp)
	_register("math/cmplx.Inf", math_cmplx.Inf)
	_register("math/cmplx.IsInf", math_cmplx.IsInf)
	_register("math/cmplx.IsNaN", math_cmplx.IsNaN)
	_register("math/cmplx.Log", math_cmplx.Log)
	_register("math/cmplx.Log10", math_cmplx.Log10)
	_register("math/cmplx.NaN", math_cmplx.NaN)
	_register("math/cmplx.Phase", math_cmplx.Phase)
	_register("math/cmplx.Polar", math_cmplx.Polar)
	_register("math/cmplx.Pow", math_cmplx.Pow)
	_register("math/cmplx.Rect", math_cmplx.Rect)
	_register("math/cmplx.Sin", math_cmplx.Sin)
	_register("math/cmplx.Sinh", math_cmplx.Sinh)
	_register("math/cmplx.Sqrt", math_cmplx.Sqrt)
	_register("math/cmplx.Tan", math_cmplx.Tan)
	_register("math/cmplx.Tanh", math_cmplx.Tanh)

	// package math/rand
	////////////////////////////////////////
	_register("math/rand.ExpFloat64", math_rand.ExpFloat64)
	_register("math/rand.Float32", math_rand.Float32)
	_register("math/rand.Float64", math_rand.Float64)
	_register("math/rand.Int", math_rand.Int)
	_register("math/rand.Int31", math_rand.Int31)
	_register("math/rand.Int31n", math_rand.Int31n)
	_register("math/rand.Int63", math_rand.Int63)
	_register("math/rand.Int63n", math_rand.Int63n)
	_register("math/rand.Intn", math_rand.Intn)
	_register("math/rand.New", math_rand.New)
	_register("math/rand.NewSource", math_rand.NewSource)
	_register("math/rand.NewZipf", math_rand.NewZipf)
	_register("math/rand.NormFloat64", math_rand.NormFloat64)
	_register("math/rand.Perm", math_rand.Perm)
	_register("math/rand.Rand", reflect.TypeOf((*math_rand.Rand)(nil)).Elem())
	_register("math/rand.Read", math_rand.Read)
	_register("math/rand.Seed", math_rand.Seed)
	_register("math/rand.Shuffle", math_rand.Shuffle)
	_register("math/rand.Source", reflect.TypeOf((*math_rand.Source)(nil)).Elem())
	_register("math/rand.Source64", reflect.TypeOf((*math_rand.Source64)(nil)).Elem())
	_register("math/rand.Uint32", math_rand.Uint32)
	_register("math/rand.Uint64", math_rand.Uint64)
	_register("math/rand.Zipf", reflect.TypeOf((*math_rand.Zipf)(nil)).Elem())

	// package mime
	////////////////////////////////////////
	_register("mime.AddExtensionType", mime.AddExtensionType)
	_register("mime.BEncoding", mime.BEncoding)
	_register("mime.ErrInvalidMediaParameter", mime.ErrInvalidMediaParameter)
	_register("mime.ExtensionsByType", mime.ExtensionsByType)
	_register("mime.FormatMediaType", mime.FormatMediaType)
	_register("mime.ParseMediaType", mime.ParseMediaType)
	_register("mime.QEncoding", mime.QEncoding)
	_register("mime.TypeByExtension", mime.TypeByExtension)
	_register("mime.WordDecoder", reflect.TypeOf((*mime.WordDecoder)(nil)).Elem())
	_register("mime.WordEncoder", reflect.TypeOf((*mime.WordEncoder)(nil)).Elem())

	// package mime/multipart
	////////////////////////////////////////
	_register("mime/multipart.ErrMessageTooLarge", mime_multipart.ErrMessageTooLarge)
	_register("mime/multipart.File", reflect.TypeOf((*mime_multipart.File)(nil)).Elem())
	_register("mime/multipart.FileHeader", reflect.TypeOf((*mime_multipart.FileHeader)(nil)).Elem())
	_register("mime/multipart.Form", reflect.TypeOf((*mime_multipart.Form)(nil)).Elem())
	_register("mime/multipart.NewReader", mime_multipart.NewReader)
	_register("mime/multipart.NewWriter", mime_multipart.NewWriter)
	_register("mime/multipart.Part", reflect.TypeOf((*mime_multipart.Part)(nil)).Elem())
	_register("mime/multipart.Reader", reflect.TypeOf((*mime_multipart.Reader)(nil)).Elem())
	_register("mime/multipart.Writer", reflect.TypeOf((*mime_multipart.Writer)(nil)).Elem())

	// package mime/quotedprintable
	////////////////////////////////////////
	_register("mime/quotedprintable.NewReader", mime_quotedprintable.NewReader)
	_register("mime/quotedprintable.NewWriter", mime_quotedprintable.NewWriter)
	_register("mime/quotedprintable.Reader", reflect.TypeOf((*mime_quotedprintable.Reader)(nil)).Elem())
	_register("mime/quotedprintable.Writer", reflect.TypeOf((*mime_quotedprintable.Writer)(nil)).Elem())

	// package net
	////////////////////////////////////////
	_register("net.Addr", reflect.TypeOf((*net.Addr)(nil)).Elem())
	_register("net.AddrError", reflect.TypeOf((*net.AddrError)(nil)).Elem())
	_register("net.Buffers", reflect.TypeOf((*net.Buffers)(nil)).Elem())
	_register("net.CIDRMask", net.CIDRMask)
	_register("net.Conn", reflect.TypeOf((*net.Conn)(nil)).Elem())
	_register("net.DNSConfigError", reflect.TypeOf((*net.DNSConfigError)(nil)).Elem())
	_register("net.DNSError", reflect.TypeOf((*net.DNSError)(nil)).Elem())
	_register("net.DefaultResolver", net.DefaultResolver)
	_register("net.Dial", net.Dial)
	_register("net.DialIP", net.DialIP)
	_register("net.DialTCP", net.DialTCP)
	_register("net.DialTimeout", net.DialTimeout)
	_register("net.DialUDP", net.DialUDP)
	_register("net.DialUnix", net.DialUnix)
	_register("net.Dialer", reflect.TypeOf((*net.Dialer)(nil)).Elem())
	_register("net.ErrClosed", net.ErrClosed)
	_register("net.ErrWriteToConnected", net.ErrWriteToConnected)
	_register("net.Error", reflect.TypeOf((*net.Error)(nil)).Elem())
	_register("net.FileConn", net.FileConn)
	_register("net.FileListener", net.FileListener)
	_register("net.FilePacketConn", net.FilePacketConn)
	_register("net.FlagBroadcast", net.FlagBroadcast)
	_register("net.FlagLoopback", net.FlagLoopback)
	_register("net.FlagMulticast", net.FlagMulticast)
	_register("net.FlagPointToPoint", net.FlagPointToPoint)
	_register("net.FlagUp", net.FlagUp)
	_register("net.Flags", reflect.TypeOf((*net.Flags)(nil)).Elem())
	_register("net.HardwareAddr", reflect.TypeOf((*net.HardwareAddr)(nil)).Elem())
	_register("net.IP", reflect.TypeOf((*net.IP)(nil)).Elem())
	_register("net.IPAddr", reflect.TypeOf((*net.IPAddr)(nil)).Elem())
	_register("net.IPConn", reflect.TypeOf((*net.IPConn)(nil)).Elem())
	_register("net.IPMask", reflect.TypeOf((*net.IPMask)(nil)).Elem())
	_register("net.IPNet", reflect.TypeOf((*net.IPNet)(nil)).Elem())
	_register("net.IPv4", net.IPv4)
	_register("net.IPv4Mask", net.IPv4Mask)
	_register("net.IPv4allrouter", net.IPv4allrouter)
	_register("net.IPv4allsys", net.IPv4allsys)
	_register("net.IPv4bcast", net.IPv4bcast)
	_register("net.IPv4len", net.IPv4len)
	_register("net.IPv4zero", net.IPv4zero)
	_register("net.IPv6interfacelocalallnodes", net.IPv6interfacelocalallnodes)
	_register("net.IPv6len", net.IPv6len)
	_register("net.IPv6linklocalallnodes", net.IPv6linklocalallnodes)
	_register("net.IPv6linklocalallrouters", net.IPv6linklocalallrouters)
	_register("net.IPv6loopback", net.IPv6loopback)
	_register("net.IPv6unspecified", net.IPv6unspecified)
	_register("net.IPv6zero", net.IPv6zero)
	_register("net.Interface", reflect.TypeOf((*net.Interface)(nil)).Elem())
	_register("net.InterfaceAddrs", net.InterfaceAddrs)
	_register("net.InterfaceByIndex", net.InterfaceByIndex)
	_register("net.InterfaceByName", net.InterfaceByName)
	_register("net.Interfaces", net.Interfaces)
	_register("net.InvalidAddrError", reflect.TypeOf((*net.InvalidAddrError)(nil)).Elem())
	_register("net.JoinHostPort", net.JoinHostPort)
	_register("net.Listen", net.Listen)
	_register("net.ListenConfig", reflect.TypeOf((*net.ListenConfig)(nil)).Elem())
	_register("net.ListenIP", net.ListenIP)
	_register("net.ListenMulticastUDP", net.ListenMulticastUDP)
	_register("net.ListenPacket", net.ListenPacket)
	_register("net.ListenTCP", net.ListenTCP)
	_register("net.ListenUDP", net.ListenUDP)
	_register("net.ListenUnix", net.ListenUnix)
	_register("net.ListenUnixgram", net.ListenUnixgram)
	_register("net.Listener", reflect.TypeOf((*net.Listener)(nil)).Elem())
	_register("net.LookupAddr", net.LookupAddr)
	_register("net.LookupCNAME", net.LookupCNAME)
	_register("net.LookupHost", net.LookupHost)
	_register("net.LookupIP", net.LookupIP)
	_register("net.LookupMX", net.LookupMX)
	_register("net.LookupNS", net.LookupNS)
	_register("net.LookupPort", net.LookupPort)
	_register("net.LookupSRV", net.LookupSRV)
	_register("net.LookupTXT", net.LookupTXT)
	_register("net.MX", reflect.TypeOf((*net.MX)(nil)).Elem())
	_register("net.NS", reflect.TypeOf((*net.NS)(nil)).Elem())
	_register("net.OpError", reflect.TypeOf((*net.OpError)(nil)).Elem())
	_register("net.PacketConn", reflect.TypeOf((*net.PacketConn)(nil)).Elem())
	_register("net.ParseCIDR", net.ParseCIDR)
	_register("net.ParseError", reflect.TypeOf((*net.ParseError)(nil)).Elem())
	_register("net.ParseIP", net.ParseIP)
	_register("net.ParseMAC", net.ParseMAC)
	_register("net.Pipe", net.Pipe)
	_register("net.ResolveIPAddr", net.ResolveIPAddr)
	_register("net.ResolveTCPAddr", net.ResolveTCPAddr)
	_register("net.ResolveUDPAddr", net.ResolveUDPAddr)
	_register("net.ResolveUnixAddr", net.ResolveUnixAddr)
	_register("net.Resolver", reflect.TypeOf((*net.Resolver)(nil)).Elem())
	_register("net.SRV", reflect.TypeOf((*net.SRV)(nil)).Elem())
	_register("net.SplitHostPort", net.SplitHostPort)
	_register("net.TCPAddr", reflect.TypeOf((*net.TCPAddr)(nil)).Elem())
	_register("net.TCPAddrFromAddrPort", net.TCPAddrFromAddrPort)
	_register("net.TCPConn", reflect.TypeOf((*net.TCPConn)(nil)).Elem())
	_register("net.TCPListener", reflect.TypeOf((*net.TCPListener)(nil)).Elem())
	_register("net.UDPAddr", reflect.TypeOf((*net.UDPAddr)(nil)).Elem())
	_register("net.UDPAddrFromAddrPort", net.UDPAddrFromAddrPort)
	_register("net.UDPConn", reflect.TypeOf((*net.UDPConn)(nil)).Elem())
	_register("net.UnixAddr", reflect.TypeOf((*net.UnixAddr)(nil)).Elem())
	_register("net.UnixConn", reflect.TypeOf((*net.UnixConn)(nil)).Elem())
	_register("net.UnixListener", reflect.TypeOf((*net.UnixListener)(nil)).Elem())
	_register("net.UnknownNetworkError", reflect.TypeOf((*net.UnknownNetworkError)(nil)).Elem())

	// package net/http
	////////////////////////////////////////
	_register("net/http.AllowQuerySemicolons", net_http.AllowQuerySemicolons)
	_register("net/http.CanonicalHeaderKey", net_http.CanonicalHeaderKey)
	_register("net/http.Client", reflect.TypeOf((*net_http.Client)(nil)).Elem())
	_register("net/http.CloseNotifier", reflect.TypeOf((*net_http.CloseNotifier)(nil)).Elem())
	_register("net/http.ConnState", reflect.TypeOf((*net_http.ConnState)(nil)).Elem())
	_register("net/http.Cookie", reflect.TypeOf((*net_http.Cookie)(nil)).Elem())
	_register("net/http.CookieJar", reflect.TypeOf((*net_http.CookieJar)(nil)).Elem())
	_register("net/http.DefaultClient", net_http.DefaultClient)
	_register("net/http.DefaultMaxHeaderBytes", net_http.DefaultMaxHeaderBytes)
	_register("net/http.DefaultMaxIdleConnsPerHost", net_http.DefaultMaxIdleConnsPerHost)
	_register("net/http.DefaultServeMux", net_http.DefaultServeMux)
	_register("net/http.DefaultTransport", net_http.DefaultTransport)
	_register("net/http.DetectContentType", net_http.DetectContentType)
	_register("net/http.Dir", reflect.TypeOf((*net_http.Dir)(nil)).Elem())
	_register("net/http.ErrAbortHandler", net_http.ErrAbortHandler)
	_register("net/http.ErrBodyNotAllowed", net_http.ErrBodyNotAllowed)
	_register("net/http.ErrBodyReadAfterClose", net_http.ErrBodyReadAfterClose)
	_register("net/http.ErrContentLength", net_http.ErrContentLength)
	_register("net/http.ErrHandlerTimeout", net_http.ErrHandlerTimeout)
	_register("net/http.ErrHeaderTooLong", net_http.ErrHeaderTooLong)
	_register("net/http.ErrHijacked", net_http.ErrHijacked)
	_register("net/http.ErrLineTooLong", net_http.ErrLineTooLong)
	_register("net/http.ErrMissingBoundary", net_http.ErrMissingBoundary)
	_register("net/http.ErrMissingContentLength", net_http.ErrMissingContentLength)
	_register("net/http.ErrMissingFile", net_http.ErrMissingFile)
	_register("net/http.ErrNoCookie", net_http.ErrNoCookie)
	_register("net/http.ErrNoLocation", net_http.ErrNoLocation)
	_register("net/http.ErrNotMultipart", net_http.ErrNotMultipart)
	_register("net/http.ErrNotSupported", net_http.ErrNotSupported)
	_register("net/http.ErrServerClosed", net_http.ErrServerClosed)
	_register("net/http.ErrShortBody", net_http.ErrShortBody)
	_register("net/http.ErrSkipAltProtocol", net_http.ErrSkipAltProtocol)
	_register("net/http.ErrUnexpectedTrailer", net_http.ErrUnexpectedTrailer)
	_register("net/http.ErrUseLastResponse", net_http.ErrUseLastResponse)
	_register("net/http.ErrWriteAfterFlush", net_http.ErrWriteAfterFlush)
	_register("net/http.Error", net_http.Error)
	_register("net/http.FS", net_http.FS)
	_register("net/http.File", reflect.TypeOf((*net_http.File)(nil)).Elem())
	_register("net/http.FileServer", net_http.FileServer)
	_register("net/http.FileSystem", reflect.TypeOf((*net_http.FileSystem)(nil)).Elem())
	_register("net/http.Flusher", reflect.TypeOf((*net_http.Flusher)(nil)).Elem())
	_register("net/http.Get", net_http.Get)
	_register("net/http.Handle", net_http.Handle)
	_register("net/http.HandleFunc", net_http.HandleFunc)
	_register("net/http.Handler", reflect.TypeOf((*net_http.Handler)(nil)).Elem())
	_register("net/http.HandlerFunc", reflect.TypeOf((*net_http.HandlerFunc)(nil)).Elem())
	_register("net/http.Head", net_http.Head)
	_register("net/http.Header", reflect.TypeOf((*net_http.Header)(nil)).Elem())
	_register("net/http.Hijacker", reflect.TypeOf((*net_http.Hijacker)(nil)).Elem())
	_register("net/http.ListenAndServe", net_http.ListenAndServe)
	_register("net/http.ListenAndServeTLS", net_http.ListenAndServeTLS)
	_register("net/http.LocalAddrContextKey", net_http.LocalAddrContextKey)
	_register("net/http.MaxBytesError", reflect.TypeOf((*net_http.MaxBytesError)(nil)).Elem())
	_register("net/http.MaxBytesHandler", net_http.MaxBytesHandler)
	_register("net/http.MaxBytesReader", net_http.MaxBytesReader)
	_register("net/http.MethodConnect", net_http.MethodConnect)
	_register("net/http.MethodDelete", net_http.MethodDelete)
	_register("net/http.MethodGet", net_http.MethodGet)
	_register("net/http.MethodHead", net_http.MethodHead)
	_register("net/http.MethodOptions", net_http.MethodOptions)
	_register("net/http.MethodPatch", net_http.MethodPatch)
	_register("net/http.MethodPost", net_http.MethodPost)
	_register("net/http.MethodPut", net_http.MethodPut)
	_register("net/http.MethodTrace", net_http.MethodTrace)
	_register("net/http.NewFileTransport", net_http.NewFileTransport)
	_register("net/http.NewRequest", net_http.NewRequest)
	_register("net/http.NewRequestWithContext", net_http.NewRequestWithContext)
	_register("net/http.NewServeMux", net_http.NewServeMux)
	_register("net/http.NoBody", net_http.NoBody)
	_register("net/http.NotFound", net_http.NotFound)
	_register("net/http.NotFoundHandler", net_http.NotFoundHandler)
	_register("net/http.ParseHTTPVersion", net_http.ParseHTTPVersion)
	_register("net/http.ParseTime", net_http.ParseTime)
	_register("net/http.Post", net_http.Post)
	_register("net/http.PostForm", net_http.PostForm)
	_register("net/http.ProtocolError", reflect.TypeOf((*net_http.ProtocolError)(nil)).Elem())
	_register("net/http.ProxyFromEnvironment", net_http.ProxyFromEnvironment)
	_register("net/http.ProxyURL", net_http.ProxyURL)
	_register("net/http.PushOptions", reflect.TypeOf((*net_http.PushOptions)(nil)).Elem())
	_register("net/http.Pusher", reflect.TypeOf((*net_http.Pusher)(nil)).Elem())
	_register("net/http.ReadRequest", net_http.ReadRequest)
	_register("net/http.ReadResponse", net_http.ReadResponse)
	_register("net/http.Redirect", net_http.Redirect)
	_register("net/http.RedirectHandler", net_http.RedirectHandler)
	_register("net/http.Request", reflect.TypeOf((*net_http.Request)(nil)).Elem())
	_register("net/http.Response", reflect.TypeOf((*net_http.Response)(nil)).Elem())
	_register("net/http.ResponseWriter", reflect.TypeOf((*net_http.ResponseWriter)(nil)).Elem())
	_register("net/http.RoundTripper", reflect.TypeOf((*net_http.RoundTripper)(nil)).Elem())
	_register("net/http.SameSite", reflect.TypeOf((*net_http.SameSite)(nil)).Elem())
	_register("net/http.SameSiteDefaultMode", net_http.SameSiteDefaultMode)
	_register("net/http.SameSiteLaxMode", net_http.SameSiteLaxMode)
	_register("net/http.SameSiteNoneMode", net_http.SameSiteNoneMode)
	_register("net/http.SameSiteStrictMode", net_http.SameSiteStrictMode)
	_register("net/http.Serve", net_http.Serve)
	_register("net/http.ServeContent", net_http.ServeContent)
	_register("net/http.ServeFile", net_http.ServeFile)
	_register("net/http.ServeMux", reflect.TypeOf((*net_http.ServeMux)(nil)).Elem())
	_register("net/http.ServeTLS", net_http.ServeTLS)
	_register("net/http.Server", reflect.TypeOf((*net_http.Server)(nil)).Elem())
	_register("net/http.ServerContextKey", net_http.ServerContextKey)
	_register("net/http.SetCookie", net_http.SetCookie)
	_register("net/http.StateActive", net_http.StateActive)
	_register("net/http.StateClosed", net_http.StateClosed)
	_register("net/http.StateHijacked", net_http.StateHijacked)
	_register("net/http.StateIdle", net_http.StateIdle)
	_register("net/http.StateNew", net_http.StateNew)
	_register("net/http.StatusAccepted", net_http.StatusAccepted)
	_register("net/http.StatusAlreadyReported", net_http.StatusAlreadyReported)
	_register("net/http.StatusBadGateway", net_http.StatusBadGateway)
	_register("net/http.StatusBadRequest", net_http.StatusBadRequest)
	_register("net/http.StatusConflict", net_http.StatusConflict)
	_register("net/http.StatusContinue", net_http.StatusContinue)
	_register("net/http.StatusCreated", net_http.StatusCreated)
	_register("net/http.StatusEarlyHints", net_http.StatusEarlyHints)
	_register("net/http.StatusExpectationFailed", net_http.StatusExpectationFailed)
	_register("net/http.StatusFailedDependency", net_http.StatusFailedDependency)
	_register("net/http.StatusForbidden", net_http.StatusForbidden)
	_register("net/http.StatusFound", net_http.StatusFound)
	_register("net/http.StatusGatewayTimeout", net_http.StatusGatewayTimeout)
	_register("net/http.StatusGone", net_http.StatusGone)
	_register("net/http.StatusHTTPVersionNotSupported", net_http.StatusHTTPVersionNotSupported)
	_register("net/http.StatusIMUsed", net_http.StatusIMUsed)
	_register("net/http.StatusInsufficientStorage", net_http.StatusInsufficientStorage)
	_register("net/http.StatusInternalServerError", net_http.StatusInternalServerError)
	_register("net/http.StatusLengthRequired", net_http.StatusLengthRequired)
	_register("net/http.StatusLocked", net_http.StatusLocked)
	_register("net/http.StatusLoopDetected", net_http.StatusLoopDetected)
	_register("net/http.StatusMethodNotAllowed", net_http.StatusMethodNotAllowed)
	_register("net/http.StatusMisdirectedRequest", net_http.StatusMisdirectedRequest)
	_register("net/http.StatusMovedPermanently", net_http.StatusMovedPermanently)
	_register("net/http.StatusMultiStatus", net_http.StatusMultiStatus)
	_register("net/http.StatusMultipleChoices", net_http.StatusMultipleChoices)
	_register("net/http.StatusNetworkAuthenticationRequired", net_http.StatusNetworkAuthenticationRequired)
	_register("net/http.StatusNoContent", net_http.StatusNoContent)
	_register("net/http.StatusNonAuthoritativeInfo", net_http.StatusNonAuthoritativeInfo)
	_register("net/http.StatusNotAcceptable", net_http.StatusNotAcceptable)
	_register("net/http.StatusNotExtended", net_http.StatusNotExtended)
	_register("net/http.StatusNotFound", net_http.StatusNotFound)
	_register("net/http.StatusNotImplemented", net_http.StatusNotImplemented)
	_register("net/http.StatusNotModified", net_http.StatusNotModified)
	_register("net/http.StatusOK", net_http.StatusOK)
	_register("net/http.StatusPartialContent", net_http.StatusPartialContent)
	_register("net/http.StatusPaymentRequired", net_http.StatusPaymentRequired)
	_register("net/http.StatusPermanentRedirect", net_http.StatusPermanentRedirect)
	_register("net/http.StatusPreconditionFailed", net_http.StatusPreconditionFailed)
	_register("net/http.StatusPreconditionRequired", net_http.StatusPreconditionRequired)
	_register("net/http.StatusProcessing", net_http.StatusProcessing)
	_register("net/http.StatusProxyAuthRequired", net_http.StatusProxyAuthRequired)
	_register("net/http.StatusRequestEntityTooLarge", net_http.StatusRequestEntityTooLarge)
	_register("net/http.StatusRequestHeaderFieldsTooLarge", net_http.StatusRequestHeaderFieldsTooLarge)
	_register("net/http.StatusRequestTimeout", net_http.StatusRequestTimeout)
	_register("net/http.StatusRequestURITooLong", net_http.StatusRequestURITooLong)
	_register("net/http.StatusRequestedRangeNotSatisfiable", net_http.StatusRequestedRangeNotSatisfiable)
	_register("net/http.StatusResetContent", net_http.StatusResetContent)
	_register("net/http.StatusSeeOther", net_http.StatusSeeOther)
	_register("net/http.StatusServiceUnavailable", net_http.StatusServiceUnavailable)
	_register("net/http.StatusSwitchingProtocols", net_http.StatusSwitchingProtocols)
	_register("net/http.StatusTeapot", net_http.StatusTeapot)
	_register("net/http.StatusTemporaryRedirect", net_http.StatusTemporaryRedirect)
	_register("net/http.StatusText", net_http.StatusText)
	_register("net/http.StatusTooEarly", net_http.StatusTooEarly)
	_register("net/http.StatusTooManyRequests", net_http.StatusTooManyRequests)
	_register("net/http.StatusUnauthorized", net_http.StatusUnauthorized)
	_register("net/http.StatusUnavailableForLegalReasons", net_http.StatusUnavailableForLegalReasons)
	_register("net/http.StatusUnprocessableEntity", net_http.StatusUnprocessableEntity)
	_register("net/http.StatusUnsupportedMediaType", net_http.StatusUnsupportedMediaType)
	_register("net/http.StatusUpgradeRequired", net_http.StatusUpgradeRequired)
	_register("net/http.StatusUseProxy", net_http.StatusUseProxy)
	_register("net/http.StatusVariantAlsoNegotiates", net_http.StatusVariantAlsoNegotiates)
	_register("net/http.StripPrefix", net_http.StripPrefix)
	_register("net/http.TimeFormat", net_http.TimeFormat)
	_register("net/http.TimeoutHandler", net_http.TimeoutHandler)
	_register("net/http.TrailerPrefix", net_http.TrailerPrefix)
	_register("net/http.Transport", reflect.TypeOf((*net_http.Transport)(nil)).Elem())

	// package net/http/cgi
	////////////////////////////////////////
	_register("net/http/cgi.Handler", reflect.TypeOf((*net_http_cgi.Handler)(nil)).Elem())
	_register("net/http/cgi.Request", net_http_cgi.Request)
	_register("net/http/cgi.RequestFromMap", net_http_cgi.RequestFromMap)
	_register("net/http/cgi.Serve", net_http_cgi.Serve)

	// package net/http/cookiejar
	////////////////////////////////////////
	_register("net/http/cookiejar.Jar", reflect.TypeOf((*net_http_cookiejar.Jar)(nil)).Elem())
	_register("net/http/cookiejar.New", net_http_cookiejar.New)
	_register("net/http/cookiejar.Options", reflect.TypeOf((*net_http_cookiejar.Options)(nil)).Elem())
	_register("net/http/cookiejar.PublicSuffixList", reflect.TypeOf((*net_http_cookiejar.PublicSuffixList)(nil)).Elem())

	// package net/http/fcgi
	////////////////////////////////////////
	_register("net/http/fcgi.ErrConnClosed", net_http_fcgi.ErrConnClosed)
	_register("net/http/fcgi.ErrRequestAborted", net_http_fcgi.ErrRequestAborted)
	_register("net/http/fcgi.ProcessEnv", net_http_fcgi.ProcessEnv)
	_register("net/http/fcgi.Serve", net_http_fcgi.Serve)

	// package net/http/httptest
	////////////////////////////////////////
	_register("net/http/httptest.DefaultRemoteAddr", net_http_httptest.DefaultRemoteAddr)
	_register("net/http/httptest.NewRecorder", net_http_httptest.NewRecorder)
	_register("net/http/httptest.NewRequest", net_http_httptest.NewRequest)
	_register("net/http/httptest.NewServer", net_http_httptest.NewServer)
	_register("net/http/httptest.NewTLSServer", net_http_httptest.NewTLSServer)
	_register("net/http/httptest.NewUnstartedServer", net_http_httptest.NewUnstartedServer)
	_register("net/http/httptest.ResponseRecorder", reflect.TypeOf((*net_http_httptest.ResponseRecorder)(nil)).Elem())
	_register("net/http/httptest.Server", reflect.TypeOf((*net_http_httptest.Server)(nil)).Elem())

	// package net/http/httptrace
	////////////////////////////////////////
	_register("net/http/httptrace.ClientTrace", reflect.TypeOf((*net_http_httptrace.ClientTrace)(nil)).Elem())
	_register("net/http/httptrace.ContextClientTrace", net_http_httptrace.ContextClientTrace)
	_register("net/http/httptrace.DNSDoneInfo", reflect.TypeOf((*net_http_httptrace.DNSDoneInfo)(nil)).Elem())
	_register("net/http/httptrace.DNSStartInfo", reflect.TypeOf((*net_http_httptrace.DNSStartInfo)(nil)).Elem())
	_register("net/http/httptrace.GotConnInfo", reflect.TypeOf((*net_http_httptrace.GotConnInfo)(nil)).Elem())
	_register("net/http/httptrace.WithClientTrace", net_http_httptrace.WithClientTrace)
	_register("net/http/httptrace.WroteRequestInfo", reflect.TypeOf((*net_http_httptrace.WroteRequestInfo)(nil)).Elem())

	// package net/http/pprof
	////////////////////////////////////////
	_register("net/http/pprof.Cmdline", net_http_pprof.Cmdline)
	_register("net/http/pprof.Handler", net_http_pprof.Handler)
	_register("net/http/pprof.Index", net_http_pprof.Index)
	_register("net/http/pprof.Profile", net_http_pprof.Profile)
	_register("net/http/pprof.Symbol", net_http_pprof.Symbol)
	_register("net/http/pprof.Trace", net_http_pprof.Trace)

	// package net/mail
	////////////////////////////////////////
	_register("net/mail.Address", reflect.TypeOf((*net_mail.Address)(nil)).Elem())
	_register("net/mail.AddressParser", reflect.TypeOf((*net_mail.AddressParser)(nil)).Elem())
	_register("net/mail.ErrHeaderNotPresent", net_mail.ErrHeaderNotPresent)
	_register("net/mail.Header", reflect.TypeOf((*net_mail.Header)(nil)).Elem())
	_register("net/mail.Message", reflect.TypeOf((*net_mail.Message)(nil)).Elem())
	_register("net/mail.ParseAddress", net_mail.ParseAddress)
	_register("net/mail.ParseAddressList", net_mail.ParseAddressList)
	_register("net/mail.ParseDate", net_mail.ParseDate)
	_register("net/mail.ReadMessage", net_mail.ReadMessage)

	// package net/netip
	////////////////////////////////////////
	_register("net/netip.Addr", reflect.TypeOf((*net_netip.Addr)(nil)).Elem())
	_register("net/netip.AddrFrom16", net_netip.AddrFrom16)
	_register("net/netip.AddrFrom4", net_netip.AddrFrom4)
	_register("net/netip.AddrFromSlice", net_netip.AddrFromSlice)
	_register("net/netip.AddrPort", reflect.TypeOf((*net_netip.AddrPort)(nil)).Elem())
	_register("net/netip.AddrPortFrom", net_netip.AddrPortFrom)
	_register("net/netip.IPv4Unspecified", net_netip.IPv4Unspecified)
	_register("net/netip.IPv6LinkLocalAllNodes", net_netip.IPv6LinkLocalAllNodes)
	_register("net/netip.IPv6Unspecified", net_netip.IPv6Unspecified)
	_register("net/netip.MustParseAddr", net_netip.MustParseAddr)
	_register("net/netip.MustParseAddrPort", net_netip.MustParseAddrPort)
	_register("net/netip.MustParsePrefix", net_netip.MustParsePrefix)
	_register("net/netip.ParseAddr", net_netip.ParseAddr)
	_register("net/netip.ParseAddrPort", net_netip.ParseAddrPort)
	_register("net/netip.ParsePrefix", net_netip.ParsePrefix)
	_register("net/netip.Prefix", reflect.TypeOf((*net_netip.Prefix)(nil)).Elem())
	_register("net/netip.PrefixFrom", net_netip.PrefixFrom)

	// package net/rpc
	////////////////////////////////////////
	_register("net/rpc.Accept", net_rpc.Accept)
	_register("net/rpc.Call", reflect.TypeOf((*net_rpc.Call)(nil)).Elem())
	_register("net/rpc.Client", reflect.TypeOf((*net_rpc.Client)(nil)).Elem())
	_register("net/rpc.ClientCodec", reflect.TypeOf((*net_rpc.ClientCodec)(nil)).Elem())
	_register("net/rpc.DefaultDebugPath", net_rpc.DefaultDebugPath)
	_register("net/rpc.DefaultRPCPath", net_rpc.DefaultRPCPath)
	_register("net/rpc.DefaultServer", net_rpc.DefaultServer)
	_register("net/rpc.Dial", net_rpc.Dial)
	_register("net/rpc.DialHTTP", net_rpc.DialHTTP)
	_register("net/rpc.DialHTTPPath", net_rpc.DialHTTPPath)
	_register("net/rpc.ErrShutdown", net_rpc.ErrShutdown)
	_register("net/rpc.HandleHTTP", net_rpc.HandleHTTP)
	_register("net/rpc.NewClient", net_rpc.NewClient)
	_register("net/rpc.NewClientWithCodec", net_rpc.NewClientWithCodec)
	_register("net/rpc.NewServer", net_rpc.NewServer)
	_register("net/rpc.Register", net_rpc.Register)
	_register("net/rpc.RegisterName", net_rpc.RegisterName)
	_register("net/rpc.Request", reflect.TypeOf((*net_rpc.Request)(nil)).Elem())
	_register("net/rpc.Response", reflect.TypeOf((*net_rpc.Response)(nil)).Elem())
	_register("net/rpc.ServeCodec", net_rpc.ServeCodec)
	_register("net/rpc.ServeConn", net_rpc.ServeConn)
	_register("net/rpc.ServeRequest", net_rpc.ServeRequest)
	_register("net/rpc.Server", reflect.TypeOf((*net_rpc.Server)(nil)).Elem())
	_register("net/rpc.ServerCodec", reflect.TypeOf((*net_rpc.ServerCodec)(nil)).Elem())
	_register("net/rpc.ServerError", reflect.TypeOf((*net_rpc.ServerError)(nil)).Elem())

	// package net/rpc/jsonrpc
	////////////////////////////////////////
	_register("net/rpc/jsonrpc.Dial", net_rpc_jsonrpc.Dial)
	_register("net/rpc/jsonrpc.NewClient", net_rpc_jsonrpc.NewClient)
	_register("net/rpc/jsonrpc.NewClientCodec", net_rpc_jsonrpc.NewClientCodec)
	_register("net/rpc/jsonrpc.NewServerCodec", net_rpc_jsonrpc.NewServerCodec)
	_register("net/rpc/jsonrpc.ServeConn", net_rpc_jsonrpc.ServeConn)

	// package net/smtp
	////////////////////////////////////////
	_register("net/smtp.Auth", reflect.TypeOf((*net_smtp.Auth)(nil)).Elem())
	_register("net/smtp.CRAMMD5Auth", net_smtp.CRAMMD5Auth)
	_register("net/smtp.Client", reflect.TypeOf((*net_smtp.Client)(nil)).Elem())
	_register("net/smtp.Dial", net_smtp.Dial)
	_register("net/smtp.NewClient", net_smtp.NewClient)
	_register("net/smtp.PlainAuth", net_smtp.PlainAuth)
	_register("net/smtp.SendMail", net_smtp.SendMail)
	_register("net/smtp.ServerInfo", reflect.TypeOf((*net_smtp.ServerInfo)(nil)).Elem())

	// package net/textproto
	////////////////////////////////////////
	_register("net/textproto.CanonicalMIMEHeaderKey", net_textproto.CanonicalMIMEHeaderKey)
	_register("net/textproto.Conn", reflect.TypeOf((*net_textproto.Conn)(nil)).Elem())
	_register("net/textproto.Dial", net_textproto.Dial)
	_register("net/textproto.Error", reflect.TypeOf((*net_textproto.Error)(nil)).Elem())
	_register("net/textproto.MIMEHeader", reflect.TypeOf((*net_textproto.MIMEHeader)(nil)).Elem())
	_register("net/textproto.NewConn", net_textproto.NewConn)
	_register("net/textproto.NewReader", net_textproto.NewReader)
	_register("net/textproto.NewWriter", net_textproto.NewWriter)
	_register("net/textproto.Pipeline", reflect.TypeOf((*net_textproto.Pipeline)(nil)).Elem())
	_register("net/textproto.ProtocolError", reflect.TypeOf((*net_textproto.ProtocolError)(nil)).Elem())
	_register("net/textproto.Reader", reflect.TypeOf((*net_textproto.Reader)(nil)).Elem())
	_register("net/textproto.TrimBytes", net_textproto.TrimBytes)
	_register("net/textproto.TrimString", net_textproto.TrimString)
	_register("net/textproto.Writer", reflect.TypeOf((*net_textproto.Writer)(nil)).Elem())

	// package net/url
	////////////////////////////////////////
	_register("net/url.Error", reflect.TypeOf((*net_url.Error)(nil)).Elem())
	_register("net/url.EscapeError", reflect.TypeOf((*net_url.EscapeError)(nil)).Elem())
	_register("net/url.InvalidHostError", reflect.TypeOf((*net_url.InvalidHostError)(nil)).Elem())
	_register("net/url.JoinPath", net_url.JoinPath)
	_register("net/url.Parse", net_url.Parse)
	_register("net/url.ParseQuery", net_url.ParseQuery)
	_register("net/url.ParseRequestURI", net_url.ParseRequestURI)
	_register("net/url.PathEscape", net_url.PathEscape)
	_register("net/url.PathUnescape", net_url.PathUnescape)
	_register("net/url.QueryEscape", net_url.QueryEscape)
	_register("net/url.QueryUnescape", net_url.QueryUnescape)
	_register("net/url.URL", reflect.TypeOf((*net_url.URL)(nil)).Elem())
	_register("net/url.User", net_url.User)
	_register("net/url.UserPassword", net_url.UserPassword)
	_register("net/url.Userinfo", reflect.TypeOf((*net_url.Userinfo)(nil)).Elem())
	_register("net/url.Values", reflect.TypeOf((*net_url.Values)(nil)).Elem())

	// package os
	////////////////////////////////////////
	_register("os.Args", os.Args)
	_register("os.Chdir", os.Chdir)
	_register("os.Chmod", os.Chmod)
	_register("os.Chown", os.Chown)
	_register("os.Chtimes", os.Chtimes)
	_register("os.Clearenv", os.Clearenv)
	_register("os.Create", os.Create)
	_register("os.CreateTemp", os.CreateTemp)
	_register("os.DevNull", os.DevNull)
	_register("os.DirEntry", reflect.TypeOf((*os.DirEntry)(nil)).Elem())
	_register("os.DirFS", os.DirFS)
	_register("os.Environ", os.Environ)
	_register("os.ErrClosed", os.ErrClosed)
	_register("os.ErrDeadlineExceeded", os.ErrDeadlineExceeded)
	_register("os.ErrExist", os.ErrExist)
	_register("os.ErrInvalid", os.ErrInvalid)
	_register("os.ErrNoDeadline", os.ErrNoDeadline)
	_register("os.ErrNotExist", os.ErrNotExist)
	_register("os.ErrPermission", os.ErrPermission)
	_register("os.ErrProcessDone", os.ErrProcessDone)
	_register("os.Executable", os.Executable)
	_register("os.Exit", os.Exit)
	_register("os.Expand", os.Expand)
	_register("os.ExpandEnv", os.ExpandEnv)
	_register("os.File", reflect.TypeOf((*os.File)(nil)).Elem())
	_register("os.FileInfo", reflect.TypeOf((*os.FileInfo)(nil)).Elem())
	_register("os.FileMode", reflect.TypeOf((*os.FileMode)(nil)).Elem())
	_register("os.FindProcess", os.FindProcess)
	_register("os.Getegid", os.Getegid)
	_register("os.Getenv", os.Getenv)
	_register("os.Geteuid", os.Geteuid)
	_register("os.Getgid", os.Getgid)
	_register("os.Getgroups", os.Getgroups)
	_register("os.Getpagesize", os.Getpagesize)
	_register("os.Getpid", os.Getpid)
	_register("os.Getppid", os.Getppid)
	_register("os.Getuid", os.Getuid)
	_register("os.Getwd", os.Getwd)
	_register("os.Hostname", os.Hostname)
	_register("os.Interrupt", os.Interrupt)
	_register("os.IsExist", os.IsExist)
	_register("os.IsNotExist", os.IsNotExist)
	_register("os.IsPathSeparator", os.IsPathSeparator)
	_register("os.IsPermission", os.IsPermission)
	_register("os.IsTimeout", os.IsTimeout)
	_register("os.Kill", os.Kill)
	_register("os.Lchown", os.Lchown)
	_register("os.Link", os.Link)
	_register("os.LinkError", reflect.TypeOf((*os.LinkError)(nil)).Elem())
	_register("os.LookupEnv", os.LookupEnv)
	_register("os.Lstat", os.Lstat)
	_register("os.Mkdir", os.Mkdir)
	_register("os.MkdirAll", os.MkdirAll)
	_register("os.MkdirTemp", os.MkdirTemp)
	_register("os.ModeAppend", os.ModeAppend)
	_register("os.ModeCharDevice", os.ModeCharDevice)
	_register("os.ModeDevice", os.ModeDevice)
	_register("os.ModeDir", os.ModeDir)
	_register("os.ModeExclusive", os.ModeExclusive)
	_register("os.ModeIrregular", os.ModeIrregular)
	_register("os.ModeNamedPipe", os.ModeNamedPipe)
	_register("os.ModePerm", os.ModePerm)
	_register("os.ModeSetgid", os.ModeSetgid)
	_register("os.ModeSetuid", os.ModeSetuid)
	_register("os.ModeSocket", os.ModeSocket)
	_register("os.ModeSticky", os.ModeSticky)
	_register("os.ModeSymlink", os.ModeSymlink)
	_register("os.ModeTemporary", os.ModeTemporary)
	_register("os.ModeType", os.ModeType)
	_register("os.NewFile", os.NewFile)
	_register("os.NewSyscallError", os.NewSyscallError)
	_register("os.O_APPEND", os.O_APPEND)
	_register("os.O_CREATE", os.O_CREATE)
	_register("os.O_EXCL", os.O_EXCL)
	_register("os.O_RDONLY", os.O_RDONLY)
	_register("os.O_RDWR", os.O_RDWR)
	_register("os.O_SYNC", os.O_SYNC)
	_register("os.O_TRUNC", os.O_TRUNC)
	_register("os.O_WRONLY", os.O_WRONLY)
	_register("os.Open", os.Open)
	_register("os.OpenFile", os.OpenFile)
	_register("os.PathError", reflect.TypeOf((*os.PathError)(nil)).Elem())
	_register("os.PathListSeparator", os.PathListSeparator)
	_register("os.PathSeparator", os.PathSeparator)
	_register("os.Pipe", os.Pipe)
	_register("os.ProcAttr", reflect.TypeOf((*os.ProcAttr)(nil)).Elem())
	_register("os.Process", reflect.TypeOf((*os.Process)(nil)).Elem())
	_register("os.ProcessState", reflect.TypeOf((*os.ProcessState)(nil)).Elem())
	_register("os.ReadDir", os.ReadDir)
	_register("os.ReadFile", os.ReadFile)
	_register("os.Readlink", os.Readlink)
	_register("os.Remove", os.Remove)
	_register("os.RemoveAll", os.RemoveAll)
	_register("os.Rename", os.Rename)
	_register("os.SEEK_CUR", os.SEEK_CUR)
	_register("os.SEEK_END", os.SEEK_END)
	_register("os.SEEK_SET", os.SEEK_SET)
	_register("os.SameFile", os.SameFile)
	_register("os.Setenv", os.Setenv)
	_register("os.Signal", reflect.TypeOf((*os.Signal)(nil)).Elem())
	_register("os.StartProcess", os.StartProcess)
	_register("os.Stat", os.Stat)
	_register("os.Stderr", os.Stderr)
	_register("os.Stdin", os.Stdin)
	_register("os.Stdout", os.Stdout)
	_register("os.Symlink", os.Symlink)
	_register("os.SyscallError", reflect.TypeOf((*os.SyscallError)(nil)).Elem())
	_register("os.TempDir", os.TempDir)
	_register("os.Truncate", os.Truncate)
	_register("os.Unsetenv", os.Unsetenv)
	_register("os.UserCacheDir", os.UserCacheDir)
	_register("os.UserConfigDir", os.UserConfigDir)
	_register("os.UserHomeDir", os.UserHomeDir)
	_register("os.WriteFile", os.WriteFile)

	// package os/exec
	////////////////////////////////////////
	_register("os/exec.Cmd", reflect.TypeOf((*os_exec.Cmd)(nil)).Elem())
	_register("os/exec.Command", os_exec.Command)
	_register("os/exec.CommandContext", os_exec.CommandContext)
	_register("os/exec.ErrDot", os_exec.ErrDot)
	_register("os/exec.ErrNotFound", os_exec.ErrNotFound)
	_register("os/exec.Error", reflect.TypeOf((*os_exec.Error)(nil)).Elem())
	_register("os/exec.ExitError", reflect.TypeOf((*os_exec.ExitError)(nil)).Elem())
	_register("os/exec.LookPath", os_exec.LookPath)

	// package os/signal
	////////////////////////////////////////
	_register("os/signal.Ignore", os_signal.Ignore)
	_register("os/signal.Ignored", os_signal.Ignored)
	_register("os/signal.Notify", os_signal.Notify)
	_register("os/signal.NotifyContext", os_signal.NotifyContext)
	_register("os/signal.Reset", os_signal.Reset)
	_register("os/signal.Stop", os_signal.Stop)

	// package os/user
	////////////////////////////////////////
	_register("os/user.Current", os_user.Current)
	_register("os/user.Group", reflect.TypeOf((*os_user.Group)(nil)).Elem())
	_register("os/user.Lookup", os_user.Lookup)
	_register("os/user.LookupGroup", os_user.LookupGroup)
	_register("os/user.LookupGroupId", os_user.LookupGroupId)
	_register("os/user.LookupId", os_user.LookupId)
	_register("os/user.UnknownGroupError", reflect.TypeOf((*os_user.UnknownGroupError)(nil)).Elem())
	_register("os/user.UnknownGroupIdError", reflect.TypeOf((*os_user.UnknownGroupIdError)(nil)).Elem())
	_register("os/user.UnknownUserError", reflect.TypeOf((*os_user.UnknownUserError)(nil)).Elem())
	_register("os/user.UnknownUserIdError", reflect.TypeOf((*os_user.UnknownUserIdError)(nil)).Elem())
	_register("os/user.User", reflect.TypeOf((*os_user.User)(nil)).Elem())

	// package path
	////////////////////////////////////////
	_register("path.Base", path.Base)
	_register("path.Clean", path.Clean)
	_register("path.Dir", path.Dir)
	_register("path.ErrBadPattern", path.ErrBadPattern)
	_register("path.Ext", path.Ext)
	_register("path.IsAbs", path.IsAbs)
	_register("path.Join", path.Join)
	_register("path.Match", path.Match)
	_register("path.Split", path.Split)

	// package path/filepath
	////////////////////////////////////////
	_register("path/filepath.Abs", path_filepath.Abs)
	_register("path/filepath.Base", path_filepath.Base)
	_register("path/filepath.Clean", path_filepath.Clean)
	_register("path/filepath.Dir", path_filepath.Dir)
	_register("path/filepath.ErrBadPattern", path_filepath.ErrBadPattern)
	_register("path/filepath.EvalSymlinks", path_filepath.EvalSymlinks)
	_register("path/filepath.Ext", path_filepath.Ext)
	_register("path/filepath.FromSlash", path_filepath.FromSlash)
	_register("path/filepath.Glob", path_filepath.Glob)
	_register("path/filepath.HasPrefix", path_filepath.HasPrefix)
	_register("path/filepath.IsAbs", path_filepath.IsAbs)
	_register("path/filepath.Join", path_filepath.Join)
	_register("path/filepath.ListSeparator", path_filepath.ListSeparator)
	_register("path/filepath.Match", path_filepath.Match)
	_register("path/filepath.Rel", path_filepath.Rel)
	_register("path/filepath.Separator", path_filepath.Separator)
	_register("path/filepath.SkipDir", path_filepath.SkipDir)
	_register("path/filepath.Split", path_filepath.Split)
	_register("path/filepath.SplitList", path_filepath.SplitList)
	_register("path/filepath.ToSlash", path_filepath.ToSlash)
	_register("path/filepath.VolumeName", path_filepath.VolumeName)
	_register("path/filepath.Walk", path_filepath.Walk)
	_register("path/filepath.WalkDir", path_filepath.WalkDir)
	_register("path/filepath.WalkFunc", reflect.TypeOf((*path_filepath.WalkFunc)(nil)).Elem())

	// package plugin
	////////////////////////////////////////
	_register("plugin.Open", plugin.Open)
	_register("plugin.Plugin", reflect.TypeOf((*plugin.Plugin)(nil)).Elem())
	_register("plugin.Symbol", reflect.TypeOf((*plugin.Symbol)(nil)).Elem())

	// package reflect
	////////////////////////////////////////
	_register("reflect.Append", reflect.Append)
	_register("reflect.AppendSlice", reflect.AppendSlice)
	_register("reflect.Array", reflect.Array)
	_register("reflect.ArrayOf", reflect.ArrayOf)
	_register("reflect.Bool", reflect.Bool)
	_register("reflect.BothDir", reflect.BothDir)
	_register("reflect.Chan", reflect.Chan)
	_register("reflect.ChanDir", reflect.TypeOf((*reflect.ChanDir)(nil)).Elem())
	_register("reflect.ChanOf", reflect.ChanOf)
	_register("reflect.Complex128", reflect.Complex128)
	_register("reflect.Complex64", reflect.Complex64)
	_register("reflect.Copy", reflect.Copy)
	_register("reflect.DeepEqual", reflect.DeepEqual)
	_register("reflect.Float32", reflect.Float32)
	_register("reflect.Float64", reflect.Float64)
	_register("reflect.Func", reflect.Func)
	_register("reflect.FuncOf", reflect.FuncOf)
	_register("reflect.Indirect", reflect.Indirect)
	_register("reflect.Int", reflect.Int)
	_register("reflect.Int16", reflect.Int16)
	_register("reflect.Int32", reflect.Int32)
	_register("reflect.Int64", reflect.Int64)
	_register("reflect.Int8", reflect.Int8)
	_register("reflect.Interface", reflect.Interface)
	_register("reflect.Invalid", reflect.Invalid)
	_register("reflect.Kind", reflect.TypeOf((*reflect.Kind)(nil)).Elem())
	_register("reflect.MakeChan", reflect.MakeChan)
	_register("reflect.MakeFunc", reflect.MakeFunc)
	_register("reflect.MakeMap", reflect.MakeMap)
	_register("reflect.MakeMapWithSize", reflect.MakeMapWithSize)
	_register("reflect.MakeSlice", reflect.MakeSlice)
	_register("reflect.Map", reflect.Map)
	_register("reflect.MapIter", reflect.TypeOf((*reflect.MapIter)(nil)).Elem())
	_register("reflect.MapOf", reflect.MapOf)
	_register("reflect.Method", reflect.TypeOf((*reflect.Method)(nil)).Elem())
	_register("reflect.New", reflect.New)
	_register("reflect.NewAt", reflect.NewAt)
	_register("reflect.Pointer", reflect.Pointer)
	_register("reflect.PointerTo", reflect.PointerTo)
	_register("reflect.Ptr", reflect.Ptr)
	_register("reflect.PtrTo", reflect.PtrTo)
	_register("reflect.RecvDir", reflect.RecvDir)
	_register("reflect.Select", reflect.Select)
	_register("reflect.SelectCase", reflect.TypeOf((*reflect.SelectCase)(nil)).Elem())
	_register("reflect.SelectDefault", reflect.SelectDefault)
	_register("reflect.SelectDir", reflect.TypeOf((*reflect.SelectDir)(nil)).Elem())
	_register("reflect.SelectRecv", reflect.SelectRecv)
	_register("reflect.SelectSend", reflect.SelectSend)
	_register("reflect.SendDir", reflect.SendDir)
	_register("reflect.Slice", reflect.Slice)
	_register("reflect.SliceHeader", reflect.TypeOf((*reflect.SliceHeader)(nil)).Elem())
	_register("reflect.SliceOf", reflect.SliceOf)
	_register("reflect.String", reflect.String)
	_register("reflect.StringHeader", reflect.TypeOf((*reflect.StringHeader)(nil)).Elem())
	_register("reflect.Struct", reflect.Struct)
	_register("reflect.StructField", reflect.TypeOf((*reflect.StructField)(nil)).Elem())
	_register("reflect.StructOf", reflect.StructOf)
	_register("reflect.StructTag", reflect.TypeOf((*reflect.StructTag)(nil)).Elem())
	_register("reflect.Swapper", reflect.Swapper)
	_register("reflect.Type", reflect.TypeOf((*reflect.Type)(nil)).Elem())
	_register("reflect.TypeOf", reflect.TypeOf)
	_register("reflect.Uint", reflect.Uint)
	_register("reflect.Uint16", reflect.Uint16)
	_register("reflect.Uint32", reflect.Uint32)
	_register("reflect.Uint64", reflect.Uint64)
	_register("reflect.Uint8", reflect.Uint8)
	_register("reflect.Uintptr", reflect.Uintptr)
	_register("reflect.UnsafePointer", reflect.UnsafePointer)
	_register("reflect.Value", reflect.TypeOf((*reflect.Value)(nil)).Elem())
	_register("reflect.ValueError", reflect.TypeOf((*reflect.ValueError)(nil)).Elem())
	_register("reflect.ValueOf", reflect.ValueOf)
	_register("reflect.VisibleFields", reflect.VisibleFields)
	_register("reflect.Zero", reflect.Zero)

	// package regexp
	////////////////////////////////////////
	_register("regexp.Compile", regexp.Compile)
	_register("regexp.CompilePOSIX", regexp.CompilePOSIX)
	_register("regexp.Match", regexp.Match)
	_register("regexp.MatchReader", regexp.MatchReader)
	_register("regexp.MatchString", regexp.MatchString)
	_register("regexp.MustCompile", regexp.MustCompile)
	_register("regexp.MustCompilePOSIX", regexp.MustCompilePOSIX)
	_register("regexp.QuoteMeta", regexp.QuoteMeta)
	_register("regexp.Regexp", reflect.TypeOf((*regexp.Regexp)(nil)).Elem())

	// package regexp/syntax
	////////////////////////////////////////
	_register("regexp/syntax.ClassNL", regexp_syntax.ClassNL)
	_register("regexp/syntax.Compile", regexp_syntax.Compile)
	_register("regexp/syntax.DotNL", regexp_syntax.DotNL)
	_register("regexp/syntax.EmptyBeginLine", regexp_syntax.EmptyBeginLine)
	_register("regexp/syntax.EmptyBeginText", regexp_syntax.EmptyBeginText)
	_register("regexp/syntax.EmptyEndLine", regexp_syntax.EmptyEndLine)
	_register("regexp/syntax.EmptyEndText", regexp_syntax.EmptyEndText)
	_register("regexp/syntax.EmptyNoWordBoundary", regexp_syntax.EmptyNoWordBoundary)
	_register("regexp/syntax.EmptyOp", reflect.TypeOf((*regexp_syntax.EmptyOp)(nil)).Elem())
	_register("regexp/syntax.EmptyOpContext", regexp_syntax.EmptyOpContext)
	_register("regexp/syntax.EmptyWordBoundary", regexp_syntax.EmptyWordBoundary)
	_register("regexp/syntax.ErrInternalError", regexp_syntax.ErrInternalError)
	_register("regexp/syntax.ErrInvalidCharClass", regexp_syntax.ErrInvalidCharClass)
	_register("regexp/syntax.ErrInvalidCharRange", regexp_syntax.ErrInvalidCharRange)
	_register("regexp/syntax.ErrInvalidEscape", regexp_syntax.ErrInvalidEscape)
	_register("regexp/syntax.ErrInvalidNamedCapture", regexp_syntax.ErrInvalidNamedCapture)
	_register("regexp/syntax.ErrInvalidPerlOp", regexp_syntax.ErrInvalidPerlOp)
	_register("regexp/syntax.ErrInvalidRepeatOp", regexp_syntax.ErrInvalidRepeatOp)
	_register("regexp/syntax.ErrInvalidRepeatSize", regexp_syntax.ErrInvalidRepeatSize)
	_register("regexp/syntax.ErrInvalidUTF8", regexp_syntax.ErrInvalidUTF8)
	_register("regexp/syntax.ErrMissingBracket", regexp_syntax.ErrMissingBracket)
	_register("regexp/syntax.ErrMissingParen", regexp_syntax.ErrMissingParen)
	_register("regexp/syntax.ErrMissingRepeatArgument", regexp_syntax.ErrMissingRepeatArgument)
	_register("regexp/syntax.ErrNestingDepth", regexp_syntax.ErrNestingDepth)
	_register("regexp/syntax.ErrTrailingBackslash", regexp_syntax.ErrTrailingBackslash)
	_register("regexp/syntax.ErrUnexpectedParen", regexp_syntax.ErrUnexpectedParen)
	_register("regexp/syntax.Error", reflect.TypeOf((*regexp_syntax.Error)(nil)).Elem())
	_register("regexp/syntax.ErrorCode", reflect.TypeOf((*regexp_syntax.ErrorCode)(nil)).Elem())
	_register("regexp/syntax.Flags", reflect.TypeOf((*regexp_syntax.Flags)(nil)).Elem())
	_register("regexp/syntax.FoldCase", regexp_syntax.FoldCase)
	_register("regexp/syntax.Inst", reflect.TypeOf((*regexp_syntax.Inst)(nil)).Elem())
	_register("regexp/syntax.InstAlt", regexp_syntax.InstAlt)
	_register("regexp/syntax.InstAltMatch", regexp_syntax.InstAltMatch)
	_register("regexp/syntax.InstCapture", regexp_syntax.InstCapture)
	_register("regexp/syntax.InstEmptyWidth", regexp_syntax.InstEmptyWidth)
	_register("regexp/syntax.InstFail", regexp_syntax.InstFail)
	_register("regexp/syntax.InstMatch", regexp_syntax.InstMatch)
	_register("regexp/syntax.InstNop", regexp_syntax.InstNop)
	_register("regexp/syntax.InstOp", reflect.TypeOf((*regexp_syntax.InstOp)(nil)).Elem())
	_register("regexp/syntax.InstRune", regexp_syntax.InstRune)
	_register("regexp/syntax.InstRune1", regexp_syntax.InstRune1)
	_register("regexp/syntax.InstRuneAny", regexp_syntax.InstRuneAny)
	_register("regexp/syntax.InstRuneAnyNotNL", regexp_syntax.InstRuneAnyNotNL)
	_register("regexp/syntax.IsWordChar", regexp_syntax.IsWordChar)
	_register("regexp/syntax.Literal", regexp_syntax.Literal)
	_register("regexp/syntax.MatchNL", regexp_syntax.MatchNL)
	_register("regexp/syntax.NonGreedy", regexp_syntax.NonGreedy)
	_register("regexp/syntax.OneLine", regexp_syntax.OneLine)
	_register("regexp/syntax.Op", reflect.TypeOf((*regexp_syntax.Op)(nil)).Elem())
	_register("regexp/syntax.OpAlternate", regexp_syntax.OpAlternate)
	_register("regexp/syntax.OpAnyChar", regexp_syntax.OpAnyChar)
	_register("regexp/syntax.OpAnyCharNotNL", regexp_syntax.OpAnyCharNotNL)
	_register("regexp/syntax.OpBeginLine", regexp_syntax.OpBeginLine)
	_register("regexp/syntax.OpBeginText", regexp_syntax.OpBeginText)
	_register("regexp/syntax.OpCapture", regexp_syntax.OpCapture)
	_register("regexp/syntax.OpCharClass", regexp_syntax.OpCharClass)
	_register("regexp/syntax.OpConcat", regexp_syntax.OpConcat)
	_register("regexp/syntax.OpEmptyMatch", regexp_syntax.OpEmptyMatch)
	_register("regexp/syntax.OpEndLine", regexp_syntax.OpEndLine)
	_register("regexp/syntax.OpEndText", regexp_syntax.OpEndText)
	_register("regexp/syntax.OpLiteral", regexp_syntax.OpLiteral)
	_register("regexp/syntax.OpNoMatch", regexp_syntax.OpNoMatch)
	_register("regexp/syntax.OpNoWordBoundary", regexp_syntax.OpNoWordBoundary)
	_register("regexp/syntax.OpPlus", regexp_syntax.OpPlus)
	_register("regexp/syntax.OpQuest", regexp_syntax.OpQuest)
	_register("regexp/syntax.OpRepeat", regexp_syntax.OpRepeat)
	_register("regexp/syntax.OpStar", regexp_syntax.OpStar)
	_register("regexp/syntax.OpWordBoundary", regexp_syntax.OpWordBoundary)
	_register("regexp/syntax.POSIX", regexp_syntax.POSIX)
	_register("regexp/syntax.Parse", regexp_syntax.Parse)
	_register("regexp/syntax.Perl", regexp_syntax.Perl)
	_register("regexp/syntax.PerlX", regexp_syntax.PerlX)
	_register("regexp/syntax.Prog", reflect.TypeOf((*regexp_syntax.Prog)(nil)).Elem())
	_register("regexp/syntax.Regexp", reflect.TypeOf((*regexp_syntax.Regexp)(nil)).Elem())
	_register("regexp/syntax.Simple", regexp_syntax.Simple)
	_register("regexp/syntax.UnicodeGroups", regexp_syntax.UnicodeGroups)
	_register("regexp/syntax.WasDollar", regexp_syntax.WasDollar)

	// package runtime
	////////////////////////////////////////
	_register("runtime.BlockProfile", runtime.BlockProfile)
	_register("runtime.BlockProfileRecord", reflect.TypeOf((*runtime.BlockProfileRecord)(nil)).Elem())
	_register("runtime.Breakpoint", runtime.Breakpoint)
	_register("runtime.CPUProfile", runtime.CPUProfile)
	_register("runtime.Caller", runtime.Caller)
	_register("runtime.Callers", runtime.Callers)
	_register("runtime.CallersFrames", runtime.CallersFrames)
	_register("runtime.Compiler", runtime.Compiler)
	_register("runtime.Error", reflect.TypeOf((*runtime.Error)(nil)).Elem())
	_register("runtime.Frame", reflect.TypeOf((*runtime.Frame)(nil)).Elem())
	_register("runtime.Frames", reflect.TypeOf((*runtime.Frames)(nil)).Elem())
	_register("runtime.Func", reflect.TypeOf((*runtime.Func)(nil)).Elem())
	_register("runtime.FuncForPC", runtime.FuncForPC)
	_register("runtime.GC", runtime.GC)
	_register("runtime.GOARCH", runtime.GOARCH)
	_register("runtime.GOMAXPROCS", runtime.GOMAXPROCS)
	_register("runtime.GOOS", runtime.GOOS)
	_register("runtime.GOROOT", runtime.GOROOT)
	_register("runtime.Goexit", runtime.Goexit)
	_register("runtime.GoroutineProfile", runtime.GoroutineProfile)
	_register("runtime.Gosched", runtime.Gosched)
	_register("runtime.KeepAlive", runtime.KeepAlive)
	_register("runtime.LockOSThread", runtime.LockOSThread)
	_register("runtime.MemProfile", runtime.MemProfile)
	_register("runtime.MemProfileRate", runtime.MemProfileRate)
	_register("runtime.MemProfileRecord", reflect.TypeOf((*runtime.MemProfileRecord)(nil)).Elem())
	_register("runtime.MemStats", reflect.TypeOf((*runtime.MemStats)(nil)).Elem())
	_register("runtime.MutexProfile", runtime.MutexProfile)
	_register("runtime.NumCPU", runtime.NumCPU)
	_register("runtime.NumCgoCall", runtime.NumCgoCall)
	_register("runtime.NumGoroutine", runtime.NumGoroutine)
	_register("runtime.ReadMemStats", runtime.ReadMemStats)
	_register("runtime.ReadTrace", runtime.ReadTrace)
	_register("runtime.SetBlockProfileRate", runtime.SetBlockProfileRate)
	_register("runtime.SetCPUProfileRate", runtime.SetCPUProfileRate)
	_register("runtime.SetCgoTraceback", runtime.SetCgoTraceback)
	_register("runtime.SetFinalizer", runtime.SetFinalizer)
	_register("runtime.SetMutexProfileFraction", runtime.SetMutexProfileFraction)
	_register("runtime.Stack", runtime.Stack)
	_register("runtime.StackRecord", reflect.TypeOf((*runtime.StackRecord)(nil)).Elem())
	_register("runtime.StartTrace", runtime.StartTrace)
	_register("runtime.StopTrace", runtime.StopTrace)
	_register("runtime.ThreadCreateProfile", runtime.ThreadCreateProfile)
	_register("runtime.TypeAssertionError", reflect.TypeOf((*runtime.TypeAssertionError)(nil)).Elem())
	_register("runtime.UnlockOSThread", runtime.UnlockOSThread)
	_register("runtime.Version", runtime.Version)

	// package runtime/debug
	////////////////////////////////////////
	_register("runtime/debug.BuildInfo", reflect.TypeOf((*runtime_debug.BuildInfo)(nil)).Elem())
	_register("runtime/debug.BuildSetting", reflect.TypeOf((*runtime_debug.BuildSetting)(nil)).Elem())
	_register("runtime/debug.FreeOSMemory", runtime_debug.FreeOSMemory)
	_register("runtime/debug.GCStats", reflect.TypeOf((*runtime_debug.GCStats)(nil)).Elem())
	_register("runtime/debug.Module", reflect.TypeOf((*runtime_debug.Module)(nil)).Elem())
	_register("runtime/debug.ParseBuildInfo", runtime_debug.ParseBuildInfo)
	_register("runtime/debug.PrintStack", runtime_debug.PrintStack)
	_register("runtime/debug.ReadBuildInfo", runtime_debug.ReadBuildInfo)
	_register("runtime/debug.ReadGCStats", runtime_debug.ReadGCStats)
	_register("runtime/debug.SetGCPercent", runtime_debug.SetGCPercent)
	_register("runtime/debug.SetMaxStack", runtime_debug.SetMaxStack)
	_register("runtime/debug.SetMaxThreads", runtime_debug.SetMaxThreads)
	_register("runtime/debug.SetMemoryLimit", runtime_debug.SetMemoryLimit)
	_register("runtime/debug.SetPanicOnFault", runtime_debug.SetPanicOnFault)
	_register("runtime/debug.SetTraceback", runtime_debug.SetTraceback)
	_register("runtime/debug.Stack", runtime_debug.Stack)
	_register("runtime/debug.WriteHeapDump", runtime_debug.WriteHeapDump)

	// package runtime/metrics
	////////////////////////////////////////
	_register("runtime/metrics.All", runtime_metrics.All)
	_register("runtime/metrics.Description", reflect.TypeOf((*runtime_metrics.Description)(nil)).Elem())
	_register("runtime/metrics.Float64Histogram", reflect.TypeOf((*runtime_metrics.Float64Histogram)(nil)).Elem())
	_register("runtime/metrics.KindBad", runtime_metrics.KindBad)
	_register("runtime/metrics.KindFloat64", runtime_metrics.KindFloat64)
	_register("runtime/metrics.KindFloat64Histogram", runtime_metrics.KindFloat64Histogram)
	_register("runtime/metrics.KindUint64", runtime_metrics.KindUint64)
	_register("runtime/metrics.Read", runtime_metrics.Read)
	_register("runtime/metrics.Sample", reflect.TypeOf((*runtime_metrics.Sample)(nil)).Elem())
	_register("runtime/metrics.Value", reflect.TypeOf((*runtime_metrics.Value)(nil)).Elem())
	_register("runtime/metrics.ValueKind", reflect.TypeOf((*runtime_metrics.ValueKind)(nil)).Elem())

	// package runtime/pprof
	////////////////////////////////////////
	_register("runtime/pprof.Do", runtime_pprof.Do)
	_register("runtime/pprof.ForLabels", runtime_pprof.ForLabels)
	_register("runtime/pprof.Label", runtime_pprof.Label)
	_register("runtime/pprof.LabelSet", reflect.TypeOf((*runtime_pprof.LabelSet)(nil)).Elem())
	_register("runtime/pprof.Labels", runtime_pprof.Labels)
	_register("runtime/pprof.Lookup", runtime_pprof.Lookup)
	_register("runtime/pprof.NewProfile", runtime_pprof.NewProfile)
	_register("runtime/pprof.Profile", reflect.TypeOf((*runtime_pprof.Profile)(nil)).Elem())
	_register("runtime/pprof.Profiles", runtime_pprof.Profiles)
	_register("runtime/pprof.SetGoroutineLabels", runtime_pprof.SetGoroutineLabels)
	_register("runtime/pprof.StartCPUProfile", runtime_pprof.StartCPUProfile)
	_register("runtime/pprof.StopCPUProfile", runtime_pprof.StopCPUProfile)
	_register("runtime/pprof.WithLabels", runtime_pprof.WithLabels)
	_register("runtime/pprof.WriteHeapProfile", runtime_pprof.WriteHeapProfile)

	// package runtime/trace
	////////////////////////////////////////
	_register("runtime/trace.IsEnabled", runtime_trace.IsEnabled)
	_register("runtime/trace.Log", runtime_trace.Log)
	_register("runtime/trace.Logf", runtime_trace.Logf)
	_register("runtime/trace.NewTask", runtime_trace.NewTask)
	_register("runtime/trace.Region", reflect.TypeOf((*runtime_trace.Region)(nil)).Elem())
	_register("runtime/trace.Start", runtime_trace.Start)
	_register("runtime/trace.StartRegion", runtime_trace.StartRegion)
	_register("runtime/trace.Stop", runtime_trace.Stop)
	_register("runtime/trace.Task", reflect.TypeOf((*runtime_trace.Task)(nil)).Elem())
	_register("runtime/trace.WithRegion", runtime_trace.WithRegion)

	// package sort
	////////////////////////////////////////
	_register("sort.Find", sort.Find)
	_register("sort.Float64Slice", reflect.TypeOf((*sort.Float64Slice)(nil)).Elem())
	_register("sort.Float64s", sort.Float64s)
	_register("sort.Float64sAreSorted", sort.Float64sAreSorted)
	_register("sort.IntSlice", reflect.TypeOf((*sort.IntSlice)(nil)).Elem())
	_register("sort.Interface", reflect.TypeOf((*sort.Interface)(nil)).Elem())
	_register("sort.Ints", sort.Ints)
	_register("sort.IntsAreSorted", sort.IntsAreSorted)
	_register("sort.IsSorted", sort.IsSorted)
	_register("sort.Reverse", sort.Reverse)
	_register("sort.Search", sort.Search)
	_register("sort.SearchFloat64s", sort.SearchFloat64s)
	_register("sort.SearchInts", sort.SearchInts)
	_register("sort.SearchStrings", sort.SearchStrings)
	_register("sort.Slice", sort.Slice)
	_register("sort.SliceIsSorted", sort.SliceIsSorted)
	_register("sort.SliceStable", sort.SliceStable)
	_register("sort.Sort", sort.Sort)
	_register("sort.Stable", sort.Stable)
	_register("sort.StringSlice", reflect.TypeOf((*sort.StringSlice)(nil)).Elem())
	_register("sort.Strings", sort.Strings)
	_register("sort.StringsAreSorted", sort.StringsAreSorted)

	// package strconv
	////////////////////////////////////////
	_register("strconv.AppendBool", strconv.AppendBool)
	_register("strconv.AppendFloat", strconv.AppendFloat)
	_register("strconv.AppendInt", strconv.AppendInt)
	_register("strconv.AppendQuote", strconv.AppendQuote)
	_register("strconv.AppendQuoteRune", strconv.AppendQuoteRune)
	_register("strconv.AppendQuoteRuneToASCII", strconv.AppendQuoteRuneToASCII)
	_register("strconv.AppendQuoteRuneToGraphic", strconv.AppendQuoteRuneToGraphic)
	_register("strconv.AppendQuoteToASCII", strconv.AppendQuoteToASCII)
	_register("strconv.AppendQuoteToGraphic", strconv.AppendQuoteToGraphic)
	_register("strconv.AppendUint", strconv.AppendUint)
	_register("strconv.Atoi", strconv.Atoi)
	_register("strconv.CanBackquote", strconv.CanBackquote)
	_register("strconv.ErrRange", strconv.ErrRange)
	_register("strconv.ErrSyntax", strconv.ErrSyntax)
	_register("strconv.FormatBool", strconv.FormatBool)
	_register("strconv.FormatComplex", strconv.FormatComplex)
	_register("strconv.FormatFloat", strconv.FormatFloat)
	_register("strconv.FormatInt", strconv.FormatInt)
	_register("strconv.FormatUint", strconv.FormatUint)
	_register("strconv.IntSize", strconv.IntSize)
	_register("strconv.IsGraphic", strconv.IsGraphic)
	_register("strconv.IsPrint", strconv.IsPrint)
	_register("strconv.Itoa", strconv.Itoa)
	_register("strconv.NumError", reflect.TypeOf((*strconv.NumError)(nil)).Elem())
	_register("strconv.ParseBool", strconv.ParseBool)
	_register("strconv.ParseComplex", strconv.ParseComplex)
	_register("strconv.ParseFloat", strconv.ParseFloat)
	_register("strconv.ParseInt", strconv.ParseInt)
	_register("strconv.ParseUint", strconv.ParseUint)
	_register("strconv.Quote", strconv.Quote)
	_register("strconv.QuoteRune", strconv.QuoteRune)
	_register("strconv.QuoteRuneToASCII", strconv.QuoteRuneToASCII)
	_register("strconv.QuoteRuneToGraphic", strconv.QuoteRuneToGraphic)
	_register("strconv.QuoteToASCII", strconv.QuoteToASCII)
	_register("strconv.QuoteToGraphic", strconv.QuoteToGraphic)
	_register("strconv.QuotedPrefix", strconv.QuotedPrefix)
	_register("strconv.Unquote", strconv.Unquote)
	_register("strconv.UnquoteChar", strconv.UnquoteChar)

	// package strings
	////////////////////////////////////////
	_register("strings.Builder", reflect.TypeOf((*strings.Builder)(nil)).Elem())
	_register("strings.Clone", strings.Clone)
	_register("strings.Compare", strings.Compare)
	_register("strings.Contains", strings.Contains)
	_register("strings.ContainsAny", strings.ContainsAny)
	_register("strings.ContainsRune", strings.ContainsRune)
	_register("strings.Count", strings.Count)
	_register("strings.Cut", strings.Cut)
	_register("strings.EqualFold", strings.EqualFold)
	_register("strings.Fields", strings.Fields)
	_register("strings.FieldsFunc", strings.FieldsFunc)
	_register("strings.HasPrefix", strings.HasPrefix)
	_register("strings.HasSuffix", strings.HasSuffix)
	_register("strings.Index", strings.Index)
	_register("strings.IndexAny", strings.IndexAny)
	_register("strings.IndexByte", strings.IndexByte)
	_register("strings.IndexFunc", strings.IndexFunc)
	_register("strings.IndexRune", strings.IndexRune)
	_register("strings.Join", strings.Join)
	_register("strings.LastIndex", strings.LastIndex)
	_register("strings.LastIndexAny", strings.LastIndexAny)
	_register("strings.LastIndexByte", strings.LastIndexByte)
	_register("strings.LastIndexFunc", strings.LastIndexFunc)
	_register("strings.Map", strings.Map)
	_register("strings.NewReader", strings.NewReader)
	_register("strings.NewReplacer", strings.NewReplacer)
	_register("strings.Reader", reflect.TypeOf((*strings.Reader)(nil)).Elem())
	_register("strings.Repeat", strings.Repeat)
	_register("strings.Replace", strings.Replace)
	_register("strings.ReplaceAll", strings.ReplaceAll)
	_register("strings.Replacer", reflect.TypeOf((*strings.Replacer)(nil)).Elem())
	_register("strings.Split", strings.Split)
	_register("strings.SplitAfter", strings.SplitAfter)
	_register("strings.SplitAfterN", strings.SplitAfterN)
	_register("strings.SplitN", strings.SplitN)
	_register("strings.Title", strings.Title)
	_register("strings.ToLower", strings.ToLower)
	_register("strings.ToLowerSpecial", strings.ToLowerSpecial)
	_register("strings.ToTitle", strings.ToTitle)
	_register("strings.ToTitleSpecial", strings.ToTitleSpecial)
	_register("strings.ToUpper", strings.ToUpper)
	_register("strings.ToUpperSpecial", strings.ToUpperSpecial)
	_register("strings.ToValidUTF8", strings.ToValidUTF8)
	_register("strings.Trim", strings.Trim)
	_register("strings.TrimFunc", strings.TrimFunc)
	_register("strings.TrimLeft", strings.TrimLeft)
	_register("strings.TrimLeftFunc", strings.TrimLeftFunc)
	_register("strings.TrimPrefix", strings.TrimPrefix)
	_register("strings.TrimRight", strings.TrimRight)
	_register("strings.TrimRightFunc", strings.TrimRightFunc)
	_register("strings.TrimSpace", strings.TrimSpace)
	_register("strings.TrimSuffix", strings.TrimSuffix)

	// package sync
	////////////////////////////////////////
	_register("sync.Cond", reflect.TypeOf((*sync.Cond)(nil)).Elem())
	_register("sync.Locker", reflect.TypeOf((*sync.Locker)(nil)).Elem())
	_register("sync.Map", reflect.TypeOf((*sync.Map)(nil)).Elem())
	_register("sync.Mutex", reflect.TypeOf((*sync.Mutex)(nil)).Elem())
	_register("sync.NewCond", sync.NewCond)
	_register("sync.Once", reflect.TypeOf((*sync.Once)(nil)).Elem())
	_register("sync.Pool", reflect.TypeOf((*sync.Pool)(nil)).Elem())
	_register("sync.RWMutex", reflect.TypeOf((*sync.RWMutex)(nil)).Elem())
	_register("sync.WaitGroup", reflect.TypeOf((*sync.WaitGroup)(nil)).Elem())

	// package sync/atomic
	////////////////////////////////////////
	_register("sync/atomic.AddInt32", sync_atomic.AddInt32)
	_register("sync/atomic.AddInt64", sync_atomic.AddInt64)
	_register("sync/atomic.AddUint32", sync_atomic.AddUint32)
	_register("sync/atomic.AddUint64", sync_atomic.AddUint64)
	_register("sync/atomic.AddUintptr", sync_atomic.AddUintptr)
	_register("sync/atomic.Bool", reflect.TypeOf((*sync_atomic.Bool)(nil)).Elem())
	_register("sync/atomic.CompareAndSwapInt32", sync_atomic.CompareAndSwapInt32)
	_register("sync/atomic.CompareAndSwapInt64", sync_atomic.CompareAndSwapInt64)
	_register("sync/atomic.CompareAndSwapPointer", sync_atomic.CompareAndSwapPointer)
	_register("sync/atomic.CompareAndSwapUint32", sync_atomic.CompareAndSwapUint32)
	_register("sync/atomic.CompareAndSwapUint64", sync_atomic.CompareAndSwapUint64)
	_register("sync/atomic.CompareAndSwapUintptr", sync_atomic.CompareAndSwapUintptr)
	_register("sync/atomic.Int32", reflect.TypeOf((*sync_atomic.Int32)(nil)).Elem())
	_register("sync/atomic.Int64", reflect.TypeOf((*sync_atomic.Int64)(nil)).Elem())
	_register("sync/atomic.LoadInt32", sync_atomic.LoadInt32)
	_register("sync/atomic.LoadInt64", sync_atomic.LoadInt64)
	_register("sync/atomic.LoadPointer", sync_atomic.LoadPointer)
	_register("sync/atomic.LoadUint32", sync_atomic.LoadUint32)
	_register("sync/atomic.LoadUint64", sync_atomic.LoadUint64)
	_register("sync/atomic.LoadUintptr", sync_atomic.LoadUintptr)

	_register("sync/atomic.StoreInt32", sync_atomic.StoreInt32)
	_register("sync/atomic.StoreInt64", sync_atomic.StoreInt64)
	_register("sync/atomic.StorePointer", sync_atomic.StorePointer)
	_register("sync/atomic.StoreUint32", sync_atomic.StoreUint32)
	_register("sync/atomic.StoreUint64", sync_atomic.StoreUint64)
	_register("sync/atomic.StoreUintptr", sync_atomic.StoreUintptr)
	_register("sync/atomic.SwapInt32", sync_atomic.SwapInt32)
	_register("sync/atomic.SwapInt64", sync_atomic.SwapInt64)
	_register("sync/atomic.SwapPointer", sync_atomic.SwapPointer)
	_register("sync/atomic.SwapUint32", sync_atomic.SwapUint32)
	_register("sync/atomic.SwapUint64", sync_atomic.SwapUint64)
	_register("sync/atomic.SwapUintptr", sync_atomic.SwapUintptr)
	_register("sync/atomic.Uint32", reflect.TypeOf((*sync_atomic.Uint32)(nil)).Elem())
	_register("sync/atomic.Uint64", reflect.TypeOf((*sync_atomic.Uint64)(nil)).Elem())
	_register("sync/atomic.Uintptr", reflect.TypeOf((*sync_atomic.Uintptr)(nil)).Elem())
	_register("sync/atomic.Value", reflect.TypeOf((*sync_atomic.Value)(nil)).Elem())

	// package syscall
	////////////////////////////////////////
	_register("syscall.AF_APPLETALK", syscall.AF_APPLETALK)
	_register("syscall.AF_CCITT", syscall.AF_CCITT)
	_register("syscall.AF_CHAOS", syscall.AF_CHAOS)
	_register("syscall.AF_CNT", syscall.AF_CNT)
	_register("syscall.AF_COIP", syscall.AF_COIP)
	_register("syscall.AF_DATAKIT", syscall.AF_DATAKIT)
	_register("syscall.AF_DECnet", syscall.AF_DECnet)
	_register("syscall.AF_DLI", syscall.AF_DLI)
	_register("syscall.AF_E164", syscall.AF_E164)
	_register("syscall.AF_ECMA", syscall.AF_ECMA)
	_register("syscall.AF_HYLINK", syscall.AF_HYLINK)
	_register("syscall.AF_IEEE80211", syscall.AF_IEEE80211)
	_register("syscall.AF_IMPLINK", syscall.AF_IMPLINK)
	_register("syscall.AF_INET", syscall.AF_INET)
	_register("syscall.AF_INET6", syscall.AF_INET6)
	_register("syscall.AF_IPX", syscall.AF_IPX)
	_register("syscall.AF_ISDN", syscall.AF_ISDN)
	_register("syscall.AF_ISO", syscall.AF_ISO)
	_register("syscall.AF_LAT", syscall.AF_LAT)
	_register("syscall.AF_LINK", syscall.AF_LINK)
	_register("syscall.AF_LOCAL", syscall.AF_LOCAL)
	_register("syscall.AF_MAX", syscall.AF_MAX)
	_register("syscall.AF_NATM", syscall.AF_NATM)
	_register("syscall.AF_NDRV", syscall.AF_NDRV)
	_register("syscall.AF_NETBIOS", syscall.AF_NETBIOS)
	_register("syscall.AF_NS", syscall.AF_NS)
	_register("syscall.AF_OSI", syscall.AF_OSI)
	_register("syscall.AF_PPP", syscall.AF_PPP)
	_register("syscall.AF_PUP", syscall.AF_PUP)
	_register("syscall.AF_RESERVED_36", syscall.AF_RESERVED_36)
	_register("syscall.AF_ROUTE", syscall.AF_ROUTE)
	_register("syscall.AF_SIP", syscall.AF_SIP)
	_register("syscall.AF_SNA", syscall.AF_SNA)
	_register("syscall.AF_SYSTEM", syscall.AF_SYSTEM)
	_register("syscall.AF_UNIX", syscall.AF_UNIX)
	_register("syscall.AF_UNSPEC", syscall.AF_UNSPEC)
	_register("syscall.Accept", syscall.Accept)
	_register("syscall.Access", syscall.Access)
	_register("syscall.Adjtime", syscall.Adjtime)
	_register("syscall.B0", syscall.B0)
	_register("syscall.B110", syscall.B110)
	_register("syscall.B115200", syscall.B115200)
	_register("syscall.B1200", syscall.B1200)
	_register("syscall.B134", syscall.B134)
	_register("syscall.B14400", syscall.B14400)
	_register("syscall.B150", syscall.B150)
	_register("syscall.B1800", syscall.B1800)
	_register("syscall.B19200", syscall.B19200)
	_register("syscall.B200", syscall.B200)
	_register("syscall.B230400", syscall.B230400)
	_register("syscall.B2400", syscall.B2400)
	_register("syscall.B28800", syscall.B28800)
	_register("syscall.B300", syscall.B300)
	_register("syscall.B38400", syscall.B38400)
	_register("syscall.B4800", syscall.B4800)
	_register("syscall.B50", syscall.B50)
	_register("syscall.B57600", syscall.B57600)
	_register("syscall.B600", syscall.B600)
	_register("syscall.B7200", syscall.B7200)
	_register("syscall.B75", syscall.B75)
	_register("syscall.B76800", syscall.B76800)
	_register("syscall.B9600", syscall.B9600)
	_register("syscall.BIOCFLUSH", syscall.BIOCFLUSH)
	_register("syscall.BIOCGBLEN", syscall.BIOCGBLEN)
	_register("syscall.BIOCGDLT", syscall.BIOCGDLT)
	_register("syscall.BIOCGDLTLIST", syscall.BIOCGDLTLIST)
	_register("syscall.BIOCGETIF", syscall.BIOCGETIF)
	_register("syscall.BIOCGHDRCMPLT", syscall.BIOCGHDRCMPLT)
	_register("syscall.BIOCGRSIG", syscall.BIOCGRSIG)
	_register("syscall.BIOCGRTIMEOUT", syscall.BIOCGRTIMEOUT)
	_register("syscall.BIOCGSEESENT", syscall.BIOCGSEESENT)
	_register("syscall.BIOCGSTATS", syscall.BIOCGSTATS)
	_register("syscall.BIOCIMMEDIATE", syscall.BIOCIMMEDIATE)
	_register("syscall.BIOCPROMISC", syscall.BIOCPROMISC)
	_register("syscall.BIOCSBLEN", syscall.BIOCSBLEN)
	_register("syscall.BIOCSDLT", syscall.BIOCSDLT)
	_register("syscall.BIOCSETF", syscall.BIOCSETF)
	_register("syscall.BIOCSETIF", syscall.BIOCSETIF)
	_register("syscall.BIOCSHDRCMPLT", syscall.BIOCSHDRCMPLT)
	_register("syscall.BIOCSRSIG", syscall.BIOCSRSIG)
	_register("syscall.BIOCSRTIMEOUT", syscall.BIOCSRTIMEOUT)
	_register("syscall.BIOCSSEESENT", syscall.BIOCSSEESENT)
	_register("syscall.BIOCVERSION", syscall.BIOCVERSION)
	_register("syscall.BPF_A", syscall.BPF_A)
	_register("syscall.BPF_ABS", syscall.BPF_ABS)
	_register("syscall.BPF_ADD", syscall.BPF_ADD)
	_register("syscall.BPF_ALIGNMENT", syscall.BPF_ALIGNMENT)
	_register("syscall.BPF_ALU", syscall.BPF_ALU)
	_register("syscall.BPF_AND", syscall.BPF_AND)
	_register("syscall.BPF_B", syscall.BPF_B)
	_register("syscall.BPF_DIV", syscall.BPF_DIV)
	_register("syscall.BPF_H", syscall.BPF_H)
	_register("syscall.BPF_IMM", syscall.BPF_IMM)
	_register("syscall.BPF_IND", syscall.BPF_IND)
	_register("syscall.BPF_JA", syscall.BPF_JA)
	_register("syscall.BPF_JEQ", syscall.BPF_JEQ)
	_register("syscall.BPF_JGE", syscall.BPF_JGE)
	_register("syscall.BPF_JGT", syscall.BPF_JGT)
	_register("syscall.BPF_JMP", syscall.BPF_JMP)
	_register("syscall.BPF_JSET", syscall.BPF_JSET)
	_register("syscall.BPF_K", syscall.BPF_K)
	_register("syscall.BPF_LD", syscall.BPF_LD)
	_register("syscall.BPF_LDX", syscall.BPF_LDX)
	_register("syscall.BPF_LEN", syscall.BPF_LEN)
	_register("syscall.BPF_LSH", syscall.BPF_LSH)
	_register("syscall.BPF_MAJOR_VERSION", syscall.BPF_MAJOR_VERSION)
	_register("syscall.BPF_MAXBUFSIZE", syscall.BPF_MAXBUFSIZE)
	_register("syscall.BPF_MAXINSNS", syscall.BPF_MAXINSNS)
	_register("syscall.BPF_MEM", syscall.BPF_MEM)
	_register("syscall.BPF_MEMWORDS", syscall.BPF_MEMWORDS)
	_register("syscall.BPF_MINBUFSIZE", syscall.BPF_MINBUFSIZE)
	_register("syscall.BPF_MINOR_VERSION", syscall.BPF_MINOR_VERSION)
	_register("syscall.BPF_MISC", syscall.BPF_MISC)
	_register("syscall.BPF_MSH", syscall.BPF_MSH)
	_register("syscall.BPF_MUL", syscall.BPF_MUL)
	_register("syscall.BPF_NEG", syscall.BPF_NEG)
	_register("syscall.BPF_OR", syscall.BPF_OR)
	_register("syscall.BPF_RELEASE", syscall.BPF_RELEASE)
	_register("syscall.BPF_RET", syscall.BPF_RET)
	_register("syscall.BPF_RSH", syscall.BPF_RSH)
	_register("syscall.BPF_ST", syscall.BPF_ST)
	_register("syscall.BPF_STX", syscall.BPF_STX)
	_register("syscall.BPF_SUB", syscall.BPF_SUB)
	_register("syscall.BPF_TAX", syscall.BPF_TAX)
	_register("syscall.BPF_TXA", syscall.BPF_TXA)
	_register("syscall.BPF_W", syscall.BPF_W)
	_register("syscall.BPF_X", syscall.BPF_X)
	_register("syscall.BRKINT", syscall.BRKINT)
	_register("syscall.Bind", syscall.Bind)
	_register("syscall.BpfBuflen", syscall.BpfBuflen)
	_register("syscall.BpfDatalink", syscall.BpfDatalink)
	_register("syscall.BpfHdr", reflect.TypeOf((*syscall.BpfHdr)(nil)).Elem())
	_register("syscall.BpfHeadercmpl", syscall.BpfHeadercmpl)
	_register("syscall.BpfInsn", reflect.TypeOf((*syscall.BpfInsn)(nil)).Elem())
	_register("syscall.BpfInterface", syscall.BpfInterface)
	_register("syscall.BpfJump", syscall.BpfJump)
	_register("syscall.BpfProgram", reflect.TypeOf((*syscall.BpfProgram)(nil)).Elem())
	_register("syscall.BpfStat", reflect.TypeOf((*syscall.BpfStat)(nil)).Elem())
	_register("syscall.BpfStats", syscall.BpfStats)
	_register("syscall.BpfStmt", syscall.BpfStmt)
	_register("syscall.BpfTimeout", syscall.BpfTimeout)
	_register("syscall.BpfVersion", reflect.TypeOf((*syscall.BpfVersion)(nil)).Elem())
	_register("syscall.BytePtrFromString", syscall.BytePtrFromString)
	_register("syscall.ByteSliceFromString", syscall.ByteSliceFromString)
	_register("syscall.CFLUSH", syscall.CFLUSH)
	_register("syscall.CLOCAL", syscall.CLOCAL)
	_register("syscall.CREAD", syscall.CREAD)
	_register("syscall.CS5", syscall.CS5)
	_register("syscall.CS6", syscall.CS6)
	_register("syscall.CS7", syscall.CS7)
	_register("syscall.CS8", syscall.CS8)
	_register("syscall.CSIZE", syscall.CSIZE)
	_register("syscall.CSTART", syscall.CSTART)
	_register("syscall.CSTATUS", syscall.CSTATUS)
	_register("syscall.CSTOP", syscall.CSTOP)
	_register("syscall.CSTOPB", syscall.CSTOPB)
	_register("syscall.CSUSP", syscall.CSUSP)
	_register("syscall.CTL_MAXNAME", syscall.CTL_MAXNAME)
	_register("syscall.CTL_NET", syscall.CTL_NET)
	_register("syscall.Chdir", syscall.Chdir)
	_register("syscall.CheckBpfVersion", syscall.CheckBpfVersion)
	_register("syscall.Chflags", syscall.Chflags)
	_register("syscall.Chmod", syscall.Chmod)
	_register("syscall.Chown", syscall.Chown)
	_register("syscall.Chroot", syscall.Chroot)
	_register("syscall.Clearenv", syscall.Clearenv)
	_register("syscall.Close", syscall.Close)
	_register("syscall.CloseOnExec", syscall.CloseOnExec)
	_register("syscall.CmsgLen", syscall.CmsgLen)
	_register("syscall.CmsgSpace", syscall.CmsgSpace)
	_register("syscall.Cmsghdr", reflect.TypeOf((*syscall.Cmsghdr)(nil)).Elem())
	_register("syscall.Conn", reflect.TypeOf((*syscall.Conn)(nil)).Elem())
	_register("syscall.Connect", syscall.Connect)
	_register("syscall.Credential", reflect.TypeOf((*syscall.Credential)(nil)).Elem())
	_register("syscall.DLT_APPLE_IP_OVER_IEEE1394", syscall.DLT_APPLE_IP_OVER_IEEE1394)
	_register("syscall.DLT_ARCNET", syscall.DLT_ARCNET)
	_register("syscall.DLT_ATM_CLIP", syscall.DLT_ATM_CLIP)
	_register("syscall.DLT_ATM_RFC1483", syscall.DLT_ATM_RFC1483)
	_register("syscall.DLT_AX25", syscall.DLT_AX25)
	_register("syscall.DLT_CHAOS", syscall.DLT_CHAOS)
	_register("syscall.DLT_CHDLC", syscall.DLT_CHDLC)
	_register("syscall.DLT_C_HDLC", syscall.DLT_C_HDLC)
	_register("syscall.DLT_EN10MB", syscall.DLT_EN10MB)
	_register("syscall.DLT_EN3MB", syscall.DLT_EN3MB)
	_register("syscall.DLT_FDDI", syscall.DLT_FDDI)
	_register("syscall.DLT_IEEE802", syscall.DLT_IEEE802)
	_register("syscall.DLT_IEEE802_11", syscall.DLT_IEEE802_11)
	_register("syscall.DLT_IEEE802_11_RADIO", syscall.DLT_IEEE802_11_RADIO)
	_register("syscall.DLT_IEEE802_11_RADIO_AVS", syscall.DLT_IEEE802_11_RADIO_AVS)
	_register("syscall.DLT_LINUX_SLL", syscall.DLT_LINUX_SLL)
	_register("syscall.DLT_LOOP", syscall.DLT_LOOP)
	_register("syscall.DLT_NULL", syscall.DLT_NULL)
	_register("syscall.DLT_PFLOG", syscall.DLT_PFLOG)
	_register("syscall.DLT_PFSYNC", syscall.DLT_PFSYNC)
	_register("syscall.DLT_PPP", syscall.DLT_PPP)
	_register("syscall.DLT_PPP_BSDOS", syscall.DLT_PPP_BSDOS)
	_register("syscall.DLT_PPP_SERIAL", syscall.DLT_PPP_SERIAL)
	_register("syscall.DLT_PRONET", syscall.DLT_PRONET)
	_register("syscall.DLT_RAW", syscall.DLT_RAW)
	_register("syscall.DLT_SLIP", syscall.DLT_SLIP)
	_register("syscall.DLT_SLIP_BSDOS", syscall.DLT_SLIP_BSDOS)
	_register("syscall.DT_BLK", syscall.DT_BLK)
	_register("syscall.DT_CHR", syscall.DT_CHR)
	_register("syscall.DT_DIR", syscall.DT_DIR)
	_register("syscall.DT_FIFO", syscall.DT_FIFO)
	_register("syscall.DT_LNK", syscall.DT_LNK)
	_register("syscall.DT_REG", syscall.DT_REG)
	_register("syscall.DT_SOCK", syscall.DT_SOCK)
	_register("syscall.DT_UNKNOWN", syscall.DT_UNKNOWN)
	_register("syscall.DT_WHT", syscall.DT_WHT)
	_register("syscall.Dirent", reflect.TypeOf((*syscall.Dirent)(nil)).Elem())
	_register("syscall.Dup", syscall.Dup)
	_register("syscall.Dup2", syscall.Dup2)
	_register("syscall.E2BIG", syscall.E2BIG)
	_register("syscall.EACCES", syscall.EACCES)
	_register("syscall.EADDRINUSE", syscall.EADDRINUSE)
	_register("syscall.EADDRNOTAVAIL", syscall.EADDRNOTAVAIL)
	_register("syscall.EAFNOSUPPORT", syscall.EAFNOSUPPORT)
	_register("syscall.EAGAIN", syscall.EAGAIN)
	_register("syscall.EALREADY", syscall.EALREADY)
	_register("syscall.EAUTH", syscall.EAUTH)
	_register("syscall.EBADARCH", syscall.EBADARCH)
	_register("syscall.EBADEXEC", syscall.EBADEXEC)
	_register("syscall.EBADF", syscall.EBADF)
	_register("syscall.EBADMACHO", syscall.EBADMACHO)
	_register("syscall.EBADMSG", syscall.EBADMSG)
	_register("syscall.EBADRPC", syscall.EBADRPC)
	_register("syscall.EBUSY", syscall.EBUSY)
	_register("syscall.ECANCELED", syscall.ECANCELED)
	_register("syscall.ECHILD", syscall.ECHILD)
	_register("syscall.ECHO", syscall.ECHO)
	_register("syscall.ECHOCTL", syscall.ECHOCTL)
	_register("syscall.ECHOE", syscall.ECHOE)
	_register("syscall.ECHOK", syscall.ECHOK)
	_register("syscall.ECHOKE", syscall.ECHOKE)
	_register("syscall.ECHONL", syscall.ECHONL)
	_register("syscall.ECHOPRT", syscall.ECHOPRT)
	_register("syscall.ECONNABORTED", syscall.ECONNABORTED)
	_register("syscall.ECONNREFUSED", syscall.ECONNREFUSED)
	_register("syscall.ECONNRESET", syscall.ECONNRESET)
	_register("syscall.EDEADLK", syscall.EDEADLK)
	_register("syscall.EDESTADDRREQ", syscall.EDESTADDRREQ)
	_register("syscall.EDEVERR", syscall.EDEVERR)
	_register("syscall.EDOM", syscall.EDOM)
	_register("syscall.EDQUOT", syscall.EDQUOT)
	_register("syscall.EEXIST", syscall.EEXIST)
	_register("syscall.EFAULT", syscall.EFAULT)
	_register("syscall.EFBIG", syscall.EFBIG)
	_register("syscall.EFTYPE", syscall.EFTYPE)
	_register("syscall.EHOSTDOWN", syscall.EHOSTDOWN)
	_register("syscall.EHOSTUNREACH", syscall.EHOSTUNREACH)
	_register("syscall.EIDRM", syscall.EIDRM)
	_register("syscall.EILSEQ", syscall.EILSEQ)
	_register("syscall.EINPROGRESS", syscall.EINPROGRESS)
	_register("syscall.EINTR", syscall.EINTR)
	_register("syscall.EINVAL", syscall.EINVAL)
	_register("syscall.EIO", syscall.EIO)
	_register("syscall.EISCONN", syscall.EISCONN)
	_register("syscall.EISDIR", syscall.EISDIR)
	_register("syscall.ELAST", syscall.ELAST)
	_register("syscall.ELOOP", syscall.ELOOP)
	_register("syscall.EMFILE", syscall.EMFILE)
	_register("syscall.EMLINK", syscall.EMLINK)
	_register("syscall.EMSGSIZE", syscall.EMSGSIZE)
	_register("syscall.EMULTIHOP", syscall.EMULTIHOP)
	_register("syscall.ENAMETOOLONG", syscall.ENAMETOOLONG)
	_register("syscall.ENEEDAUTH", syscall.ENEEDAUTH)
	_register("syscall.ENETDOWN", syscall.ENETDOWN)
	_register("syscall.ENETRESET", syscall.ENETRESET)
	_register("syscall.ENETUNREACH", syscall.ENETUNREACH)
	_register("syscall.ENFILE", syscall.ENFILE)
	_register("syscall.ENOATTR", syscall.ENOATTR)
	_register("syscall.ENOBUFS", syscall.ENOBUFS)
	_register("syscall.ENODATA", syscall.ENODATA)
	_register("syscall.ENODEV", syscall.ENODEV)
	_register("syscall.ENOENT", syscall.ENOENT)
	_register("syscall.ENOEXEC", syscall.ENOEXEC)
	_register("syscall.ENOLCK", syscall.ENOLCK)
	_register("syscall.ENOLINK", syscall.ENOLINK)
	_register("syscall.ENOMEM", syscall.ENOMEM)
	_register("syscall.ENOMSG", syscall.ENOMSG)
	_register("syscall.ENOPOLICY", syscall.ENOPOLICY)
	_register("syscall.ENOPROTOOPT", syscall.ENOPROTOOPT)
	_register("syscall.ENOSPC", syscall.ENOSPC)
	_register("syscall.ENOSR", syscall.ENOSR)
	_register("syscall.ENOSTR", syscall.ENOSTR)
	_register("syscall.ENOSYS", syscall.ENOSYS)
	_register("syscall.ENOTBLK", syscall.ENOTBLK)
	_register("syscall.ENOTCONN", syscall.ENOTCONN)
	_register("syscall.ENOTDIR", syscall.ENOTDIR)
	_register("syscall.ENOTEMPTY", syscall.ENOTEMPTY)
	_register("syscall.ENOTRECOVERABLE", syscall.ENOTRECOVERABLE)
	_register("syscall.ENOTSOCK", syscall.ENOTSOCK)
	_register("syscall.ENOTSUP", syscall.ENOTSUP)
	_register("syscall.ENOTTY", syscall.ENOTTY)
	_register("syscall.ENXIO", syscall.ENXIO)
	_register("syscall.EOPNOTSUPP", syscall.EOPNOTSUPP)
	_register("syscall.EOVERFLOW", syscall.EOVERFLOW)
	_register("syscall.EOWNERDEAD", syscall.EOWNERDEAD)
	_register("syscall.EPERM", syscall.EPERM)
	_register("syscall.EPFNOSUPPORT", syscall.EPFNOSUPPORT)
	_register("syscall.EPIPE", syscall.EPIPE)
	_register("syscall.EPROCLIM", syscall.EPROCLIM)
	_register("syscall.EPROCUNAVAIL", syscall.EPROCUNAVAIL)
	_register("syscall.EPROGMISMATCH", syscall.EPROGMISMATCH)
	_register("syscall.EPROGUNAVAIL", syscall.EPROGUNAVAIL)
	_register("syscall.EPROTO", syscall.EPROTO)
	_register("syscall.EPROTONOSUPPORT", syscall.EPROTONOSUPPORT)
	_register("syscall.EPROTOTYPE", syscall.EPROTOTYPE)
	_register("syscall.EPWROFF", syscall.EPWROFF)
	_register("syscall.ERANGE", syscall.ERANGE)
	_register("syscall.EREMOTE", syscall.EREMOTE)
	_register("syscall.EROFS", syscall.EROFS)
	_register("syscall.ERPCMISMATCH", syscall.ERPCMISMATCH)
	_register("syscall.ESHLIBVERS", syscall.ESHLIBVERS)
	_register("syscall.ESHUTDOWN", syscall.ESHUTDOWN)
	_register("syscall.ESOCKTNOSUPPORT", syscall.ESOCKTNOSUPPORT)
	_register("syscall.ESPIPE", syscall.ESPIPE)
	_register("syscall.ESRCH", syscall.ESRCH)
	_register("syscall.ESTALE", syscall.ESTALE)
	_register("syscall.ETIME", syscall.ETIME)
	_register("syscall.ETIMEDOUT", syscall.ETIMEDOUT)
	_register("syscall.ETOOMANYREFS", syscall.ETOOMANYREFS)
	_register("syscall.ETXTBSY", syscall.ETXTBSY)
	_register("syscall.EUSERS", syscall.EUSERS)
	_register("syscall.EVFILT_AIO", syscall.EVFILT_AIO)
	_register("syscall.EVFILT_FS", syscall.EVFILT_FS)
	_register("syscall.EVFILT_MACHPORT", syscall.EVFILT_MACHPORT)
	_register("syscall.EVFILT_PROC", syscall.EVFILT_PROC)
	_register("syscall.EVFILT_READ", syscall.EVFILT_READ)
	_register("syscall.EVFILT_SIGNAL", syscall.EVFILT_SIGNAL)
	_register("syscall.EVFILT_SYSCOUNT", syscall.EVFILT_SYSCOUNT)
	_register("syscall.EVFILT_THREADMARKER", syscall.EVFILT_THREADMARKER)
	_register("syscall.EVFILT_TIMER", syscall.EVFILT_TIMER)
	_register("syscall.EVFILT_USER", syscall.EVFILT_USER)
	_register("syscall.EVFILT_VM", syscall.EVFILT_VM)
	_register("syscall.EVFILT_VNODE", syscall.EVFILT_VNODE)
	_register("syscall.EVFILT_WRITE", syscall.EVFILT_WRITE)
	_register("syscall.EV_ADD", syscall.EV_ADD)
	_register("syscall.EV_CLEAR", syscall.EV_CLEAR)
	_register("syscall.EV_DELETE", syscall.EV_DELETE)
	_register("syscall.EV_DISABLE", syscall.EV_DISABLE)
	_register("syscall.EV_DISPATCH", syscall.EV_DISPATCH)
	_register("syscall.EV_ENABLE", syscall.EV_ENABLE)
	_register("syscall.EV_EOF", syscall.EV_EOF)
	_register("syscall.EV_ERROR", syscall.EV_ERROR)
	_register("syscall.EV_FLAG0", syscall.EV_FLAG0)
	_register("syscall.EV_FLAG1", syscall.EV_FLAG1)
	_register("syscall.EV_ONESHOT", syscall.EV_ONESHOT)
	_register("syscall.EV_OOBAND", syscall.EV_OOBAND)
	_register("syscall.EV_POLL", syscall.EV_POLL)
	_register("syscall.EV_RECEIPT", syscall.EV_RECEIPT)
	_register("syscall.EV_SYSFLAGS", syscall.EV_SYSFLAGS)
	_register("syscall.EWOULDBLOCK", syscall.EWOULDBLOCK)
	_register("syscall.EXDEV", syscall.EXDEV)
	_register("syscall.EXTA", syscall.EXTA)
	_register("syscall.EXTB", syscall.EXTB)
	_register("syscall.EXTPROC", syscall.EXTPROC)
	_register("syscall.Environ", syscall.Environ)
	_register("syscall.Errno", reflect.TypeOf((*syscall.Errno)(nil)).Elem())
	_register("syscall.Exchangedata", syscall.Exchangedata)
	_register("syscall.Exec", syscall.Exec)
	_register("syscall.Exit", syscall.Exit)
	_register("syscall.FD_CLOEXEC", syscall.FD_CLOEXEC)
	_register("syscall.FD_SETSIZE", syscall.FD_SETSIZE)
	_register("syscall.FLUSHO", syscall.FLUSHO)
	_register("syscall.F_ADDFILESIGS", syscall.F_ADDFILESIGS)
	_register("syscall.F_ADDSIGS", syscall.F_ADDSIGS)
	_register("syscall.F_ALLOCATEALL", syscall.F_ALLOCATEALL)
	_register("syscall.F_ALLOCATECONTIG", syscall.F_ALLOCATECONTIG)
	_register("syscall.F_CHKCLEAN", syscall.F_CHKCLEAN)
	_register("syscall.F_DUPFD", syscall.F_DUPFD)
	_register("syscall.F_DUPFD_CLOEXEC", syscall.F_DUPFD_CLOEXEC)
	_register("syscall.F_FLUSH_DATA", syscall.F_FLUSH_DATA)
	_register("syscall.F_FREEZE_FS", syscall.F_FREEZE_FS)
	_register("syscall.F_FULLFSYNC", syscall.F_FULLFSYNC)
	_register("syscall.F_GETFD", syscall.F_GETFD)
	_register("syscall.F_GETFL", syscall.F_GETFL)
	_register("syscall.F_GETLK", syscall.F_GETLK)
	_register("syscall.F_GETLKPID", syscall.F_GETLKPID)
	_register("syscall.F_GETNOSIGPIPE", syscall.F_GETNOSIGPIPE)
	_register("syscall.F_GETOWN", syscall.F_GETOWN)
	_register("syscall.F_GETPATH", syscall.F_GETPATH)
	_register("syscall.F_GETPATH_MTMINFO", syscall.F_GETPATH_MTMINFO)
	_register("syscall.F_GETPROTECTIONCLASS", syscall.F_GETPROTECTIONCLASS)
	_register("syscall.F_GLOBAL_NOCACHE", syscall.F_GLOBAL_NOCACHE)
	_register("syscall.F_LOG2PHYS", syscall.F_LOG2PHYS)
	_register("syscall.F_LOG2PHYS_EXT", syscall.F_LOG2PHYS_EXT)
	_register("syscall.F_MARKDEPENDENCY", syscall.F_MARKDEPENDENCY)
	_register("syscall.F_NOCACHE", syscall.F_NOCACHE)
	_register("syscall.F_NODIRECT", syscall.F_NODIRECT)
	_register("syscall.F_OK", syscall.F_OK)
	_register("syscall.F_PATHPKG_CHECK", syscall.F_PATHPKG_CHECK)
	_register("syscall.F_PEOFPOSMODE", syscall.F_PEOFPOSMODE)
	_register("syscall.F_PREALLOCATE", syscall.F_PREALLOCATE)
	_register("syscall.F_RDADVISE", syscall.F_RDADVISE)
	_register("syscall.F_RDAHEAD", syscall.F_RDAHEAD)
	_register("syscall.F_RDLCK", syscall.F_RDLCK)
	_register("syscall.F_READBOOTSTRAP", syscall.F_READBOOTSTRAP)
	_register("syscall.F_SETBACKINGSTORE", syscall.F_SETBACKINGSTORE)
	_register("syscall.F_SETFD", syscall.F_SETFD)
	_register("syscall.F_SETFL", syscall.F_SETFL)
	_register("syscall.F_SETLK", syscall.F_SETLK)
	_register("syscall.F_SETLKW", syscall.F_SETLKW)
	_register("syscall.F_SETNOSIGPIPE", syscall.F_SETNOSIGPIPE)
	_register("syscall.F_SETOWN", syscall.F_SETOWN)
	_register("syscall.F_SETPROTECTIONCLASS", syscall.F_SETPROTECTIONCLASS)
	_register("syscall.F_SETSIZE", syscall.F_SETSIZE)
	_register("syscall.F_THAW_FS", syscall.F_THAW_FS)
	_register("syscall.F_UNLCK", syscall.F_UNLCK)
	_register("syscall.F_VOLPOSMODE", syscall.F_VOLPOSMODE)
	_register("syscall.F_WRITEBOOTSTRAP", syscall.F_WRITEBOOTSTRAP)
	_register("syscall.F_WRLCK", syscall.F_WRLCK)
	_register("syscall.Fbootstraptransfer_t", reflect.TypeOf((*syscall.Fbootstraptransfer_t)(nil)).Elem())
	_register("syscall.Fchdir", syscall.Fchdir)
	_register("syscall.Fchflags", syscall.Fchflags)
	_register("syscall.Fchmod", syscall.Fchmod)
	_register("syscall.Fchown", syscall.Fchown)
	_register("syscall.FcntlFlock", syscall.FcntlFlock)
	_register("syscall.FdSet", reflect.TypeOf((*syscall.FdSet)(nil)).Elem())
	_register("syscall.Flock", syscall.Flock)
	_register("syscall.Flock_t", reflect.TypeOf((*syscall.Flock_t)(nil)).Elem())
	_register("syscall.FlushBpf", syscall.FlushBpf)
	_register("syscall.ForkExec", syscall.ForkExec)
	_register("syscall.ForkLock", &syscall.ForkLock)
	_register("syscall.Fpathconf", syscall.Fpathconf)
	_register("syscall.Fsid", reflect.TypeOf((*syscall.Fsid)(nil)).Elem())
	_register("syscall.Fstat", syscall.Fstat)
	_register("syscall.Fstatfs", syscall.Fstatfs)
	_register("syscall.Fstore_t", reflect.TypeOf((*syscall.Fstore_t)(nil)).Elem())
	_register("syscall.Fsync", syscall.Fsync)
	_register("syscall.Ftruncate", syscall.Ftruncate)
	_register("syscall.Futimes", syscall.Futimes)
	_register("syscall.Getdirentries", syscall.Getdirentries)
	_register("syscall.Getdtablesize", syscall.Getdtablesize)
	_register("syscall.Getegid", syscall.Getegid)
	_register("syscall.Getenv", syscall.Getenv)
	_register("syscall.Geteuid", syscall.Geteuid)
	_register("syscall.Getfsstat", syscall.Getfsstat)
	_register("syscall.Getgid", syscall.Getgid)
	_register("syscall.Getgroups", syscall.Getgroups)
	_register("syscall.Getpagesize", syscall.Getpagesize)
	_register("syscall.Getpeername", syscall.Getpeername)
	_register("syscall.Getpgid", syscall.Getpgid)
	_register("syscall.Getpgrp", syscall.Getpgrp)
	_register("syscall.Getpid", syscall.Getpid)
	_register("syscall.Getppid", syscall.Getppid)
	_register("syscall.Getpriority", syscall.Getpriority)
	_register("syscall.Getrlimit", syscall.Getrlimit)
	_register("syscall.Getrusage", syscall.Getrusage)
	_register("syscall.Getsid", syscall.Getsid)
	_register("syscall.Getsockname", syscall.Getsockname)
	_register("syscall.GetsockoptByte", syscall.GetsockoptByte)
	_register("syscall.GetsockoptICMPv6Filter", syscall.GetsockoptICMPv6Filter)
	_register("syscall.GetsockoptIPMreq", syscall.GetsockoptIPMreq)
	_register("syscall.GetsockoptIPv6MTUInfo", syscall.GetsockoptIPv6MTUInfo)
	_register("syscall.GetsockoptIPv6Mreq", syscall.GetsockoptIPv6Mreq)
	_register("syscall.GetsockoptInet4Addr", syscall.GetsockoptInet4Addr)
	_register("syscall.GetsockoptInt", syscall.GetsockoptInt)
	_register("syscall.Gettimeofday", syscall.Gettimeofday)
	_register("syscall.Getuid", syscall.Getuid)
	_register("syscall.Getwd", syscall.Getwd)
	_register("syscall.HUPCL", syscall.HUPCL)
	_register("syscall.ICANON", syscall.ICANON)
	_register("syscall.ICMP6_FILTER", syscall.ICMP6_FILTER)
	_register("syscall.ICMPv6Filter", reflect.TypeOf((*syscall.ICMPv6Filter)(nil)).Elem())
	_register("syscall.ICRNL", syscall.ICRNL)
	_register("syscall.IEXTEN", syscall.IEXTEN)
	_register("syscall.IFF_ALLMULTI", syscall.IFF_ALLMULTI)
	_register("syscall.IFF_ALTPHYS", syscall.IFF_ALTPHYS)
	_register("syscall.IFF_BROADCAST", syscall.IFF_BROADCAST)
	_register("syscall.IFF_DEBUG", syscall.IFF_DEBUG)
	_register("syscall.IFF_LINK0", syscall.IFF_LINK0)
	_register("syscall.IFF_LINK1", syscall.IFF_LINK1)
	_register("syscall.IFF_LINK2", syscall.IFF_LINK2)
	_register("syscall.IFF_LOOPBACK", syscall.IFF_LOOPBACK)
	_register("syscall.IFF_MULTICAST", syscall.IFF_MULTICAST)
	_register("syscall.IFF_NOARP", syscall.IFF_NOARP)
	_register("syscall.IFF_NOTRAILERS", syscall.IFF_NOTRAILERS)
	_register("syscall.IFF_OACTIVE", syscall.IFF_OACTIVE)
	_register("syscall.IFF_POINTOPOINT", syscall.IFF_POINTOPOINT)
	_register("syscall.IFF_PROMISC", syscall.IFF_PROMISC)
	_register("syscall.IFF_RUNNING", syscall.IFF_RUNNING)
	_register("syscall.IFF_SIMPLEX", syscall.IFF_SIMPLEX)
	_register("syscall.IFF_UP", syscall.IFF_UP)
	_register("syscall.IFNAMSIZ", syscall.IFNAMSIZ)
	_register("syscall.IFT_1822", syscall.IFT_1822)
	_register("syscall.IFT_AAL5", syscall.IFT_AAL5)
	_register("syscall.IFT_ARCNET", syscall.IFT_ARCNET)
	_register("syscall.IFT_ARCNETPLUS", syscall.IFT_ARCNETPLUS)
	_register("syscall.IFT_ATM", syscall.IFT_ATM)
	_register("syscall.IFT_BRIDGE", syscall.IFT_BRIDGE)
	_register("syscall.IFT_CARP", syscall.IFT_CARP)
	_register("syscall.IFT_CELLULAR", syscall.IFT_CELLULAR)
	_register("syscall.IFT_CEPT", syscall.IFT_CEPT)
	_register("syscall.IFT_DS3", syscall.IFT_DS3)
	_register("syscall.IFT_ENC", syscall.IFT_ENC)
	_register("syscall.IFT_EON", syscall.IFT_EON)
	_register("syscall.IFT_ETHER", syscall.IFT_ETHER)
	_register("syscall.IFT_FAITH", syscall.IFT_FAITH)
	_register("syscall.IFT_FDDI", syscall.IFT_FDDI)
	_register("syscall.IFT_FRELAY", syscall.IFT_FRELAY)
	_register("syscall.IFT_FRELAYDCE", syscall.IFT_FRELAYDCE)
	_register("syscall.IFT_GIF", syscall.IFT_GIF)
	_register("syscall.IFT_HDH1822", syscall.IFT_HDH1822)
	_register("syscall.IFT_HIPPI", syscall.IFT_HIPPI)
	_register("syscall.IFT_HSSI", syscall.IFT_HSSI)
	_register("syscall.IFT_HY", syscall.IFT_HY)
	_register("syscall.IFT_IEEE1394", syscall.IFT_IEEE1394)
	_register("syscall.IFT_IEEE8023ADLAG", syscall.IFT_IEEE8023ADLAG)
	_register("syscall.IFT_ISDNBASIC", syscall.IFT_ISDNBASIC)
	_register("syscall.IFT_ISDNPRIMARY", syscall.IFT_ISDNPRIMARY)
	_register("syscall.IFT_ISO88022LLC", syscall.IFT_ISO88022LLC)
	_register("syscall.IFT_ISO88023", syscall.IFT_ISO88023)
	_register("syscall.IFT_ISO88024", syscall.IFT_ISO88024)
	_register("syscall.IFT_ISO88025", syscall.IFT_ISO88025)
	_register("syscall.IFT_ISO88026", syscall.IFT_ISO88026)
	_register("syscall.IFT_L2VLAN", syscall.IFT_L2VLAN)
	_register("syscall.IFT_LAPB", syscall.IFT_LAPB)
	_register("syscall.IFT_LOCALTALK", syscall.IFT_LOCALTALK)
	_register("syscall.IFT_LOOP", syscall.IFT_LOOP)
	_register("syscall.IFT_MIOX25", syscall.IFT_MIOX25)
	_register("syscall.IFT_MODEM", syscall.IFT_MODEM)
	_register("syscall.IFT_NSIP", syscall.IFT_NSIP)
	_register("syscall.IFT_OTHER", syscall.IFT_OTHER)
	_register("syscall.IFT_P10", syscall.IFT_P10)
	_register("syscall.IFT_P80", syscall.IFT_P80)
	_register("syscall.IFT_PARA", syscall.IFT_PARA)
	_register("syscall.IFT_PDP", syscall.IFT_PDP)
	_register("syscall.IFT_PFLOG", syscall.IFT_PFLOG)
	_register("syscall.IFT_PFSYNC", syscall.IFT_PFSYNC)
	_register("syscall.IFT_PPP", syscall.IFT_PPP)
	_register("syscall.IFT_PROPMUX", syscall.IFT_PROPMUX)
	_register("syscall.IFT_PROPVIRTUAL", syscall.IFT_PROPVIRTUAL)
	_register("syscall.IFT_PTPSERIAL", syscall.IFT_PTPSERIAL)
	_register("syscall.IFT_RS232", syscall.IFT_RS232)
	_register("syscall.IFT_SDLC", syscall.IFT_SDLC)
	_register("syscall.IFT_SIP", syscall.IFT_SIP)
	_register("syscall.IFT_SLIP", syscall.IFT_SLIP)
	_register("syscall.IFT_SMDSDXI", syscall.IFT_SMDSDXI)
	_register("syscall.IFT_SMDSICIP", syscall.IFT_SMDSICIP)
	_register("syscall.IFT_SONET", syscall.IFT_SONET)
	_register("syscall.IFT_SONETPATH", syscall.IFT_SONETPATH)
	_register("syscall.IFT_SONETVT", syscall.IFT_SONETVT)
	_register("syscall.IFT_STARLAN", syscall.IFT_STARLAN)
	_register("syscall.IFT_STF", syscall.IFT_STF)
	_register("syscall.IFT_T1", syscall.IFT_T1)
	_register("syscall.IFT_ULTRA", syscall.IFT_ULTRA)
	_register("syscall.IFT_V35", syscall.IFT_V35)
	_register("syscall.IFT_X25", syscall.IFT_X25)
	_register("syscall.IFT_X25DDN", syscall.IFT_X25DDN)
	_register("syscall.IFT_X25PLE", syscall.IFT_X25PLE)
	_register("syscall.IFT_XETHER", syscall.IFT_XETHER)
	_register("syscall.IGNBRK", syscall.IGNBRK)
	_register("syscall.IGNCR", syscall.IGNCR)
	_register("syscall.IGNPAR", syscall.IGNPAR)
	_register("syscall.IMAXBEL", syscall.IMAXBEL)
	_register("syscall.INLCR", syscall.INLCR)
	_register("syscall.INPCK", syscall.INPCK)
	_register("syscall.IN_CLASSA_HOST", syscall.IN_CLASSA_HOST)
	_register("syscall.IN_CLASSA_MAX", syscall.IN_CLASSA_MAX)
	_register("syscall.IN_CLASSA_NET", syscall.IN_CLASSA_NET)
	_register("syscall.IN_CLASSA_NSHIFT", syscall.IN_CLASSA_NSHIFT)
	_register("syscall.IN_CLASSB_HOST", syscall.IN_CLASSB_HOST)
	_register("syscall.IN_CLASSB_MAX", syscall.IN_CLASSB_MAX)
	_register("syscall.IN_CLASSB_NET", syscall.IN_CLASSB_NET)
	_register("syscall.IN_CLASSB_NSHIFT", syscall.IN_CLASSB_NSHIFT)
	_register("syscall.IN_CLASSC_HOST", syscall.IN_CLASSC_HOST)
	_register("syscall.IN_CLASSC_NET", syscall.IN_CLASSC_NET)
	_register("syscall.IN_CLASSC_NSHIFT", syscall.IN_CLASSC_NSHIFT)
	_register("syscall.IN_CLASSD_HOST", syscall.IN_CLASSD_HOST)
	_register("syscall.IN_CLASSD_NET", syscall.IN_CLASSD_NET)
	_register("syscall.IN_CLASSD_NSHIFT", syscall.IN_CLASSD_NSHIFT)
	_register("syscall.IN_LINKLOCALNETNUM", syscall.IN_LINKLOCALNETNUM)
	_register("syscall.IN_LOOPBACKNET", syscall.IN_LOOPBACKNET)
	_register("syscall.IPMreq", reflect.TypeOf((*syscall.IPMreq)(nil)).Elem())
	_register("syscall.IPPROTO_3PC", syscall.IPPROTO_3PC)
	_register("syscall.IPPROTO_ADFS", syscall.IPPROTO_ADFS)
	_register("syscall.IPPROTO_AH", syscall.IPPROTO_AH)
	_register("syscall.IPPROTO_AHIP", syscall.IPPROTO_AHIP)
	_register("syscall.IPPROTO_APES", syscall.IPPROTO_APES)
	_register("syscall.IPPROTO_ARGUS", syscall.IPPROTO_ARGUS)
	_register("syscall.IPPROTO_AX25", syscall.IPPROTO_AX25)
	_register("syscall.IPPROTO_BHA", syscall.IPPROTO_BHA)
	_register("syscall.IPPROTO_BLT", syscall.IPPROTO_BLT)
	_register("syscall.IPPROTO_BRSATMON", syscall.IPPROTO_BRSATMON)
	_register("syscall.IPPROTO_CFTP", syscall.IPPROTO_CFTP)
	_register("syscall.IPPROTO_CHAOS", syscall.IPPROTO_CHAOS)
	_register("syscall.IPPROTO_CMTP", syscall.IPPROTO_CMTP)
	_register("syscall.IPPROTO_CPHB", syscall.IPPROTO_CPHB)
	_register("syscall.IPPROTO_CPNX", syscall.IPPROTO_CPNX)
	_register("syscall.IPPROTO_DDP", syscall.IPPROTO_DDP)
	_register("syscall.IPPROTO_DGP", syscall.IPPROTO_DGP)
	_register("syscall.IPPROTO_DIVERT", syscall.IPPROTO_DIVERT)
	_register("syscall.IPPROTO_DONE", syscall.IPPROTO_DONE)
	_register("syscall.IPPROTO_DSTOPTS", syscall.IPPROTO_DSTOPTS)
	_register("syscall.IPPROTO_EGP", syscall.IPPROTO_EGP)
	_register("syscall.IPPROTO_EMCON", syscall.IPPROTO_EMCON)
	_register("syscall.IPPROTO_ENCAP", syscall.IPPROTO_ENCAP)
	_register("syscall.IPPROTO_EON", syscall.IPPROTO_EON)
	_register("syscall.IPPROTO_ESP", syscall.IPPROTO_ESP)
	_register("syscall.IPPROTO_ETHERIP", syscall.IPPROTO_ETHERIP)
	_register("syscall.IPPROTO_FRAGMENT", syscall.IPPROTO_FRAGMENT)
	_register("syscall.IPPROTO_GGP", syscall.IPPROTO_GGP)
	_register("syscall.IPPROTO_GMTP", syscall.IPPROTO_GMTP)
	_register("syscall.IPPROTO_GRE", syscall.IPPROTO_GRE)
	_register("syscall.IPPROTO_HELLO", syscall.IPPROTO_HELLO)
	_register("syscall.IPPROTO_HMP", syscall.IPPROTO_HMP)
	_register("syscall.IPPROTO_HOPOPTS", syscall.IPPROTO_HOPOPTS)
	_register("syscall.IPPROTO_ICMP", syscall.IPPROTO_ICMP)
	_register("syscall.IPPROTO_ICMPV6", syscall.IPPROTO_ICMPV6)
	_register("syscall.IPPROTO_IDP", syscall.IPPROTO_IDP)
	_register("syscall.IPPROTO_IDPR", syscall.IPPROTO_IDPR)
	_register("syscall.IPPROTO_IDRP", syscall.IPPROTO_IDRP)
	_register("syscall.IPPROTO_IGMP", syscall.IPPROTO_IGMP)
	_register("syscall.IPPROTO_IGP", syscall.IPPROTO_IGP)
	_register("syscall.IPPROTO_IGRP", syscall.IPPROTO_IGRP)
	_register("syscall.IPPROTO_IL", syscall.IPPROTO_IL)
	_register("syscall.IPPROTO_INLSP", syscall.IPPROTO_INLSP)
	_register("syscall.IPPROTO_INP", syscall.IPPROTO_INP)
	_register("syscall.IPPROTO_IP", syscall.IPPROTO_IP)
	_register("syscall.IPPROTO_IPCOMP", syscall.IPPROTO_IPCOMP)
	_register("syscall.IPPROTO_IPCV", syscall.IPPROTO_IPCV)
	_register("syscall.IPPROTO_IPEIP", syscall.IPPROTO_IPEIP)
	_register("syscall.IPPROTO_IPIP", syscall.IPPROTO_IPIP)
	_register("syscall.IPPROTO_IPPC", syscall.IPPROTO_IPPC)
	_register("syscall.IPPROTO_IPV4", syscall.IPPROTO_IPV4)
	_register("syscall.IPPROTO_IPV6", syscall.IPPROTO_IPV6)
	_register("syscall.IPPROTO_IRTP", syscall.IPPROTO_IRTP)
	_register("syscall.IPPROTO_KRYPTOLAN", syscall.IPPROTO_KRYPTOLAN)
	_register("syscall.IPPROTO_LARP", syscall.IPPROTO_LARP)
	_register("syscall.IPPROTO_LEAF1", syscall.IPPROTO_LEAF1)
	_register("syscall.IPPROTO_LEAF2", syscall.IPPROTO_LEAF2)
	_register("syscall.IPPROTO_MAX", syscall.IPPROTO_MAX)
	_register("syscall.IPPROTO_MAXID", syscall.IPPROTO_MAXID)
	_register("syscall.IPPROTO_MEAS", syscall.IPPROTO_MEAS)
	_register("syscall.IPPROTO_MHRP", syscall.IPPROTO_MHRP)
	_register("syscall.IPPROTO_MICP", syscall.IPPROTO_MICP)
	_register("syscall.IPPROTO_MTP", syscall.IPPROTO_MTP)
	_register("syscall.IPPROTO_MUX", syscall.IPPROTO_MUX)
	_register("syscall.IPPROTO_ND", syscall.IPPROTO_ND)
	_register("syscall.IPPROTO_NHRP", syscall.IPPROTO_NHRP)
	_register("syscall.IPPROTO_NONE", syscall.IPPROTO_NONE)
	_register("syscall.IPPROTO_NSP", syscall.IPPROTO_NSP)
	_register("syscall.IPPROTO_NVPII", syscall.IPPROTO_NVPII)
	_register("syscall.IPPROTO_OSPFIGP", syscall.IPPROTO_OSPFIGP)
	_register("syscall.IPPROTO_PGM", syscall.IPPROTO_PGM)
	_register("syscall.IPPROTO_PIGP", syscall.IPPROTO_PIGP)
	_register("syscall.IPPROTO_PIM", syscall.IPPROTO_PIM)
	_register("syscall.IPPROTO_PRM", syscall.IPPROTO_PRM)
	_register("syscall.IPPROTO_PUP", syscall.IPPROTO_PUP)
	_register("syscall.IPPROTO_PVP", syscall.IPPROTO_PVP)
	_register("syscall.IPPROTO_RAW", syscall.IPPROTO_RAW)
	_register("syscall.IPPROTO_RCCMON", syscall.IPPROTO_RCCMON)
	_register("syscall.IPPROTO_RDP", syscall.IPPROTO_RDP)
	_register("syscall.IPPROTO_ROUTING", syscall.IPPROTO_ROUTING)
	_register("syscall.IPPROTO_RSVP", syscall.IPPROTO_RSVP)
	_register("syscall.IPPROTO_RVD", syscall.IPPROTO_RVD)
	_register("syscall.IPPROTO_SATEXPAK", syscall.IPPROTO_SATEXPAK)
	_register("syscall.IPPROTO_SATMON", syscall.IPPROTO_SATMON)
	_register("syscall.IPPROTO_SCCSP", syscall.IPPROTO_SCCSP)
	_register("syscall.IPPROTO_SCTP", syscall.IPPROTO_SCTP)
	_register("syscall.IPPROTO_SDRP", syscall.IPPROTO_SDRP)
	_register("syscall.IPPROTO_SEP", syscall.IPPROTO_SEP)
	_register("syscall.IPPROTO_SRPC", syscall.IPPROTO_SRPC)
	_register("syscall.IPPROTO_ST", syscall.IPPROTO_ST)
	_register("syscall.IPPROTO_SVMTP", syscall.IPPROTO_SVMTP)
	_register("syscall.IPPROTO_SWIPE", syscall.IPPROTO_SWIPE)
	_register("syscall.IPPROTO_TCF", syscall.IPPROTO_TCF)
	_register("syscall.IPPROTO_TCP", syscall.IPPROTO_TCP)
	_register("syscall.IPPROTO_TP", syscall.IPPROTO_TP)
	_register("syscall.IPPROTO_TPXX", syscall.IPPROTO_TPXX)
	_register("syscall.IPPROTO_TRUNK1", syscall.IPPROTO_TRUNK1)
	_register("syscall.IPPROTO_TRUNK2", syscall.IPPROTO_TRUNK2)
	_register("syscall.IPPROTO_TTP", syscall.IPPROTO_TTP)
	_register("syscall.IPPROTO_UDP", syscall.IPPROTO_UDP)
	_register("syscall.IPPROTO_VINES", syscall.IPPROTO_VINES)
	_register("syscall.IPPROTO_VISA", syscall.IPPROTO_VISA)
	_register("syscall.IPPROTO_VMTP", syscall.IPPROTO_VMTP)
	_register("syscall.IPPROTO_WBEXPAK", syscall.IPPROTO_WBEXPAK)
	_register("syscall.IPPROTO_WBMON", syscall.IPPROTO_WBMON)
	_register("syscall.IPPROTO_WSN", syscall.IPPROTO_WSN)
	_register("syscall.IPPROTO_XNET", syscall.IPPROTO_XNET)
	_register("syscall.IPPROTO_XTP", syscall.IPPROTO_XTP)
	_register("syscall.IPV6_2292DSTOPTS", syscall.IPV6_2292DSTOPTS)
	_register("syscall.IPV6_2292HOPLIMIT", syscall.IPV6_2292HOPLIMIT)
	_register("syscall.IPV6_2292HOPOPTS", syscall.IPV6_2292HOPOPTS)
	_register("syscall.IPV6_2292NEXTHOP", syscall.IPV6_2292NEXTHOP)
	_register("syscall.IPV6_2292PKTINFO", syscall.IPV6_2292PKTINFO)
	_register("syscall.IPV6_2292PKTOPTIONS", syscall.IPV6_2292PKTOPTIONS)
	_register("syscall.IPV6_2292RTHDR", syscall.IPV6_2292RTHDR)
	_register("syscall.IPV6_BINDV6ONLY", syscall.IPV6_BINDV6ONLY)
	_register("syscall.IPV6_BOUND_IF", syscall.IPV6_BOUND_IF)
	_register("syscall.IPV6_CHECKSUM", syscall.IPV6_CHECKSUM)
	_register("syscall.IPV6_DEFAULT_MULTICAST_HOPS", syscall.IPV6_DEFAULT_MULTICAST_HOPS)
	_register("syscall.IPV6_DEFAULT_MULTICAST_LOOP", syscall.IPV6_DEFAULT_MULTICAST_LOOP)
	_register("syscall.IPV6_DEFHLIM", syscall.IPV6_DEFHLIM)
	_register("syscall.IPV6_FAITH", syscall.IPV6_FAITH)
	_register("syscall.IPV6_FLOWINFO_MASK", syscall.IPV6_FLOWINFO_MASK)
	_register("syscall.IPV6_FLOWLABEL_MASK", syscall.IPV6_FLOWLABEL_MASK)
	_register("syscall.IPV6_FRAGTTL", syscall.IPV6_FRAGTTL)
	_register("syscall.IPV6_FW_ADD", syscall.IPV6_FW_ADD)
	_register("syscall.IPV6_FW_DEL", syscall.IPV6_FW_DEL)
	_register("syscall.IPV6_FW_FLUSH", syscall.IPV6_FW_FLUSH)
	_register("syscall.IPV6_FW_GET", syscall.IPV6_FW_GET)
	_register("syscall.IPV6_FW_ZERO", syscall.IPV6_FW_ZERO)
	_register("syscall.IPV6_HLIMDEC", syscall.IPV6_HLIMDEC)
	_register("syscall.IPV6_IPSEC_POLICY", syscall.IPV6_IPSEC_POLICY)
	_register("syscall.IPV6_JOIN_GROUP", syscall.IPV6_JOIN_GROUP)
	_register("syscall.IPV6_LEAVE_GROUP", syscall.IPV6_LEAVE_GROUP)
	_register("syscall.IPV6_MAXHLIM", syscall.IPV6_MAXHLIM)
	_register("syscall.IPV6_MAXOPTHDR", syscall.IPV6_MAXOPTHDR)
	_register("syscall.IPV6_MAXPACKET", syscall.IPV6_MAXPACKET)
	_register("syscall.IPV6_MAX_GROUP_SRC_FILTER", syscall.IPV6_MAX_GROUP_SRC_FILTER)
	_register("syscall.IPV6_MAX_MEMBERSHIPS", syscall.IPV6_MAX_MEMBERSHIPS)
	_register("syscall.IPV6_MAX_SOCK_SRC_FILTER", syscall.IPV6_MAX_SOCK_SRC_FILTER)
	_register("syscall.IPV6_MIN_MEMBERSHIPS", syscall.IPV6_MIN_MEMBERSHIPS)
	_register("syscall.IPV6_MMTU", syscall.IPV6_MMTU)
	_register("syscall.IPV6_MULTICAST_HOPS", syscall.IPV6_MULTICAST_HOPS)
	_register("syscall.IPV6_MULTICAST_IF", syscall.IPV6_MULTICAST_IF)
	_register("syscall.IPV6_MULTICAST_LOOP", syscall.IPV6_MULTICAST_LOOP)
	_register("syscall.IPV6_PORTRANGE", syscall.IPV6_PORTRANGE)
	_register("syscall.IPV6_PORTRANGE_DEFAULT", syscall.IPV6_PORTRANGE_DEFAULT)
	_register("syscall.IPV6_PORTRANGE_HIGH", syscall.IPV6_PORTRANGE_HIGH)
	_register("syscall.IPV6_PORTRANGE_LOW", syscall.IPV6_PORTRANGE_LOW)
	_register("syscall.IPV6_RECVTCLASS", syscall.IPV6_RECVTCLASS)
	_register("syscall.IPV6_RTHDR_LOOSE", syscall.IPV6_RTHDR_LOOSE)
	_register("syscall.IPV6_RTHDR_STRICT", syscall.IPV6_RTHDR_STRICT)
	_register("syscall.IPV6_RTHDR_TYPE_0", syscall.IPV6_RTHDR_TYPE_0)
	_register("syscall.IPV6_SOCKOPT_RESERVED1", syscall.IPV6_SOCKOPT_RESERVED1)
	_register("syscall.IPV6_TCLASS", syscall.IPV6_TCLASS)
	_register("syscall.IPV6_UNICAST_HOPS", syscall.IPV6_UNICAST_HOPS)
	_register("syscall.IPV6_V6ONLY", syscall.IPV6_V6ONLY)
	_register("syscall.IPV6_VERSION", syscall.IPV6_VERSION)
	_register("syscall.IPV6_VERSION_MASK", syscall.IPV6_VERSION_MASK)
	_register("syscall.IP_ADD_MEMBERSHIP", syscall.IP_ADD_MEMBERSHIP)
	_register("syscall.IP_ADD_SOURCE_MEMBERSHIP", syscall.IP_ADD_SOURCE_MEMBERSHIP)
	_register("syscall.IP_BLOCK_SOURCE", syscall.IP_BLOCK_SOURCE)
	_register("syscall.IP_BOUND_IF", syscall.IP_BOUND_IF)
	_register("syscall.IP_DEFAULT_MULTICAST_LOOP", syscall.IP_DEFAULT_MULTICAST_LOOP)
	_register("syscall.IP_DEFAULT_MULTICAST_TTL", syscall.IP_DEFAULT_MULTICAST_TTL)
	_register("syscall.IP_DF", syscall.IP_DF)
	_register("syscall.IP_DROP_MEMBERSHIP", syscall.IP_DROP_MEMBERSHIP)
	_register("syscall.IP_DROP_SOURCE_MEMBERSHIP", syscall.IP_DROP_SOURCE_MEMBERSHIP)
	_register("syscall.IP_DUMMYNET_CONFIGURE", syscall.IP_DUMMYNET_CONFIGURE)
	_register("syscall.IP_DUMMYNET_DEL", syscall.IP_DUMMYNET_DEL)
	_register("syscall.IP_DUMMYNET_FLUSH", syscall.IP_DUMMYNET_FLUSH)
	_register("syscall.IP_DUMMYNET_GET", syscall.IP_DUMMYNET_GET)
	_register("syscall.IP_FAITH", syscall.IP_FAITH)
	_register("syscall.IP_FW_ADD", syscall.IP_FW_ADD)
	_register("syscall.IP_FW_DEL", syscall.IP_FW_DEL)
	_register("syscall.IP_FW_FLUSH", syscall.IP_FW_FLUSH)
	_register("syscall.IP_FW_GET", syscall.IP_FW_GET)
	_register("syscall.IP_FW_RESETLOG", syscall.IP_FW_RESETLOG)
	_register("syscall.IP_FW_ZERO", syscall.IP_FW_ZERO)
	_register("syscall.IP_HDRINCL", syscall.IP_HDRINCL)
	_register("syscall.IP_IPSEC_POLICY", syscall.IP_IPSEC_POLICY)
	_register("syscall.IP_MAXPACKET", syscall.IP_MAXPACKET)
	_register("syscall.IP_MAX_GROUP_SRC_FILTER", syscall.IP_MAX_GROUP_SRC_FILTER)
	_register("syscall.IP_MAX_MEMBERSHIPS", syscall.IP_MAX_MEMBERSHIPS)
	_register("syscall.IP_MAX_SOCK_MUTE_FILTER", syscall.IP_MAX_SOCK_MUTE_FILTER)
	_register("syscall.IP_MAX_SOCK_SRC_FILTER", syscall.IP_MAX_SOCK_SRC_FILTER)
	_register("syscall.IP_MF", syscall.IP_MF)
	_register("syscall.IP_MIN_MEMBERSHIPS", syscall.IP_MIN_MEMBERSHIPS)
	_register("syscall.IP_MSFILTER", syscall.IP_MSFILTER)
	_register("syscall.IP_MSS", syscall.IP_MSS)
	_register("syscall.IP_MULTICAST_IF", syscall.IP_MULTICAST_IF)
	_register("syscall.IP_MULTICAST_IFINDEX", syscall.IP_MULTICAST_IFINDEX)
	_register("syscall.IP_MULTICAST_LOOP", syscall.IP_MULTICAST_LOOP)
	_register("syscall.IP_MULTICAST_TTL", syscall.IP_MULTICAST_TTL)
	_register("syscall.IP_MULTICAST_VIF", syscall.IP_MULTICAST_VIF)
	_register("syscall.IP_NAT__XXX", syscall.IP_NAT__XXX)
	_register("syscall.IP_OFFMASK", syscall.IP_OFFMASK)
	_register("syscall.IP_OLD_FW_ADD", syscall.IP_OLD_FW_ADD)
	_register("syscall.IP_OLD_FW_DEL", syscall.IP_OLD_FW_DEL)
	_register("syscall.IP_OLD_FW_FLUSH", syscall.IP_OLD_FW_FLUSH)
	_register("syscall.IP_OLD_FW_GET", syscall.IP_OLD_FW_GET)
	_register("syscall.IP_OLD_FW_RESETLOG", syscall.IP_OLD_FW_RESETLOG)
	_register("syscall.IP_OLD_FW_ZERO", syscall.IP_OLD_FW_ZERO)
	_register("syscall.IP_OPTIONS", syscall.IP_OPTIONS)
	_register("syscall.IP_PKTINFO", syscall.IP_PKTINFO)
	_register("syscall.IP_PORTRANGE", syscall.IP_PORTRANGE)
	_register("syscall.IP_PORTRANGE_DEFAULT", syscall.IP_PORTRANGE_DEFAULT)
	_register("syscall.IP_PORTRANGE_HIGH", syscall.IP_PORTRANGE_HIGH)
	_register("syscall.IP_PORTRANGE_LOW", syscall.IP_PORTRANGE_LOW)
	_register("syscall.IP_RECVDSTADDR", syscall.IP_RECVDSTADDR)
	_register("syscall.IP_RECVIF", syscall.IP_RECVIF)
	_register("syscall.IP_RECVOPTS", syscall.IP_RECVOPTS)
	_register("syscall.IP_RECVPKTINFO", syscall.IP_RECVPKTINFO)
	_register("syscall.IP_RECVRETOPTS", syscall.IP_RECVRETOPTS)
	_register("syscall.IP_RECVTTL", syscall.IP_RECVTTL)
	_register("syscall.IP_RETOPTS", syscall.IP_RETOPTS)
	_register("syscall.IP_RF", syscall.IP_RF)
	_register("syscall.IP_RSVP_OFF", syscall.IP_RSVP_OFF)
	_register("syscall.IP_RSVP_ON", syscall.IP_RSVP_ON)
	_register("syscall.IP_RSVP_VIF_OFF", syscall.IP_RSVP_VIF_OFF)
	_register("syscall.IP_RSVP_VIF_ON", syscall.IP_RSVP_VIF_ON)
	_register("syscall.IP_STRIPHDR", syscall.IP_STRIPHDR)
	_register("syscall.IP_TOS", syscall.IP_TOS)
	_register("syscall.IP_TRAFFIC_MGT_BACKGROUND", syscall.IP_TRAFFIC_MGT_BACKGROUND)
	_register("syscall.IP_TTL", syscall.IP_TTL)
	_register("syscall.IP_UNBLOCK_SOURCE", syscall.IP_UNBLOCK_SOURCE)
	_register("syscall.IPv6MTUInfo", reflect.TypeOf((*syscall.IPv6MTUInfo)(nil)).Elem())
	_register("syscall.IPv6Mreq", reflect.TypeOf((*syscall.IPv6Mreq)(nil)).Elem())
	_register("syscall.ISIG", syscall.ISIG)
	_register("syscall.ISTRIP", syscall.ISTRIP)
	_register("syscall.IUTF8", syscall.IUTF8)
	_register("syscall.IXANY", syscall.IXANY)
	_register("syscall.IXOFF", syscall.IXOFF)
	_register("syscall.IXON", syscall.IXON)
	_register("syscall.IfData", reflect.TypeOf((*syscall.IfData)(nil)).Elem())
	_register("syscall.IfMsghdr", reflect.TypeOf((*syscall.IfMsghdr)(nil)).Elem())
	_register("syscall.IfaMsghdr", reflect.TypeOf((*syscall.IfaMsghdr)(nil)).Elem())
	_register("syscall.IfmaMsghdr", reflect.TypeOf((*syscall.IfmaMsghdr)(nil)).Elem())
	_register("syscall.IfmaMsghdr2", reflect.TypeOf((*syscall.IfmaMsghdr2)(nil)).Elem())
	_register("syscall.ImplementsGetwd", syscall.ImplementsGetwd)
	_register("syscall.Inet4Pktinfo", reflect.TypeOf((*syscall.Inet4Pktinfo)(nil)).Elem())
	_register("syscall.Inet6Pktinfo", reflect.TypeOf((*syscall.Inet6Pktinfo)(nil)).Elem())
	_register("syscall.InterfaceAddrMessage", reflect.TypeOf((*syscall.InterfaceAddrMessage)(nil)).Elem())
	_register("syscall.InterfaceMessage", reflect.TypeOf((*syscall.InterfaceMessage)(nil)).Elem())
	_register("syscall.InterfaceMulticastAddrMessage", reflect.TypeOf((*syscall.InterfaceMulticastAddrMessage)(nil)).Elem())
	_register("syscall.Iovec", reflect.TypeOf((*syscall.Iovec)(nil)).Elem())
	_register("syscall.Issetugid", syscall.Issetugid)
	_register("syscall.Kevent", syscall.Kevent)
	_register("syscall.Kevent_t", reflect.TypeOf((*syscall.Kevent_t)(nil)).Elem())
	_register("syscall.Kill", syscall.Kill)
	_register("syscall.Kqueue", syscall.Kqueue)
	_register("syscall.LOCK_EX", syscall.LOCK_EX)
	_register("syscall.LOCK_NB", syscall.LOCK_NB)
	_register("syscall.LOCK_SH", syscall.LOCK_SH)
	_register("syscall.LOCK_UN", syscall.LOCK_UN)
	_register("syscall.Lchown", syscall.Lchown)
	_register("syscall.Linger", reflect.TypeOf((*syscall.Linger)(nil)).Elem())
	_register("syscall.Link", syscall.Link)
	_register("syscall.Listen", syscall.Listen)
	_register("syscall.Log2phys_t", reflect.TypeOf((*syscall.Log2phys_t)(nil)).Elem())
	_register("syscall.Lstat", syscall.Lstat)
	_register("syscall.MADV_CAN_REUSE", syscall.MADV_CAN_REUSE)
	_register("syscall.MADV_DONTNEED", syscall.MADV_DONTNEED)
	_register("syscall.MADV_FREE", syscall.MADV_FREE)
	_register("syscall.MADV_FREE_REUSABLE", syscall.MADV_FREE_REUSABLE)
	_register("syscall.MADV_FREE_REUSE", syscall.MADV_FREE_REUSE)
	_register("syscall.MADV_NORMAL", syscall.MADV_NORMAL)
	_register("syscall.MADV_RANDOM", syscall.MADV_RANDOM)
	_register("syscall.MADV_SEQUENTIAL", syscall.MADV_SEQUENTIAL)
	_register("syscall.MADV_WILLNEED", syscall.MADV_WILLNEED)
	_register("syscall.MADV_ZERO_WIRED_PAGES", syscall.MADV_ZERO_WIRED_PAGES)
	_register("syscall.MAP_ANON", syscall.MAP_ANON)
	_register("syscall.MAP_COPY", syscall.MAP_COPY)
	_register("syscall.MAP_FILE", syscall.MAP_FILE)
	_register("syscall.MAP_FIXED", syscall.MAP_FIXED)
	_register("syscall.MAP_HASSEMAPHORE", syscall.MAP_HASSEMAPHORE)
	_register("syscall.MAP_JIT", syscall.MAP_JIT)
	_register("syscall.MAP_NOCACHE", syscall.MAP_NOCACHE)
	_register("syscall.MAP_NOEXTEND", syscall.MAP_NOEXTEND)
	_register("syscall.MAP_NORESERVE", syscall.MAP_NORESERVE)
	_register("syscall.MAP_PRIVATE", syscall.MAP_PRIVATE)
	_register("syscall.MAP_RENAME", syscall.MAP_RENAME)
	_register("syscall.MAP_RESERVED0080", syscall.MAP_RESERVED0080)
	_register("syscall.MAP_SHARED", syscall.MAP_SHARED)
	_register("syscall.MCL_CURRENT", syscall.MCL_CURRENT)
	_register("syscall.MCL_FUTURE", syscall.MCL_FUTURE)
	_register("syscall.MSG_CTRUNC", syscall.MSG_CTRUNC)
	_register("syscall.MSG_DONTROUTE", syscall.MSG_DONTROUTE)
	_register("syscall.MSG_DONTWAIT", syscall.MSG_DONTWAIT)
	_register("syscall.MSG_EOF", syscall.MSG_EOF)
	_register("syscall.MSG_EOR", syscall.MSG_EOR)
	_register("syscall.MSG_FLUSH", syscall.MSG_FLUSH)
	_register("syscall.MSG_HAVEMORE", syscall.MSG_HAVEMORE)
	_register("syscall.MSG_HOLD", syscall.MSG_HOLD)
	_register("syscall.MSG_NEEDSA", syscall.MSG_NEEDSA)
	_register("syscall.MSG_OOB", syscall.MSG_OOB)
	_register("syscall.MSG_PEEK", syscall.MSG_PEEK)
	_register("syscall.MSG_RCVMORE", syscall.MSG_RCVMORE)
	_register("syscall.MSG_SEND", syscall.MSG_SEND)
	_register("syscall.MSG_TRUNC", syscall.MSG_TRUNC)
	_register("syscall.MSG_WAITALL", syscall.MSG_WAITALL)
	_register("syscall.MSG_WAITSTREAM", syscall.MSG_WAITSTREAM)
	_register("syscall.MS_ASYNC", syscall.MS_ASYNC)
	_register("syscall.MS_DEACTIVATE", syscall.MS_DEACTIVATE)
	_register("syscall.MS_INVALIDATE", syscall.MS_INVALIDATE)
	_register("syscall.MS_KILLPAGES", syscall.MS_KILLPAGES)
	_register("syscall.MS_SYNC", syscall.MS_SYNC)
	_register("syscall.Mkdir", syscall.Mkdir)
	_register("syscall.Mkfifo", syscall.Mkfifo)
	_register("syscall.Mknod", syscall.Mknod)
	_register("syscall.Mlock", syscall.Mlock)
	_register("syscall.Mlockall", syscall.Mlockall)
	_register("syscall.Mmap", syscall.Mmap)
	_register("syscall.Mprotect", syscall.Mprotect)
	_register("syscall.Msghdr", reflect.TypeOf((*syscall.Msghdr)(nil)).Elem())
	_register("syscall.Munlock", syscall.Munlock)
	_register("syscall.Munlockall", syscall.Munlockall)
	_register("syscall.Munmap", syscall.Munmap)
	_register("syscall.NAME_MAX", syscall.NAME_MAX)
	_register("syscall.NET_RT_DUMP", syscall.NET_RT_DUMP)
	_register("syscall.NET_RT_DUMP2", syscall.NET_RT_DUMP2)
	_register("syscall.NET_RT_FLAGS", syscall.NET_RT_FLAGS)
	_register("syscall.NET_RT_IFLIST", syscall.NET_RT_IFLIST)
	_register("syscall.NET_RT_IFLIST2", syscall.NET_RT_IFLIST2)
	_register("syscall.NET_RT_MAXID", syscall.NET_RT_MAXID)
	_register("syscall.NET_RT_STAT", syscall.NET_RT_STAT)
	_register("syscall.NET_RT_TRASH", syscall.NET_RT_TRASH)
	_register("syscall.NOFLSH", syscall.NOFLSH)
	_register("syscall.NOTE_ABSOLUTE", syscall.NOTE_ABSOLUTE)
	_register("syscall.NOTE_ATTRIB", syscall.NOTE_ATTRIB)
	_register("syscall.NOTE_CHILD", syscall.NOTE_CHILD)
	_register("syscall.NOTE_DELETE", syscall.NOTE_DELETE)
	_register("syscall.NOTE_EXEC", syscall.NOTE_EXEC)
	_register("syscall.NOTE_EXIT", syscall.NOTE_EXIT)
	_register("syscall.NOTE_EXITSTATUS", syscall.NOTE_EXITSTATUS)
	_register("syscall.NOTE_EXTEND", syscall.NOTE_EXTEND)
	_register("syscall.NOTE_FFAND", syscall.NOTE_FFAND)
	_register("syscall.NOTE_FFCOPY", syscall.NOTE_FFCOPY)
	_register("syscall.NOTE_FFCTRLMASK", syscall.NOTE_FFCTRLMASK)
	_register("syscall.NOTE_FFLAGSMASK", syscall.NOTE_FFLAGSMASK)
	_register("syscall.NOTE_FFNOP", syscall.NOTE_FFNOP)
	_register("syscall.NOTE_FFOR", syscall.NOTE_FFOR)
	_register("syscall.NOTE_FORK", syscall.NOTE_FORK)
	_register("syscall.NOTE_LINK", syscall.NOTE_LINK)
	_register("syscall.NOTE_LOWAT", syscall.NOTE_LOWAT)
	_register("syscall.NOTE_NONE", syscall.NOTE_NONE)
	_register("syscall.NOTE_NSECONDS", syscall.NOTE_NSECONDS)
	_register("syscall.NOTE_PCTRLMASK", syscall.NOTE_PCTRLMASK)
	_register("syscall.NOTE_PDATAMASK", syscall.NOTE_PDATAMASK)
	_register("syscall.NOTE_REAP", syscall.NOTE_REAP)
	_register("syscall.NOTE_RENAME", syscall.NOTE_RENAME)
	_register("syscall.NOTE_RESOURCEEND", syscall.NOTE_RESOURCEEND)
	_register("syscall.NOTE_REVOKE", syscall.NOTE_REVOKE)
	_register("syscall.NOTE_SECONDS", syscall.NOTE_SECONDS)
	_register("syscall.NOTE_SIGNAL", syscall.NOTE_SIGNAL)
	_register("syscall.NOTE_TRACK", syscall.NOTE_TRACK)
	_register("syscall.NOTE_TRACKERR", syscall.NOTE_TRACKERR)
	_register("syscall.NOTE_TRIGGER", syscall.NOTE_TRIGGER)
	_register("syscall.NOTE_USECONDS", syscall.NOTE_USECONDS)
	_register("syscall.NOTE_VM_ERROR", syscall.NOTE_VM_ERROR)
	_register("syscall.NOTE_VM_PRESSURE", syscall.NOTE_VM_PRESSURE)
	_register("syscall.NOTE_VM_PRESSURE_SUDDEN_TERMINATE", syscall.NOTE_VM_PRESSURE_SUDDEN_TERMINATE)
	_register("syscall.NOTE_VM_PRESSURE_TERMINATE", syscall.NOTE_VM_PRESSURE_TERMINATE)
	_register("syscall.NOTE_WRITE", syscall.NOTE_WRITE)
	_register("syscall.NsecToTimespec", syscall.NsecToTimespec)
	_register("syscall.NsecToTimeval", syscall.NsecToTimeval)
	_register("syscall.OCRNL", syscall.OCRNL)
	_register("syscall.OFDEL", syscall.OFDEL)
	_register("syscall.OFILL", syscall.OFILL)
	_register("syscall.ONLCR", syscall.ONLCR)
	_register("syscall.ONLRET", syscall.ONLRET)
	_register("syscall.ONOCR", syscall.ONOCR)
	_register("syscall.ONOEOT", syscall.ONOEOT)
	_register("syscall.OPOST", syscall.OPOST)
	_register("syscall.O_ACCMODE", syscall.O_ACCMODE)
	_register("syscall.O_ALERT", syscall.O_ALERT)
	_register("syscall.O_APPEND", syscall.O_APPEND)
	_register("syscall.O_ASYNC", syscall.O_ASYNC)
	_register("syscall.O_CLOEXEC", syscall.O_CLOEXEC)
	_register("syscall.O_CREAT", syscall.O_CREAT)
	_register("syscall.O_DIRECTORY", syscall.O_DIRECTORY)
	_register("syscall.O_DSYNC", syscall.O_DSYNC)
	_register("syscall.O_EVTONLY", syscall.O_EVTONLY)
	_register("syscall.O_EXCL", syscall.O_EXCL)
	_register("syscall.O_EXLOCK", syscall.O_EXLOCK)
	_register("syscall.O_FSYNC", syscall.O_FSYNC)
	_register("syscall.O_NDELAY", syscall.O_NDELAY)
	_register("syscall.O_NOCTTY", syscall.O_NOCTTY)
	_register("syscall.O_NOFOLLOW", syscall.O_NOFOLLOW)
	_register("syscall.O_NONBLOCK", syscall.O_NONBLOCK)
	_register("syscall.O_POPUP", syscall.O_POPUP)
	_register("syscall.O_RDONLY", syscall.O_RDONLY)
	_register("syscall.O_RDWR", syscall.O_RDWR)
	_register("syscall.O_SHLOCK", syscall.O_SHLOCK)
	_register("syscall.O_SYMLINK", syscall.O_SYMLINK)
	_register("syscall.O_SYNC", syscall.O_SYNC)
	_register("syscall.O_TRUNC", syscall.O_TRUNC)
	_register("syscall.O_WRONLY", syscall.O_WRONLY)
	_register("syscall.Open", syscall.Open)
	_register("syscall.PARENB", syscall.PARENB)
	_register("syscall.PARMRK", syscall.PARMRK)
	_register("syscall.PARODD", syscall.PARODD)
	_register("syscall.PENDIN", syscall.PENDIN)
	_register("syscall.PRIO_PGRP", syscall.PRIO_PGRP)
	_register("syscall.PRIO_PROCESS", syscall.PRIO_PROCESS)
	_register("syscall.PRIO_USER", syscall.PRIO_USER)
	_register("syscall.PROT_EXEC", syscall.PROT_EXEC)
	_register("syscall.PROT_NONE", syscall.PROT_NONE)
	_register("syscall.PROT_READ", syscall.PROT_READ)
	_register("syscall.PROT_WRITE", syscall.PROT_WRITE)
	_register("syscall.PTRACE_CONT", syscall.PTRACE_CONT)
	_register("syscall.PTRACE_KILL", syscall.PTRACE_KILL)
	_register("syscall.PTRACE_TRACEME", syscall.PTRACE_TRACEME)
	_register("syscall.PT_ATTACH", syscall.PT_ATTACH)
	_register("syscall.PT_ATTACHEXC", syscall.PT_ATTACHEXC)
	_register("syscall.PT_CONTINUE", syscall.PT_CONTINUE)
	_register("syscall.PT_DENY_ATTACH", syscall.PT_DENY_ATTACH)
	_register("syscall.PT_DETACH", syscall.PT_DETACH)
	_register("syscall.PT_FIRSTMACH", syscall.PT_FIRSTMACH)
	_register("syscall.PT_FORCEQUOTA", syscall.PT_FORCEQUOTA)
	_register("syscall.PT_KILL", syscall.PT_KILL)
	_register("syscall.PT_READ_D", syscall.PT_READ_D)
	_register("syscall.PT_READ_I", syscall.PT_READ_I)
	_register("syscall.PT_READ_U", syscall.PT_READ_U)
	_register("syscall.PT_SIGEXC", syscall.PT_SIGEXC)
	_register("syscall.PT_STEP", syscall.PT_STEP)
	_register("syscall.PT_THUPDATE", syscall.PT_THUPDATE)
	_register("syscall.PT_TRACE_ME", syscall.PT_TRACE_ME)
	_register("syscall.PT_WRITE_D", syscall.PT_WRITE_D)
	_register("syscall.PT_WRITE_I", syscall.PT_WRITE_I)
	_register("syscall.PT_WRITE_U", syscall.PT_WRITE_U)
	_register("syscall.ParseDirent", syscall.ParseDirent)
	_register("syscall.ParseRoutingMessage", syscall.ParseRoutingMessage)
	_register("syscall.ParseRoutingSockaddr", syscall.ParseRoutingSockaddr)
	_register("syscall.ParseSocketControlMessage", syscall.ParseSocketControlMessage)
	_register("syscall.ParseUnixRights", syscall.ParseUnixRights)
	_register("syscall.Pathconf", syscall.Pathconf)
	_register("syscall.Pipe", syscall.Pipe)
	_register("syscall.Pread", syscall.Pread)
	_register("syscall.ProcAttr", reflect.TypeOf((*syscall.ProcAttr)(nil)).Elem())
	_register("syscall.PtraceAttach", syscall.PtraceAttach)
	_register("syscall.PtraceDetach", syscall.PtraceDetach)
	_register("syscall.Pwrite", syscall.Pwrite)
	_register("syscall.RLIMIT_AS", syscall.RLIMIT_AS)
	_register("syscall.RLIMIT_CORE", syscall.RLIMIT_CORE)
	_register("syscall.RLIMIT_CPU", syscall.RLIMIT_CPU)
	_register("syscall.RLIMIT_DATA", syscall.RLIMIT_DATA)
	_register("syscall.RLIMIT_FSIZE", syscall.RLIMIT_FSIZE)
	_register("syscall.RLIMIT_NOFILE", syscall.RLIMIT_NOFILE)
	_register("syscall.RLIMIT_STACK", syscall.RLIMIT_STACK)
	_register("syscall.RLIM_INFINITY", syscall.RLIM_INFINITY)
	_register("syscall.RTAX_AUTHOR", syscall.RTAX_AUTHOR)
	_register("syscall.RTAX_BRD", syscall.RTAX_BRD)
	_register("syscall.RTAX_DST", syscall.RTAX_DST)
	_register("syscall.RTAX_GATEWAY", syscall.RTAX_GATEWAY)
	_register("syscall.RTAX_GENMASK", syscall.RTAX_GENMASK)
	_register("syscall.RTAX_IFA", syscall.RTAX_IFA)
	_register("syscall.RTAX_IFP", syscall.RTAX_IFP)
	_register("syscall.RTAX_MAX", syscall.RTAX_MAX)
	_register("syscall.RTAX_NETMASK", syscall.RTAX_NETMASK)
	_register("syscall.RTA_AUTHOR", syscall.RTA_AUTHOR)
	_register("syscall.RTA_BRD", syscall.RTA_BRD)
	_register("syscall.RTA_DST", syscall.RTA_DST)
	_register("syscall.RTA_GATEWAY", syscall.RTA_GATEWAY)
	_register("syscall.RTA_GENMASK", syscall.RTA_GENMASK)
	_register("syscall.RTA_IFA", syscall.RTA_IFA)
	_register("syscall.RTA_IFP", syscall.RTA_IFP)
	_register("syscall.RTA_NETMASK", syscall.RTA_NETMASK)
	_register("syscall.RTF_BLACKHOLE", syscall.RTF_BLACKHOLE)
	_register("syscall.RTF_BROADCAST", syscall.RTF_BROADCAST)
	_register("syscall.RTF_CLONING", syscall.RTF_CLONING)
	_register("syscall.RTF_CONDEMNED", syscall.RTF_CONDEMNED)
	_register("syscall.RTF_DELCLONE", syscall.RTF_DELCLONE)
	_register("syscall.RTF_DONE", syscall.RTF_DONE)
	_register("syscall.RTF_DYNAMIC", syscall.RTF_DYNAMIC)
	_register("syscall.RTF_GATEWAY", syscall.RTF_GATEWAY)
	_register("syscall.RTF_HOST", syscall.RTF_HOST)
	_register("syscall.RTF_IFREF", syscall.RTF_IFREF)
	_register("syscall.RTF_IFSCOPE", syscall.RTF_IFSCOPE)
	_register("syscall.RTF_LLINFO", syscall.RTF_LLINFO)
	_register("syscall.RTF_LOCAL", syscall.RTF_LOCAL)
	_register("syscall.RTF_MODIFIED", syscall.RTF_MODIFIED)
	_register("syscall.RTF_MULTICAST", syscall.RTF_MULTICAST)
	_register("syscall.RTF_PINNED", syscall.RTF_PINNED)
	_register("syscall.RTF_PRCLONING", syscall.RTF_PRCLONING)
	_register("syscall.RTF_PROTO1", syscall.RTF_PROTO1)
	_register("syscall.RTF_PROTO2", syscall.RTF_PROTO2)
	_register("syscall.RTF_PROTO3", syscall.RTF_PROTO3)
	_register("syscall.RTF_REJECT", syscall.RTF_REJECT)
	_register("syscall.RTF_STATIC", syscall.RTF_STATIC)
	_register("syscall.RTF_UP", syscall.RTF_UP)
	_register("syscall.RTF_WASCLONED", syscall.RTF_WASCLONED)
	_register("syscall.RTF_XRESOLVE", syscall.RTF_XRESOLVE)
	_register("syscall.RTM_ADD", syscall.RTM_ADD)
	_register("syscall.RTM_CHANGE", syscall.RTM_CHANGE)
	_register("syscall.RTM_DELADDR", syscall.RTM_DELADDR)
	_register("syscall.RTM_DELETE", syscall.RTM_DELETE)
	_register("syscall.RTM_DELMADDR", syscall.RTM_DELMADDR)
	_register("syscall.RTM_GET", syscall.RTM_GET)
	_register("syscall.RTM_GET2", syscall.RTM_GET2)
	_register("syscall.RTM_IFINFO", syscall.RTM_IFINFO)
	_register("syscall.RTM_IFINFO2", syscall.RTM_IFINFO2)
	_register("syscall.RTM_LOCK", syscall.RTM_LOCK)
	_register("syscall.RTM_LOSING", syscall.RTM_LOSING)
	_register("syscall.RTM_MISS", syscall.RTM_MISS)
	_register("syscall.RTM_NEWADDR", syscall.RTM_NEWADDR)
	_register("syscall.RTM_NEWMADDR", syscall.RTM_NEWMADDR)
	_register("syscall.RTM_NEWMADDR2", syscall.RTM_NEWMADDR2)
	_register("syscall.RTM_OLDADD", syscall.RTM_OLDADD)
	_register("syscall.RTM_OLDDEL", syscall.RTM_OLDDEL)
	_register("syscall.RTM_REDIRECT", syscall.RTM_REDIRECT)
	_register("syscall.RTM_RESOLVE", syscall.RTM_RESOLVE)
	_register("syscall.RTM_RTTUNIT", syscall.RTM_RTTUNIT)
	_register("syscall.RTM_VERSION", syscall.RTM_VERSION)
	_register("syscall.RTV_EXPIRE", syscall.RTV_EXPIRE)
	_register("syscall.RTV_HOPCOUNT", syscall.RTV_HOPCOUNT)
	_register("syscall.RTV_MTU", syscall.RTV_MTU)
	_register("syscall.RTV_RPIPE", syscall.RTV_RPIPE)
	_register("syscall.RTV_RTT", syscall.RTV_RTT)
	_register("syscall.RTV_RTTVAR", syscall.RTV_RTTVAR)
	_register("syscall.RTV_SPIPE", syscall.RTV_SPIPE)
	_register("syscall.RTV_SSTHRESH", syscall.RTV_SSTHRESH)
	_register("syscall.RUSAGE_CHILDREN", syscall.RUSAGE_CHILDREN)
	_register("syscall.RUSAGE_SELF", syscall.RUSAGE_SELF)
	_register("syscall.Radvisory_t", reflect.TypeOf((*syscall.Radvisory_t)(nil)).Elem())
	_register("syscall.RawConn", reflect.TypeOf((*syscall.RawConn)(nil)).Elem())
	_register("syscall.RawSockaddr", reflect.TypeOf((*syscall.RawSockaddr)(nil)).Elem())
	_register("syscall.RawSockaddrAny", reflect.TypeOf((*syscall.RawSockaddrAny)(nil)).Elem())
	_register("syscall.RawSockaddrDatalink", reflect.TypeOf((*syscall.RawSockaddrDatalink)(nil)).Elem())
	_register("syscall.RawSockaddrInet4", reflect.TypeOf((*syscall.RawSockaddrInet4)(nil)).Elem())
	_register("syscall.RawSockaddrInet6", reflect.TypeOf((*syscall.RawSockaddrInet6)(nil)).Elem())
	_register("syscall.RawSockaddrUnix", reflect.TypeOf((*syscall.RawSockaddrUnix)(nil)).Elem())
	_register("syscall.RawSyscall", syscall.RawSyscall)
	_register("syscall.RawSyscall6", syscall.RawSyscall6)
	_register("syscall.Read", syscall.Read)
	_register("syscall.ReadDirent", syscall.ReadDirent)
	_register("syscall.Readlink", syscall.Readlink)
	_register("syscall.Recvfrom", syscall.Recvfrom)
	_register("syscall.Recvmsg", syscall.Recvmsg)
	_register("syscall.Rename", syscall.Rename)
	_register("syscall.Revoke", syscall.Revoke)
	_register("syscall.Rlimit", reflect.TypeOf((*syscall.Rlimit)(nil)).Elem())
	_register("syscall.Rmdir", syscall.Rmdir)
	_register("syscall.RouteMessage", reflect.TypeOf((*syscall.RouteMessage)(nil)).Elem())
	_register("syscall.RouteRIB", syscall.RouteRIB)
	_register("syscall.RoutingMessage", reflect.TypeOf((*syscall.RoutingMessage)(nil)).Elem())
	_register("syscall.RtMetrics", reflect.TypeOf((*syscall.RtMetrics)(nil)).Elem())
	_register("syscall.RtMsghdr", reflect.TypeOf((*syscall.RtMsghdr)(nil)).Elem())
	_register("syscall.Rusage", reflect.TypeOf((*syscall.Rusage)(nil)).Elem())
	_register("syscall.SCM_CREDS", syscall.SCM_CREDS)
	_register("syscall.SCM_RIGHTS", syscall.SCM_RIGHTS)
	_register("syscall.SCM_TIMESTAMP", syscall.SCM_TIMESTAMP)
	_register("syscall.SCM_TIMESTAMP_MONOTONIC", syscall.SCM_TIMESTAMP_MONOTONIC)
	_register("syscall.SHUT_RD", syscall.SHUT_RD)
	_register("syscall.SHUT_RDWR", syscall.SHUT_RDWR)
	_register("syscall.SHUT_WR", syscall.SHUT_WR)
	_register("syscall.SIGABRT", syscall.SIGABRT)
	_register("syscall.SIGALRM", syscall.SIGALRM)
	_register("syscall.SIGBUS", syscall.SIGBUS)
	_register("syscall.SIGCHLD", syscall.SIGCHLD)
	_register("syscall.SIGCONT", syscall.SIGCONT)
	_register("syscall.SIGEMT", syscall.SIGEMT)
	_register("syscall.SIGFPE", syscall.SIGFPE)
	_register("syscall.SIGHUP", syscall.SIGHUP)
	_register("syscall.SIGILL", syscall.SIGILL)
	_register("syscall.SIGINFO", syscall.SIGINFO)
	_register("syscall.SIGINT", syscall.SIGINT)
	_register("syscall.SIGIO", syscall.SIGIO)
	_register("syscall.SIGIOT", syscall.SIGIOT)
	_register("syscall.SIGKILL", syscall.SIGKILL)
	_register("syscall.SIGPIPE", syscall.SIGPIPE)
	_register("syscall.SIGPROF", syscall.SIGPROF)
	_register("syscall.SIGQUIT", syscall.SIGQUIT)
	_register("syscall.SIGSEGV", syscall.SIGSEGV)
	_register("syscall.SIGSTOP", syscall.SIGSTOP)
	_register("syscall.SIGSYS", syscall.SIGSYS)
	_register("syscall.SIGTERM", syscall.SIGTERM)
	_register("syscall.SIGTRAP", syscall.SIGTRAP)
	_register("syscall.SIGTSTP", syscall.SIGTSTP)
	_register("syscall.SIGTTIN", syscall.SIGTTIN)
	_register("syscall.SIGTTOU", syscall.SIGTTOU)
	_register("syscall.SIGURG", syscall.SIGURG)
	_register("syscall.SIGUSR1", syscall.SIGUSR1)
	_register("syscall.SIGUSR2", syscall.SIGUSR2)
	_register("syscall.SIGVTALRM", syscall.SIGVTALRM)
	_register("syscall.SIGWINCH", syscall.SIGWINCH)
	_register("syscall.SIGXCPU", syscall.SIGXCPU)
	_register("syscall.SIGXFSZ", syscall.SIGXFSZ)
	_register("syscall.SIOCADDMULTI", syscall.SIOCADDMULTI)
	_register("syscall.SIOCAIFADDR", syscall.SIOCAIFADDR)
	_register("syscall.SIOCALIFADDR", syscall.SIOCALIFADDR)
	_register("syscall.SIOCARPIPLL", syscall.SIOCARPIPLL)
	_register("syscall.SIOCATMARK", syscall.SIOCATMARK)
	_register("syscall.SIOCAUTOADDR", syscall.SIOCAUTOADDR)
	_register("syscall.SIOCAUTONETMASK", syscall.SIOCAUTONETMASK)
	_register("syscall.SIOCDELMULTI", syscall.SIOCDELMULTI)
	_register("syscall.SIOCDIFADDR", syscall.SIOCDIFADDR)
	_register("syscall.SIOCDIFPHYADDR", syscall.SIOCDIFPHYADDR)
	_register("syscall.SIOCDLIFADDR", syscall.SIOCDLIFADDR)
	_register("syscall.SIOCGDRVSPEC", syscall.SIOCGDRVSPEC)
	_register("syscall.SIOCGETSGCNT", syscall.SIOCGETSGCNT)
	_register("syscall.SIOCGETVIFCNT", syscall.SIOCGETVIFCNT)
	_register("syscall.SIOCGETVLAN", syscall.SIOCGETVLAN)
	_register("syscall.SIOCGHIWAT", syscall.SIOCGHIWAT)
	_register("syscall.SIOCGIFADDR", syscall.SIOCGIFADDR)
	_register("syscall.SIOCGIFALTMTU", syscall.SIOCGIFALTMTU)
	_register("syscall.SIOCGIFASYNCMAP", syscall.SIOCGIFASYNCMAP)
	_register("syscall.SIOCGIFBOND", syscall.SIOCGIFBOND)
	_register("syscall.SIOCGIFBRDADDR", syscall.SIOCGIFBRDADDR)
	_register("syscall.SIOCGIFCAP", syscall.SIOCGIFCAP)
	_register("syscall.SIOCGIFCONF", syscall.SIOCGIFCONF)
	_register("syscall.SIOCGIFDEVMTU", syscall.SIOCGIFDEVMTU)
	_register("syscall.SIOCGIFDSTADDR", syscall.SIOCGIFDSTADDR)
	_register("syscall.SIOCGIFFLAGS", syscall.SIOCGIFFLAGS)
	_register("syscall.SIOCGIFGENERIC", syscall.SIOCGIFGENERIC)
	_register("syscall.SIOCGIFKPI", syscall.SIOCGIFKPI)
	_register("syscall.SIOCGIFMAC", syscall.SIOCGIFMAC)
	_register("syscall.SIOCGIFMEDIA", syscall.SIOCGIFMEDIA)
	_register("syscall.SIOCGIFMETRIC", syscall.SIOCGIFMETRIC)
	_register("syscall.SIOCGIFMTU", syscall.SIOCGIFMTU)
	_register("syscall.SIOCGIFNETMASK", syscall.SIOCGIFNETMASK)
	_register("syscall.SIOCGIFPDSTADDR", syscall.SIOCGIFPDSTADDR)
	_register("syscall.SIOCGIFPHYS", syscall.SIOCGIFPHYS)
	_register("syscall.SIOCGIFPSRCADDR", syscall.SIOCGIFPSRCADDR)
	_register("syscall.SIOCGIFSTATUS", syscall.SIOCGIFSTATUS)
	_register("syscall.SIOCGIFVLAN", syscall.SIOCGIFVLAN)
	_register("syscall.SIOCGIFWAKEFLAGS", syscall.SIOCGIFWAKEFLAGS)
	_register("syscall.SIOCGLIFADDR", syscall.SIOCGLIFADDR)
	_register("syscall.SIOCGLIFPHYADDR", syscall.SIOCGLIFPHYADDR)
	_register("syscall.SIOCGLOWAT", syscall.SIOCGLOWAT)
	_register("syscall.SIOCGPGRP", syscall.SIOCGPGRP)
	_register("syscall.SIOCIFCREATE", syscall.SIOCIFCREATE)
	_register("syscall.SIOCIFCREATE2", syscall.SIOCIFCREATE2)
	_register("syscall.SIOCIFDESTROY", syscall.SIOCIFDESTROY)
	_register("syscall.SIOCRSLVMULTI", syscall.SIOCRSLVMULTI)
	_register("syscall.SIOCSDRVSPEC", syscall.SIOCSDRVSPEC)
	_register("syscall.SIOCSETVLAN", syscall.SIOCSETVLAN)
	_register("syscall.SIOCSHIWAT", syscall.SIOCSHIWAT)
	_register("syscall.SIOCSIFADDR", syscall.SIOCSIFADDR)
	_register("syscall.SIOCSIFALTMTU", syscall.SIOCSIFALTMTU)
	_register("syscall.SIOCSIFASYNCMAP", syscall.SIOCSIFASYNCMAP)
	_register("syscall.SIOCSIFBOND", syscall.SIOCSIFBOND)
	_register("syscall.SIOCSIFBRDADDR", syscall.SIOCSIFBRDADDR)
	_register("syscall.SIOCSIFCAP", syscall.SIOCSIFCAP)
	_register("syscall.SIOCSIFDSTADDR", syscall.SIOCSIFDSTADDR)
	_register("syscall.SIOCSIFFLAGS", syscall.SIOCSIFFLAGS)
	_register("syscall.SIOCSIFGENERIC", syscall.SIOCSIFGENERIC)
	_register("syscall.SIOCSIFKPI", syscall.SIOCSIFKPI)
	_register("syscall.SIOCSIFLLADDR", syscall.SIOCSIFLLADDR)
	_register("syscall.SIOCSIFMAC", syscall.SIOCSIFMAC)
	_register("syscall.SIOCSIFMEDIA", syscall.SIOCSIFMEDIA)
	_register("syscall.SIOCSIFMETRIC", syscall.SIOCSIFMETRIC)
	_register("syscall.SIOCSIFMTU", syscall.SIOCSIFMTU)
	_register("syscall.SIOCSIFNETMASK", syscall.SIOCSIFNETMASK)
	_register("syscall.SIOCSIFPHYADDR", syscall.SIOCSIFPHYADDR)
	_register("syscall.SIOCSIFPHYS", syscall.SIOCSIFPHYS)
	_register("syscall.SIOCSIFVLAN", syscall.SIOCSIFVLAN)
	_register("syscall.SIOCSLIFPHYADDR", syscall.SIOCSLIFPHYADDR)
	_register("syscall.SIOCSLOWAT", syscall.SIOCSLOWAT)
	_register("syscall.SIOCSPGRP", syscall.SIOCSPGRP)
	_register("syscall.SOCK_DGRAM", syscall.SOCK_DGRAM)
	_register("syscall.SOCK_MAXADDRLEN", syscall.SOCK_MAXADDRLEN)
	_register("syscall.SOCK_RAW", syscall.SOCK_RAW)
	_register("syscall.SOCK_RDM", syscall.SOCK_RDM)
	_register("syscall.SOCK_SEQPACKET", syscall.SOCK_SEQPACKET)
	_register("syscall.SOCK_STREAM", syscall.SOCK_STREAM)
	_register("syscall.SOL_SOCKET", syscall.SOL_SOCKET)
	_register("syscall.SOMAXCONN", syscall.SOMAXCONN)
	_register("syscall.SO_ACCEPTCONN", syscall.SO_ACCEPTCONN)
	_register("syscall.SO_BROADCAST", syscall.SO_BROADCAST)
	_register("syscall.SO_DEBUG", syscall.SO_DEBUG)
	_register("syscall.SO_DONTROUTE", syscall.SO_DONTROUTE)
	_register("syscall.SO_DONTTRUNC", syscall.SO_DONTTRUNC)
	_register("syscall.SO_ERROR", syscall.SO_ERROR)
	_register("syscall.SO_KEEPALIVE", syscall.SO_KEEPALIVE)
	_register("syscall.SO_LABEL", syscall.SO_LABEL)
	_register("syscall.SO_LINGER", syscall.SO_LINGER)
	_register("syscall.SO_LINGER_SEC", syscall.SO_LINGER_SEC)
	_register("syscall.SO_NKE", syscall.SO_NKE)
	_register("syscall.SO_NOADDRERR", syscall.SO_NOADDRERR)
	_register("syscall.SO_NOSIGPIPE", syscall.SO_NOSIGPIPE)
	_register("syscall.SO_NOTIFYCONFLICT", syscall.SO_NOTIFYCONFLICT)
	_register("syscall.SO_NP_EXTENSIONS", syscall.SO_NP_EXTENSIONS)
	_register("syscall.SO_NREAD", syscall.SO_NREAD)
	_register("syscall.SO_NWRITE", syscall.SO_NWRITE)
	_register("syscall.SO_OOBINLINE", syscall.SO_OOBINLINE)
	_register("syscall.SO_PEERLABEL", syscall.SO_PEERLABEL)
	_register("syscall.SO_RANDOMPORT", syscall.SO_RANDOMPORT)
	_register("syscall.SO_RCVBUF", syscall.SO_RCVBUF)
	_register("syscall.SO_RCVLOWAT", syscall.SO_RCVLOWAT)
	_register("syscall.SO_RCVTIMEO", syscall.SO_RCVTIMEO)
	_register("syscall.SO_RESTRICTIONS", syscall.SO_RESTRICTIONS)
	_register("syscall.SO_RESTRICT_DENYIN", syscall.SO_RESTRICT_DENYIN)
	_register("syscall.SO_RESTRICT_DENYOUT", syscall.SO_RESTRICT_DENYOUT)
	_register("syscall.SO_RESTRICT_DENYSET", syscall.SO_RESTRICT_DENYSET)
	_register("syscall.SO_REUSEADDR", syscall.SO_REUSEADDR)
	_register("syscall.SO_REUSEPORT", syscall.SO_REUSEPORT)
	_register("syscall.SO_REUSESHAREUID", syscall.SO_REUSESHAREUID)
	_register("syscall.SO_SNDBUF", syscall.SO_SNDBUF)
	_register("syscall.SO_SNDLOWAT", syscall.SO_SNDLOWAT)
	_register("syscall.SO_SNDTIMEO", syscall.SO_SNDTIMEO)
	_register("syscall.SO_TIMESTAMP", syscall.SO_TIMESTAMP)
	_register("syscall.SO_TIMESTAMP_MONOTONIC", syscall.SO_TIMESTAMP_MONOTONIC)
	_register("syscall.SO_TYPE", syscall.SO_TYPE)
	_register("syscall.SO_UPCALLCLOSEWAIT", syscall.SO_UPCALLCLOSEWAIT)
	_register("syscall.SO_USELOOPBACK", syscall.SO_USELOOPBACK)
	_register("syscall.SO_WANTMORE", syscall.SO_WANTMORE)
	_register("syscall.SO_WANTOOBFLAG", syscall.SO_WANTOOBFLAG)
	_register("syscall.SYS_ACCEPT", syscall.SYS_ACCEPT)
	_register("syscall.SYS_ACCEPT_NOCANCEL", syscall.SYS_ACCEPT_NOCANCEL)
	_register("syscall.SYS_ACCESS", syscall.SYS_ACCESS)
	_register("syscall.SYS_ACCESS_EXTENDED", syscall.SYS_ACCESS_EXTENDED)
	_register("syscall.SYS_ACCT", syscall.SYS_ACCT)
	_register("syscall.SYS_ADD_PROFIL", syscall.SYS_ADD_PROFIL)
	_register("syscall.SYS_ADJTIME", syscall.SYS_ADJTIME)
	_register("syscall.SYS_AIO_CANCEL", syscall.SYS_AIO_CANCEL)
	_register("syscall.SYS_AIO_ERROR", syscall.SYS_AIO_ERROR)
	_register("syscall.SYS_AIO_FSYNC", syscall.SYS_AIO_FSYNC)
	_register("syscall.SYS_AIO_READ", syscall.SYS_AIO_READ)
	_register("syscall.SYS_AIO_RETURN", syscall.SYS_AIO_RETURN)
	_register("syscall.SYS_AIO_SUSPEND", syscall.SYS_AIO_SUSPEND)
	_register("syscall.SYS_AIO_SUSPEND_NOCANCEL", syscall.SYS_AIO_SUSPEND_NOCANCEL)
	_register("syscall.SYS_AIO_WRITE", syscall.SYS_AIO_WRITE)
	_register("syscall.SYS_ATGETMSG", syscall.SYS_ATGETMSG)
	_register("syscall.SYS_ATPGETREQ", syscall.SYS_ATPGETREQ)
	_register("syscall.SYS_ATPGETRSP", syscall.SYS_ATPGETRSP)
	_register("syscall.SYS_ATPSNDREQ", syscall.SYS_ATPSNDREQ)
	_register("syscall.SYS_ATPSNDRSP", syscall.SYS_ATPSNDRSP)
	_register("syscall.SYS_ATPUTMSG", syscall.SYS_ATPUTMSG)
	_register("syscall.SYS_ATSOCKET", syscall.SYS_ATSOCKET)
	_register("syscall.SYS_AUDIT", syscall.SYS_AUDIT)
	_register("syscall.SYS_AUDITCTL", syscall.SYS_AUDITCTL)
	_register("syscall.SYS_AUDITON", syscall.SYS_AUDITON)
	_register("syscall.SYS_AUDIT_SESSION_JOIN", syscall.SYS_AUDIT_SESSION_JOIN)
	_register("syscall.SYS_AUDIT_SESSION_PORT", syscall.SYS_AUDIT_SESSION_PORT)
	_register("syscall.SYS_AUDIT_SESSION_SELF", syscall.SYS_AUDIT_SESSION_SELF)
	_register("syscall.SYS_BIND", syscall.SYS_BIND)
	_register("syscall.SYS_BSDTHREAD_CREATE", syscall.SYS_BSDTHREAD_CREATE)
	_register("syscall.SYS_BSDTHREAD_REGISTER", syscall.SYS_BSDTHREAD_REGISTER)
	_register("syscall.SYS_BSDTHREAD_TERMINATE", syscall.SYS_BSDTHREAD_TERMINATE)
	_register("syscall.SYS_CHDIR", syscall.SYS_CHDIR)
	_register("syscall.SYS_CHFLAGS", syscall.SYS_CHFLAGS)
	_register("syscall.SYS_CHMOD", syscall.SYS_CHMOD)
	_register("syscall.SYS_CHMOD_EXTENDED", syscall.SYS_CHMOD_EXTENDED)
	_register("syscall.SYS_CHOWN", syscall.SYS_CHOWN)
	_register("syscall.SYS_CHROOT", syscall.SYS_CHROOT)
	_register("syscall.SYS_CHUD", syscall.SYS_CHUD)
	_register("syscall.SYS_CLOSE", syscall.SYS_CLOSE)
	_register("syscall.SYS_CLOSE_NOCANCEL", syscall.SYS_CLOSE_NOCANCEL)
	_register("syscall.SYS_CONNECT", syscall.SYS_CONNECT)
	_register("syscall.SYS_CONNECT_NOCANCEL", syscall.SYS_CONNECT_NOCANCEL)
	_register("syscall.SYS_COPYFILE", syscall.SYS_COPYFILE)
	_register("syscall.SYS_CSOPS", syscall.SYS_CSOPS)
	_register("syscall.SYS_DELETE", syscall.SYS_DELETE)
	_register("syscall.SYS_DUP", syscall.SYS_DUP)
	_register("syscall.SYS_DUP2", syscall.SYS_DUP2)
	_register("syscall.SYS_EXCHANGEDATA", syscall.SYS_EXCHANGEDATA)
	_register("syscall.SYS_EXECVE", syscall.SYS_EXECVE)
	_register("syscall.SYS_EXIT", syscall.SYS_EXIT)
	_register("syscall.SYS_FCHDIR", syscall.SYS_FCHDIR)
	_register("syscall.SYS_FCHFLAGS", syscall.SYS_FCHFLAGS)
	_register("syscall.SYS_FCHMOD", syscall.SYS_FCHMOD)
	_register("syscall.SYS_FCHMOD_EXTENDED", syscall.SYS_FCHMOD_EXTENDED)
	_register("syscall.SYS_FCHOWN", syscall.SYS_FCHOWN)
	_register("syscall.SYS_FCNTL", syscall.SYS_FCNTL)
	_register("syscall.SYS_FCNTL_NOCANCEL", syscall.SYS_FCNTL_NOCANCEL)
	_register("syscall.SYS_FDATASYNC", syscall.SYS_FDATASYNC)
	_register("syscall.SYS_FFSCTL", syscall.SYS_FFSCTL)
	_register("syscall.SYS_FGETATTRLIST", syscall.SYS_FGETATTRLIST)
	_register("syscall.SYS_FGETXATTR", syscall.SYS_FGETXATTR)
	_register("syscall.SYS_FHOPEN", syscall.SYS_FHOPEN)
	_register("syscall.SYS_FILEPORT_MAKEFD", syscall.SYS_FILEPORT_MAKEFD)
	_register("syscall.SYS_FILEPORT_MAKEPORT", syscall.SYS_FILEPORT_MAKEPORT)
	_register("syscall.SYS_FLISTXATTR", syscall.SYS_FLISTXATTR)
	_register("syscall.SYS_FLOCK", syscall.SYS_FLOCK)
	_register("syscall.SYS_FORK", syscall.SYS_FORK)
	_register("syscall.SYS_FPATHCONF", syscall.SYS_FPATHCONF)
	_register("syscall.SYS_FREMOVEXATTR", syscall.SYS_FREMOVEXATTR)
	_register("syscall.SYS_FSCTL", syscall.SYS_FSCTL)
	_register("syscall.SYS_FSETATTRLIST", syscall.SYS_FSETATTRLIST)
	_register("syscall.SYS_FSETXATTR", syscall.SYS_FSETXATTR)
	_register("syscall.SYS_FSGETPATH", syscall.SYS_FSGETPATH)
	_register("syscall.SYS_FSTAT", syscall.SYS_FSTAT)
	_register("syscall.SYS_FSTAT64", syscall.SYS_FSTAT64)
	_register("syscall.SYS_FSTAT64_EXTENDED", syscall.SYS_FSTAT64_EXTENDED)
	_register("syscall.SYS_FSTATFS", syscall.SYS_FSTATFS)
	_register("syscall.SYS_FSTATFS64", syscall.SYS_FSTATFS64)
	_register("syscall.SYS_FSTATV", syscall.SYS_FSTATV)
	_register("syscall.SYS_FSTAT_EXTENDED", syscall.SYS_FSTAT_EXTENDED)
	_register("syscall.SYS_FSYNC", syscall.SYS_FSYNC)
	_register("syscall.SYS_FSYNC_NOCANCEL", syscall.SYS_FSYNC_NOCANCEL)
	_register("syscall.SYS_FTRUNCATE", syscall.SYS_FTRUNCATE)
	_register("syscall.SYS_FUTIMES", syscall.SYS_FUTIMES)
	_register("syscall.SYS_GETATTRLIST", syscall.SYS_GETATTRLIST)
	_register("syscall.SYS_GETAUDIT", syscall.SYS_GETAUDIT)
	_register("syscall.SYS_GETAUDIT_ADDR", syscall.SYS_GETAUDIT_ADDR)
	_register("syscall.SYS_GETAUID", syscall.SYS_GETAUID)
	_register("syscall.SYS_GETDIRENTRIES", syscall.SYS_GETDIRENTRIES)
	_register("syscall.SYS_GETDIRENTRIES64", syscall.SYS_GETDIRENTRIES64)
	_register("syscall.SYS_GETDIRENTRIESATTR", syscall.SYS_GETDIRENTRIESATTR)
	_register("syscall.SYS_GETDTABLESIZE", syscall.SYS_GETDTABLESIZE)
	_register("syscall.SYS_GETEGID", syscall.SYS_GETEGID)
	_register("syscall.SYS_GETEUID", syscall.SYS_GETEUID)
	_register("syscall.SYS_GETFH", syscall.SYS_GETFH)
	_register("syscall.SYS_GETFSSTAT", syscall.SYS_GETFSSTAT)
	_register("syscall.SYS_GETFSSTAT64", syscall.SYS_GETFSSTAT64)
	_register("syscall.SYS_GETGID", syscall.SYS_GETGID)
	_register("syscall.SYS_GETGROUPS", syscall.SYS_GETGROUPS)
	_register("syscall.SYS_GETHOSTUUID", syscall.SYS_GETHOSTUUID)
	_register("syscall.SYS_GETITIMER", syscall.SYS_GETITIMER)
	_register("syscall.SYS_GETLCID", syscall.SYS_GETLCID)
	_register("syscall.SYS_GETLOGIN", syscall.SYS_GETLOGIN)
	_register("syscall.SYS_GETPEERNAME", syscall.SYS_GETPEERNAME)
	_register("syscall.SYS_GETPGID", syscall.SYS_GETPGID)
	_register("syscall.SYS_GETPGRP", syscall.SYS_GETPGRP)
	_register("syscall.SYS_GETPID", syscall.SYS_GETPID)
	_register("syscall.SYS_GETPPID", syscall.SYS_GETPPID)
	_register("syscall.SYS_GETPRIORITY", syscall.SYS_GETPRIORITY)
	_register("syscall.SYS_GETRLIMIT", syscall.SYS_GETRLIMIT)
	_register("syscall.SYS_GETRUSAGE", syscall.SYS_GETRUSAGE)
	_register("syscall.SYS_GETSGROUPS", syscall.SYS_GETSGROUPS)
	_register("syscall.SYS_GETSID", syscall.SYS_GETSID)
	_register("syscall.SYS_GETSOCKNAME", syscall.SYS_GETSOCKNAME)
	_register("syscall.SYS_GETSOCKOPT", syscall.SYS_GETSOCKOPT)
	_register("syscall.SYS_GETTID", syscall.SYS_GETTID)
	_register("syscall.SYS_GETTIMEOFDAY", syscall.SYS_GETTIMEOFDAY)
	_register("syscall.SYS_GETUID", syscall.SYS_GETUID)
	_register("syscall.SYS_GETWGROUPS", syscall.SYS_GETWGROUPS)
	_register("syscall.SYS_GETXATTR", syscall.SYS_GETXATTR)
	_register("syscall.SYS_IDENTITYSVC", syscall.SYS_IDENTITYSVC)
	_register("syscall.SYS_INITGROUPS", syscall.SYS_INITGROUPS)
	_register("syscall.SYS_IOCTL", syscall.SYS_IOCTL)
	_register("syscall.SYS_IOPOLICYSYS", syscall.SYS_IOPOLICYSYS)
	_register("syscall.SYS_ISSETUGID", syscall.SYS_ISSETUGID)
	_register("syscall.SYS_KDEBUG_TRACE", syscall.SYS_KDEBUG_TRACE)
	_register("syscall.SYS_KEVENT", syscall.SYS_KEVENT)
	_register("syscall.SYS_KEVENT64", syscall.SYS_KEVENT64)
	_register("syscall.SYS_KILL", syscall.SYS_KILL)
	_register("syscall.SYS_KQUEUE", syscall.SYS_KQUEUE)
	_register("syscall.SYS_LCHOWN", syscall.SYS_LCHOWN)
	_register("syscall.SYS_LINK", syscall.SYS_LINK)
	_register("syscall.SYS_LIO_LISTIO", syscall.SYS_LIO_LISTIO)
	_register("syscall.SYS_LISTEN", syscall.SYS_LISTEN)
	_register("syscall.SYS_LISTXATTR", syscall.SYS_LISTXATTR)
	_register("syscall.SYS_LSEEK", syscall.SYS_LSEEK)
	_register("syscall.SYS_LSTAT", syscall.SYS_LSTAT)
	_register("syscall.SYS_LSTAT64", syscall.SYS_LSTAT64)
	_register("syscall.SYS_LSTAT64_EXTENDED", syscall.SYS_LSTAT64_EXTENDED)
	_register("syscall.SYS_LSTATV", syscall.SYS_LSTATV)
	_register("syscall.SYS_LSTAT_EXTENDED", syscall.SYS_LSTAT_EXTENDED)
	_register("syscall.SYS_MADVISE", syscall.SYS_MADVISE)
	_register("syscall.SYS_MAXSYSCALL", syscall.SYS_MAXSYSCALL)
	_register("syscall.SYS_MINCORE", syscall.SYS_MINCORE)
	_register("syscall.SYS_MINHERIT", syscall.SYS_MINHERIT)
	_register("syscall.SYS_MKCOMPLEX", syscall.SYS_MKCOMPLEX)
	_register("syscall.SYS_MKDIR", syscall.SYS_MKDIR)
	_register("syscall.SYS_MKDIR_EXTENDED", syscall.SYS_MKDIR_EXTENDED)
	_register("syscall.SYS_MKFIFO", syscall.SYS_MKFIFO)
	_register("syscall.SYS_MKFIFO_EXTENDED", syscall.SYS_MKFIFO_EXTENDED)
	_register("syscall.SYS_MKNOD", syscall.SYS_MKNOD)
	_register("syscall.SYS_MLOCK", syscall.SYS_MLOCK)
	_register("syscall.SYS_MLOCKALL", syscall.SYS_MLOCKALL)
	_register("syscall.SYS_MMAP", syscall.SYS_MMAP)
	_register("syscall.SYS_MODWATCH", syscall.SYS_MODWATCH)
	_register("syscall.SYS_MOUNT", syscall.SYS_MOUNT)
	_register("syscall.SYS_MPROTECT", syscall.SYS_MPROTECT)
	_register("syscall.SYS_MSGCTL", syscall.SYS_MSGCTL)
	_register("syscall.SYS_MSGGET", syscall.SYS_MSGGET)
	_register("syscall.SYS_MSGRCV", syscall.SYS_MSGRCV)
	_register("syscall.SYS_MSGRCV_NOCANCEL", syscall.SYS_MSGRCV_NOCANCEL)
	_register("syscall.SYS_MSGSND", syscall.SYS_MSGSND)
	_register("syscall.SYS_MSGSND_NOCANCEL", syscall.SYS_MSGSND_NOCANCEL)
	_register("syscall.SYS_MSGSYS", syscall.SYS_MSGSYS)
	_register("syscall.SYS_MSYNC", syscall.SYS_MSYNC)
	_register("syscall.SYS_MSYNC_NOCANCEL", syscall.SYS_MSYNC_NOCANCEL)
	_register("syscall.SYS_MUNLOCK", syscall.SYS_MUNLOCK)
	_register("syscall.SYS_MUNLOCKALL", syscall.SYS_MUNLOCKALL)
	_register("syscall.SYS_MUNMAP", syscall.SYS_MUNMAP)
	_register("syscall.SYS_NFSCLNT", syscall.SYS_NFSCLNT)
	_register("syscall.SYS_NFSSVC", syscall.SYS_NFSSVC)
	_register("syscall.SYS_OPEN", syscall.SYS_OPEN)
	_register("syscall.SYS_OPEN_EXTENDED", syscall.SYS_OPEN_EXTENDED)
	_register("syscall.SYS_OPEN_NOCANCEL", syscall.SYS_OPEN_NOCANCEL)
	_register("syscall.SYS_PATHCONF", syscall.SYS_PATHCONF)
	_register("syscall.SYS_PID_HIBERNATE", syscall.SYS_PID_HIBERNATE)
	_register("syscall.SYS_PID_RESUME", syscall.SYS_PID_RESUME)
	_register("syscall.SYS_PID_SHUTDOWN_SOCKETS", syscall.SYS_PID_SHUTDOWN_SOCKETS)
	_register("syscall.SYS_PID_SUSPEND", syscall.SYS_PID_SUSPEND)
	_register("syscall.SYS_PIPE", syscall.SYS_PIPE)
	_register("syscall.SYS_POLL", syscall.SYS_POLL)
	_register("syscall.SYS_POLL_NOCANCEL", syscall.SYS_POLL_NOCANCEL)
	_register("syscall.SYS_POSIX_SPAWN", syscall.SYS_POSIX_SPAWN)
	_register("syscall.SYS_PREAD", syscall.SYS_PREAD)
	_register("syscall.SYS_PREAD_NOCANCEL", syscall.SYS_PREAD_NOCANCEL)
	_register("syscall.SYS_PROCESS_POLICY", syscall.SYS_PROCESS_POLICY)
	_register("syscall.SYS_PROC_INFO", syscall.SYS_PROC_INFO)
	_register("syscall.SYS_PROFIL", syscall.SYS_PROFIL)
	_register("syscall.SYS_PSYNCH_CVBROAD", syscall.SYS_PSYNCH_CVBROAD)
	_register("syscall.SYS_PSYNCH_CVCLRPREPOST", syscall.SYS_PSYNCH_CVCLRPREPOST)
	_register("syscall.SYS_PSYNCH_CVSIGNAL", syscall.SYS_PSYNCH_CVSIGNAL)
	_register("syscall.SYS_PSYNCH_CVWAIT", syscall.SYS_PSYNCH_CVWAIT)
	_register("syscall.SYS_PSYNCH_MUTEXDROP", syscall.SYS_PSYNCH_MUTEXDROP)
	_register("syscall.SYS_PSYNCH_MUTEXWAIT", syscall.SYS_PSYNCH_MUTEXWAIT)
	_register("syscall.SYS_PSYNCH_RW_DOWNGRADE", syscall.SYS_PSYNCH_RW_DOWNGRADE)
	_register("syscall.SYS_PSYNCH_RW_LONGRDLOCK", syscall.SYS_PSYNCH_RW_LONGRDLOCK)
	_register("syscall.SYS_PSYNCH_RW_RDLOCK", syscall.SYS_PSYNCH_RW_RDLOCK)
	_register("syscall.SYS_PSYNCH_RW_UNLOCK", syscall.SYS_PSYNCH_RW_UNLOCK)
	_register("syscall.SYS_PSYNCH_RW_UNLOCK2", syscall.SYS_PSYNCH_RW_UNLOCK2)
	_register("syscall.SYS_PSYNCH_RW_UPGRADE", syscall.SYS_PSYNCH_RW_UPGRADE)
	_register("syscall.SYS_PSYNCH_RW_WRLOCK", syscall.SYS_PSYNCH_RW_WRLOCK)
	_register("syscall.SYS_PSYNCH_RW_YIELDWRLOCK", syscall.SYS_PSYNCH_RW_YIELDWRLOCK)
	_register("syscall.SYS_PTRACE", syscall.SYS_PTRACE)
	_register("syscall.SYS_PWRITE", syscall.SYS_PWRITE)
	_register("syscall.SYS_PWRITE_NOCANCEL", syscall.SYS_PWRITE_NOCANCEL)
	_register("syscall.SYS_QUOTACTL", syscall.SYS_QUOTACTL)
	_register("syscall.SYS_READ", syscall.SYS_READ)
	_register("syscall.SYS_READLINK", syscall.SYS_READLINK)
	_register("syscall.SYS_READV", syscall.SYS_READV)
	_register("syscall.SYS_READV_NOCANCEL", syscall.SYS_READV_NOCANCEL)
	_register("syscall.SYS_READ_NOCANCEL", syscall.SYS_READ_NOCANCEL)
	_register("syscall.SYS_REBOOT", syscall.SYS_REBOOT)
	_register("syscall.SYS_RECVFROM", syscall.SYS_RECVFROM)
	_register("syscall.SYS_RECVFROM_NOCANCEL", syscall.SYS_RECVFROM_NOCANCEL)
	_register("syscall.SYS_RECVMSG", syscall.SYS_RECVMSG)
	_register("syscall.SYS_RECVMSG_NOCANCEL", syscall.SYS_RECVMSG_NOCANCEL)
	_register("syscall.SYS_REMOVEXATTR", syscall.SYS_REMOVEXATTR)
	_register("syscall.SYS_RENAME", syscall.SYS_RENAME)
	_register("syscall.SYS_REVOKE", syscall.SYS_REVOKE)
	_register("syscall.SYS_RMDIR", syscall.SYS_RMDIR)
	_register("syscall.SYS_SEARCHFS", syscall.SYS_SEARCHFS)
	_register("syscall.SYS_SELECT", syscall.SYS_SELECT)
	_register("syscall.SYS_SELECT_NOCANCEL", syscall.SYS_SELECT_NOCANCEL)
	_register("syscall.SYS_SEMCTL", syscall.SYS_SEMCTL)
	_register("syscall.SYS_SEMGET", syscall.SYS_SEMGET)
	_register("syscall.SYS_SEMOP", syscall.SYS_SEMOP)
	_register("syscall.SYS_SEMSYS", syscall.SYS_SEMSYS)
	_register("syscall.SYS_SEM_CLOSE", syscall.SYS_SEM_CLOSE)
	_register("syscall.SYS_SEM_DESTROY", syscall.SYS_SEM_DESTROY)
	_register("syscall.SYS_SEM_GETVALUE", syscall.SYS_SEM_GETVALUE)
	_register("syscall.SYS_SEM_INIT", syscall.SYS_SEM_INIT)
	_register("syscall.SYS_SEM_OPEN", syscall.SYS_SEM_OPEN)
	_register("syscall.SYS_SEM_POST", syscall.SYS_SEM_POST)
	_register("syscall.SYS_SEM_TRYWAIT", syscall.SYS_SEM_TRYWAIT)
	_register("syscall.SYS_SEM_UNLINK", syscall.SYS_SEM_UNLINK)
	_register("syscall.SYS_SEM_WAIT", syscall.SYS_SEM_WAIT)
	_register("syscall.SYS_SEM_WAIT_NOCANCEL", syscall.SYS_SEM_WAIT_NOCANCEL)
	_register("syscall.SYS_SENDFILE", syscall.SYS_SENDFILE)
	_register("syscall.SYS_SENDMSG", syscall.SYS_SENDMSG)
	_register("syscall.SYS_SENDMSG_NOCANCEL", syscall.SYS_SENDMSG_NOCANCEL)
	_register("syscall.SYS_SENDTO", syscall.SYS_SENDTO)
	_register("syscall.SYS_SENDTO_NOCANCEL", syscall.SYS_SENDTO_NOCANCEL)
	_register("syscall.SYS_SETATTRLIST", syscall.SYS_SETATTRLIST)
	_register("syscall.SYS_SETAUDIT", syscall.SYS_SETAUDIT)
	_register("syscall.SYS_SETAUDIT_ADDR", syscall.SYS_SETAUDIT_ADDR)
	_register("syscall.SYS_SETAUID", syscall.SYS_SETAUID)
	_register("syscall.SYS_SETEGID", syscall.SYS_SETEGID)
	_register("syscall.SYS_SETEUID", syscall.SYS_SETEUID)
	_register("syscall.SYS_SETGID", syscall.SYS_SETGID)
	_register("syscall.SYS_SETGROUPS", syscall.SYS_SETGROUPS)
	_register("syscall.SYS_SETITIMER", syscall.SYS_SETITIMER)
	_register("syscall.SYS_SETLCID", syscall.SYS_SETLCID)
	_register("syscall.SYS_SETLOGIN", syscall.SYS_SETLOGIN)
	_register("syscall.SYS_SETPGID", syscall.SYS_SETPGID)
	_register("syscall.SYS_SETPRIORITY", syscall.SYS_SETPRIORITY)
	_register("syscall.SYS_SETPRIVEXEC", syscall.SYS_SETPRIVEXEC)
	_register("syscall.SYS_SETREGID", syscall.SYS_SETREGID)
	_register("syscall.SYS_SETREUID", syscall.SYS_SETREUID)
	_register("syscall.SYS_SETRLIMIT", syscall.SYS_SETRLIMIT)
	_register("syscall.SYS_SETSGROUPS", syscall.SYS_SETSGROUPS)
	_register("syscall.SYS_SETSID", syscall.SYS_SETSID)
	_register("syscall.SYS_SETSOCKOPT", syscall.SYS_SETSOCKOPT)
	_register("syscall.SYS_SETTID", syscall.SYS_SETTID)
	_register("syscall.SYS_SETTID_WITH_PID", syscall.SYS_SETTID_WITH_PID)
	_register("syscall.SYS_SETTIMEOFDAY", syscall.SYS_SETTIMEOFDAY)
	_register("syscall.SYS_SETUID", syscall.SYS_SETUID)
	_register("syscall.SYS_SETWGROUPS", syscall.SYS_SETWGROUPS)
	_register("syscall.SYS_SETXATTR", syscall.SYS_SETXATTR)
	_register("syscall.SYS_SHARED_REGION_CHECK_NP", syscall.SYS_SHARED_REGION_CHECK_NP)
	_register("syscall.SYS_SHARED_REGION_MAP_AND_SLIDE_NP", syscall.SYS_SHARED_REGION_MAP_AND_SLIDE_NP)
	_register("syscall.SYS_SHMAT", syscall.SYS_SHMAT)
	_register("syscall.SYS_SHMCTL", syscall.SYS_SHMCTL)
	_register("syscall.SYS_SHMDT", syscall.SYS_SHMDT)
	_register("syscall.SYS_SHMGET", syscall.SYS_SHMGET)
	_register("syscall.SYS_SHMSYS", syscall.SYS_SHMSYS)
	_register("syscall.SYS_SHM_OPEN", syscall.SYS_SHM_OPEN)
	_register("syscall.SYS_SHM_UNLINK", syscall.SYS_SHM_UNLINK)
	_register("syscall.SYS_SHUTDOWN", syscall.SYS_SHUTDOWN)
	_register("syscall.SYS_SIGACTION", syscall.SYS_SIGACTION)
	_register("syscall.SYS_SIGALTSTACK", syscall.SYS_SIGALTSTACK)
	_register("syscall.SYS_SIGPENDING", syscall.SYS_SIGPENDING)
	_register("syscall.SYS_SIGPROCMASK", syscall.SYS_SIGPROCMASK)
	_register("syscall.SYS_SIGRETURN", syscall.SYS_SIGRETURN)
	_register("syscall.SYS_SIGSUSPEND", syscall.SYS_SIGSUSPEND)
	_register("syscall.SYS_SIGSUSPEND_NOCANCEL", syscall.SYS_SIGSUSPEND_NOCANCEL)
	_register("syscall.SYS_SOCKET", syscall.SYS_SOCKET)
	_register("syscall.SYS_SOCKETPAIR", syscall.SYS_SOCKETPAIR)
	_register("syscall.SYS_STACK_SNAPSHOT", syscall.SYS_STACK_SNAPSHOT)
	_register("syscall.SYS_STAT", syscall.SYS_STAT)
	_register("syscall.SYS_STAT64", syscall.SYS_STAT64)
	_register("syscall.SYS_STAT64_EXTENDED", syscall.SYS_STAT64_EXTENDED)
	_register("syscall.SYS_STATFS", syscall.SYS_STATFS)
	_register("syscall.SYS_STATFS64", syscall.SYS_STATFS64)
	_register("syscall.SYS_STATV", syscall.SYS_STATV)
	_register("syscall.SYS_STAT_EXTENDED", syscall.SYS_STAT_EXTENDED)
	_register("syscall.SYS_SWAPON", syscall.SYS_SWAPON)
	_register("syscall.SYS_SYMLINK", syscall.SYS_SYMLINK)
	_register("syscall.SYS_SYNC", syscall.SYS_SYNC)
	_register("syscall.SYS_SYSCALL", syscall.SYS_SYSCALL)
	_register("syscall.SYS_THREAD_SELFID", syscall.SYS_THREAD_SELFID)
	_register("syscall.SYS_TRUNCATE", syscall.SYS_TRUNCATE)
	_register("syscall.SYS_UMASK", syscall.SYS_UMASK)
	_register("syscall.SYS_UMASK_EXTENDED", syscall.SYS_UMASK_EXTENDED)
	_register("syscall.SYS_UNDELETE", syscall.SYS_UNDELETE)
	_register("syscall.SYS_UNLINK", syscall.SYS_UNLINK)
	_register("syscall.SYS_UNMOUNT", syscall.SYS_UNMOUNT)
	_register("syscall.SYS_UTIMES", syscall.SYS_UTIMES)
	_register("syscall.SYS_VFORK", syscall.SYS_VFORK)
	_register("syscall.SYS_VM_PRESSURE_MONITOR", syscall.SYS_VM_PRESSURE_MONITOR)
	_register("syscall.SYS_WAIT4", syscall.SYS_WAIT4)
	_register("syscall.SYS_WAIT4_NOCANCEL", syscall.SYS_WAIT4_NOCANCEL)
	_register("syscall.SYS_WAITEVENT", syscall.SYS_WAITEVENT)
	_register("syscall.SYS_WAITID", syscall.SYS_WAITID)
	_register("syscall.SYS_WAITID_NOCANCEL", syscall.SYS_WAITID_NOCANCEL)
	_register("syscall.SYS_WATCHEVENT", syscall.SYS_WATCHEVENT)
	_register("syscall.SYS_WORKQ_KERNRETURN", syscall.SYS_WORKQ_KERNRETURN)
	_register("syscall.SYS_WORKQ_OPEN", syscall.SYS_WORKQ_OPEN)
	_register("syscall.SYS_WRITE", syscall.SYS_WRITE)
	_register("syscall.SYS_WRITEV", syscall.SYS_WRITEV)
	_register("syscall.SYS_WRITEV_NOCANCEL", syscall.SYS_WRITEV_NOCANCEL)
	_register("syscall.SYS_WRITE_NOCANCEL", syscall.SYS_WRITE_NOCANCEL)
	_register("syscall.SYS___DISABLE_THREADSIGNAL", syscall.SYS___DISABLE_THREADSIGNAL)
	_register("syscall.SYS___MAC_EXECVE", syscall.SYS___MAC_EXECVE)
	_register("syscall.SYS___MAC_GETFSSTAT", syscall.SYS___MAC_GETFSSTAT)
	_register("syscall.SYS___MAC_GET_FD", syscall.SYS___MAC_GET_FD)
	_register("syscall.SYS___MAC_GET_FILE", syscall.SYS___MAC_GET_FILE)
	_register("syscall.SYS___MAC_GET_LCID", syscall.SYS___MAC_GET_LCID)
	_register("syscall.SYS___MAC_GET_LCTX", syscall.SYS___MAC_GET_LCTX)
	_register("syscall.SYS___MAC_GET_LINK", syscall.SYS___MAC_GET_LINK)
	_register("syscall.SYS___MAC_GET_MOUNT", syscall.SYS___MAC_GET_MOUNT)
	_register("syscall.SYS___MAC_GET_PID", syscall.SYS___MAC_GET_PID)
	_register("syscall.SYS___MAC_GET_PROC", syscall.SYS___MAC_GET_PROC)
	_register("syscall.SYS___MAC_MOUNT", syscall.SYS___MAC_MOUNT)
	_register("syscall.SYS___MAC_SET_FD", syscall.SYS___MAC_SET_FD)
	_register("syscall.SYS___MAC_SET_FILE", syscall.SYS___MAC_SET_FILE)
	_register("syscall.SYS___MAC_SET_LCTX", syscall.SYS___MAC_SET_LCTX)
	_register("syscall.SYS___MAC_SET_LINK", syscall.SYS___MAC_SET_LINK)
	_register("syscall.SYS___MAC_SET_PROC", syscall.SYS___MAC_SET_PROC)
	_register("syscall.SYS___MAC_SYSCALL", syscall.SYS___MAC_SYSCALL)
	_register("syscall.SYS___OLD_SEMWAIT_SIGNAL", syscall.SYS___OLD_SEMWAIT_SIGNAL)
	_register("syscall.SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL", syscall.SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL)
	_register("syscall.SYS___PTHREAD_CANCELED", syscall.SYS___PTHREAD_CANCELED)
	_register("syscall.SYS___PTHREAD_CHDIR", syscall.SYS___PTHREAD_CHDIR)
	_register("syscall.SYS___PTHREAD_FCHDIR", syscall.SYS___PTHREAD_FCHDIR)
	_register("syscall.SYS___PTHREAD_KILL", syscall.SYS___PTHREAD_KILL)
	_register("syscall.SYS___PTHREAD_MARKCANCEL", syscall.SYS___PTHREAD_MARKCANCEL)
	_register("syscall.SYS___PTHREAD_SIGMASK", syscall.SYS___PTHREAD_SIGMASK)
	_register("syscall.SYS___SEMWAIT_SIGNAL", syscall.SYS___SEMWAIT_SIGNAL)
	_register("syscall.SYS___SEMWAIT_SIGNAL_NOCANCEL", syscall.SYS___SEMWAIT_SIGNAL_NOCANCEL)
	_register("syscall.SYS___SIGWAIT", syscall.SYS___SIGWAIT)
	_register("syscall.SYS___SIGWAIT_NOCANCEL", syscall.SYS___SIGWAIT_NOCANCEL)
	_register("syscall.SYS___SYSCTL", syscall.SYS___SYSCTL)
	_register("syscall.S_IEXEC", syscall.S_IEXEC)
	_register("syscall.S_IFBLK", syscall.S_IFBLK)
	_register("syscall.S_IFCHR", syscall.S_IFCHR)
	_register("syscall.S_IFDIR", syscall.S_IFDIR)
	_register("syscall.S_IFIFO", syscall.S_IFIFO)
	_register("syscall.S_IFLNK", syscall.S_IFLNK)
	_register("syscall.S_IFMT", syscall.S_IFMT)
	_register("syscall.S_IFREG", syscall.S_IFREG)
	_register("syscall.S_IFSOCK", syscall.S_IFSOCK)
	_register("syscall.S_IFWHT", syscall.S_IFWHT)
	_register("syscall.S_IREAD", syscall.S_IREAD)
	_register("syscall.S_IRGRP", syscall.S_IRGRP)
	_register("syscall.S_IROTH", syscall.S_IROTH)
	_register("syscall.S_IRUSR", syscall.S_IRUSR)
	_register("syscall.S_IRWXG", syscall.S_IRWXG)
	_register("syscall.S_IRWXO", syscall.S_IRWXO)
	_register("syscall.S_IRWXU", syscall.S_IRWXU)
	_register("syscall.S_ISGID", syscall.S_ISGID)
	_register("syscall.S_ISTXT", syscall.S_ISTXT)
	_register("syscall.S_ISUID", syscall.S_ISUID)
	_register("syscall.S_ISVTX", syscall.S_ISVTX)
	_register("syscall.S_IWGRP", syscall.S_IWGRP)
	_register("syscall.S_IWOTH", syscall.S_IWOTH)
	_register("syscall.S_IWRITE", syscall.S_IWRITE)
	_register("syscall.S_IWUSR", syscall.S_IWUSR)
	_register("syscall.S_IXGRP", syscall.S_IXGRP)
	_register("syscall.S_IXOTH", syscall.S_IXOTH)
	_register("syscall.S_IXUSR", syscall.S_IXUSR)
	_register("syscall.Seek", syscall.Seek)
	_register("syscall.Select", syscall.Select)
	_register("syscall.Sendfile", syscall.Sendfile)
	_register("syscall.Sendmsg", syscall.Sendmsg)
	_register("syscall.SendmsgN", syscall.SendmsgN)
	_register("syscall.Sendto", syscall.Sendto)
	_register("syscall.SetBpf", syscall.SetBpf)
	_register("syscall.SetBpfBuflen", syscall.SetBpfBuflen)
	_register("syscall.SetBpfDatalink", syscall.SetBpfDatalink)
	_register("syscall.SetBpfHeadercmpl", syscall.SetBpfHeadercmpl)
	_register("syscall.SetBpfImmediate", syscall.SetBpfImmediate)
	_register("syscall.SetBpfInterface", syscall.SetBpfInterface)
	_register("syscall.SetBpfPromisc", syscall.SetBpfPromisc)
	_register("syscall.SetBpfTimeout", syscall.SetBpfTimeout)
	_register("syscall.SetKevent", syscall.SetKevent)
	_register("syscall.SetNonblock", syscall.SetNonblock)
	_register("syscall.Setegid", syscall.Setegid)
	_register("syscall.Setenv", syscall.Setenv)
	_register("syscall.Seteuid", syscall.Seteuid)
	_register("syscall.Setgid", syscall.Setgid)
	_register("syscall.Setgroups", syscall.Setgroups)
	_register("syscall.Setlogin", syscall.Setlogin)
	_register("syscall.Setpgid", syscall.Setpgid)
	_register("syscall.Setpriority", syscall.Setpriority)
	_register("syscall.Setprivexec", syscall.Setprivexec)
	_register("syscall.Setregid", syscall.Setregid)
	_register("syscall.Setreuid", syscall.Setreuid)
	_register("syscall.Setrlimit", syscall.Setrlimit)
	_register("syscall.Setsid", syscall.Setsid)
	_register("syscall.SetsockoptByte", syscall.SetsockoptByte)
	_register("syscall.SetsockoptICMPv6Filter", syscall.SetsockoptICMPv6Filter)
	_register("syscall.SetsockoptIPMreq", syscall.SetsockoptIPMreq)
	_register("syscall.SetsockoptIPv6Mreq", syscall.SetsockoptIPv6Mreq)
	_register("syscall.SetsockoptInet4Addr", syscall.SetsockoptInet4Addr)
	_register("syscall.SetsockoptInt", syscall.SetsockoptInt)
	_register("syscall.SetsockoptLinger", syscall.SetsockoptLinger)
	_register("syscall.SetsockoptString", syscall.SetsockoptString)
	_register("syscall.SetsockoptTimeval", syscall.SetsockoptTimeval)
	_register("syscall.Settimeofday", syscall.Settimeofday)
	_register("syscall.Setuid", syscall.Setuid)
	_register("syscall.Shutdown", syscall.Shutdown)
	_register("syscall.Signal", reflect.TypeOf((*syscall.Signal)(nil)).Elem())
	_register("syscall.SizeofBpfHdr", syscall.SizeofBpfHdr)
	_register("syscall.SizeofBpfInsn", syscall.SizeofBpfInsn)
	_register("syscall.SizeofBpfProgram", syscall.SizeofBpfProgram)
	_register("syscall.SizeofBpfStat", syscall.SizeofBpfStat)
	_register("syscall.SizeofBpfVersion", syscall.SizeofBpfVersion)
	_register("syscall.SizeofCmsghdr", syscall.SizeofCmsghdr)
	_register("syscall.SizeofICMPv6Filter", syscall.SizeofICMPv6Filter)
	_register("syscall.SizeofIPMreq", syscall.SizeofIPMreq)
	_register("syscall.SizeofIPv6MTUInfo", syscall.SizeofIPv6MTUInfo)
	_register("syscall.SizeofIPv6Mreq", syscall.SizeofIPv6Mreq)
	_register("syscall.SizeofIfData", syscall.SizeofIfData)
	_register("syscall.SizeofIfMsghdr", syscall.SizeofIfMsghdr)
	_register("syscall.SizeofIfaMsghdr", syscall.SizeofIfaMsghdr)
	_register("syscall.SizeofIfmaMsghdr", syscall.SizeofIfmaMsghdr)
	_register("syscall.SizeofIfmaMsghdr2", syscall.SizeofIfmaMsghdr2)
	_register("syscall.SizeofInet4Pktinfo", syscall.SizeofInet4Pktinfo)
	_register("syscall.SizeofInet6Pktinfo", syscall.SizeofInet6Pktinfo)
	_register("syscall.SizeofLinger", syscall.SizeofLinger)
	_register("syscall.SizeofMsghdr", syscall.SizeofMsghdr)
	_register("syscall.SizeofRtMetrics", syscall.SizeofRtMetrics)
	_register("syscall.SizeofRtMsghdr", syscall.SizeofRtMsghdr)
	_register("syscall.SizeofSockaddrAny", syscall.SizeofSockaddrAny)
	_register("syscall.SizeofSockaddrDatalink", syscall.SizeofSockaddrDatalink)
	_register("syscall.SizeofSockaddrInet4", syscall.SizeofSockaddrInet4)
	_register("syscall.SizeofSockaddrInet6", syscall.SizeofSockaddrInet6)
	_register("syscall.SizeofSockaddrUnix", syscall.SizeofSockaddrUnix)
	_register("syscall.SlicePtrFromStrings", syscall.SlicePtrFromStrings)
	_register("syscall.Sockaddr", reflect.TypeOf((*syscall.Sockaddr)(nil)).Elem())
	_register("syscall.SockaddrDatalink", reflect.TypeOf((*syscall.SockaddrDatalink)(nil)).Elem())
	_register("syscall.SockaddrInet4", reflect.TypeOf((*syscall.SockaddrInet4)(nil)).Elem())
	_register("syscall.SockaddrInet6", reflect.TypeOf((*syscall.SockaddrInet6)(nil)).Elem())
	_register("syscall.SockaddrUnix", reflect.TypeOf((*syscall.SockaddrUnix)(nil)).Elem())
	_register("syscall.Socket", syscall.Socket)
	_register("syscall.SocketControlMessage", reflect.TypeOf((*syscall.SocketControlMessage)(nil)).Elem())
	_register("syscall.SocketDisableIPv6", syscall.SocketDisableIPv6)
	_register("syscall.Socketpair", syscall.Socketpair)
	_register("syscall.StartProcess", syscall.StartProcess)
	_register("syscall.Stat", syscall.Stat)
	_register("syscall.Stat_t", reflect.TypeOf((*syscall.Stat_t)(nil)).Elem())
	_register("syscall.Statfs", syscall.Statfs)
	_register("syscall.Statfs_t", reflect.TypeOf((*syscall.Statfs_t)(nil)).Elem())
	_register("syscall.Stderr", syscall.Stderr)
	_register("syscall.Stdin", syscall.Stdin)
	_register("syscall.Stdout", syscall.Stdout)
	_register("syscall.StringBytePtr", syscall.StringBytePtr)
	_register("syscall.StringByteSlice", syscall.StringByteSlice)
	_register("syscall.StringSlicePtr", syscall.StringSlicePtr)
	_register("syscall.Symlink", syscall.Symlink)
	_register("syscall.Sync", syscall.Sync)
	_register("syscall.SysProcAttr", reflect.TypeOf((*syscall.SysProcAttr)(nil)).Elem())
	_register("syscall.Syscall", syscall.Syscall)
	_register("syscall.Syscall6", syscall.Syscall6)
	_register("syscall.Syscall9", syscall.Syscall9)
	_register("syscall.Sysctl", syscall.Sysctl)
	_register("syscall.SysctlUint32", syscall.SysctlUint32)
	_register("syscall.TCIFLUSH", syscall.TCIFLUSH)
	_register("syscall.TCIOFLUSH", syscall.TCIOFLUSH)
	_register("syscall.TCOFLUSH", syscall.TCOFLUSH)
	_register("syscall.TCP_CONNECTIONTIMEOUT", syscall.TCP_CONNECTIONTIMEOUT)
	_register("syscall.TCP_KEEPALIVE", syscall.TCP_KEEPALIVE)
	_register("syscall.TCP_MAXHLEN", syscall.TCP_MAXHLEN)
	_register("syscall.TCP_MAXOLEN", syscall.TCP_MAXOLEN)
	_register("syscall.TCP_MAXSEG", syscall.TCP_MAXSEG)
	_register("syscall.TCP_MAXWIN", syscall.TCP_MAXWIN)
	_register("syscall.TCP_MAX_SACK", syscall.TCP_MAX_SACK)
	_register("syscall.TCP_MAX_WINSHIFT", syscall.TCP_MAX_WINSHIFT)
	_register("syscall.TCP_MINMSS", syscall.TCP_MINMSS)
	_register("syscall.TCP_MINMSSOVERLOAD", syscall.TCP_MINMSSOVERLOAD)
	_register("syscall.TCP_MSS", syscall.TCP_MSS)
	_register("syscall.TCP_NODELAY", syscall.TCP_NODELAY)
	_register("syscall.TCP_NOOPT", syscall.TCP_NOOPT)
	_register("syscall.TCP_NOPUSH", syscall.TCP_NOPUSH)
	_register("syscall.TCP_RXT_CONNDROPTIME", syscall.TCP_RXT_CONNDROPTIME)
	_register("syscall.TCP_RXT_FINDROP", syscall.TCP_RXT_FINDROP)
	_register("syscall.TCSAFLUSH", syscall.TCSAFLUSH)
	_register("syscall.TIOCCBRK", syscall.TIOCCBRK)
	_register("syscall.TIOCCDTR", syscall.TIOCCDTR)
	_register("syscall.TIOCCONS", syscall.TIOCCONS)
	_register("syscall.TIOCDCDTIMESTAMP", syscall.TIOCDCDTIMESTAMP)
	_register("syscall.TIOCDRAIN", syscall.TIOCDRAIN)
	_register("syscall.TIOCDSIMICROCODE", syscall.TIOCDSIMICROCODE)
	_register("syscall.TIOCEXCL", syscall.TIOCEXCL)
	_register("syscall.TIOCEXT", syscall.TIOCEXT)
	_register("syscall.TIOCFLUSH", syscall.TIOCFLUSH)
	_register("syscall.TIOCGDRAINWAIT", syscall.TIOCGDRAINWAIT)
	_register("syscall.TIOCGETA", syscall.TIOCGETA)
	_register("syscall.TIOCGETD", syscall.TIOCGETD)
	_register("syscall.TIOCGPGRP", syscall.TIOCGPGRP)
	_register("syscall.TIOCGWINSZ", syscall.TIOCGWINSZ)
	_register("syscall.TIOCIXOFF", syscall.TIOCIXOFF)
	_register("syscall.TIOCIXON", syscall.TIOCIXON)
	_register("syscall.TIOCMBIC", syscall.TIOCMBIC)
	_register("syscall.TIOCMBIS", syscall.TIOCMBIS)
	_register("syscall.TIOCMGDTRWAIT", syscall.TIOCMGDTRWAIT)
	_register("syscall.TIOCMGET", syscall.TIOCMGET)
	_register("syscall.TIOCMODG", syscall.TIOCMODG)
	_register("syscall.TIOCMODS", syscall.TIOCMODS)
	_register("syscall.TIOCMSDTRWAIT", syscall.TIOCMSDTRWAIT)
	_register("syscall.TIOCMSET", syscall.TIOCMSET)
	_register("syscall.TIOCM_CAR", syscall.TIOCM_CAR)
	_register("syscall.TIOCM_CD", syscall.TIOCM_CD)
	_register("syscall.TIOCM_CTS", syscall.TIOCM_CTS)
	_register("syscall.TIOCM_DSR", syscall.TIOCM_DSR)
	_register("syscall.TIOCM_DTR", syscall.TIOCM_DTR)
	_register("syscall.TIOCM_LE", syscall.TIOCM_LE)
	_register("syscall.TIOCM_RI", syscall.TIOCM_RI)
	_register("syscall.TIOCM_RNG", syscall.TIOCM_RNG)
	_register("syscall.TIOCM_RTS", syscall.TIOCM_RTS)
	_register("syscall.TIOCM_SR", syscall.TIOCM_SR)
	_register("syscall.TIOCM_ST", syscall.TIOCM_ST)
	_register("syscall.TIOCNOTTY", syscall.TIOCNOTTY)
	_register("syscall.TIOCNXCL", syscall.TIOCNXCL)
	_register("syscall.TIOCOUTQ", syscall.TIOCOUTQ)
	_register("syscall.TIOCPKT", syscall.TIOCPKT)
	_register("syscall.TIOCPKT_DATA", syscall.TIOCPKT_DATA)
	_register("syscall.TIOCPKT_DOSTOP", syscall.TIOCPKT_DOSTOP)
	_register("syscall.TIOCPKT_FLUSHREAD", syscall.TIOCPKT_FLUSHREAD)
	_register("syscall.TIOCPKT_FLUSHWRITE", syscall.TIOCPKT_FLUSHWRITE)
	_register("syscall.TIOCPKT_IOCTL", syscall.TIOCPKT_IOCTL)
	_register("syscall.TIOCPKT_NOSTOP", syscall.TIOCPKT_NOSTOP)
	_register("syscall.TIOCPKT_START", syscall.TIOCPKT_START)
	_register("syscall.TIOCPKT_STOP", syscall.TIOCPKT_STOP)
	_register("syscall.TIOCPTYGNAME", syscall.TIOCPTYGNAME)
	_register("syscall.TIOCPTYGRANT", syscall.TIOCPTYGRANT)
	_register("syscall.TIOCPTYUNLK", syscall.TIOCPTYUNLK)
	_register("syscall.TIOCREMOTE", syscall.TIOCREMOTE)
	_register("syscall.TIOCSBRK", syscall.TIOCSBRK)
	_register("syscall.TIOCSCONS", syscall.TIOCSCONS)
	_register("syscall.TIOCSCTTY", syscall.TIOCSCTTY)
	_register("syscall.TIOCSDRAINWAIT", syscall.TIOCSDRAINWAIT)
	_register("syscall.TIOCSDTR", syscall.TIOCSDTR)
	_register("syscall.TIOCSETA", syscall.TIOCSETA)
	_register("syscall.TIOCSETAF", syscall.TIOCSETAF)
	_register("syscall.TIOCSETAW", syscall.TIOCSETAW)
	_register("syscall.TIOCSETD", syscall.TIOCSETD)
	_register("syscall.TIOCSIG", syscall.TIOCSIG)
	_register("syscall.TIOCSPGRP", syscall.TIOCSPGRP)
	_register("syscall.TIOCSTART", syscall.TIOCSTART)
	_register("syscall.TIOCSTAT", syscall.TIOCSTAT)
	_register("syscall.TIOCSTI", syscall.TIOCSTI)
	_register("syscall.TIOCSTOP", syscall.TIOCSTOP)
	_register("syscall.TIOCSWINSZ", syscall.TIOCSWINSZ)
	_register("syscall.TIOCTIMESTAMP", syscall.TIOCTIMESTAMP)
	_register("syscall.TIOCUCNTL", syscall.TIOCUCNTL)
	_register("syscall.TOSTOP", syscall.TOSTOP)
	_register("syscall.Termios", reflect.TypeOf((*syscall.Termios)(nil)).Elem())
	_register("syscall.Timespec", reflect.TypeOf((*syscall.Timespec)(nil)).Elem())
	_register("syscall.TimespecToNsec", syscall.TimespecToNsec)
	_register("syscall.Timeval", reflect.TypeOf((*syscall.Timeval)(nil)).Elem())
	_register("syscall.Timeval32", reflect.TypeOf((*syscall.Timeval32)(nil)).Elem())
	_register("syscall.TimevalToNsec", syscall.TimevalToNsec)
	_register("syscall.Truncate", syscall.Truncate)
	_register("syscall.Umask", syscall.Umask)
	_register("syscall.Undelete", syscall.Undelete)
	_register("syscall.UnixRights", syscall.UnixRights)
	_register("syscall.Unlink", syscall.Unlink)
	_register("syscall.Unmount", syscall.Unmount)
	_register("syscall.Unsetenv", syscall.Unsetenv)
	_register("syscall.Utimes", syscall.Utimes)
	_register("syscall.UtimesNano", syscall.UtimesNano)
	_register("syscall.VDISCARD", syscall.VDISCARD)
	_register("syscall.VDSUSP", syscall.VDSUSP)
	_register("syscall.VEOF", syscall.VEOF)
	_register("syscall.VEOL", syscall.VEOL)
	_register("syscall.VEOL2", syscall.VEOL2)
	_register("syscall.VERASE", syscall.VERASE)
	_register("syscall.VINTR", syscall.VINTR)
	_register("syscall.VKILL", syscall.VKILL)
	_register("syscall.VLNEXT", syscall.VLNEXT)
	_register("syscall.VMIN", syscall.VMIN)
	_register("syscall.VQUIT", syscall.VQUIT)
	_register("syscall.VREPRINT", syscall.VREPRINT)
	_register("syscall.VSTART", syscall.VSTART)
	_register("syscall.VSTATUS", syscall.VSTATUS)
	_register("syscall.VSTOP", syscall.VSTOP)
	_register("syscall.VSUSP", syscall.VSUSP)
	_register("syscall.VT0", syscall.VT0)
	_register("syscall.VT1", syscall.VT1)
	_register("syscall.VTDLY", syscall.VTDLY)
	_register("syscall.VTIME", syscall.VTIME)
	_register("syscall.VWERASE", syscall.VWERASE)
	_register("syscall.WCONTINUED", syscall.WCONTINUED)
	_register("syscall.WCOREFLAG", syscall.WCOREFLAG)
	_register("syscall.WEXITED", syscall.WEXITED)
	_register("syscall.WNOHANG", syscall.WNOHANG)
	_register("syscall.WNOWAIT", syscall.WNOWAIT)
	_register("syscall.WORDSIZE", syscall.WORDSIZE)
	_register("syscall.WSTOPPED", syscall.WSTOPPED)
	_register("syscall.WUNTRACED", syscall.WUNTRACED)
	_register("syscall.Wait4", syscall.Wait4)
	_register("syscall.WaitStatus", reflect.TypeOf((*syscall.WaitStatus)(nil)).Elem())
	_register("syscall.Write", syscall.Write)

	// package testing
	////////////////////////////////////////
	_register("testing.AllocsPerRun", testing.AllocsPerRun)
	_register("testing.B", reflect.TypeOf((*testing.B)(nil)).Elem())
	_register("testing.Benchmark", testing.Benchmark)
	_register("testing.BenchmarkResult", reflect.TypeOf((*testing.BenchmarkResult)(nil)).Elem())
	_register("testing.Cover", reflect.TypeOf((*testing.Cover)(nil)).Elem())
	_register("testing.CoverBlock", reflect.TypeOf((*testing.CoverBlock)(nil)).Elem())
	_register("testing.CoverMode", testing.CoverMode)
	_register("testing.Coverage", testing.Coverage)
	_register("testing.F", reflect.TypeOf((*testing.F)(nil)).Elem())
	_register("testing.Init", testing.Init)
	_register("testing.InternalBenchmark", reflect.TypeOf((*testing.InternalBenchmark)(nil)).Elem())
	_register("testing.InternalExample", reflect.TypeOf((*testing.InternalExample)(nil)).Elem())
	_register("testing.InternalFuzzTarget", reflect.TypeOf((*testing.InternalFuzzTarget)(nil)).Elem())
	_register("testing.InternalTest", reflect.TypeOf((*testing.InternalTest)(nil)).Elem())
	_register("testing.M", reflect.TypeOf((*testing.M)(nil)).Elem())
	_register("testing.Main", testing.Main)
	_register("testing.MainStart", testing.MainStart)
	_register("testing.PB", reflect.TypeOf((*testing.PB)(nil)).Elem())
	_register("testing.RegisterCover", testing.RegisterCover)
	_register("testing.RunBenchmarks", testing.RunBenchmarks)
	_register("testing.RunExamples", testing.RunExamples)
	_register("testing.RunTests", testing.RunTests)
	_register("testing.Short", testing.Short)
	_register("testing.T", reflect.TypeOf((*testing.T)(nil)).Elem())
	_register("testing.TB", reflect.TypeOf((*testing.TB)(nil)).Elem())
	_register("testing.Verbose", testing.Verbose)

	// package testing/fstest
	////////////////////////////////////////
	_register("testing/fstest.MapFS", reflect.TypeOf((*testing_fstest.MapFS)(nil)).Elem())
	_register("testing/fstest.MapFile", reflect.TypeOf((*testing_fstest.MapFile)(nil)).Elem())
	_register("testing/fstest.TestFS", testing_fstest.TestFS)

	// package testing/iotest
	////////////////////////////////////////
	_register("testing/iotest.DataErrReader", testing_iotest.DataErrReader)
	_register("testing/iotest.ErrReader", testing_iotest.ErrReader)
	_register("testing/iotest.ErrTimeout", testing_iotest.ErrTimeout)
	_register("testing/iotest.HalfReader", testing_iotest.HalfReader)
	_register("testing/iotest.NewReadLogger", testing_iotest.NewReadLogger)
	_register("testing/iotest.NewWriteLogger", testing_iotest.NewWriteLogger)
	_register("testing/iotest.OneByteReader", testing_iotest.OneByteReader)
	_register("testing/iotest.TestReader", testing_iotest.TestReader)
	_register("testing/iotest.TimeoutReader", testing_iotest.TimeoutReader)
	_register("testing/iotest.TruncateWriter", testing_iotest.TruncateWriter)

	// package testing/quick
	////////////////////////////////////////
	_register("testing/quick.Check", testing_quick.Check)
	_register("testing/quick.CheckEqual", testing_quick.CheckEqual)
	_register("testing/quick.CheckEqualError", reflect.TypeOf((*testing_quick.CheckEqualError)(nil)).Elem())
	_register("testing/quick.CheckError", reflect.TypeOf((*testing_quick.CheckError)(nil)).Elem())
	_register("testing/quick.Config", reflect.TypeOf((*testing_quick.Config)(nil)).Elem())
	_register("testing/quick.Generator", reflect.TypeOf((*testing_quick.Generator)(nil)).Elem())
	_register("testing/quick.SetupError", reflect.TypeOf((*testing_quick.SetupError)(nil)).Elem())
	_register("testing/quick.Value", testing_quick.Value)

	// package text/scanner
	////////////////////////////////////////
	_register("text/scanner.Char", text_scanner.Char)
	_register("text/scanner.Comment", text_scanner.Comment)
	_register("text/scanner.EOF", text_scanner.EOF)
	_register("text/scanner.Float", text_scanner.Float)
	_register("text/scanner.GoTokens", text_scanner.GoTokens)
	_register("text/scanner.GoWhitespace", text_scanner.GoWhitespace)
	_register("text/scanner.Ident", text_scanner.Ident)
	_register("text/scanner.Int", text_scanner.Int)
	_register("text/scanner.Position", reflect.TypeOf((*text_scanner.Position)(nil)).Elem())
	_register("text/scanner.RawString", text_scanner.RawString)
	_register("text/scanner.ScanChars", text_scanner.ScanChars)
	_register("text/scanner.ScanComments", text_scanner.ScanComments)
	_register("text/scanner.ScanFloats", text_scanner.ScanFloats)
	_register("text/scanner.ScanIdents", text_scanner.ScanIdents)
	_register("text/scanner.ScanInts", text_scanner.ScanInts)
	_register("text/scanner.ScanRawStrings", text_scanner.ScanRawStrings)
	_register("text/scanner.ScanStrings", text_scanner.ScanStrings)
	_register("text/scanner.Scanner", reflect.TypeOf((*text_scanner.Scanner)(nil)).Elem())
	_register("text/scanner.SkipComments", text_scanner.SkipComments)
	_register("text/scanner.String", text_scanner.String)
	_register("text/scanner.TokenString", text_scanner.TokenString)

	// package text/tabwriter
	////////////////////////////////////////
	_register("text/tabwriter.AlignRight", text_tabwriter.AlignRight)
	_register("text/tabwriter.Debug", text_tabwriter.Debug)
	_register("text/tabwriter.DiscardEmptyColumns", text_tabwriter.DiscardEmptyColumns)
	_register("text/tabwriter.Escape", text_tabwriter.Escape)
	_register("text/tabwriter.FilterHTML", text_tabwriter.FilterHTML)
	_register("text/tabwriter.NewWriter", text_tabwriter.NewWriter)
	_register("text/tabwriter.StripEscape", text_tabwriter.StripEscape)
	_register("text/tabwriter.TabIndent", text_tabwriter.TabIndent)
	_register("text/tabwriter.Writer", reflect.TypeOf((*text_tabwriter.Writer)(nil)).Elem())

	// package text/template
	////////////////////////////////////////
	_register("text/template.ExecError", reflect.TypeOf((*text_template.ExecError)(nil)).Elem())
	_register("text/template.FuncMap", reflect.TypeOf((*text_template.FuncMap)(nil)).Elem())
	_register("text/template.HTMLEscape", text_template.HTMLEscape)
	_register("text/template.HTMLEscapeString", text_template.HTMLEscapeString)
	_register("text/template.HTMLEscaper", text_template.HTMLEscaper)
	_register("text/template.IsTrue", text_template.IsTrue)
	_register("text/template.JSEscape", text_template.JSEscape)
	_register("text/template.JSEscapeString", text_template.JSEscapeString)
	_register("text/template.JSEscaper", text_template.JSEscaper)
	_register("text/template.Must", text_template.Must)
	_register("text/template.New", text_template.New)
	_register("text/template.ParseFS", text_template.ParseFS)
	_register("text/template.ParseFiles", text_template.ParseFiles)
	_register("text/template.ParseGlob", text_template.ParseGlob)
	_register("text/template.Template", reflect.TypeOf((*text_template.Template)(nil)).Elem())
	_register("text/template.URLQueryEscaper", text_template.URLQueryEscaper)

	// package text/template/parse
	////////////////////////////////////////
	_register("text/template/parse.ActionNode", reflect.TypeOf((*text_template_parse.ActionNode)(nil)).Elem())
	_register("text/template/parse.BoolNode", reflect.TypeOf((*text_template_parse.BoolNode)(nil)).Elem())
	_register("text/template/parse.BranchNode", reflect.TypeOf((*text_template_parse.BranchNode)(nil)).Elem())
	_register("text/template/parse.BreakNode", reflect.TypeOf((*text_template_parse.BreakNode)(nil)).Elem())
	_register("text/template/parse.ChainNode", reflect.TypeOf((*text_template_parse.ChainNode)(nil)).Elem())
	_register("text/template/parse.CommandNode", reflect.TypeOf((*text_template_parse.CommandNode)(nil)).Elem())
	_register("text/template/parse.CommentNode", reflect.TypeOf((*text_template_parse.CommentNode)(nil)).Elem())
	_register("text/template/parse.ContinueNode", reflect.TypeOf((*text_template_parse.ContinueNode)(nil)).Elem())
	_register("text/template/parse.DotNode", reflect.TypeOf((*text_template_parse.DotNode)(nil)).Elem())
	_register("text/template/parse.FieldNode", reflect.TypeOf((*text_template_parse.FieldNode)(nil)).Elem())
	_register("text/template/parse.IdentifierNode", reflect.TypeOf((*text_template_parse.IdentifierNode)(nil)).Elem())
	_register("text/template/parse.IfNode", reflect.TypeOf((*text_template_parse.IfNode)(nil)).Elem())
	_register("text/template/parse.IsEmptyTree", text_template_parse.IsEmptyTree)
	_register("text/template/parse.ListNode", reflect.TypeOf((*text_template_parse.ListNode)(nil)).Elem())
	_register("text/template/parse.Mode", reflect.TypeOf((*text_template_parse.Mode)(nil)).Elem())
	_register("text/template/parse.New", text_template_parse.New)
	_register("text/template/parse.NewIdentifier", text_template_parse.NewIdentifier)
	_register("text/template/parse.NilNode", reflect.TypeOf((*text_template_parse.NilNode)(nil)).Elem())
	_register("text/template/parse.Node", reflect.TypeOf((*text_template_parse.Node)(nil)).Elem())
	_register("text/template/parse.NodeAction", text_template_parse.NodeAction)
	_register("text/template/parse.NodeBool", text_template_parse.NodeBool)
	_register("text/template/parse.NodeBreak", text_template_parse.NodeBreak)
	_register("text/template/parse.NodeChain", text_template_parse.NodeChain)
	_register("text/template/parse.NodeCommand", text_template_parse.NodeCommand)
	_register("text/template/parse.NodeComment", text_template_parse.NodeComment)
	_register("text/template/parse.NodeContinue", text_template_parse.NodeContinue)
	_register("text/template/parse.NodeDot", text_template_parse.NodeDot)
	_register("text/template/parse.NodeField", text_template_parse.NodeField)
	_register("text/template/parse.NodeIdentifier", text_template_parse.NodeIdentifier)
	_register("text/template/parse.NodeIf", text_template_parse.NodeIf)
	_register("text/template/parse.NodeList", text_template_parse.NodeList)
	_register("text/template/parse.NodeNil", text_template_parse.NodeNil)
	_register("text/template/parse.NodeNumber", text_template_parse.NodeNumber)
	_register("text/template/parse.NodePipe", text_template_parse.NodePipe)
	_register("text/template/parse.NodeRange", text_template_parse.NodeRange)
	_register("text/template/parse.NodeString", text_template_parse.NodeString)
	_register("text/template/parse.NodeTemplate", text_template_parse.NodeTemplate)
	_register("text/template/parse.NodeText", text_template_parse.NodeText)
	_register("text/template/parse.NodeType", reflect.TypeOf((*text_template_parse.NodeType)(nil)).Elem())
	_register("text/template/parse.NodeVariable", text_template_parse.NodeVariable)
	_register("text/template/parse.NodeWith", text_template_parse.NodeWith)
	_register("text/template/parse.NumberNode", reflect.TypeOf((*text_template_parse.NumberNode)(nil)).Elem())
	_register("text/template/parse.Parse", text_template_parse.Parse)
	_register("text/template/parse.ParseComments", text_template_parse.ParseComments)
	_register("text/template/parse.PipeNode", reflect.TypeOf((*text_template_parse.PipeNode)(nil)).Elem())
	_register("text/template/parse.Pos", reflect.TypeOf((*text_template_parse.Pos)(nil)).Elem())
	_register("text/template/parse.RangeNode", reflect.TypeOf((*text_template_parse.RangeNode)(nil)).Elem())
	_register("text/template/parse.SkipFuncCheck", text_template_parse.SkipFuncCheck)
	_register("text/template/parse.StringNode", reflect.TypeOf((*text_template_parse.StringNode)(nil)).Elem())
	_register("text/template/parse.TemplateNode", reflect.TypeOf((*text_template_parse.TemplateNode)(nil)).Elem())
	_register("text/template/parse.TextNode", reflect.TypeOf((*text_template_parse.TextNode)(nil)).Elem())
	_register("text/template/parse.Tree", reflect.TypeOf((*text_template_parse.Tree)(nil)).Elem())
	_register("text/template/parse.VariableNode", reflect.TypeOf((*text_template_parse.VariableNode)(nil)).Elem())
	_register("text/template/parse.WithNode", reflect.TypeOf((*text_template_parse.WithNode)(nil)).Elem())

	// package time
	////////////////////////////////////////
	_register("time.ANSIC", time.ANSIC)
	_register("time.After", time.After)
	_register("time.AfterFunc", time.AfterFunc)
	_register("time.April", time.April)
	_register("time.August", time.August)
	_register("time.Date", time.Date)
	_register("time.December", time.December)
	_register("time.Duration", reflect.TypeOf((*time.Duration)(nil)).Elem())
	_register("time.February", time.February)
	_register("time.FixedZone", time.FixedZone)
	_register("time.Friday", time.Friday)
	_register("time.Hour", time.Hour)
	_register("time.January", time.January)
	_register("time.July", time.July)
	_register("time.June", time.June)
	_register("time.Kitchen", time.Kitchen)
	_register("time.Layout", time.Layout)
	_register("time.LoadLocation", time.LoadLocation)
	_register("time.LoadLocationFromTZData", time.LoadLocationFromTZData)
	_register("time.Local", time.Local)
	_register("time.Location", reflect.TypeOf((*time.Location)(nil)).Elem())
	_register("time.March", time.March)
	_register("time.May", time.May)
	_register("time.Microsecond", time.Microsecond)
	_register("time.Millisecond", time.Millisecond)
	_register("time.Minute", time.Minute)
	_register("time.Monday", time.Monday)
	_register("time.Month", reflect.TypeOf((*time.Month)(nil)).Elem())
	_register("time.Nanosecond", time.Nanosecond)
	_register("time.NewTicker", time.NewTicker)
	_register("time.NewTimer", time.NewTimer)
	_register("time.November", time.November)
	_register("time.Now", time.Now)
	_register("time.October", time.October)
	_register("time.Parse", time.Parse)
	_register("time.ParseDuration", time.ParseDuration)
	_register("time.ParseError", reflect.TypeOf((*time.ParseError)(nil)).Elem())
	_register("time.ParseInLocation", time.ParseInLocation)
	_register("time.RFC1123", time.RFC1123)
	_register("time.RFC1123Z", time.RFC1123Z)
	_register("time.RFC3339", time.RFC3339)
	_register("time.RFC3339Nano", time.RFC3339Nano)
	_register("time.RFC822", time.RFC822)
	_register("time.RFC822Z", time.RFC822Z)
	_register("time.RFC850", time.RFC850)
	_register("time.RubyDate", time.RubyDate)
	_register("time.Saturday", time.Saturday)
	_register("time.Second", time.Second)
	_register("time.September", time.September)
	_register("time.Since", time.Since)
	_register("time.Sleep", time.Sleep)
	_register("time.Stamp", time.Stamp)
	_register("time.StampMicro", time.StampMicro)
	_register("time.StampMilli", time.StampMilli)
	_register("time.StampNano", time.StampNano)
	_register("time.Sunday", time.Sunday)
	_register("time.Thursday", time.Thursday)
	_register("time.Tick", time.Tick)
	_register("time.Ticker", reflect.TypeOf((*time.Ticker)(nil)).Elem())
	_register("time.Time", reflect.TypeOf((*time.Time)(nil)).Elem())
	_register("time.Timer", reflect.TypeOf((*time.Timer)(nil)).Elem())
	_register("time.Tuesday", time.Tuesday)
	_register("time.UTC", time.UTC)
	_register("time.Unix", time.Unix)
	_register("time.UnixDate", time.UnixDate)
	_register("time.UnixMicro", time.UnixMicro)
	_register("time.UnixMilli", time.UnixMilli)
	_register("time.Until", time.Until)
	_register("time.Wednesday", time.Wednesday)
	_register("time.Weekday", reflect.TypeOf((*time.Weekday)(nil)).Elem())

	// package unicode
	////////////////////////////////////////
	_register("unicode.ASCII_Hex_Digit", unicode.ASCII_Hex_Digit)
	_register("unicode.Adlam", unicode.Adlam)
	_register("unicode.Ahom", unicode.Ahom)
	_register("unicode.Anatolian_Hieroglyphs", unicode.Anatolian_Hieroglyphs)
	_register("unicode.Arabic", unicode.Arabic)
	_register("unicode.Armenian", unicode.Armenian)
	_register("unicode.Avestan", unicode.Avestan)
	_register("unicode.AzeriCase", unicode.AzeriCase)
	_register("unicode.Balinese", unicode.Balinese)
	_register("unicode.Bamum", unicode.Bamum)
	_register("unicode.Bassa_Vah", unicode.Bassa_Vah)
	_register("unicode.Batak", unicode.Batak)
	_register("unicode.Bengali", unicode.Bengali)
	_register("unicode.Bhaiksuki", unicode.Bhaiksuki)
	_register("unicode.Bidi_Control", unicode.Bidi_Control)
	_register("unicode.Bopomofo", unicode.Bopomofo)
	_register("unicode.Brahmi", unicode.Brahmi)
	_register("unicode.Braille", unicode.Braille)
	_register("unicode.Buginese", unicode.Buginese)
	_register("unicode.Buhid", unicode.Buhid)
	_register("unicode.C", unicode.C)
	_register("unicode.Canadian_Aboriginal", unicode.Canadian_Aboriginal)
	_register("unicode.Carian", unicode.Carian)
	_register("unicode.CaseRange", reflect.TypeOf((*unicode.CaseRange)(nil)).Elem())
	_register("unicode.CaseRanges", unicode.CaseRanges)
	_register("unicode.Categories", unicode.Categories)
	_register("unicode.Caucasian_Albanian", unicode.Caucasian_Albanian)
	_register("unicode.Cc", unicode.Cc)
	_register("unicode.Cf", unicode.Cf)
	_register("unicode.Chakma", unicode.Chakma)
	_register("unicode.Cham", unicode.Cham)
	_register("unicode.Cherokee", unicode.Cherokee)
	_register("unicode.Chorasmian", unicode.Chorasmian)
	_register("unicode.Co", unicode.Co)
	_register("unicode.Common", unicode.Common)
	_register("unicode.Coptic", unicode.Coptic)
	_register("unicode.Cs", unicode.Cs)
	_register("unicode.Cuneiform", unicode.Cuneiform)
	_register("unicode.Cypriot", unicode.Cypriot)
	_register("unicode.Cyrillic", unicode.Cyrillic)
	_register("unicode.Dash", unicode.Dash)
	_register("unicode.Deprecated", unicode.Deprecated)
	_register("unicode.Deseret", unicode.Deseret)
	_register("unicode.Devanagari", unicode.Devanagari)
	_register("unicode.Diacritic", unicode.Diacritic)
	_register("unicode.Digit", unicode.Digit)
	_register("unicode.Dives_Akuru", unicode.Dives_Akuru)
	_register("unicode.Dogra", unicode.Dogra)
	_register("unicode.Duployan", unicode.Duployan)
	_register("unicode.Egyptian_Hieroglyphs", unicode.Egyptian_Hieroglyphs)
	_register("unicode.Elbasan", unicode.Elbasan)
	_register("unicode.Elymaic", unicode.Elymaic)
	_register("unicode.Ethiopic", unicode.Ethiopic)
	_register("unicode.Extender", unicode.Extender)
	_register("unicode.FoldCategory", unicode.FoldCategory)
	_register("unicode.FoldScript", unicode.FoldScript)
	_register("unicode.Georgian", unicode.Georgian)
	_register("unicode.Glagolitic", unicode.Glagolitic)
	_register("unicode.Gothic", unicode.Gothic)
	_register("unicode.Grantha", unicode.Grantha)
	_register("unicode.GraphicRanges", unicode.GraphicRanges)
	_register("unicode.Greek", unicode.Greek)
	_register("unicode.Gujarati", unicode.Gujarati)
	_register("unicode.Gunjala_Gondi", unicode.Gunjala_Gondi)
	_register("unicode.Gurmukhi", unicode.Gurmukhi)
	_register("unicode.Han", unicode.Han)
	_register("unicode.Hangul", unicode.Hangul)
	_register("unicode.Hanifi_Rohingya", unicode.Hanifi_Rohingya)
	_register("unicode.Hanunoo", unicode.Hanunoo)
	_register("unicode.Hatran", unicode.Hatran)
	_register("unicode.Hebrew", unicode.Hebrew)
	_register("unicode.Hex_Digit", unicode.Hex_Digit)
	_register("unicode.Hiragana", unicode.Hiragana)
	_register("unicode.Hyphen", unicode.Hyphen)
	_register("unicode.IDS_Binary_Operator", unicode.IDS_Binary_Operator)
	_register("unicode.IDS_Trinary_Operator", unicode.IDS_Trinary_Operator)
	_register("unicode.Ideographic", unicode.Ideographic)
	_register("unicode.Imperial_Aramaic", unicode.Imperial_Aramaic)
	_register("unicode.In", unicode.In)
	_register("unicode.Inherited", unicode.Inherited)
	_register("unicode.Inscriptional_Pahlavi", unicode.Inscriptional_Pahlavi)
	_register("unicode.Inscriptional_Parthian", unicode.Inscriptional_Parthian)
	_register("unicode.Is", unicode.Is)
	_register("unicode.IsControl", unicode.IsControl)
	_register("unicode.IsDigit", unicode.IsDigit)
	_register("unicode.IsGraphic", unicode.IsGraphic)
	_register("unicode.IsLetter", unicode.IsLetter)
	_register("unicode.IsLower", unicode.IsLower)
	_register("unicode.IsMark", unicode.IsMark)
	_register("unicode.IsNumber", unicode.IsNumber)
	_register("unicode.IsOneOf", unicode.IsOneOf)
	_register("unicode.IsPrint", unicode.IsPrint)
	_register("unicode.IsPunct", unicode.IsPunct)
	_register("unicode.IsSpace", unicode.IsSpace)
	_register("unicode.IsSymbol", unicode.IsSymbol)
	_register("unicode.IsTitle", unicode.IsTitle)
	_register("unicode.IsUpper", unicode.IsUpper)
	_register("unicode.Javanese", unicode.Javanese)
	_register("unicode.Join_Control", unicode.Join_Control)
	_register("unicode.Kaithi", unicode.Kaithi)
	_register("unicode.Kannada", unicode.Kannada)
	_register("unicode.Katakana", unicode.Katakana)
	_register("unicode.Kayah_Li", unicode.Kayah_Li)
	_register("unicode.Kharoshthi", unicode.Kharoshthi)
	_register("unicode.Khitan_Small_Script", unicode.Khitan_Small_Script)
	_register("unicode.Khmer", unicode.Khmer)
	_register("unicode.Khojki", unicode.Khojki)
	_register("unicode.Khudawadi", unicode.Khudawadi)
	_register("unicode.L", unicode.L)
	_register("unicode.Lao", unicode.Lao)
	_register("unicode.Latin", unicode.Latin)
	_register("unicode.Lepcha", unicode.Lepcha)
	_register("unicode.Letter", unicode.Letter)
	_register("unicode.Limbu", unicode.Limbu)
	_register("unicode.Linear_A", unicode.Linear_A)
	_register("unicode.Linear_B", unicode.Linear_B)
	_register("unicode.Lisu", unicode.Lisu)
	_register("unicode.Ll", unicode.Ll)
	_register("unicode.Lm", unicode.Lm)
	_register("unicode.Lo", unicode.Lo)
	_register("unicode.Logical_Order_Exception", unicode.Logical_Order_Exception)
	_register("unicode.Lower", unicode.Lower)
	_register("unicode.LowerCase", unicode.LowerCase)
	_register("unicode.Lt", unicode.Lt)
	_register("unicode.Lu", unicode.Lu)
	_register("unicode.Lycian", unicode.Lycian)
	_register("unicode.Lydian", unicode.Lydian)
	_register("unicode.M", unicode.M)
	_register("unicode.Mahajani", unicode.Mahajani)
	_register("unicode.Makasar", unicode.Makasar)
	_register("unicode.Malayalam", unicode.Malayalam)
	_register("unicode.Mandaic", unicode.Mandaic)
	_register("unicode.Manichaean", unicode.Manichaean)
	_register("unicode.Marchen", unicode.Marchen)
	_register("unicode.Mark", unicode.Mark)
	_register("unicode.Masaram_Gondi", unicode.Masaram_Gondi)
	_register("unicode.MaxASCII", unicode.MaxASCII)
	_register("unicode.MaxCase", unicode.MaxCase)
	_register("unicode.MaxLatin1", unicode.MaxLatin1)
	_register("unicode.MaxRune", unicode.MaxRune)
	_register("unicode.Mc", unicode.Mc)
	_register("unicode.Me", unicode.Me)
	_register("unicode.Medefaidrin", unicode.Medefaidrin)
	_register("unicode.Meetei_Mayek", unicode.Meetei_Mayek)
	_register("unicode.Mende_Kikakui", unicode.Mende_Kikakui)
	_register("unicode.Meroitic_Cursive", unicode.Meroitic_Cursive)
	_register("unicode.Meroitic_Hieroglyphs", unicode.Meroitic_Hieroglyphs)
	_register("unicode.Miao", unicode.Miao)
	_register("unicode.Mn", unicode.Mn)
	_register("unicode.Modi", unicode.Modi)
	_register("unicode.Mongolian", unicode.Mongolian)
	_register("unicode.Mro", unicode.Mro)
	_register("unicode.Multani", unicode.Multani)
	_register("unicode.Myanmar", unicode.Myanmar)
	_register("unicode.N", unicode.N)
	_register("unicode.Nabataean", unicode.Nabataean)
	_register("unicode.Nandinagari", unicode.Nandinagari)
	_register("unicode.Nd", unicode.Nd)
	_register("unicode.New_Tai_Lue", unicode.New_Tai_Lue)
	_register("unicode.Newa", unicode.Newa)
	_register("unicode.Nko", unicode.Nko)
	_register("unicode.Nl", unicode.Nl)
	_register("unicode.No", unicode.No)
	_register("unicode.Noncharacter_Code_Point", unicode.Noncharacter_Code_Point)
	_register("unicode.Number", unicode.Number)
	_register("unicode.Nushu", unicode.Nushu)
	_register("unicode.Nyiakeng_Puachue_Hmong", unicode.Nyiakeng_Puachue_Hmong)
	_register("unicode.Ogham", unicode.Ogham)
	_register("unicode.Ol_Chiki", unicode.Ol_Chiki)
	_register("unicode.Old_Hungarian", unicode.Old_Hungarian)
	_register("unicode.Old_Italic", unicode.Old_Italic)
	_register("unicode.Old_North_Arabian", unicode.Old_North_Arabian)
	_register("unicode.Old_Permic", unicode.Old_Permic)
	_register("unicode.Old_Persian", unicode.Old_Persian)
	_register("unicode.Old_Sogdian", unicode.Old_Sogdian)
	_register("unicode.Old_South_Arabian", unicode.Old_South_Arabian)
	_register("unicode.Old_Turkic", unicode.Old_Turkic)
	_register("unicode.Oriya", unicode.Oriya)
	_register("unicode.Osage", unicode.Osage)
	_register("unicode.Osmanya", unicode.Osmanya)
	_register("unicode.Other", unicode.Other)
	_register("unicode.Other_Alphabetic", unicode.Other_Alphabetic)
	_register("unicode.Other_Default_Ignorable_Code_Point", unicode.Other_Default_Ignorable_Code_Point)
	_register("unicode.Other_Grapheme_Extend", unicode.Other_Grapheme_Extend)
	_register("unicode.Other_ID_Continue", unicode.Other_ID_Continue)
	_register("unicode.Other_ID_Start", unicode.Other_ID_Start)
	_register("unicode.Other_Lowercase", unicode.Other_Lowercase)
	_register("unicode.Other_Math", unicode.Other_Math)
	_register("unicode.Other_Uppercase", unicode.Other_Uppercase)
	_register("unicode.P", unicode.P)
	_register("unicode.Pahawh_Hmong", unicode.Pahawh_Hmong)
	_register("unicode.Palmyrene", unicode.Palmyrene)
	_register("unicode.Pattern_Syntax", unicode.Pattern_Syntax)
	_register("unicode.Pattern_White_Space", unicode.Pattern_White_Space)
	_register("unicode.Pau_Cin_Hau", unicode.Pau_Cin_Hau)
	_register("unicode.Pc", unicode.Pc)
	_register("unicode.Pd", unicode.Pd)
	_register("unicode.Pe", unicode.Pe)
	_register("unicode.Pf", unicode.Pf)
	_register("unicode.Phags_Pa", unicode.Phags_Pa)
	_register("unicode.Phoenician", unicode.Phoenician)
	_register("unicode.Pi", unicode.Pi)
	_register("unicode.Po", unicode.Po)
	_register("unicode.Prepended_Concatenation_Mark", unicode.Prepended_Concatenation_Mark)
	_register("unicode.PrintRanges", unicode.PrintRanges)
	_register("unicode.Properties", unicode.Properties)
	_register("unicode.Ps", unicode.Ps)
	_register("unicode.Psalter_Pahlavi", unicode.Psalter_Pahlavi)
	_register("unicode.Punct", unicode.Punct)
	_register("unicode.Quotation_Mark", unicode.Quotation_Mark)
	_register("unicode.Radical", unicode.Radical)
	_register("unicode.Range16", reflect.TypeOf((*unicode.Range16)(nil)).Elem())
	_register("unicode.Range32", reflect.TypeOf((*unicode.Range32)(nil)).Elem())
	_register("unicode.RangeTable", reflect.TypeOf((*unicode.RangeTable)(nil)).Elem())
	_register("unicode.Regional_Indicator", unicode.Regional_Indicator)
	_register("unicode.Rejang", unicode.Rejang)
	_register("unicode.ReplacementChar", unicode.ReplacementChar)
	_register("unicode.Runic", unicode.Runic)
	_register("unicode.S", unicode.S)
	_register("unicode.STerm", unicode.STerm)
	_register("unicode.Samaritan", unicode.Samaritan)
	_register("unicode.Saurashtra", unicode.Saurashtra)
	_register("unicode.Sc", unicode.Sc)
	_register("unicode.Scripts", unicode.Scripts)
	_register("unicode.Sentence_Terminal", unicode.Sentence_Terminal)
	_register("unicode.Sharada", unicode.Sharada)
	_register("unicode.Shavian", unicode.Shavian)
	_register("unicode.Siddham", unicode.Siddham)
	_register("unicode.SignWriting", unicode.SignWriting)
	_register("unicode.SimpleFold", unicode.SimpleFold)
	_register("unicode.Sinhala", unicode.Sinhala)
	_register("unicode.Sk", unicode.Sk)
	_register("unicode.Sm", unicode.Sm)
	_register("unicode.So", unicode.So)
	_register("unicode.Soft_Dotted", unicode.Soft_Dotted)
	_register("unicode.Sogdian", unicode.Sogdian)
	_register("unicode.Sora_Sompeng", unicode.Sora_Sompeng)
	_register("unicode.Soyombo", unicode.Soyombo)
	_register("unicode.Space", unicode.Space)
	_register("unicode.SpecialCase", reflect.TypeOf((*unicode.SpecialCase)(nil)).Elem())
	_register("unicode.Sundanese", unicode.Sundanese)
	_register("unicode.Syloti_Nagri", unicode.Syloti_Nagri)
	_register("unicode.Symbol", unicode.Symbol)
	_register("unicode.Syriac", unicode.Syriac)
	_register("unicode.Tagalog", unicode.Tagalog)
	_register("unicode.Tagbanwa", unicode.Tagbanwa)
	_register("unicode.Tai_Le", unicode.Tai_Le)
	_register("unicode.Tai_Tham", unicode.Tai_Tham)
	_register("unicode.Tai_Viet", unicode.Tai_Viet)
	_register("unicode.Takri", unicode.Takri)
	_register("unicode.Tamil", unicode.Tamil)
	_register("unicode.Tangut", unicode.Tangut)
	_register("unicode.Telugu", unicode.Telugu)
	_register("unicode.Terminal_Punctuation", unicode.Terminal_Punctuation)
	_register("unicode.Thaana", unicode.Thaana)
	_register("unicode.Thai", unicode.Thai)
	_register("unicode.Tibetan", unicode.Tibetan)
	_register("unicode.Tifinagh", unicode.Tifinagh)
	_register("unicode.Tirhuta", unicode.Tirhuta)
	_register("unicode.Title", unicode.Title)
	_register("unicode.TitleCase", unicode.TitleCase)
	_register("unicode.To", unicode.To)
	_register("unicode.ToLower", unicode.ToLower)
	_register("unicode.ToTitle", unicode.ToTitle)
	_register("unicode.ToUpper", unicode.ToUpper)
	_register("unicode.TurkishCase", unicode.TurkishCase)
	_register("unicode.Ugaritic", unicode.Ugaritic)
	_register("unicode.Unified_Ideograph", unicode.Unified_Ideograph)
	_register("unicode.Upper", unicode.Upper)
	_register("unicode.UpperCase", unicode.UpperCase)
	_register("unicode.UpperLower", unicode.UpperLower)
	_register("unicode.Vai", unicode.Vai)
	_register("unicode.Variation_Selector", unicode.Variation_Selector)
	_register("unicode.Version", unicode.Version)
	_register("unicode.Wancho", unicode.Wancho)
	_register("unicode.Warang_Citi", unicode.Warang_Citi)
	_register("unicode.White_Space", unicode.White_Space)
	_register("unicode.Yezidi", unicode.Yezidi)
	_register("unicode.Yi", unicode.Yi)
	_register("unicode.Z", unicode.Z)
	_register("unicode.Zanabazar_Square", unicode.Zanabazar_Square)
	_register("unicode.Zl", unicode.Zl)
	_register("unicode.Zp", unicode.Zp)
	_register("unicode.Zs", unicode.Zs)

	// package unicode/utf16
	////////////////////////////////////////
	_register("unicode/utf16.Decode", unicode_utf16.Decode)
	_register("unicode/utf16.DecodeRune", unicode_utf16.DecodeRune)
	_register("unicode/utf16.Encode", unicode_utf16.Encode)
	_register("unicode/utf16.EncodeRune", unicode_utf16.EncodeRune)
	_register("unicode/utf16.IsSurrogate", unicode_utf16.IsSurrogate)

	// package unicode/utf8
	////////////////////////////////////////
	_register("unicode/utf8.AppendRune", unicode_utf8.AppendRune)
	_register("unicode/utf8.DecodeLastRune", unicode_utf8.DecodeLastRune)
	_register("unicode/utf8.DecodeLastRuneInString", unicode_utf8.DecodeLastRuneInString)
	_register("unicode/utf8.DecodeRune", unicode_utf8.DecodeRune)
	_register("unicode/utf8.DecodeRuneInString", unicode_utf8.DecodeRuneInString)
	_register("unicode/utf8.EncodeRune", unicode_utf8.EncodeRune)
	_register("unicode/utf8.FullRune", unicode_utf8.FullRune)
	_register("unicode/utf8.FullRuneInString", unicode_utf8.FullRuneInString)
	_register("unicode/utf8.MaxRune", unicode_utf8.MaxRune)
	_register("unicode/utf8.RuneCount", unicode_utf8.RuneCount)
	_register("unicode/utf8.RuneCountInString", unicode_utf8.RuneCountInString)
	_register("unicode/utf8.RuneError", unicode_utf8.RuneError)
	_register("unicode/utf8.RuneLen", unicode_utf8.RuneLen)
	_register("unicode/utf8.RuneSelf", unicode_utf8.RuneSelf)
	_register("unicode/utf8.RuneStart", unicode_utf8.RuneStart)
	_register("unicode/utf8.UTFMax", unicode_utf8.UTFMax)
	_register("unicode/utf8.Valid", unicode_utf8.Valid)
	_register("unicode/utf8.ValidRune", unicode_utf8.ValidRune)
	_register("unicode/utf8.ValidString", unicode_utf8.ValidString)

	// package unsafe
	////////////////////////////////////////
	_register("unsafe.Pointer", reflect.TypeOf((*unsafe.Pointer)(nil)).Elem())
}
